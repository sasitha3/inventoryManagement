<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ifs.Fnd.Core</name>
    </assembly>
    <members>
        <member name="T:Ifs.Fnd.Core.DetailedMessageInfo">
            <summary>
            Detailed information for errors showed in message dialogs
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.DetailedMessageInfo.ServerErrorMessagesDisplayString">
            <summary>
            Beauitfied string of error messages
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Core.DetailedMessageInfo.ServerErrorMessages">
            <summary>
            Server error messages from the server if the server-invoke resulted in an exception
            </summary>
        </member>
        <member name="T:Ifs.Fnd.IO.FndDirectory">
            <summary>
            Exposes static methods for creating, moving, and enumerating through directories and subdirectories.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.IO.FndDirectory.EnumerateDirectories(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Returns an enumerable collection of directory names in a specified path.
            <remarks>
            You can specify relative or absolute path information in the path parameter. 
            Relative path information is interpreted as relative to the current working directory, 
            which you can determine by using the GetCurrentDirectory method. The returned directory 
            names are prefixed with the value you provided in the path parameter. For example, 
            if you provide a relative path in the path parameter, the returned directory names will contain a relative path.
            
            Optional Paths are enumerated in specified order and the result list is containing a combined result but only unique folder names.
            This means that if Path and optionalPaths both contain a folder named MyFolder the returned list will only contain Path\MyFolder. 
            In this sense the Optional Paths are probing locations.
            </remarks>
            </summary>
            <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
            <param name="searchPattern">The search string to match against the names of directories in path. This parameter can 
            contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions</param>
            <param name="includePaths">Specifies if the returned list should include the paths or just the folder names.</param>
            <param name="optionalPaths">Optional Paths is a list of optional probing locations. The returned list will be a combined result of EnumerateDirectories in each path.</param>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by path.</returns>
        </member>
        <member name="M:Ifs.Fnd.IO.FndDirectory.EnumerateFiles(System.String,System.Boolean,System.String,System.String[])">
            <summary>
            Returns an enumerable collection of file names that meet specified criteria. 
            <remarks>
            searchPattern can be a combination of literal and wildcard characters, but doesn't support regular expressions. 
            The following wildcard specifiers are permitted in searchPattern.
            * (asterisk) - Zero or more characters in that position, ?(question mark) - Zero or one character in that position.
            
            Root Paths are probing paths and are enumerated in specified order and the result list is containing a combined merged result.
            This means that if Path and optionalPaths both contain a file named MyFile the returned list will only contain Path\MyFile. 
            You can specify relative path information with the root path parameter. Relative path information is interpreted as relative 
            to the current working directory, which you can determine by using the GetCurrentDirectory method.
            </remarks>
            </summary>
            <param name="searchPattern">The search string to match against the names of files in path. This parameter can contain a 
            combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
            <param name="includePaths">Specifies if the returned list should include the paths or just the folder names.</param>
            <param name="subPath">Sub path that is used to specify a sub structure to combine each rootPath with.</param>
            <param name="rootPaths">List of paths that combined with sub path will be searched. Root paths can be relative or absolute.</param>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the specified search pattern.</returns>
        </member>
        <member name="M:Ifs.Fnd.IO.FndDirectory.ProbeFile(System.String,System.String[])">
            <summary>
            This method takes a list of pats to probe for a specific file. 
            <remarks>
            Even if the file may be located in multiple specified probing locations only the first found instance is returned.
            </remarks>
            </summary>
            <param name="fileName">File name to search for</param>
            <param name="probingDirs">List of directories to look for the file in</param>
            <returns>The first locatio of the file is returned or string.Empty if the file is not found in any location.</returns>
        </member>
        <member name="M:Ifs.Fnd.IO.FndDirectory.ProbeFile(System.String,System.String,System.String[])">
            <summary>
            This method takes a list of pats to probe for a specific file. 
            <remarks>
            Even if the file may be located in multiple specified probing locations only the first found instance is returned.
            For each probing root directories the sub dir parameter is combined this to eliminate the need to combine each 
            location before calling the method.
            </remarks>
            </summary>
            <param name="fileName">File name to search for</param>
            <param name="subDir">Specify a subdirectory that should be combined for each probing root dir</param>
            <param name="probingRootDirs">List of root directories used in combination with subDir to make up the locations to search for the file in</param>
            <returns>The first locatio of the file is returned or string.Empty if the file is not found in any location.</returns>
        </member>
        <member name="T:Ifs.Fnd.FndLicenseException">
            <summary>
            An exception caused by server throwing a licensing exception
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndException">
            <summary>
            Base class for all FndExceptions
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndException.#ctor">
            <summary>
            Initializes a new instance of the FndException class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ifs.Fnd.FndException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FndException class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Ifs.Fnd.FndException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ifs.Fnd.FndException.Show">
            <summary>
            Display the exception in a proper way with Active form as owner form
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndException.Show(System.Windows.Forms.Form)">
            <summary>
            Display the exception in a proper way
            </summary>
            <param name="ownerForm">Form which owns this error message</param>
        </member>
        <member name="M:Ifs.Fnd.FndException.Show(System.Exception)">
            <summary>
            Display an exception in a proper way
            </summary>
            <param name="exception">The exception to display</param>
        </member>
        <member name="M:Ifs.Fnd.FndException.Show(System.String,System.Exception)">
            <summary>
            Create a FndSystemException 
            </summary>
            <param name="message">Message to the user</param>
            <param name="innerException">The caught exception that caused this call</param>
        </member>
        <member name="M:Ifs.Fnd.FndException.CaptionFromType(System.String)">
            <summary>
            Formats a Caption attribute using the provided type.
            </summary>
            <param name="type">The Caption type</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.FndException.StripFndBaseServerInfo(System.String)">
            <summary>
            Parse ORA specific messages from Foundation Base Server.
            </summary>
            <param name="error">The error message</param>
            <returns>The substring of the error message containing human readable info</returns>
        </member>
        <member name="M:Ifs.Fnd.FndException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="E:Ifs.Fnd.FndException.NotifyException">
            <summary>
            Event used to notify listeners (such as unit test logger) that an exception has occured
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndException.DisplayExceptionDialog">
            <summary>
            This property used for deciding if exception dialogs will displayed or not.
            This property should only be used in specific cases where exception dialogs 
            should not be displayed.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndException.Icon">
            <summary>
            Dialog icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndException.MessageBoxIcon">
            <summary>
            MessageBox icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndException.Caption">
            <summary>
            Dialog caption
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndException.ExtraInfo">
            <summary>
            Provides extra information on FndSystemExceptions, to 
            be displayed on the non-details page in the Exception 
            dialog. Useful to enrich an inner exception message.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndException.RankedException">
            <summary>
            Depending of the type of exceptions found in the innerexception stack
            return the message string of most importance 
            If an application-, security- or validation exception is in the stack,
            that exception is most valid. If not, return the inner most exception
            </summary>
            <returns>Exception</returns>
        </member>
        <member name="P:Ifs.Fnd.FndException.TranslationId">
            <summary>
            Gets or sets the translation is of exceptions throwed
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndException.ServerErrorMessages">
            <summary>
            Gets or sets the collected error messages from server when exceptions are thrown. Fetched from the 
            X-Ifs-Errors HTTP-header.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndException.FndExceptionNotificationEventHandler">
            <summary>
            Eventhandler for the NotifyException event
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Argument containing the thrown exeception</param>
        </member>
        <member name="M:Ifs.Fnd.FndLicenseException.#ctor">
            <summary>
            Initializes a new instance of the FndSecurityException class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndLicenseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndSecurityException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ifs.Fnd.FndLicenseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FndSecurityException class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Ifs.Fnd.FndLicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the serialization constructor.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndLicenseException.Icon">
            <summary>
            Dialog icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndLicenseException.MessageBoxIcon">
            <summary>
            MessageBox icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndLicenseException.Caption">
            <summary>
            Dialog caption
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndTransactionIdMismatchException">
            <summary>
            An expected exception caused by a server when the database transaction has expired and is no longer available.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndApplicationException">
            <summary>
            An expected exception that will be displayed as a MessageBox
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndApplicationException.#ctor">
            <summary>
            Initializes a new instance of the FndApplicationException class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndApplicationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndApplicationException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ifs.Fnd.FndApplicationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FndApplicationException class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Ifs.Fnd.FndApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ifs.Fnd.FndApplicationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:Ifs.Fnd.FndApplicationException.Icon">
            <summary>
            Dialog icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndApplicationException.MessageBoxIcon">
            <summary>
            MessageBox icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndApplicationException.Caption">
            <summary>
            Dialog caption
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndTransactionIdMismatchException.#ctor">
            <summary>
            Initializes a new instance of the FndTransactionIdMismatchException class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndTransactionIdMismatchException.#ctor(System.String)">
            <summary>
            Construct an FndTransactionIdMismatchException
            </summary>
            <param name="message">Timeout error message</param>
        </member>
        <member name="M:Ifs.Fnd.FndTransactionIdMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Construct an FndTransactionIdMismatchException
            </summary>
            <param name="message">Timeout error message</param>
            <param name="innerException">Inner exception caught to raise this exception</param>
        </member>
        <member name="M:Ifs.Fnd.FndTransactionIdMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ifs.Fnd.FndTransactionIdMismatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:Ifs.Fnd.FndTransactionIdMismatchException.Caption">
            <summary>
            Dialog Caption
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndTransactionIdMismatchException.Icon">
            <summary>
            Dialog Icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndTransactionIdMismatchException.MessageBoxIcon">
            <summary>
            Dialog Message Box Icon
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Security.FndAntiXSS">
            <summary>
            Provides methods for encoding to prevent cross site scripting. This class cannot be inherited. 
            Code was copied from Microsoft Anti-Cross Site Scripting Library V3.1 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Security.FndAntiXSS.HtmlEncode(System.String)">
            <summary>
            HTML-encodes a string and returns the encoded string.
            </summary>
            <param name="input">The text string to encode.</param>
            <returns>The HTML-encoded text.</returns>
        </member>
        <member name="T:Ifs.Fnd.Core.FndComponentAttribute">
            <summary>
            Defines IFS component for an assembly. Used for translations, Presentation Object Scan, Customization Layers etc...
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndComponentAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of FndComponentAttribute in the 'Core' layer
            </summary>
            <param name="component">Component name (eg ORDER)</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndComponentAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of FndComponentAttribute in a custom defined layer
            </summary>
            <param name="component">Component name (eg ORDER)</param>
            <param name="layerName">Layer name(eg Core, Ext or Cust)</param>
        </member>
        <member name="P:Ifs.Fnd.Core.FndComponentAttribute.Component">
            <summary>
            Get the component name (eg ORDER)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndComponentAttribute.LayerName">
            <summary>
            Get the layer name (eg Core, Ext or Cust)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndComponentAttribute.IsCore">
            <summary>
            TRUE is the assembly is a Core assembly.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndComponentAttribute.IsCustomized">
            <summary>
            TRUE is the assembly is a Customized assembly (Ext or Cust, not Core).
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndDeploymentUtilities">
            <summary>
            Utility class aimed for handling deployment information    
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDeploymentUtilities.#ctor">
            <summary>
            A default private constructor
            to prevent the compiler from adding its own default public constructor
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndDeploymentUtilities.IsClickOnceDeployed">
            <summary>
            Gets a value indicating whether the current application is a ClickOnce application.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndEnumerationsAttribute">
            <summary>
            Defines IFS component for an assembly. Used for translations and others.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndEnumerationsAttribute.#ctor(System.String[])">
            <summary>
            This parameter is generated into ServerModel.cs files
            to indicate what enumerations the assembly is using.
            </summary>
            <param name="enumerations">List of enumeration names</param>
        </member>
        <member name="P:Ifs.Fnd.Core.FndEnumerationsAttribute.Enumerations">
            <summary>
            Get the Enumeration names
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndEnvironmentUtilities">
            <summary>
            Provides information related to the current environment and platform.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndEnvironmentUtilities.WinSDK">
            <summary>
            Contains all unsafe WinSDK methods.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndMessage">
            <summary>
            The FndMessage class implements support for creating and using IFS-messages.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.Construct">
            <summary>
            The Construct function resets the internal state of a FndMessage object.
            COMMENTS:
            Applications do not need to call the Construct function
            the first time a FndMessage variable is used. However, to
            be sure that all internal states are reset when "reusing"
            a FndMessage object, the Construct method should be called.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.Clone">
            <summary>
            The Clone function copies the FndMessage internal state
            to a new instance of another FndMessage.
            EXAMPLE:
            	// Create local copy of message so that parameter is not destroyed.
            	FndMessage copyMessage = Message.Clone( );
            	copyMessage.Name = "New name";
            </summary>
            <returns>The new copy of the FndMessage</returns>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.AddAttribute(System.String,System.String)">
            <summary>
            The AddAttribute function is called to add an attribute to a message.
            COMMENTS:
            Note that given attribute name will be converted to uppercase. In
            cases where the attribute name needs to be stored in it's original
            case the AddAttributeRaw function should be used.
            
            Using the AddAttribute function it is possible to add multiple
            attributes with the same name. When later using FindAttribute or
            GetAttribute functions, the first attribute with the specified
            name will be returned.
            
            To add attributes in a way so that existing attributes with the
            same name are overwritten, applications should use the SetAttribute
            function.
            
            EXAMPLE:
                // Add selected company and customers to message
                Message.AddAttribute( "COMPANY", company );
                foreach (string customer in customers)
                   Message.AddAttribute("CUSTOMER", customer);
            </summary>
            <param name="name">
            Attribute name
            Name of the attribute to add. Supplied string will be converted to uppercase.
            </param>
            <param name="value">
            Attribute value
            Value for attribute.
            </param>
            <returns>The return value is the attribute number of the added attribute</returns>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.AddAttribute(System.String,System.Decimal)">
            <summary>
            Overloaded function of AddAttribute handling the type decimal.		
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.AddAttribute(System.String,System.DateTime)">
            <summary>
            Overloaded function of AddAttribute handling the type DateTime.		
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.AddAttribute(System.String,System.Boolean)">
            <summary>
            Overloaded function of AddAttribute handling the type bool.		
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.AddAttributeRaw(System.String,System.String)">
            <summary>
            The AddAttributeRaw function does the same thing as the AddAttribute
            function except that the attribute name will be stored as it is supplied
            regarding case. E.g. this function will not transform to the attribute name
            to uppercase.
            
            Please look at the documentation for function AddAttribute for more
            detailed information.
            </summary>
            <param name="name">
            Attribute name
            Name of the attribute to add.
            </param>
            <param name="value">
            Attribute value
            Value for attribute.
            </param>
            <returns>The return value is the attribute number of the added attribute</returns>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.AppendAttribute(System.Int32,System.String)">
            <summary>
            The AppendAttribute function appends a value to the existing value
            for an attribute.
            </summary>
            <param name="index">
            Attribute number
            Number of the attribute that who's value should be appended.
            </param>
            <param name="value">
            Attribute value
            Value that shall be appended to the existing attribute value.
            </param>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.CutAttribute(System.String,System.String)">
            <summary>
            The CutAttribute works in the same way as FindAttribute except that the
            attribute returned is also removed from the message.
            COMMENTS:
            CutAttribute does not requires the attribute to exist in the message.
            If the attribute does not exist, the specified default value is returned.
            
            EXAMPLE:
                sSysInfo = "Server Language: " + Message.CutAttribute( "LANGUAGE", "en" )
            </summary>
            <param name="name">
            Attribute name
            Name of the attribute to get value for. This name should always be in uppercase.
            </param>
            <param name="defaultValue">
            Default value
            Value to return in the case when the attribute does not exist in the message.
            </param>
            <returns>
            The return value is the value of the attribute, or sDefault if the attribute did
            not exist in the message.
            </returns>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.FindAttribute(System.String,System.String)">
            <summary>
            The FindAttribute gets the value of an attribute in a message.
            COMMENTS:
            FindAttribute does not requires the attribute to exist in the message.
            If the attribute does not exist, the specified default value is returned.
            
            To retrive attribute values requiring the attribute to
            exist in the message, applications should use the GetAttribute function.
            EXAMPLE:
                sSysInfo = "Server Language: " + Message.FindAttribute( "LANGUAGE", "en" )
            </summary>
            <param name="name">
            Attribute name
            Name of the attribute to get value for. This name should always be in uppercase.
            </param>
            <param name="defaultValue">
            Default value
            Value to return in the case when the attribute does not exist in the message.
            </param>
            <returns>
            The return value is the value of the attribute, or sDefault if the attribute did
            not exist in the message.
            </returns>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.GetAttribute(System.String)">
            <summary>
            The GetAttribute gets the value of an existing attribute in a message.
            COMMENTS:
            GetAttribute requires the attribute to exist, or an error message
            will be displayed.
            
            To retrive attribute values without requiring the attribute to
            exist in the message, applications should use the FindAttribute function.
            </summary>
            <param name="name">
            Attribute name
            Name of the attribute to get value for. This name should always be in uppercase.
            </param>
            <returns>
            The return value is the value of the attribute, or strNULL if the attribute did
            not exist in the message.
            </returns>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.Unpack(System.String)">
             <summary>
             The Unpack function initializes a FndMessage object from a string containing a packed IFS message.
             COMMENTS:
             Supplied string can be any of the types of packed messages
             Applications do NOT need to call the Construct function before calling Unpack.
             
             EXAMPLE:
                 // Process an incoming message
                 FndMessage Msg = FndMessage.FromString(sMessage);
                 // Execute message
                 switch (Msg.Name)
                 {
                    case "TEXTMESSAGE":
                        return ExecuteTextMessage( Msg );
            
                    case "TRACE":
                        return ExecuteTrace(Msg);
                 }
             </summary>
             <param name="message">
             Packed message
             Packed FndMessage from which to initialize the FndMessage object.
             </param>
             <returns>The return values is TRUE if the message was sucessfully unpacked, FALSE otherwise.</returns>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.AddLine(System.String)">
            <summary>
            Add one message line to the message
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.UnpackMessage(System.String)">
            <summary>
            Support function that unpack a standard type message, this function is only used by the Unpack function.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.GetType(System.String)">
            <summary>
            Check if supplied string is a packed message and return the type of message.
            This function is only used by the Unpack function to determine which type of unpack syntax that should be used.
            </summary>
            <param name="message"></param>
            <returns>MessageType</returns>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.IsMessage(System.String)">
            <summary>
            The IsFndMessage function will check if supplied string is in fact a packed message.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.FromString(System.String)">
            <summary>
            Returns a new FndMessage instance, unpacked from the provided string message.
            </summary>
            <param name="message">Packed message, in string format</param>
            <returns>Unpacked FndMessage if successfull. Null otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.FromString(System.String,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Unpacks the FndMessage from the provided string and returns its contents by
            enumerating all its attributes into a dictionary. The attribute names must
            be unique or the enumeration will result in an ArgumentException.
            </summary>
            <param name="message">Packed message, in string format</param>
            <param name="dictionary">IDictionary enumerating the attributes and their coresponding value</param>
            <returns>True if the message was successfully unpacked</returns>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.FromString(System.String,System.String@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Unpacks the FndMessage from the provided string and returns its name and contents by
            enumerating all its attributes into a dictionary. The attribute names must
            be unique or the enumeration will result in an ArgumentException.
            </summary>
            <param name="message">Packed message, in string format</param>
            <param name="name">The message name</param>
            <param name="dictionary">IDictionary enumerating the attributes and their coresponding value</param>
            <returns>True if the message was successfully unpacked</returns>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.FromString(System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Unpacks the FndMessage from the provided string and returns its contents by
            enumerating all its attributes into a list. The attribute names don't have to be unique,
            hence being useful when an attribute name is used more than once.
            </summary>
            <param name="message">Packed message, in string format</param>
            <param name="list">IList with KeyValuePairs enumerating the attributes and their coresponding value</param>
            <returns>True if the message was successfully unpacked</returns>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.FromString(System.String,System.String@,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Unpacks the FndMessage from the provided string and returns its name and contents by
            enumerating all its attributes into a list. The attribute names don't have to be unique,
            hence being useful when an attribute name is used more than once.
            </summary>
            <param name="message">Packed message, in string format</param>
            <param name="name">The message name</param>
            <param name="list">IList with KeyValuePairs enumerating the attributes and their coresponding value</param>
            <returns>True if the message was successfully unpacked</returns>
        </member>
        <member name="M:Ifs.Fnd.FndMessage.ToString">
            <summary>
            Returns a string representation of the FndMessage. Note that this is not the method to use for "Packing" (serializing) the message.
            For a serialized FndMessage, use the "AsString" (or "AsComment") property.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.FndMessage.Name">
             <summary>
             The Name property gets/sets the message name.
             
             COMMENT: When set, the name will be formatted in uppercase.
             Use the NameRaw attribute to keep the format unchanged.
            
             EXAMPLE:
             switch (msg.Name)
             {
                case "OFFLINE":
                    return RunOffline(orderNo);
                case "ONLINE":
                    return RunOnline(orderNo);
             }
             </summary>
        </member>
        <member name="P:Ifs.Fnd.FndMessage.NameRaw">
            <summary>
            Same as Name but will not format the name in uppercase, gettings/setting the name "as it is".
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndMessage.EnumAsList">
            <summary>
            Returns a IList of KeyValuePairs enumerating every attribute in the message.
            The attribute names don't have to be unique, hence being usefull when an attribute name
            is used more than once.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndMessage.EnumAsDictionary">
            <summary>
            Returns a IDictionary enumerating every attribute name with its coresponding value.
            The attribute names must be unique or the enumeration will result in an ArgumentException.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndMessage.IsEmpty">
            <summary>
            The IsEmpty property will return TRUE if the specified message is empty.
            </summary>
            <returns>The return value is TRUE if the message is empty, FALSE otherwise.</returns>
        </member>
        <member name="P:Ifs.Fnd.FndMessage.AsString">
            <summary>
            The AsString property packs the entire message (its name, all attributes and values) to a string.
            COMMENTS:
            The packed string is very useful when sending FndMessages to PL/SQL functions.
            
            EXAMPLE:
            Message.Construct();
            Message.Name = "TEXTMESSAGE";
            Message.AddAttribute( "FROM", sUser );
            Message.AddAttribute( "TEXT", sText );
            sMessage = Message.AsString;
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndMessage.AsComment">
            <summary>
            The AsComment property packs the entire message (its name, all attributes and values) to a string.
            COMMENTS:
            The difference between AsString and AsComment is that this property will flatten the string.
            E.g. this string will not contain any line breaks.
            To handle line breaks in attribute values all occurences are changed to _\r_ which den must
            be regarded as a reserved character combination.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndMessageExtensionMethods">
            <summary>
            Class hosting extension methods for FndMessage
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndMessageExtensionMethods.IsFndMessage(System.String)">
            <summary>
            <see cref="M:Ifs.Fnd.FndMessage.IsMessage(System.String)"/>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndMessageExtensionMethods.FndMessageUnpack(System.String)">
            <summary>
            <see cref="M:Ifs.Fnd.FndMessage.FromString(System.String)"/>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndMessageExtensionMethods.FndMessageUnpack(System.String,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            <see cref="M:Ifs.Fnd.FndMessage.FromString(System.String,System.Collections.Generic.IDictionary{System.String,System.String}@)"/>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndMessageExtensionMethods.FndMessageUnpack(System.String,System.String@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            <see cref="M:Ifs.Fnd.FndMessage.FromString(System.String,System.String@,System.Collections.Generic.IDictionary{System.String,System.String}@)"/>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndMessageExtensionMethods.FndMessageUnpack(System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            <see cref="M:Ifs.Fnd.FndMessage.FromString(System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)"/>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndMessageExtensionMethods.FndMessageUnpack(System.String,System.String@,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            <see cref="M:Ifs.Fnd.FndMessage.FromString(System.String,System.String@,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)"/>
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndServerClientCapabilities">
            <summary>
            Contains common capabilities of both server and client.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndServerClientCapabilities.#ctor">
            <summary>
            Private default constructor to prevent the compiler from creating a public one
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndServerClientCapabilities.SetCommonCapabilities(System.String)">
            <summary>
            Sets the common capabilities as received from the server
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndServerClientCapabilities.GetCapabilityHash">
            <summary>
            Returns the capability hash to be added to the HTTP Header
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndServerClientCapabilities.GetCapabilityNegotiationHash">
            <summary>
            Returns the capability hash to be added to the HTTP Header
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndServerClientCapabilities.IsCapable(Ifs.Fnd.Core.FndServerClientCapabilities.Capabilities)">
            <summary>
            Returns whether a capability can be used or not.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndServerClientCapabilities.SupportedServer">
            <summary>
            Returns if the Server supports capability handshake.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndServerClientCapabilities.Negotiated">
            <summary>
            Returns if the Server client handshake is made.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndServerClientCapabilities.Capabilities">
            <summary>
            All original Client Capabilities
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.FndServerClientCapabilities.Capabilities.LengthPrefixedText">
            <summary>
            Length Prefixed String Flag.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndTranslationUtilities">
            <summary>
            Utility class for language information.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndTranslationUtilities.GetInstalledLanguages(System.String)">
            <summary>
            Returns language codes for all the installed languages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndTranslationUtilities.GetDescriptionForLanguageCode(System.String)">
            <summary>
            Returns the language description for the given language code. If no match is found, "UndefinedLanguage" string is return.
            </summary>
            <param name="languageCode"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndTranslationUtilities.IsLanguageInstalled(System.String)">
            <summary>
            Determines whether is language installed.
            </summary>
            <param name="languageCode">The language code.</param>
            <returns>The description of the language if language is installed. Else "UndefinedLanguage"</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndTranslationUtilities.GetPropertiesResourcesForAssembly(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Retrieves an instance of a resource manager for the default resources in the give assembly name.
            </summary>
            <param name="assemblyName">Name of the assembly. For example, the assembly name for 
            "Ifs.Application.MyComponent.dll" is "Ifs.Application.MyComponent"</param>
            <param name="optionalAssemblyResolvePath">Optional path for an alternative source to look for files". </param>        
            <param name="culture">The UI culture to use for the ResourceManager</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndTranslationUtilities.GetPropertiesResourcesForAssembly(System.String,System.String)">
            <summary>
            Retrieves an instance of a resource manager for the default resources in the give assembly name.
            </summary>
            <param name="assemblyName">Name of the assembly. For example, the assembly name for 
            "Ifs.Application.MyComponent.dll" is "Ifs.Application.MyComponent"</param>
            <param name="optionalAssemblyResolvePath">Optional path for an alternative source to look for files". </param>        
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndTranslationUtilities.GetPropertiesResourcesForAssembly(System.Reflection.Assembly,System.Globalization.CultureInfo)">
            <summary>
            Retrieves an instance of a resource manager for the default resources in the give assembly.
            </summary>
            <param name="assembly"></param>
            <param name="culture">The UI culture to use for the ResourceManager</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndTranslationUtilities.GetPropertiesResourcesForAssembly(System.Reflection.Assembly)">
            <summary>
            Retrieves an instance of a resource manager for the default resources in the give assembly.
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndTranslationUtilities.GetPropertiesResourcesFromSatelliteAssembly(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Retrieves an instance of a resource manager for the given satellite resource.
            Note: This method loads the resources directly from the satellite assembly resource and 
            does not go via .Net lookup using the base assembly. This prevents assembly_load event to 
            be fired for the base assembly which otherwise may result in initialization logic, such as 
            InitThreadStaticFields in PPJ framework, not being executed.
            </summary>
            <param name="resourceName">The root name of the resources. For example, the root name for the 
            resource file named "MyResource.en-US.resources" is "MyResource". </param>        
            <param name="optionalAssemblyResolvePath">Optional path for an alternative source to look for files". </param>        
            <param name="culture">The UI culture to use for the ResourceManager</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndTranslationUtilities.GetPropertiesResourcesFromSatelliteAssembly(System.String,System.String)">
            <summary>
            Retrieves an instance of a resource manager for the given satellite resource.
            Note: This method loads the resources directly from the satellite assembly resource and 
            does not go via .Net lookup using the base assembly. This prevents assembly_load event to 
            be fired for the base assembly which otherwise may result in initialization logic, such as 
            InitThreadStaticFields in PPJ framework, not being executed.
            </summary>
            <param name="resourceName">The root name of the resources. For example, the root name for the 
            resource file named "MyResource.en-US.resources" is "MyResource". </param>        
            <param name="optionalAssemblyResolvePath">Optional path for an alternative source to look for files". </param>        
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Core.LanguageCode">
            <summary>
            Used for language information 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.LanguageCode.#ctor(System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="code"></param>
            <param name="description"></param>
        </member>
        <member name="P:Ifs.Fnd.Core.LanguageCode.DefaultLanguageCode">
            <summary>
            Default language code.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.LanguageCode.FictiveLanguageCode">
            <summary>
            Fictive language code.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.LanguageCode.Code">
            <summary>
            Language code ex: "en-US"
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.LanguageCode.Description">
            <summary>
            Language code description. Ex: "English" for "en-US" language code
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndMiniDumpDialog">
            <summary>
            Dialog used for creating a dump of the current process.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndMiniDumpDialog.#ctor(System.Windows.Forms.Form)">
            <summary>
            Constructor
            </summary>
            <param name="parentForm">Form invoking the dialog</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndMiniDumpDialog.ShowMemoryDumpDialog(System.Windows.Forms.Form)">
            <summary>
            Shows the memory dump dialog. User is presented with a dialog to confirm / select the path for the dump file.
            </summary>
            <param name="parentForm"></param>
        </member>
        <member name="F:Ifs.Fnd.Core.FndMiniDumpDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndMiniDumpDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndMiniDumpDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndMiniDumpDialog.DumpFilePath">
            <summary>
            Filepath to the created dump file. 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.MiniDumper">
            <summary>
            MiniDumper is used for writing a dump of the current process to a file on disk.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.MiniDumper.Write(System.String)">
            <summary>
            Writes a full mini dump to file
            </summary>
            <param name="fileName">Location and name of dump file</param>
            <returns>Dump result</returns>
        </member>
        <member name="T:Ifs.Fnd.Core.FndRTLGraphics">
            <summary>
            FndRTLGraphics is a wrapper for the graphics object. The draw methods found in this class
            renders the graphics from right to left. RightToLeft transformation is only done if the 
            RightToLeft property is set to RightToLeft.Yes for the control that's being rendered. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.op_Implicit(Ifs.Fnd.Core.FndRTLGraphics)~System.Drawing.Graphics">
            <summary>
            Implicit operator to get graphics object
            </summary>
            <param name="graphics"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.ToGraphics">
            <summary>
            Returns Graphics object wrapped by this FndRTLGraphics object
            </summary>
            <returns>Graphics object wrapped by this FndRTLGraphics object</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.#ctor(System.Drawing.Graphics,System.Windows.Forms.Control)">
            <summary>
            Constructor
            </summary>
            <param name="_g">Graphics object to wrap</param>
            <param name="_c">Control that's being rendered</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.ResetTransform">
            <summary>
            Resets the world transformation matrix of this System.Drawing.Graphics to
            the identity matrix.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.Clear(System.Drawing.Color)">
            <summary>
            Clears the entire drawing surface and fills it with the specified background color.
            </summary>
            <param name="color">System.Drawing.Color structure that represents the background color of the
            drawing surface.
            </param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.TranslateTransform(System.Single,System.Single)">
            <summary>
            Changes the origin of the coordinate system by applying the specified translation
            to the transformation matrix of this System.Drawing.Graphics in the specified
            order.
            </summary>
            <param name="dx">The x-coordinate of the translation.</param>
            <param name="dy">The y-coordinate of the translation.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Changes the origin of the coordinate system by applying the specified translation
            to the transformation matrix of this System.Drawing.Graphics in the specified
            order.
            </summary>
            <param name="dx">The x-coordinate of the translation.</param>
            <param name="dy">The y-coordinate of the translation.</param>
            <param name="order">Member of the System.Drawing.Drawing2D.MatrixOrder enumeration that specifies
            whether the translation is prepended or appended to the transformation matrix.
            </param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])">
            <summary>
            Draws a polygon defined by an array of System.Drawing.Point structures.
            </summary>
            <param name="pen">System.Drawing.Pen that determines the color, width, and style of the polygon.</param>
            <param name="points">Array of System.Drawing.Point structures that represent the vertices of the polygon.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])">
            <summary>
            Fills the interior of a polygon defined by an array of points specified by
            System.Drawing.Point structures.
            </summary>
            <param name="brush">System.Drawing.Brush that determines the characteristics of the fill.</param>
            <param name="points">Array of System.Drawing.Point structures that represent the vertices of the
            polygon to fill.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawImage(System.Drawing.Image,System.Single,System.Single)">
            <summary>
            Draws the specified portion of the specified System.Drawing.Image at the specified location.
            </summary>
            <param name="image">System.Drawing.Image to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the portion of the source image to draw.</param>
            <param name="y">The y-coordinate of the upper-left corner of the portion of the source image to draw.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            Draws the specified portion of the specified System.Drawing.Image at the
            specified location and with the specified size.
            </summary>
            <param name="image">System.Drawing.Image to draw.</param>
            <param name="rect">System.Drawing.Rectangle structure that specifies the location and size of the drawn image.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the specified portion of the specified System.Drawing.Image at the
            specified location and with the specified size.
            </summary>
            <param name="image">System.Drawing.Image to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the portion of the source image to draw.</param>
            <param name="y">The y-coordinate of the upper-left corner of the portion of the source image to draw.</param>
            <param name="width">Width of the portion of the source image to draw.</param>
            <param name="height">Height of the portion of the source image to draw.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Draws the specified portion of the specified System.Drawing.Image at the
            specified location and with the specified size.
            </summary>
            <param name="image">System.Drawing.Image to draw.</param>
            <param name="destRect">System.Drawing.Rectangle structure that specifies the location and size of
            the drawn image. The image is scaled to fit the rectangle.</param>
            <param name="srcX">The x-coordinate of the upper-left corner of the portion of the source image to draw.</param>
            <param name="srcY">The y-coordinate of the upper-left corner of the portion of the source image to draw.</param>
            <param name="srcWidth">Width of the portion of the source image to draw.</param>
            <param name="srcHeight">Height of the portion of the source image to draw.</param>
            <param name="srcUnit">Member of the System.Drawing.GraphicsUnit enumeration that specifies the
            units of measure used to determine the source rectangle.
            </param>
            <param name="imageAttrs">System.Drawing.Imaging.ImageAttributes that specifies recoloring and gamma
            information for the image object.
            </param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Draws the specified portion of the specified System.Drawing.Image at the
            specified location and with the specified size.
            </summary>
            <param name="image">System.Drawing.Image to draw.</param>
            <param name="destRect">System.Drawing.Rectangle structure that specifies the location and size of
            the drawn image. The image is scaled to fit the rectangle. </param>
            <param name="srcX">The x-coordinate of the upper-left corner of the portion of the source image
            to draw.</param>
            <param name="srcY">The y-coordinate of the upper-left corner of the portion of the source image
            to draw.</param>
            <param name="srcWidth">Width of the portion of the source image to draw.</param>
            <param name="srcHeight">Height of the portion of the source image to draw.</param>
            <param name="srcUnit">Member of the System.Drawing.GraphicsUnit enumeration that specifies the
            units of measure used to determine the source rectangle.</param>
            <param name="imageAttr">System.Drawing.Imaging.ImageAttributes that specifies recoloring and gamma
            information for the image object.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Draws a line connecting two System.Drawing.Point structures.
            </summary>
            <param name="pen">System.Drawing.Pen that determines the color, width, and style of the line.</param>
            <param name="pt1">System.Drawing.Point structure that represents the first point to connect.</param>
            <param name="pt2">System.Drawing.Point structure that represents the second point to connect.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])">
            <summary>
            Draws a series of line segments that connect an array of System.Drawing.Point
            structures.
            </summary>
            <param name="pen">System.Drawing.Pen that determines the color, width, and style of the line segments.</param>
            <param name="points">Array of System.Drawing.Point structures that represent the points to connect.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
             Draws an arc representing a portion of an ellipse specified by a pair of
             coordinates, a width, and a height.
            </summary>
            <param name="pen">System.Drawing.Pen that determines the color, width, and style of the arc.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="width">Width of the rectangle that defines the ellipse.</param>
            <param name="height">Height of the rectangle that defines the ellipse.</param>
            <param name="startAngle">Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an arc representing a portion of an ellipse specified by a pair of
            coordinates, a width, and a height.
            </summary>
            <param name="pen">System.Drawing.Pen that determines the color, width, and style of the arc.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle that defines the ellipse.</param>
            <param name="width">Width of the rectangle that defines the ellipse.</param>
            <param name="height">Height of the rectangle that defines the ellipse.</param>
            <param name="startAngle"> Angle in degrees measured clockwise from the x-axis to the starting point of the arc.</param>
            <param name="sweepAngle">Angle in degrees measured clockwise from the startAngle parameter to ending point of the arc.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)">
            <summary>
            Draws a rectangle specified by a System.Drawing.Rectangle structure.
            </summary>
            <param name="pen">A System.Drawing.Pen that determines the color, width, and style of the rectangle.</param>
            <param name="rect">A System.Drawing.Rectangle structure that represents the rectangle to draw.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)">
            <summary>
            Draws an ellipse specified by a bounding System.Drawing.Rectangle structure.
            </summary>
            <param name="pen">System.Drawing.Pen that determines the color, width, and style of the ellipse.</param>
            <param name="rect">System.Drawing.Rectangle structure that defines the boundaries of the ellipse.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fills the interior of a rectangle specified by a System.Drawing.Rectangle
            structure.
            </summary>
            <param name="brush">System.Drawing.Brush that determines the characteristics of the fill.</param>
            <param name="rect">System.Drawing.RectangleF structure that represents the rectangle to fill.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)">
            <summary>
            Fills the interior of a rectangle specified by a System.Drawing.Rectangle
            structure.
            </summary>
            <param name="brush">System.Drawing.Brush that determines the characteristics of the fill.</param>
            <param name="rect">System.Drawing.Rectangle structure that represents the rectangle to fill.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the interior of a rectangle specified by a pair of coordinates, a width,
            and a height.
            </summary>
            <param name="brush">System.Drawing.Brush that determines the characteristics of the fill.</param>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle to fill.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle to fill.</param>
            <param name="width">Width of the rectangle to fill.</param>
            <param name="height">Height of the rectangle to fill.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)">
            <summary>
            Fills the interior of a System.Drawing.Region.
            </summary>
            <param name="brush">System.Drawing.Brush that determines the characteristics of the fill.</param>
            <param name="region">System.Drawing.Region that represents the area to fill.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)">
            <summary>
            Fills the interior of an ellipse defined by a bounding rectangle specified
            by a System.Drawing.Rectangle structure.
            </summary>
            <param name="brush">System.Drawing.Brush that determines the characteristics of the fill.</param>
            <param name="rect">System.Drawing.Rectangle structure that represents the bounding rectangle
            that defines the ellipse.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)">
            <summary>
            Draws the image represented by the specified System.Drawing.Icon at the specified
            coordinates.
            </summary>
            <param name="icon">System.Drawing.Icon to draw.</param>
            <param name="x">The x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="y">The y-coordinate of the upper-left corner of the drawn image.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line connecting the two points specified by the coordinate pairs.
            </summary>
            <param name="pen"></param>
            <param name="x1">The x-coordinate of the first point.</param>
            <param name="y1">The y-coordinate of the second point.</param>
            <param name="x2">The x-coordinate of the first point.</param>
            <param name="y2">The y-coordinate of the second point.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a line connecting the two points specified by the coordinate pairs.
            </summary>
            <param name="pen">System.Drawing.Pen that determines the color, width, and style of the line.</param>
            <param name="x1">The x-coordinate of the first point.</param>
            <param name="y1">The y-coordinate of the first point.</param>
            <param name="x2">The x-coordinate of the second point.</param>
            <param name="y2">The y-coordinate of the second point.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)">
            <summary>
            Draws the specified text string in the specified rectangle with the specified
            System.Drawing.Brush and System.Drawing.Font objects.
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">System.Drawing.Font that defines the text format of the string.</param>
            <param name="brush">System.Drawing.Brush that determines the color and texture of the drawn text.</param>
            <param name="point">System.Drawing.PointF structure that specifies the upper-left corner of the drawn text. </param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Draws the specified text string in the specified rectangle with the specified
            System.Drawing.Brush and System.Drawing.Font objects.
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">System.Drawing.Font that defines the text format of the string.</param>
            <param name="brush">System.Drawing.Brush that determines the color and texture of the drawn text.</param>
            <param name="layoutRectangle">System.Drawing.RectangleF structure that specifies the location of the drawn text.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Draws the specified text string in the specified rectangle with the specified
             System.Drawing.Brush and System.Drawing.Font objects using the formatting
             attributes of the specified System.Drawing.StringFormat.
            </summary>
            <param name="s">String to draw.</param>
            <param name="font">System.Drawing.Font that defines the text format of the string.</param>
            <param name="brush">System.Drawing.Brush that determines the color and texture of the drawn text.</param>
            <param name="layoutRectangle">System.Drawing.RectangleF structure that specifies the location of the drawn text.</param>
            <param name="format">System.Drawing.StringFormat that specifies formatting attributes, such as
            line spacing and alignment, that are applied to the drawn text.
            </param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Gets an array of System.Drawing.Region objects, each of which bounds a range
             of character positions within the specified string.
            </summary>
            <param name="text"> String to measure.</param>
            <param name="font">System.Drawing.Font that defines the text format of the string.</param>
            <param name="layoutRect">System.Drawing.RectangleF structure that specifies the layout rectangle for the string.</param>
            <param name="stringFormat">System.Drawing.StringFormat that represents formatting information, such as line spacing, for the string.</param>
            <returns>This method returns an array of System.Drawing.Region objects, each of which bounds a range of character positions within the specified string.</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)">
             <summary>
             Measures the specified string when drawn with the specified System.Drawing.Font
              and formatted with the specified System.Drawing.StringFormat.
             </summary>
             <param name="text">String to measure.</param>
             <param name="font">System.Drawing.Font that defines the text format of the string.</param>
             <param name="width">Maximum width of the string.</param>
             <param name="format">System.Drawing.StringFormat that represents formatting information, such as line spacing, for the string.</param>
             <returns>This method returns a System.Drawing.SizeF structure that represents the size, in the units specified by the System.Drawing.Graphics.PageUnit property,
              of the string specified in the text parameter as drawn with the font parameter
              and the stringFormat parameter.
            </returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRTLGraphics.MeasureString(System.String,System.Drawing.Font)">
             <summary>
             Measures the specified string when drawn with the specified System.Drawing.Font.
             </summary>
             <param name="text">String to measure.</param>
             <param name="font">System.Drawing.Font that defines the text format of the string.</param>
             <returns>This method returns a System.Drawing.SizeF structure that represents the
             size, in the units specified by the System.Drawing.Graphics.PageUnit property,
             of the string specified by the text parameter as drawn with the font parameter.
            </returns>
        </member>
        <member name="P:Ifs.Fnd.Core.FndRTLGraphics.Graphics">
            <summary>
            Graphics object for the control that is being rendered
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndRTLGraphics.Control">
            <summary>
            Control that is being rendered
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndRTLGraphics.SmoothingMode">
            <summary>
            Gets or sets the rendering quality for this System.Drawing.Graphics.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.DPIImageScaleMode">
            <summary>
            Set of options for how images should scale.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.DPIImageScaleMode.None">
            <summary>
            No scaling.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.DPIImageScaleMode.ScaleLocation">
            <summary>
            Scale only the Image location.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.DPIImageScaleMode.ScaleSize">
            <summary>
            Scale only the Image size.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.DPIImageScaleMode.ScaleSizeAndLocation">
            <summary>
            Scale both Image size and location.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.DPIValue">
            <summary>
            DPIValue class contains commonly scaled values.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.DPIValue.S1">
            <summary>
            Value 1 scaled with DPI
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.DPIValue.S2">
            <summary>
            Value 2 scaled with DPI
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.DPIValue.S3">
            <summary>
            Value 3 scaled with DPI
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.DPIValue.S4">
            <summary>
            Value 4 scaled with DPI
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.DPIValue.S5">
            <summary>
            Value 5 scaled with DPI
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.DPIValue.S6">
            <summary>
            Value 6 scaled with DPI
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.DPIValue.S7">
            <summary>
            Value 7 scaled with DPI
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.DPIValue.S8">
            <summary>
            Value 8 scaled with DPI
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.DPIValue.S9">
            <summary>
            Value 9 scaled with DPI
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.DPIValue.S10">
            <summary>
            Value 10 scaled with DPI
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndScaleDimension">
            <summary>
            ScaleDimension is used to indicate which dimension scaling is applied on.
            Commonly used when scaling control on forms using AutoScaleMode.Font.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.FndScaleDimension.XAxis">
            <summary>
            Indicates that the scaling is applied on valus on the x-axis.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.FndScaleDimension.YAxis">
            <summary>
            Indicates that the scaling is applied on valus on the y-axis.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndDPIUtilities">
            <summary>
            DPIHelper class contains methods commonly used for DPI scaling.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.Scale(System.Int32)">
            <summary>
            Scales the input with the current dpi scale factor
            </summary>
            <param name="value">Value to be scaled</param>
            <returns>Scaled value</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.ScaleF(System.Int32)">
            <summary>
            Scales the input with the current dpi scale factor
            </summary>
            <param name="value">Value to be scaled</param>
            <returns>Scaled value</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.ScaleD(System.Double)">
            <summary>
            Scales the input with the current dpi scale factor
            </summary>
            <param name="value">Value to be scaled</param>
            <returns>Scaled value</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.Scale(System.Drawing.Rectangle)">
            <summary>
            Scales the input with the current dpi scale factor
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.ScaleByFont(System.Single,Ifs.Fnd.Core.FndScaleDimension)">
            <summary>
            Scales the input value with the current scale factor applied on forms using AutoScaleMode.Font.
            This scale factor is only to be used within APF as we otherwise use AutoScaleMode.DPI for all
            our other Forms and UserControls.
            </summary>
            <param name="value">Input value to scale</param>
            <param name="d">ScaleDimension is used to indicate which dimension scaling is applied on.</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.ScaleF(System.Single)">
            <summary>
            Scales the input with the current dpi scale factor
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.UnScaleByFont(System.Single,Ifs.Fnd.Core.FndScaleDimension)">
            <summary>
            UnScales the input value with the current scale factor applied on forms using AutoScaleMode.Font
            </summary>
            <param name="value">Input value to unscale</param>
            <param name="d">ScaleDimension is used to indicate which dimension scaling is applied on.</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.UnScale(System.Int32)">
            <summary>
            Scales the input with the invers of current dpi scale factor
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.UnScaleF(System.Single)">
            <summary>
            Scales the input with the invers of current dpi scale factor
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.SetSplitterDistance(System.Windows.Forms.SplitContainer,System.Int32)">
            <summary>
            Set the splitter distance to the specifed value.
            It also scales the minimum size of the splitter panes with regard to the current DPI scale factor.
            </summary>
            <param name="s">SplitContainer</param>
            <param name="dist">Splitter distance</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.ScaleToolbarImages(System.Windows.Forms.ToolStrip,System.Drawing.Size)">
            <summary>
            Scales ToolBar Images to a specified size
            </summary>
            <param name="toolStripControl">ToolStripPanel</param>
            <param name="imageScalingSize">Size for the image items to be scaled to</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Int32,System.Int32,Ifs.Fnd.Core.DPIImageScaleMode)">
            <summary>
            Helper method for drawing images.
            DPIImageScaleMode parameter can be used for specifying how the Image should be scaled.
            </summary>
            <param name="g">Graphics object</param>
            <param name="image">Image</param>
            <param name="x">Location of the image</param>
            <param name="y">Location of the image</param>
            <param name="imageScaleMode">Image scaling to be perfomed</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,Ifs.Fnd.Core.DPIImageScaleMode)">
            <summary>
            Helper method for drawing images.
            </summary>
            <param name="g">Graphics object</param>
            <param name="image">Image</param>
            <param name="rect">The location and bounds of the image</param>
            <param name="imageScaleMode">Image scaling to be perfomed</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.ScaleBitmap(System.Drawing.Bitmap)">
            <summary>
            Helper method for scaling bitmaps.
            </summary>
            <param name="bitmap">Bitmap containing the image to be scaled</param>
            <returns>A new bitmap object containing the scaled image</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.ScaleBitmap(System.Drawing.Bitmap,System.Single,System.Single)">
            <summary>
            Helper method for scaling bitmaps.
            </summary>
            <param name="bitmap">Bitmap containing the image to be scaled</param>
            <param name="scaleWidth">Desired width of the scaled image</param>
            <param name="scaleHeight">Desired height of the scaled image</param>
            <returns>A new bitmap object containing the scaled image</returns>
        </member>
        <member name="P:Ifs.Fnd.Core.FndDPIUtilities.DpiResolution">
            <summary>
            Returns the system's dpi resolution.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndDPIUtilities.CurrentDPI">
            <summary>
            Returns the system's dpi resolution.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndDPIUtilities.ScaleFactor">
            <summary>
            Returns the dpi scale factor.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndDPIUtilities.BaseDPI">
            <summary>
            Returns the DPI value that is considered to be scale "x1".
            Only to be used by the framework.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndDPIUtilities.Constants">
            <summary>
            Static class for dynamic DPI constants
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndDPIUtilities.Constants.TextBoxHeight">
            <summary>
            The height of a textbox field based on the current DPI settings
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndDPIUtilities.FndAPFScaleUtil">
            <summary>
            Internal class used for scaling dynamically added control in APF.
            with regards to the current enviroments DPI settings.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.FndAPFScaleUtil.#ctor">
            <summary>
            Calculates the scale factors applicable for scaling APF controls.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndDPIUtilities.FndAPFScaleUtil.GetFontScaleSize(System.Drawing.Font)">
            <summary>
            Retrieves the average size of the specified font.
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.EntityTranslateItem">
            <summary>
            Entity Translation Items
            </summary>
        </member>
        <member name="M:Ifs.Fnd.EntityTranslateItem.#ctor(System.String)">
            <summary>
            Entity Translation Constructor
            </summary>
            <param name="entity"></param>
        </member>
        <member name="P:Ifs.Fnd.EntityTranslateItem.DisplayName">
            <summary>
            Translation or the Display Name of an entity
            </summary>
        </member>
        <member name="P:Ifs.Fnd.EntityTranslateItem.Entity">
            <summary>
            Entity to be translated
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndEventSubscriberList`1">
            <summary>
            Generic class to ease sending events to subscribers on different
            threads. Internal framework use only!
            </summary>
            <typeparam name="T">EventArgs to handle</typeparam>
        </member>
        <member name="M:Ifs.Fnd.FndEventSubscriberList`1.SubscribeEntryChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{`0})">
            <summary>
            Add callback subscription delegate.
            This is very similar to an ordinary event, but a (normally) FndExplorer
            must be provided to do the callback on the correct thread.
            </summary>
            <param name="invoker">ISynchronizeInvoke object to callback on correct thread</param>
            <param name="callback">Callback delegate</param>
        </member>
        <member name="M:Ifs.Fnd.FndEventSubscriberList`1.SubscribeEntryChanged(Ifs.Fnd.FndEventSubscriberList{`0}.FndEventSubscriber)">
            <summary>
            Add callback subscription delegate.
            </summary>
            <param name="subscriber"></param>
        </member>
        <member name="M:Ifs.Fnd.FndEventSubscriberList`1.UnsubscribeEntryChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{`0})">
            <summary>
            Remove subscription delegate.
            </summary>
            <param name="invoker">ISynchronizeInvoke object to callback on correct thread</param>
            <param name="callback">Callback delegate</param>
        </member>
        <member name="M:Ifs.Fnd.FndEventSubscriberList`1.OnEntryChanged(`0)">
            <summary>
            Trigger the event. All delegates will be called on their threads.
            All delegates registered will be called. Subscribing or unsubscribing in 
            callback will affect NEXT call to OnEntryChanged.
            </summary>
            <param name="args">Event arguments to pass to the caller. This instance must be thread safe.</param>
        </member>
        <member name="M:Ifs.Fnd.FndEventSubscriberList`1.InvokeDelegate(Ifs.Fnd.FndEventSubscriberList{`0}.FndEventSubscriber,`0)">
            <summary>
            Invoke the subscriber
            </summary>
            <param name="subscriber">Subscriber to invoke</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Ifs.Fnd.FndEventSubscriberList`1.OnInvokerClosed(System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            Remove all subscribers having the provided ISynchronizeInvoke instance.
            This is useful to call when an ISynchronizeInvoke instance is being shut down.
            Normally this is when an FndExplorer window is closed.
            Use the IFndApplication.ExplorerRemoved event to trigger a call.
            </summary>
            <param name="invoker">ISynchronizeInvoke instance to remove from list</param>
        </member>
        <member name="T:Ifs.Fnd.FndEventSubscriberList`1.FndEventSubscriber">
            <summary>
            Contains an event subscriber. Only for internal use
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndEventSubscriberList`1.FndEventSubscriber.#ctor(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{`0})">
            <summary>
            Creates a FndEventSubscriber object
            </summary>
            <param name="invoker">The invoker</param>
            <param name="method">The method to invoke</param>
        </member>
        <member name="M:Ifs.Fnd.FndEventSubscriberList`1.FndEventSubscriber.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.FndEventSubscriberList`1.FndEventSubscriber.GetHashCode">
            <summary>
            <see>Object.GetHashCode</see>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.FndEventSubscriberList`1.FndEventSubscriber.Invoke(`0)">
            <summary>
            Invoke the invoker
            </summary>
            <param name="args">The arguments passed to the invoker</param>
        </member>
        <member name="P:Ifs.Fnd.FndEventSubscriberList`1.FndEventSubscriber.Invoker">
            <summary>
            The Invoker
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndTaggedEventSubscriberList`2">
            <summary>
            Generic class to ease sending events to subscribers on different
            threads. This class is intended for more advanced used where you want
            custom filtering on the events.
            </summary>
            <typeparam name="T">EventArgs to handle</typeparam>
            <typeparam name="TTag">Type of the custom filter data</typeparam>
        </member>
        <member name="M:Ifs.Fnd.FndTaggedEventSubscriberList`2.#ctor(Ifs.Fnd.FndTaggedEventSubscriberList{`0,`1}.InvokeChecker)">
            <summary>
            Creates a new instance of FndTaggedEventSubscriberList
            </summary>
            <param name="invokeCheck">Callback to check whenever a delegate should be invoked</param>
        </member>
        <member name="M:Ifs.Fnd.FndTaggedEventSubscriberList`2.SubscribeEntryChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{`0},`1)">
            <summary>
            Add callback subscription delegate.
            This is very similar to an ordinary event, but an (normally) FndExplorer
            must be provided to do the callback on the correct thread.
            </summary>
            <param name="invoker">ISynchronizeInvoke object to callback on correct thread</param>
            <param name="callback">Callback delegate</param>
            <param name="tag">Tag passed to InvokeChecker delegate</param>
        </member>
        <member name="M:Ifs.Fnd.FndTaggedEventSubscriberList`2.InvokeDelegate(Ifs.Fnd.FndEventSubscriberList{`0}.FndEventSubscriber,`0)">
            <summary>
            Invoke the subscriber
            </summary>
            <param name="subscriber">Subscriber to invoke</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="T:Ifs.Fnd.FndTaggedEventSubscriberList`2.InvokeChecker">
            <summary>
            Callback to check whenever a delegate should be invoked
            </summary>
            <param name="args">Arguments to pass to the delegate</param>
            <param name="tag">Tag used to filter calls</param>
            <returns>true will call the delegate, false will not</returns>
        </member>
        <member name="T:Ifs.Fnd.Core.FndFlagUtil">
            <summary>
            Utility for setting and reading record and attribute flags
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndFlagUtil.SetFlag(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set a flag to an integer value
            </summary>
            <param name="value">value to set the flag</param>
            <param name="flag">flag</param>
            <param name="flagValue">flagValue</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndFlagUtil.SetFlag(System.Int32@,System.Int32)">
            <summary>
            Set a flag to an integer value
            </summary>
            <param name="value">value to set the flag</param>
            <param name="flag">flag</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndFlagUtil.ClearFlag(System.Int32@,System.Int32)">
            <summary>
            Clear a flag from an integer value
            </summary>
            <param name="value">value to remove the flag</param>
            <param name="flag">flag</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndFlagUtil.ReadIntFlag(System.Int32,System.Int32)">
            <summary>
            Check whether an integer value has the specified flag
            </summary>
            <param name="value">value to check the flag</param>
            <param name="flag">flag</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndFlagUtil.ReadBoolFlag(System.Int32,System.Int32)">
            <summary>
            Check whether an integer value has the specified flag and returns true or false depending on the flag status
            </summary>
            <param name="value">value to check the flag</param>
            <param name="flag">flag</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndFlagUtil.ContainsFlag(System.Int32,System.Int32)">
            <summary>
            Check whether an integer value has the specified flag and returns true or false depending on the flag status
            </summary>
            <param name="value">value to check ghe flag</param>
            <param name="flag">flag</param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Core.FndRightToLeftUtilities">
            <summary>
            FndRightToLeftUtilities class contains static methods for identifying and applying correct RightToLeft settings on UI objects.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.ApplyDirection(System.Windows.Forms.Control)">
            <summary>
            Apply the RightToLeft settings on the Control, based on what kind of language is being used.
            </summary>
            <param name="ctrl">The Control for which the setting should be applied for</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.ApplyDirection(System.Windows.Forms.Form)">
            <summary>
            Apply the RightToLeft settings on the Form, based on what kind of language is being used.
            </summary>
            <param name="form">The Form for which the setting should be applied for</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.ApplyDirection(System.Windows.Forms.UserControl)">
            <summary>
            Apply the RightToLeft settings on the UserControl, based on what kind of language is being used.
            </summary>
            <param name="userCtrl">The UserControl for which the setting should be applied for</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.ApplyDirectionWPF(System.Windows.FrameworkElement)">
            <summary>
            Apply Right To Left layout for WPF.
            Call this method if you open a new WPF window and need to apply RTL to it.
            </summary>
            <param name="element">The WPF framework element (typically the WPF window instance)</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.AppendStyles(System.Windows.Forms.CreateParams)">
            <summary>
            Apply the RightToLeft styles, based on what kind of language is being used.
            </summary>
            <param name="cp">The base styles to which the RightToLeft styles should be appended</param>
            <returns>The CreateParams containing the base styles and, if needed, the RightToLeft styles</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.RemoveStyles(System.Windows.Forms.CreateParams)">
            <summary>
            Remove the RightToLeft styles from the provided CreateParams styles.
            </summary>
            <param name="cp">The base style</param>
            <returns>The base style without the RightToLeft styles</returns>
        </member>
        <member name="F:Ifs.Fnd.Core.FndRightToLeftUtilities.managedBackBuffer">
            <summary>
            Since the managed DoubleBuffering is not working correctly when used together with RTL (RightToLeft) mirroring
            options, we need to manually handle the buffering to avoid flickering during rendering.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.AllocateManagedBackBuffer(System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.AllocateManagedBackBuffer(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="ctrl"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.DestroyManagedBackBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.Transform(System.Drawing.Rectangle,System.Windows.Forms.Control)">
            <summary>
            Transforms the Rectangle coordinates to a RightToLeft based coordinates, if
            the control attribute RightToLeft is set to Yes.
            </summary>
            <param name="rect">The Rectangle to transform</param>
            <param name="ctrl">The control</param>
            <returns>The Rectangle object with the RTL based cooredinated</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.TransformX(System.Drawing.Rectangle,System.Windows.Forms.Control)">
            <summary>
            Same as Transform but with an extension:
            The x coordinate is subtracted with 1 pixel in RTL environments.
            </summary>
            <param name="rect"></param>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.Transform(System.Drawing.RectangleF,System.Windows.Forms.Control)">
            <summary>
            Transforms the RectangleF coordinates to a RightToLeft based coordinates, if
            the control attribute RightToLeft is set to Yes.
            </summary>
            <param name="rect">The RectangleF to transform</param>
            <param name="ctrl">The control</param>
            <returns>The RectangleF object with the RTL based cooredinated</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.Transform(System.Drawing.Point,System.Windows.Forms.Control)">
            <summary>
            Transforms the Point coordinates to a RightToLeft based coordinates, if
            the control attribute RightToLeft is set to Yes.
            </summary>
            <param name="pt">The Point to transform</param>
            <param name="ctrl">The control</param>
            <returns>The Point object with the RTL based cooredinated</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.TransformX(System.Drawing.Point,System.Windows.Forms.Control)">
            <summary>
            Transforms the Point coordinates to a RightToLeft based coordinates, if
            the control attribute RightToLeft is set to Yes.
            </summary>
            <param name="pt">The Point to transform</param>
            <param name="ctrl">The control</param>
            <returns>The Point object with the RTL based cooredinated</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.Transform(System.Int32,System.Windows.Forms.Control)">
            <summary>
            Transforms the int coordinate to a RightToLeft based coordinate, if
            the control attribute RightToLeft is set to Yes. 
            </summary>
            <param name="x">The int to transform</param>
            <param name="ctrl">The control</param>
            <returns>The int with the RTL based cooredinated</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.TransformX(System.Int32,System.Windows.Forms.Control)">
            <summary>
            Same as Transform but with an extension:
            The width is subtracted with 1 pixel in RTL environments.
            </summary>
            <param name="x"></param>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.Transform(System.Single,System.Windows.Forms.Control)">
            <summary>
            Transforms the float coordinate to a RightToLeft based coordinate, if
            the control attribute RightToLeft is set to Yes. 
            </summary>
            <param name="x">The int to transform</param>
            <param name="ctrl">The control</param>
            <returns>The int with the RTL based cooredinated</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.TransformX(System.Single,System.Windows.Forms.Control)">
            <summary>
            Transforms the float coordinate to a RightToLeft based coordinate, if
            the control attribute RightToLeft is set to Yes. 
            </summary>
            <param name="x">The int to transform</param>
            <param name="ctrl">The control</param>
            <returns>The int with the RTL based cooredinated</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.Transform(System.Drawing.Point[],System.Windows.Forms.Control)">
            <summary>
            Transforms the Point[] coordinates to a RightToLeft based coordinates, if
            the control attribute RightToLeft is set to Yes. 
            </summary>
            <param name="points">The Points to transform</param>
            <param name="ctrl">The control</param>
            <returns>The Points with the RTL based cooredinated</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.TransformX(System.Drawing.Point[],System.Windows.Forms.Control)">
            <summary>
            Same as Transform but with an extension:
            The x coordinates are subtracted with 1 pixel in RTL environments.
            </summary>
            <param name="points"></param>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndRightToLeftUtilities.TransformX(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Control)">
            <summary>
            Same as Transform but with an extension:
            The x coordinates are subtracted with 1 pixel in RTL environments.
            </summary>
            <param name="args"></param>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Core.FndRightToLeftUtilities.IsRightToLeft">
            <summary>
            TRUE is the system is being run using a RightToLeft language (like Arabic).
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.LocalSettings.FndLocalUserSettingsProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.LocalSettings.FndLocalUserSettingsProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FndLocalUserSettingsProvider"/> class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.LocalSettings.FndLocalUserSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the profile property values and information for the current user. 
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="col">A collection of the name/value pairs representing the provider-specific 
            attributes specified in the configuration for this provider.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.LocalSettings.FndLocalUserSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Returns the collection of settings property values for the specified application instance and settings 
            property group. 
            </summary>
            <param name="context">A SettingsContext describing the current application use.</param>
            <param name="collection">A SettingsPropertyCollection containing the settings property group whose values 
            are to be retrieved.</param>
            <returns>A SettingsPropertyValueCollection containing the values for the specified settings property group. </returns>
        </member>
        <member name="M:Ifs.Fnd.Core.LocalSettings.FndLocalUserSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
            <summary>
            Sets the values of the specified group of property settings. 
            </summary>
            <param name="context">A SettingsContext describing the current application usage.</param>
            <param name="collection">A SettingsPropertyValueCollection representing the group of property 
            settings to set.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.LocalSettings.FndLocalUserSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)">
            <summary>
            Returns the value of the specified settings property for the previous version of the same application.  
            </summary>
            <param name="context">A SettingsContext describing the current application usage.</param>
            <param name="property">The SettingsProperty whose value is to be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.LocalSettings.FndLocalUserSettingsProvider.Reset(System.Configuration.SettingsContext)">
            <summary>
            Resets the application settings associated with the specified application to their default values. 
            </summary>
            <param name="context">A SettingsContext describing the current application usage.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.LocalSettings.FndLocalUserSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Indicates to the provider that the application has been upgraded. This offers the provider an opportunity 
            to upgrade its stored settings as appropriate. 
            </summary>
            <param name="context">A SettingsContext describing the current application usage.</param>
            <param name="properties">A SettingsPropertyCollection containing the settings property group whose values 
            are to be retrieved.</param>
        </member>
        <member name="P:Ifs.Fnd.Core.LocalSettings.FndLocalUserSettingsProvider.ApplicationName">
            <summary>Gets or sets the name of the currently running application.</summary>
            <returns>A System.String that contains the application's shortened name, which d
            oes not contain a full path or extension.</returns>
        </member>
        <member name="T:Ifs.Fnd.Core.LocalSettings.FndLocalUserSettingsProvider.SettingsDictionary">
            <summary>
            A dictionary containing all user experience settings. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.LocalSettings.FndLocalUserSettingsProvider.SettingsDictionary.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SettingsDictionary"/> class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.LocalSettings.FndLocalUserSettingsProvider.SettingsDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:SettingsDictionary"/> class. This constructor is
            needed to serialize the Dictionary instance. 
            </summary>
            <param name="info">A System.Runtime.Serialization.SerializationInfo object that contains the information 
            required to serialize the Dictionary instance.</param>
            <param name="context">A System.Runtime.Serialization.StreamingContext structure that contains the source 
            and destination of the serialized stream associated with the Dictionary instance.</param>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBoxForm.OnShown(System.EventArgs)">
            <summary>
            Handle SnapToDefault button logic
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Ifs.Fnd.Windows.Forms.FndMessageBoxForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBoxForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBoxForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndInvalidStateException">
            <summary>
            The exception that is thrown when a method / property has been invoked on an object
            at an inappropriate time. That is, the object is not in an appropriate state for the requested operation.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndInvalidStateException.#ctor">
            <summary>
            Initializes a new instance of the FndStateException class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndInvalidStateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndStateException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndInvalidStateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FndStateException class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndInvalidStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Ifs.Fnd.Core.FndCompressionUtil">
            <summary>
            Compress/decompress byte[] using GZipStream
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndCompressionUtil.#ctor">
            <summary>
            private default constructor to prevent compiler from creating a public one
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndCompressionUtil.Compress(System.Byte[])">
            <summary>
            Compress a byte[]
            </summary>
            <param name="data">Data to compress</param>
            <returns>Returns byte array with the compressed data</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndCompressionUtil.Decompress(System.Byte[])">
            <summary>
            Decompress a value compressed using FndCompressionUtil.Compress
            </summary>
            <param name="compressedData">The souce compressed value to decompress</param>
            <returns>Returns the uncompressed value as a byte[]</returns>
        </member>
        <member name="T:Ifs.Fnd.Core.FndWpfHelpers">
            <summary>
            Helper class to support use of WPF
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndWpfHelpers.#ctor">
            <summary>
            Default private constructor to prevent the compiler from creating a public one
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndWpfHelpers.DisposeElementHost(System.Windows.Forms.Integration.ElementHost)">
            <summary>
            Call to property clean up use of an ElementHost control
            Workaround for MS memory leak in ElementHost
            </summary>
            <param name="elementHost">The ElementHost instance to clean up</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndWpfHelpers.ClearAllBindingsVisual(System.Windows.DependencyObject)">
            <summary>
            Recursively clear all bindings starting from a given DependencyObject.
            </summary>
            <param name="current">The root of the visual tree to start the clearing from</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndWpfHelpers.ClearAllBindingsLogical(System.Windows.DependencyObject)">
            <summary>
            Recursively clear all bindings starting from a given DependencyObject.
            </summary>
            <param name="current">The root of the visual tree to start the clearing from</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndWpfHelpers.EnumerateBindings(System.Windows.DependencyObject)">
            <summary>
            Enumerate the bindings on a given DependencyObject.
            This is practically used only to count the number of bindings.
            Adapted from http://social.msdn.microsoft.com/Forums/vstudio/en-US/d47114a7-b182-485c-b1dd-1078ddd42be9/enumerate-bindings?forum=wpf to handle MultiBindings as well
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndWpfHelpers.GetLocation(System.Windows.FrameworkElement)">
            <summary>
            Gets location of given element in its parent.
            </summary>
            <param name="element">The element whose location is to be found.</param>
            <returns>Location of given element, with respect to its parent.</returns>
        </member>
        <member name="T:Ifs.Fnd.Core.IOrderedDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs that are ordered independently of the key and value.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary</typeparam>
        </member>
        <member name="M:Ifs.Fnd.Core.IOrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:Ifs.Fnd.Core.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add.</param>
            <returns>The index of the newly added entry</returns>
            <remarks>
            <para>You can also use the <see cref="P:System.Collections.Generic.IDictionary{TKey,TValue}.Item(TKey)"/> property to add new elements by setting the value of a key that does not exist in the <see cref="T:Ifs.Fnd.Core.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> collection; however, if the specified key already exists in the <see cref="T:Ifs.Fnd.Core.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see>, setting the <see cref="P:Item(TKey)"/> property overwrites the old value. In contrast, the <see cref="M:Add"/> method does not modify existing elements.</para></remarks>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Ifs.Fnd.Core.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see></exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Ifs.Fnd.Core.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> is read-only.<br/>
            -or-<br/>
            The <see cref="T:Ifs.Fnd.Core.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> has a fized size.</exception>
        </member>
        <member name="M:Ifs.Fnd.Core.IOrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts a new entry into the <see cref="T:Ifs.Fnd.Core.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> collection with the specified key and value at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. The value can be <null/> if the type of the values in the dictionary is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ICollection.Count"/>.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Ifs.Fnd.Core.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Ifs.Fnd.Core.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> is read-only.<br/>
            -or-<br/>
            The <see cref="T:Ifs.Fnd.Core.IOrderedDictionary`2">IOrderedDictionary&lt;TKey,TValue&gt;</see> has a fized size.</exception>
        </member>
        <member name="P:Ifs.Fnd.Core.IOrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the item at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ICollection.Count"/>.</exception>
        </member>
        <member name="T:Ifs.Fnd.Core.Logging.FndProcessInfo">
            <summary>
            FndProcessInfo
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndProcessInfo.Machine">
            <summary>
            Machinename
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndProcessInfo.ApplicationDomain">
            <summary>
            Application domain frienlyname.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndProcessInfo.ProcessId">
            <summary>
            Process id
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndProcessInfo.ProcessName">
            <summary>
            Process name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndProcessInfo.Win32ThreadId">
            <summary>
            Thread id
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndProcessInfo.ThreadName">
            <summary>
            Thread name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndProcessInfo.StartTime">
            <summary>
            Thread name
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.Logging.FndLogHelperClass">
            <summary>
            Helper class for logging
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.FndLogHelperClass.GetCurrentProcessInfo">
            <summary>
            Returns the current process info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.FndLogHelperClass.GenerateLogKey(System.String)">
            <summary>
            Generates a hased value of the text.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Core.Logging.FndLogger">
            <summary>
            FndLogger. Logs error messages.          
            </summary>    
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.FndLogger.Instance">
            <summary>
            Returns the instance of FndLogger
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.FndLogger.#ctor">
            <summary>
            Hidden default constuctor
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.FndLogger.bw_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Invoked when backgroundworker has finnished.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.FndLogger.RegisterLogger">
            <summary>
            Registers the logwriter to systemexceptions
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.FndLogger.UnRegisterLogger">
            <summary>
            Unregisters the logwriter from systemexceptions
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.FndLogger.Init(Ifs.Fnd.Core.Logging.FndSystemInfo)">
            <summary>
            Initializes the logger. Checks the config file to see if logging is enabled
            Entry in ...exe.config file:
            
                <appsettings>
                  <add key="errorlogging" value="false" />
                </appsettings>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.FndLogger.FndSystemException_NotifyException(System.Object,Ifs.Fnd.FndExceptionNotificationEventArgs)">
            <summary>
            Listener for systemexceptions
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.FndLogger.WriteLog(System.Exception)">
            <summary>
            Writes a exception log.          
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.FndLogger.bw_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Calls the write method for each writer configured for logging.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndLogger.SystemInfo">
            <summary>
            Codebase
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.FndLogger.FndLogInfo.WriteToTrace(System.String)">
            <summary>
            WriteToTrace
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.FndLogger.FndLogInfo.HasLogWriterFailed(System.String)">
            <summary>
            HasLogWriterFailed
            </summary>
            <param name="logwriterTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.FndLogger.FndLogInfo.AddFailedLogWriter(System.String)">
            <summary>
            AddFailedLogWriter
            </summary>
            <param name="typename"></param>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndLogger.FndLogInfo.Codebase">
            <summary>
            Codebase
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndLogger.FndLogInfo.IsNetworkDeployed">
            <summary>
            IsNetworkDeployed
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.Logging.Configuration.FndLogWriterConfigSection">
            <summary>
            The Class that will have the XML config file data loaded into it via the configuration Manager.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.Logging.Configuration.FndLogWriterConfigSection.SectionName">
            <summary>
            Section name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.Configuration.FndLogWriterConfigSection.LogWriters">
            <summary>
            The value of the property here "FndLogWriters" needs to match that of the config file section
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.Logging.Configuration.FndLogWriterCollection">
            <summary>
            The collection class that will store the list of each element/item that
                   is returned back from the configuration manager.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.Configuration.FndLogWriterCollection.CreateNewElement">
            <summary>
            Creates a new LogWriterElement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.Configuration.FndLogWriterCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the element key for a LogWriterElement
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.Configuration.FndLogWriterCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Core.Logging.Configuration.LogWriterElement">
            <summary>
            The class that holds onto each element returned by the configuration manager.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.Configuration.LogWriterElement.Param">
            <summary>
            Target for where to write the logs
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.Configuration.LogWriterElement.TypeName">
            <summary>
            The typename for the log writer
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.Configuration.LogWriterElement.AssemblyName">
            <summary>
            The assembly name in which the log writer is located
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndTimeoutException">
            <summary>
            An expected exception caused by a server timeout, commonly used for transactions and cursors
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the FndTimeoutException class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndTimeoutException.#ctor(System.String)">
            <summary>
            Construct an FndTimeoutException
            </summary>
            <param name="message">Timeout error message</param>
        </member>
        <member name="M:Ifs.Fnd.FndTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Construct an FndTimeoutException
            </summary>
            <param name="message">Timeout error message</param>
            <param name="innerException">Inner exception caught to raise this exception</param>
        </member>
        <member name="M:Ifs.Fnd.FndTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ifs.Fnd.FndTimeoutException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:Ifs.Fnd.FndTimeoutException.Icon">
            <summary>
            Dialog Icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndTimeoutException.MessageBoxIcon">
            <summary>
            MessageBox icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndTimeoutException.Caption">
            <summary>
            Dialog Caption
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.ErrorMessageForm">
            <summary>
            Summary description for ErrorMessageForm.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Windows.Forms.FndLocalizedForm">
            <summary>
            Subclass of System.Windows.Forms.Form which adds IFS specific
            resource management.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndLocalizedForm.#ctor">
            <summary>
            Initializes a new instance of the base class FndLocalizedForm. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.ErrorMessageForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.ErrorMessageForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Diagnostics.FndDebugger">
            <summary>
            A wrapper for the system debug console
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Diagnostics.FndDebugger.Launch">
            <summary>
            Launch the debug console
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:Ifs.Fnd.Diagnostics.FndDebugger.Log(System.String)">
            <summary>
            Write a line to the debug console
            </summary>
            <param name="message">The message to write to the console</param>
        </member>
        <member name="M:Ifs.Fnd.Diagnostics.FndDebugger.Log(System.String,System.String)">
            <summary>
            Write a line to the debug console
            </summary>
            <param name="category">Category to identify similar traces</param>
            <param name="message">The message to write to the console</param>
        </member>
        <member name="P:Ifs.Fnd.Diagnostics.FndDebugger.IsAttached">
            <summary>
            Indicates if a debug console is attached
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndErrorLogger">
            <summary>
            FndErrorLogger. Writes error messages to a log file depending on appSettings.
            
            Entry in ...exe.config file:
            
                <appsettings>
                  <add key="logging" value="false" />
                </appsettings>
             
            value = true/false controls wheter the log file is written.
            Logfile name is exe name + _error_log.txt
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndErrorLogger.LogError(System.String)">
            <summary>
            Write (append) exceptions to a log file (exe name + _error_log.txt)
            </summary>
            <param name="error">The error message to log</param>
        </member>
        <member name="T:Ifs.Fnd.FndExceptionNotificationEventArgs">
            <summary>
            Notification about exception event arguments.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndExceptionNotificationEventArgs.#ctor(System.Exception)">
            <summary>
            Creates an instance of FndExceptionNotificationEventArgs
            </summary>
            <param name="exception">Exception that occured</param>
        </member>
        <member name="P:Ifs.Fnd.FndExceptionNotificationEventArgs.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndExceptionNotificationEventArgs.Exception">
            <summary>
            Gets the exception that occured
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndHttpTraceEventHandler">
            <summary>
            Represents the method that will handle the Trace event.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndHttpTraceEventArgs">
            <summary>
            Trace Category Type
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndHttpTraceEventArgs.#ctor(System.Net.HttpWebResponse,System.Object)">
            <summary>
            public Constructor
            </summary>
            <param name="httpHeaderResponse">HttpWebResponse object</param>
            <param name="lastServerOutput"> lastServerOutput object</param>
        </member>
        <member name="M:Ifs.Fnd.FndHttpTraceEventArgs.#ctor(System.Net.HttpWebResponse,System.Object,System.Object)">
            <summary>
            public Constructor
            </summary>
            <param name="httpHeaderResponse">HttpWebResponse object</param>
            <param name="lastServerOutput">lastServerOutput object</param>
            <param name="responseBody">fnd datarow,fnddatatable,fndbuffer object describing the current record</param>
        </member>
        <member name="M:Ifs.Fnd.FndHttpTraceEventArgs.#ctor(System.Net.HttpWebRequest,System.Object)">
            <summary>
            public Constructor
            </summary>
            <param name="httpHeaderRequest">httpHeaderRequest object</param>
            <param name="lastServerOutput">lastServerOutput object</param>
        </member>
        <member name="M:Ifs.Fnd.FndHttpTraceEventArgs.#ctor(System.Net.HttpWebRequest,System.Object,System.Object)">
            <summary>
            public Constructor
            </summary>
            <param name="httpHeaderRequest">httpHeaderRequest object</param>
            <param name="lastServerOutput">lastServerOutput object</param>
            <param name="responseBody">FndDatarow, FndDataTable or FndBuffer object describing the current record</param>
        </member>
        <member name="P:Ifs.Fnd.FndHttpTraceEventArgs.LastServerOutput">
            <summary>
            lastServerOutput object
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndHttpTraceEventArgs.HttpResponse">
            <summary>
            HttpWebResponse object containing the current Responce from server
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndHttpTraceEventArgs.HttpRequest">
            <summary>
            HttpWebRequest object containing the current Request to server
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndHttpTraceEventArgs.ResponseBody">
            <summary>
            FndDatarow, FndDataTable or FndBuffer object describing the current record
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Windows.Forms.FndMessageBox">
            <summary>
            Displays a message box that can contain text, buttons, and symbols that inform and instruct the user.
            The FndMessageBox can also show a checkbox and the buttons can have custom captions, and X no of buttons.
            You can also specify a timeout value (in seconds). When the timeout occurs the default button (if set)
            is pressed.
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Windows.Forms.FndMessageBox.useTheming">
            <summary>
            The reason for having a static field like this is that Ifs.Fnd.Core assembly cannot have references to FndThemeManager.
            So instead we push the theme color from FndThemeManager into this member.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values. Since this has an OK button only, always returns DialogResult.OK</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified message and title.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values. Since this has an OK button only, always returns DialogResult.OK</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, caption, and buttons.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, and buttons.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, caption, buttons, and icon.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, buttons, and icon.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with the specified text, caption, buttons, icon, and default button.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the System.Windows.Forms.MessageBoxDefaultButton values that specifies the default button for the message box.</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Int32,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with the specified text, caption, buttons, icon, and default button.
            You can also specify a timeout value (in seconds). When the timeout occurs the default button (if set)
            is pressed.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the System.Windows.Forms.MessageBoxDefaultButton values that specifies the default button for the message box.</param>
            <param name="timeout">Value in seconds until the Acceptbutton (if set) is pressed automatically</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with the specified text, buttons, icon, and default button.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the System.Windows.Forms.MessageBoxDefaultButton values that specifies the default button for the message box.</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Displays a message box in front of the specified <b>IWin32Window</b> object and with the specified text, buttons, icon and default button.
            </summary>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <param name="message">The message to display in the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the System.Windows.Forms.MessageBoxDefaultButton values that specifies the default button for the message box.</param>      
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Int32,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with the specified text, buttons, icon, and default button.
            You can also specify a timeout value (in seconds). When the timeout occurs the default button (if set)
            is pressed.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the System.Windows.Forms.MessageBoxDefaultButton values that specifies the default button for the message box.</param>
            <param name="timeout">Value in seconds until the Acceptbutton (if set) is pressed automatically</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.String,System.Boolean@,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with the specified text, caption, buttons, icon, and default button.
            It also displays a checkbox for which you can set and get the checked value.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the System.Windows.Forms.MessageBoxDefaultButton values that specifies the default button for the message box.</param>
            <param name="checkBoxMessage">The text to display in the checkbox of the message box.</param>
            <param name="checkedValue">A boolean, passed by reference, to set and get the value of the checkbox.</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.String,System.Boolean@,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with the specified text, buttons, icon, and default button.
            It also displays a checkbox for which you can set and get the checked value.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the System.Windows.Forms.MessageBoxDefaultButton values that specifies the default button for the message box.</param>
            <param name="checkBoxMessage">The text to display in the checkbox of the message box.</param>
            <param name="checkedValue">A boolean, passed by reference, to set and get the value of the checkbox.</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.String,System.Boolean@,System.Int32,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with the specified text, caption, buttons, icon, and default button.
            It also displays a checkbox for which you can set and get the checked value.
            You can also specify a timeout value (in seconds). When the timeout occurs the default button (if set)
            is pressed.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the System.Windows.Forms.MessageBoxDefaultButton values that specifies the default button for the message box.</param>
            <param name="checkBoxMessage">The text to display in the checkbox of the message box.</param>
            <param name="checkedValue">A boolean, passed by reference, to set and get the value of the checkbox.</param>
            <param name="timeout">Value in seconds until the Acceptbutton (if set) is pressed automatically</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.String,System.Boolean@,System.Int32)">
            <summary>
            Displays a message box in front of the specified <b>IWin32Window</b> with the specified text, caption, buttons, icon, and default button.
            It also displays a checkbox for which you can set and get the checked value.
            You can also specify a timeout value (in seconds). When the timeout occurs the default button (if set)
            is pressed.
            </summary>
            <param name="owner"><b>IWin32Window</b> handle of the owner window of message box.</param>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the System.Windows.Forms.MessageBoxDefaultButton values that specifies the default button for the message box.</param>
            <param name="checkBoxMessage">The text to display in the checkbox of the message box.</param>
            <param name="checkedValue">A boolean, passed by reference, to set and get the value of the checkbox.</param>
            <param name="timeout">Value in seconds until the Acceptbutton (if set) is pressed automatically</param>       
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.String,System.Boolean@,System.Int32,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with the specified text, caption, buttons, icon, and default button.
            It also displays a checkbox for which you can set and get the checked value.
            You can also specify a timeout value (in seconds). When the timeout occurs the default button (if set)
            is pressed.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the System.Windows.Forms.MessageBoxDefaultButton values that specifies the default button for the message box.</param>
            <param name="checkBoxMessage">The text to display in the checkbox of the message box.</param>
            <param name="checkedValue">A boolean, passed by reference, to set and get the value of the checkbox.</param>
            <param name="timeout">Value in seconds until the Acceptbutton (if set) is pressed automatically</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.String[],System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, caption and custom buttons.
            Does not support Esc to close since no CancelButton is specified. Use other overload method Show for that.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String[],System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text and custom buttons.
            Does not support Esc to close since no CancelButton is specified. Use other overload method Show for that.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.String[],System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, caption, icon and custom buttons.
            Does not support Esc to close since no CancelButton is specified. Use other overload method Show for that.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String[],System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, icon and custom buttons.
            Does not support Esc to close since no CancelButton is specified. Use other overload method Show for that.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.String[],System.Windows.Forms.MessageBoxIcon,System.Int32,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, caption, icon and custom buttons.
            Does not support Esc to close since no CancelButton is specified. Use other overload method Show for that.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">The zero based index that specifies the default button for the message box. (-1 for no default button)</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String[],System.Windows.Forms.MessageBoxIcon,System.Int32,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, icon and custom buttons.
            Does not support Esc to close since no CancelButton is specified. Use other overload method Show for that.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">The zero based index that specifies the default button for the message box. (-1 for no default button)</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.String[],System.Windows.Forms.MessageBoxIcon,System.Int32,System.Int32,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, caption, icon and custom buttons.
            Supports Esc to close since CancelButton is specified.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">The zero based index that specifies the default button for the message box</param>
            <param name="cancelButton">The zero based index that specifies the cancel button. Use -1 for no cancel button (Esc will not close dialog then)</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.String[],Ifs.Fnd.Windows.Forms.FndMessageBoxIconEx,System.Int32,System.Int32,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, caption, a special Fnd icon and custom buttons.
            Supports Esc to close since CancelButton is specified.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="icon">One of the FndMessageBoxIconEx values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">The zero based index that specifies the default button for the message box</param>
            <param name="cancelButton">The zero based index that specifies the cancel button. Use -1 for no cancel button (Esc will not close dialog then)</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.String[],System.Windows.Forms.MessageBoxIcon,System.Int32,System.Int32,System.Int32,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, caption, icon and custom buttons.
            Supports Esc to close since CancelButton is specified.
            You can also specify a timeout value (in seconds). When the timeout occurs the default button (if set)
            is pressed.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">The zero based index that specifies the default button for the message box</param>
            <param name="cancelButton">The zero based index that specifies the cancel button. Use -1 for no cancel button (Esc will not close dialog then)</param>
            <param name="timeout">Value in seconds until the Acceptbutton (if set) is pressed automatically</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String[],System.Windows.Forms.MessageBoxIcon,System.Int32,System.Int32,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, icon and custom buttons.
            Supports Esc to close since CancelButton is specified.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">The zero based index that specifies the default button for the message box. (-1 for no default button)</param>
            <param name="cancelButton">The zero based index that specifies the cancel button. Use -1 for no cancel button (Esc will not close dialog then)</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String[],Ifs.Fnd.Windows.Forms.FndMessageBoxIconEx,System.Int32,System.Int32,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, a special Fnd icon and custom buttons.
            Supports Esc to close since CancelButton is specified.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">The zero based index that specifies the default button for the message box. (-1 for no default button)</param>
            <param name="cancelButton">The zero based index that specifies the cancel button. Use -1 for no cancel button (Esc will not close dialog then)</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String[],System.Windows.Forms.MessageBoxIcon,System.Int32,System.Int32,System.Int32,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, icon and custom buttons.
            Supports Esc to close since CancelButton is specified.
            You can also specify a timeout value (in seconds). When the timeout occurs the default button (if set)
            is pressed.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">The zero based index that specifies the default button for the message box. (-1 for no default button)</param>
            <param name="cancelButton">The zero based index that specifies the cancel button. Use -1 for no cancel button (Esc will not close dialog then)</param>
            <param name="timeout">Value in seconds until the Acceptbutton (if set) is pressed automatically</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.String[],System.Windows.Forms.MessageBoxIcon,System.Int32,System.Int32,System.String,System.Boolean@,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, caption, icon and custom buttons.
            It also displays a checkbox for which you can set and get the checked value.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">The zero based index that specifies the default button for the message box. (-1 for no default button)</param>
            <param name="cancelButton">The zero based index that specifies the cancel button. Use -1 for no cancel button (Esc will not close dialog then)</param>
            <param name="checkBoxMessage">The text to display in the checkbox of the message box.</param>
            <param name="checkedValue">A boolean, passed by reference, to set and get the value of the checkbox.</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String[],System.Windows.Forms.MessageBoxIcon,System.Int32,System.Int32,System.String,System.Boolean@,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, icon and custom buttons.
            It also displays a checkbox for which you can set and get the checked value.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">The zero based index that specifies the default button for the message box. (-1 for no default button)</param>
            <param name="cancelButton">The zero based index that specifies the cancel button. Use -1 for no cancel button (Esc will not close dialog then)</param>
            <param name="checkBoxMessage">The text to display in the checkbox of the message box.</param>
            <param name="checkedValue">A boolean, passed by reference, to set and get the value of the checkbox.</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.String[],System.Windows.Forms.MessageBoxIcon,System.Int32,System.Int32,System.String,System.Boolean@,System.Int32,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, caption, icon and custom buttons.
            It also displays a checkbox for which you can set and get the checked value.
            You can also specify a timeout value (in seconds). When the timeout occurs the default button (if set)
            is pressed.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">The zero based index that specifies the default button for the message box. (-1 for no default button)</param>
            <param name="cancelButton">The zero based index that specifies the cancel button. Use -1 for no cancel button (Esc will not close dialog then)</param>
            <param name="checkBoxMessage">The text to display in the checkbox of the message box.</param>
            <param name="checkedValue">A boolean, passed by reference, to set and get the value of the checkbox.</param>
            <param name="timeout">Value in seconds until the Acceptbutton (if set) is pressed automatically</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String[],System.Windows.Forms.MessageBoxIcon,System.Int32,System.Int32,System.String,System.Boolean@,System.Int32,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, icon and custom buttons.
            It also displays a checkbox for which you can set and get the checked value.
            You can also specify a timeout value (in seconds). When the timeout occurs the default button (if set)
            is pressed.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="customButtons">An array of strings with captions of the custom buttons. Example: new string[]{"Button 1", "Button 2", "Button 3"}</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">The zero based index that specifies the default button for the message box. (-1 for no default button)</param>
            <param name="cancelButton">The zero based index that specifies the cancel button. Use -1 for no cancel button (Esc will not close dialog then)</param>
            <param name="checkBoxMessage">The text to display in the checkbox of the message box.</param>
            <param name="checkedValue">A boolean, passed by reference, to set and get the value of the checkbox.</param>
            <param name="timeout">Value in seconds until the Acceptbutton (if set) is pressed automatically</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>The zero based index of which button pressed</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,Ifs.Fnd.Windows.Forms.FndMessageBoxIconEx,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, caption and a special Fnd icon.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the FndMessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,Ifs.Fnd.Windows.Forms.FndMessageBoxIconEx,Ifs.Fnd.Windows.Forms.FndMessageBoxDetails,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a message box with specified text, caption, a special Fnd icon and a detail message.
            </summary>
            <param name="message">The message to display in the message box.</param>
            <param name="title">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the FndMessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="messageDetails">The detail message that will be shown when the LinkLabel named 'Show details' is clicked</param>
            <param name="owner">The <b>IWin32Window</b> the message box will display in front of.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="P:Ifs.Fnd.Windows.Forms.FndMessageBox.UseTheming">
            <summary>
            Gets or sets whether FndMessageBox should paint with IFS theming of not. If AccessProvider is used outside IFS EE, it should not.
            Attention: FRAMEWORK INTERNAL PROPERTY. DO NOT USE.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Windows.Forms.FndMessageBox.BackgroundColor">
            <summary>
            Color to use as background in message boxes.
            Attention: FRAMEWORK INTERNAL PROPERTY. DO NOT USE.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Windows.Forms.FndMessageBox.ForegroundColor">
            <summary>
            Color to use as background in message boxes.
            Attention: FRAMEWORK INTERNAL PROPERTY. DO NOT USE.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Windows.Forms.FndMessageBoxIconEx">
            <summary>
            Specifies constants defining which information to display. 
            Adds (compared to System.Windows.Forms.MessageBoxIcon) Security Error, Validation Error and Server Fault 
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Windows.Forms.FndMessageBoxIconEx.None">
            <summary>
            The message box contain no symbols.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Windows.Forms.FndMessageBoxIconEx.Security">
            <summary>
            The message box contains a symbol with a lock
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Windows.Forms.FndMessageBoxIconEx.Validation">
            <summary>
            The message box contains a symbol with a lock
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Windows.Forms.FndMessageBoxIconEx.Server">
            <summary>
            The message box contains a symbol consisting of white X in a circle with a red background.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Windows.Forms.FndMessageBoxIconEx.License">
            <summary>
            The message box looks like security but with another text (license).
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Windows.Forms.FndMessageBoxDetails">
            <summary>
            Class holding the detailed message text that will be shown when the LinkLabel named 'Show detail' is clicked in the message box.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndMessageBoxDetails.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Ifs.Fnd.Windows.Forms.FndMessageBoxDetails.Text">
            <summary>
            Gets the detailed message
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndSecurityException">
            <summary>
            An expected exception throwed by security related errors
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndSecurityException.#ctor">
            <summary>
            Initializes a new instance of the FndSecurityException class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndSecurityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndSecurityException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ifs.Fnd.FndSecurityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FndSecurityException class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Ifs.Fnd.FndSecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the serialization constructor.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndSecurityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:Ifs.Fnd.FndSecurityException.Icon">
            <summary>
            Dialog icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndSecurityException.MessageBoxIcon">
            <summary>
            MessageBox icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndSecurityException.Caption">
            <summary>
            Dialog caption
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndServerFaultException">
            <summary>
            An unexpected exception
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndSystemException">
            <summary>
            An unexpected exception
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndSystemException.#ctor">
            <summary>
            Initializes a new instance of the FndSystemException class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndSystemException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndSystemException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ifs.Fnd.FndSystemException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FndSystemException class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Ifs.Fnd.FndSystemException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            Construct an FndSystemException
            </summary>
            <param name="message">System error message</param>
            <param name="innerException">Inner exception caught to raise this exception</param>
            <param name="extraInfo">Extra information to be displayed on the non-details page in the Exception dialog. Useful to enrich an inner exception message.</param>
        </member>
        <member name="M:Ifs.Fnd.FndSystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ifs.Fnd.FndSystemException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:Ifs.Fnd.FndSystemException.Caption">
            <summary>
            Dialog caption
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndServerFaultException.#ctor">
            <summary>
            Initializes a new instance of the FndServerFaultException class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndServerFaultException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndServerFaultException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ifs.Fnd.FndServerFaultException.#ctor(System.String,System.String)">
            <summary>
            Construct an FndServerFaultException
            </summary>
            <param name="message">System error message</param>
            <param name="serverStackTrace">The stacktrace from the server</param>
        </member>
        <member name="M:Ifs.Fnd.FndServerFaultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ifs.Fnd.FndServerFaultException.ToString">
            <summary>
            Creates and returns a string representation of the current exception including 
            the server stacktrace property
            </summary>
            <returns>A string representation of the current exception</returns>
        </member>
        <member name="M:Ifs.Fnd.FndServerFaultException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.R		untime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:Ifs.Fnd.FndServerFaultException.Details">
            <summary>
            Gets the ExceptionDetails class.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndServerFaultException.ServerStackTrace">
            <summary>
            Gets the server stack trace
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndServerFaultException.Caption">
            <summary>
            Dialog caption
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndServerFaultException.ExceptionDetails">
            <summary>
            Hols the detail information, if any has been provided, for the exception.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndServerFaultException.ExceptionDetails.AddKeyTranslation(System.String,System.String)">
            <summary>
            Adds a translated text for the specified key.
            </summary>
            <param name="keyName"></param>
            <param name="keyTranslation"></param>
        </member>
        <member name="M:Ifs.Fnd.FndServerFaultException.ExceptionDetails.FormatKeyList">
            <summary>
            Formats the provided keys, if any, into a readable text string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.FndServerFaultException.ExceptionDetails.Keys">
            <summary>
            Gets the list with details for keys and their corresponding values.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndSettingsReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndSettingsReader.GetValue(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndSettingsReader.GetBoolValue(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndSettingsReader.GetBoolValue(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Core.FndStorage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndStorage.#ctor">
            <summary>
             Constructor. Creates an instance of FndStorage class. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndStorage.Serialize(Ifs.Fnd.Core.LocalSettings.FndLocalUserSettingsProvider.SettingsDictionary,System.String)">
            <summary>
            Serializes <see cref="T:Ifs.Fnd.Core.LocalSettings.FndLocalUserSettingsProvider.SettingsDictionary"/> to file. 
            </summary>
            <param name="dictionary">The dictionary to serialize. </param>
            <param name="filename">The name of the file. </param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndStorage.Serialize(System.Type,System.Object,System.String)">
            <summary>
            Serializes an object into an XML document. 
            </summary>
            <param name="type">The object to serialize. </param>
            <param name="obj">The object to serialize. </param>
            <param name="filename">The key to add to the filename. </param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndStorage.Serialize(System.Type,System.Object,System.String,System.Boolean)">
            <summary>
            Serializes an object into an XML document. 
            </summary>
            <param name="type">The object to serialize. </param>
            <param name="obj">The object to serialize. </param>
            <param name="filename">The key to add to the filename. </param>
            <param name="useMachineStore">Use machine store other than user store. </param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndStorage.Serialize(System.Object,System.String,System.Boolean)">
            <summary>
            Serializes an object into a binary document.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="filename">File name for saving the serialized object.</param>
            <param name="useMachineStore">Use machine store other than user store.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndStorage.Deserialize(System.String)">
            <summary>
            Deserialize <see cref="T:Ifs.Fnd.Core.LocalSettings.FndLocalUserSettingsProvider.SettingsDictionary"/> from file. 
            </summary>
            <param name="filename">The name of the file to deserialize. </param>
            <returns>A FndLocalUserSettingsProvider.SettingsDictionary with all local user settings.</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndStorage.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes an XML document. 
            </summary>
            <param name="type">The type of the object to serialize. </param>
            <param name="filename">The name of the file to store. </param>
            <returns>The deserialized object. </returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndStorage.Deserialize(System.Type,System.String,System.Boolean)">
            <summary>
            Deserializes an XML document. 
            </summary>
            <param name="type">The type of the object to serialize. </param>
            <param name="filename">The name of the file to store. </param>
            <param name="useMachineStore">Use machine store other than user store. </param>
            <returns>The deserialized object. </returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndStorage.Deserialize(System.String,System.Boolean)">
            <summary>
            Deserializes a binary document.
            </summary>
            <param name="filename">The name of the file to store.</param>
            <param name="useMachineStore">Use machine store other than user store.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndStorage.ContainsFile(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.FndString">
            <summary>
            Foundation specific string utilites
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndString.IsEmpty(System.String)">
            <summary>
            Checks if the string is empty (null or "") by checking if the 
            object is null or the string has a zero length.
            This method handles uninitialized string variables and
            does the empty check with the best performance.
            IsEmpty() has a logical opposite in HasValue()
            </summary>
            <param name="value">The string to check</param>
            <returns>true if value is null or ""</returns>
        </member>
        <member name="M:Ifs.Fnd.FndString.HasValue(System.String)">
            <summary>
            Checks if the string has a value (not null and not "").
            This method handles uninitialized string variables and
            does the empty check with the best performance.
            HasValue() has a logical opposite in IsEmpty()
            </summary>
            <param name="value">The string to check</param>
            <returns>True if value is not null and not ""</returns>
        </member>
        <member name="M:Ifs.Fnd.FndString.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Compares two specified System.String objects, ignoring their case.
            </summary>
            <param name="first">The first System.String.</param>
            <param name="second">The second System.String.</param>
            <returns>True if they are equal</returns>
        </member>
        <member name="M:Ifs.Fnd.FndString.Split(System.String,System.String,System.String)">
            <summary>
            Splits a string to obtain sub strings inside a tag.
            </summary>
            <param name="value">string to be splitted</param>
            <param name="startTag">starting tag identifier</param>
            <param name="endTag">ending tag identifier</param>
            <returns>a <see cref="T:System.Collections.Specialized.StringCollection"/> object containing substrings within tags</returns>
        </member>
        <member name="M:Ifs.Fnd.FndString.Merge(System.Collections.Specialized.StringCollection,System.Collections.Specialized.StringCollection)">
            <summary>
            Merges two <see cref="T:System.Collections.Specialized.StringCollection"/> objects.
            </summary>
            <param name="str1">A <see cref="T:System.Collections.Specialized.StringCollection"/> object cotaining values to be merged with <paramref name="str2"/></param>
            <param name="str2">A <see cref="T:System.Collections.Specialized.StringCollection"/> object cotaining values to be merged with <paramref name="str1"/></param>
            <returns>A new <see cref="T:System.Collections.Specialized.StringCollection"/> object containing the merged values from <paramref name="str2"/> and <paramref name="str1"/> </returns>
            <remarks>If a value in one collection is present in the other collection too, only one entry is included in the output collection. That is duplicates are
            merged to form a single entry.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Atleast one of the parameters were null.</exception>
        </member>
        <member name="T:Ifs.Fnd.FndTraceSubCategoryId">
            <summary>
            List of SubCategories for tracing pupose
            </summary>
        </member>
        <member name="F:Ifs.Fnd.FndTraceSubCategoryId.Translation">
            <summary>
            Used for Translation related operations
            </summary>
        </member>
        <member name="F:Ifs.Fnd.FndTraceSubCategoryId.Dictionary">
            <summary>
            Used for Dictionary related operations
            </summary>
        </member>
        <member name="F:Ifs.Fnd.FndTraceSubCategoryId.DownloadGroup">
            <summary>
            Used for Clickonce download related operations
            </summary>
        </member>
        <member name="F:Ifs.Fnd.FndTraceSubCategoryId.MapSource">
            <summary>
            Used for MapSources (Vrtmap) related operations
            </summary>
        </member>
        <member name="F:Ifs.Fnd.FndTraceSubCategoryId.ChartMode">
            <summary>
            Used for ChartMode related operations
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndTrace">
            <summary>
            Trace functionality with static push/pull functionality through methods/event
            </summary>
            <remarks>
            This is used by the debugger in Ifs.Fnd.Diagnostics
            </remarks>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteBeforePLSQLInvoke(System.Object,System.String)">
            <summary>
            Write before PLSQL server invoke to trace
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteBeforePLSQLInvoke(System.Object)">
            <summary>
            Write before PLSQL server invoke to trace
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteBeforeServerInvoke(System.Object,System.String)">
            <summary>
            Write a before server invoke to trace
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteBeforeServerInvoke(System.Object)">
            <summary>
            Write a before server invoke to trace
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteAfterPLSQLInvoke(System.Object,System.String)">
            <summary>
            Write after PLSQL server invoke to trace
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteAfterPLSQLInvoke(System.Object)">
            <summary>
            Write after PLSQL server invoke to trace
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteAfterServerInvoke(System.Object,System.String)">
            <summary>
            Write an after server invoke to trace
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteAfterServerInvoke(System.Object)">
            <summary>
            Write an after server invoke to trace
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteHttpBeforeServerInvoke(System.Net.HttpWebRequest,System.Object)">
            <summary>
            Write Http headers and body before server invoke (request)
            </summary>
            <param name="webRequest">HttpWebRequest object</param>
            <param name="lastServerOutput">LastServerOutput object</param>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteHttpAfterServerInvoke(System.Net.HttpWebResponse,System.Object)">
            <summary>
            Write Http headers and body after server invoke (response)
            </summary>
            <param name="webResponse">HttpWebResponse object</param>
            <param name="lastServerOutput">lastServerOutput object</param>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteLine(System.String)">
            <summary>
            Write any message to trace. 
            This is picked up by the Explorer Debug Console.
            </summary>
            <param name="info">The message to distribute</param>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteLine(Ifs.Fnd.FndTraceSubCategoryId,System.String)">
            <summary>
            Write any message to trace. 
            This is picked up by the Explorer Debug Console.
            </summary>
            <param name="subCategoryId">A custom defined category that the caller can use for grouping in the Debug Console.</param>
            <param name="info">The message to distribute</param>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteLine(Ifs.Fnd.FndTraceSubCategoryId,System.String,System.TimeSpan)">
            <summary>
            Write any message to trace. 
            This is picked up by the Explorer Debug Console.
            </summary>
            <param name="subCategoryId">A custom defined category that the caller can use for grouping in the Debug Console.</param>
            <param name="info">The message to distribute</param>
            <param name="duration">The duration of the event</param>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteLine(System.String,System.String)">
            <summary>
            Write any message to trace. 
            This is picked up by the Explorer Debug Console.
            </summary>
            <param name="subcategory">A custom defined category that the caller can use for grouping in the Debug Console.</param>
            <param name="info">The message to distribute</param>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteLine(System.String,System.String,System.TimeSpan)">
            <summary>
            Write any message to trace. 
            This is picked up by the Explorer Debug Console.
            </summary>
            <param name="subcategory">A custom defined category that the caller can use for grouping in the Debug Console.</param>
            <param name="info">The message to distribute</param>
            <param name="duration">A timespan to show duration of the logged item. You have to calculate this yourself, and add it to the trace.</param>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteLine(System.String,System.TimeSpan)">
            <summary>
            Write any message to trace. 
            This is picked up by the Explorer Debug Console.
            </summary>
            <param name="info">The message to distribute</param>
            <param name="duration">A timespan to show duration of the logged item</param>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteDataRow(System.Object)">
            <summary>
            Write a data row to trace.
            This is picked up by the Explorer Debug Console.
            </summary>
            <param name="row">The FndDataRow to trace</param>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.WriteDataRow(System.String,System.Object)">
            <summary>
            Write a data row to trace.
            This is picked up by the Explorer Debug Console.
            </summary>
            <param name="subcategory">A custom defined category that the caller can use for grouping in the Debug Console.</param>
            <param name="row">The FndDataRow to trace</param>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.OnTraceEventBeforeInvoke(Ifs.Fnd.FndTraceEventArgs)">
            <summary>
            Raise the TraceEventBefordeInvoke
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.OnTraceEventAfterInvoke(Ifs.Fnd.FndTraceEventArgs)">
            <summary>
            Raise the TraceEventAfterInvoke event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.OnTraceEventClient(Ifs.Fnd.FndTraceEventArgs)">
            <summary>
            Raise the TraceEventClient event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.OnHttpTraceEventBeforeInvoke(Ifs.Fnd.FndHttpTraceEventArgs)">
            <summary>
            Raise the HttpTraceEventBeforeInvoke event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Ifs.Fnd.FndTrace.OnHttpTraceEventAfterInvoke(Ifs.Fnd.FndHttpTraceEventArgs)">
            <summary>
            raise the HttpTraceEventAfterInvoke event
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Ifs.Fnd.FndTrace.TraceEventBeforeInvoke">
            <summary>
            Occurs before any server method is invoked and is traced
            </summary>
        </member>
        <member name="E:Ifs.Fnd.FndTrace.TraceEventAfterInvoke">
            <summary>
            Occurs after any server method is invoked and is traced
            </summary>
        </member>
        <member name="E:Ifs.Fnd.FndTrace.TraceEventClient">
            <summary>
            Occurs after any client message is traced
            </summary>
        </member>
        <member name="E:Ifs.Fnd.FndTrace.HttpTraceEventBeforeInvoke">
            <summary>
            Occurs before any server method is invoked and is traced contains the htttp header data as well
            </summary>
        </member>
        <member name="E:Ifs.Fnd.FndTrace.HttpTraceEventAfterInvoke">
            <summary>
            Occurs after any client message is traced contains the htttp header data as well
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndTraceEventHandler">
            <summary>
            Represents the method that will handle the Trace event.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndCategoryType">
            <summary>
            Trace Category Type
            </summary>
        </member>
        <member name="F:Ifs.Fnd.FndCategoryType.ServerInvoke">
            <summary>
            Trace from Server Invokes
            </summary>
        </member>
        <member name="F:Ifs.Fnd.FndCategoryType.RWCFeatureMessage">
            <summary>
            Trace from RWC Features
            </summary>
        </member>
        <member name="F:Ifs.Fnd.FndCategoryType.APFFeatureMessage">
            <summary>
            Trace from APF Features
            </summary>
        </member>
        <member name="F:Ifs.Fnd.FndCategoryType.RWCFrameworkMessage">
            <summary>
            Trace from Client RWC Framework internals
            </summary>
        </member>
        <member name="F:Ifs.Fnd.FndCategoryType.APFFrameworkMessage">
            <summary>
            Trace from client APF Framework internals
            </summary>
        </member>
        <member name="F:Ifs.Fnd.FndCategoryType.DataRow">
            <summary>
            Trace a FndDataRow object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.FndCategoryType.PLSQLServerInvoke">
            <summary>
            Trace from FndPLSQLCommand Server Invokes
            </summary>
        </member>
        <member name="F:Ifs.Fnd.FndCategoryType.TranslationMessage">
            <summary>
            Trace of Translation request
            </summary>
        </member>
        <member name="T:Ifs.Fnd.TranslationSource">
            <summary>
            The source of the translations
            </summary>
        </member>
        <member name="F:Ifs.Fnd.TranslationSource.Server">
            <summary>
            Translation was fetched from the server.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.TranslationSource.Cache">
            <summary>
            Translation was fetched from the client's term cache.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.TranslationSource.ProgText">
            <summary>
            No translation was fetched; ProgText was used instead.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.TranslationSource.Unknown">
            <summary>
            Source of translation is unknown.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.TranslationTraceType">
            <summary>
            The type of the translations trace being performed.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.TranslationTraceType.Term">
            <summary>
            A term translation is fetched of applied.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.TranslationTraceType.WhatsThis">
            <summary>
            A What's This (usage definition) text is fetched or applied.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.TranslationTraceType.General">
            <summary>
            A general trace message relating to translations.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.TranslationsTraceEventInfo">
            <summary>
            Contains additional information relating to application of Translations.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.TranslationsTraceEventInfo.#ctor(System.String,System.String,System.String,System.String,Ifs.Fnd.TranslationSource)">
            <summary>
            Create a new instance of TranslationsTraceEventInfo.
            </summary>
            <param name="path">The path of the Term</param>
            <param name="progText">The original text specified in code</param>
            <param name="translated">The translated text or fallback text applied</param>
            <param name="termID">The TermID of the applied Term</param>
            <param name="translationSource">The source of the translated text.</param>
        </member>
        <member name="M:Ifs.Fnd.TranslationsTraceEventInfo.#ctor(System.String)">
            <summary>
            Create a new instance of TranslationsTraceEventInfo.
            </summary>
            <param name="path">The path of the Term</param>
        </member>
        <member name="M:Ifs.Fnd.TranslationsTraceEventInfo.ToString">
            <summary>
            Returns a basic string representation of this object, of the format
            ProgText->Translation (Path)
            </summary>
            <returns>a string representation of this object</returns>
        </member>
        <member name="M:Ifs.Fnd.TranslationsTraceEventInfo.ToLongString">
            <summary>
            Returns a detailed string representation of this object, of the format
            TermID:ProgText->Translation (Path)
            </summary>
            <returns>a string representation of this object</returns>
        </member>
        <member name="P:Ifs.Fnd.TranslationsTraceEventInfo.Path">
            <summary>
            The Path of the Term
            </summary>
        </member>
        <member name="P:Ifs.Fnd.TranslationsTraceEventInfo.ProgText">
            <summary>
            The original text specified in code
            </summary>
        </member>
        <member name="P:Ifs.Fnd.TranslationsTraceEventInfo.Translated">
            <summary>
            The Translated text or fallback text applied
            </summary>
        </member>
        <member name="P:Ifs.Fnd.TranslationsTraceEventInfo.TermID">
            <summary>
            The Term ID of the Term applied
            </summary>
        </member>
        <member name="P:Ifs.Fnd.TranslationsTraceEventInfo.TranslationSource">
            <summary>
            The source of the translation
            </summary>
        </member>
        <member name="P:Ifs.Fnd.TranslationsTraceEventInfo.TranslationSourceName">
            <summary>
            The name of the source of the translation
            </summary>
        </member>
        <member name="P:Ifs.Fnd.TranslationsTraceEventInfo.TranslationTraceType">
            <summary>
            The type of the trace
            </summary>
        </member>
        <member name="P:Ifs.Fnd.TranslationsTraceEventInfo.TranslationTraceTypeName">
            <summary>
            The name of the type of trace
            </summary>
        </member>
        <member name="P:Ifs.Fnd.TranslationsTraceEventInfo.Module">
            <summary>
            Get or set the Module for this translation
            </summary>
        </member>
        <member name="P:Ifs.Fnd.TranslationsTraceEventInfo.Type">
            <summary>
            Get or set the Type of this translation
            </summary>
        </member>
        <member name="P:Ifs.Fnd.TranslationsTraceEventInfo.SubType">
            <summary>
            Get or set the SubType of this translation
            </summary>
        </member>
        <member name="P:Ifs.Fnd.TranslationsTraceEventInfo.UsageDefinitionExcluded">
            <summary>
            Get or set whether a usage definition is specifically excluded or not
            </summary>
        </member>
        <member name="P:Ifs.Fnd.TranslationsTraceEventInfo.UsageDefinition">
            <summary>
            Get or set the usage definition
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndTraceEventArgs">
            <summary>
            Arguments used to distribute a trace through FndTrace.TraceEvent
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndTraceEventArgs.#ctor(Ifs.Fnd.FndCategoryType,System.String,System.Object,System.String,System.Diagnostics.StackTrace)">
            <summary>
            Constructs an FndTraceEventArgs
            </summary>
            <param name="type">Trace Category Type</param>
            <param name="subcategory">Arbitrary subcategory type</param>
            <param name="lastServerOutput">Output from last server call </param>
            <param name="info">Info text</param>
            <param name="stackTrace">Stack trace when trace was called</param>
        </member>
        <member name="M:Ifs.Fnd.FndTraceEventArgs.#ctor(Ifs.Fnd.FndCategoryType,System.String,System.Object,System.String,System.Diagnostics.StackTrace,System.Object)">
            <summary>
            Constructs an FndTraceEventArgs
            </summary>
            <param name="type">Trace Category Type</param>
            <param name="subcategory">Arbitrary subcategory type</param>
            <param name="lastServerOutput">Output from last server call </param>
            <param name="info">Info text</param>
            <param name="stackTrace">Stack trace when trace was called</param>
            <param name="dataRow">A FndDataRow object to trace</param>
        </member>
        <member name="M:Ifs.Fnd.FndTraceEventArgs.#ctor(Ifs.Fnd.FndCategoryType,System.String,System.String,System.Diagnostics.StackTrace)">
            <summary>
            Constructs an FndTraceEventArgs with some default settings. Intended for
            trace where no server calls have been made.
            </summary>
            <param name="type">Trace Category Type</param>
            <param name="subcategory">Arbitrary subcategory type</param>
            <param name="info">Info text</param>
            <param name="stackTrace">Stack trace when trace was called</param>
        </member>
        <member name="M:Ifs.Fnd.FndTraceEventArgs.#ctor(Ifs.Fnd.FndCategoryType,System.String,System.String,System.Diagnostics.StackTrace,System.TimeSpan)">
            <summary>
            Constructs an FndTraceEventArgs with some default settings. Intended for
            trace where no server calls have been made.
            </summary>
            <param name="type">Trace Category Type</param>
            <param name="subcategory">Arbitrary subcategory type</param>
            <param name="info">Info text</param>
            <param name="stackTrace">Stack trace when trace was called</param>
            <param name="duration">A timespan object that can be used to show a duration</param>
        </member>
        <member name="M:Ifs.Fnd.FndTraceEventArgs.#ctor(Ifs.Fnd.FndCategoryType,System.String,System.Object,System.String,System.Diagnostics.StackTrace,System.Object,Ifs.Fnd.TranslationsTraceEventInfo)">
            <summary>
            Constructs an FndTraceEventArgs with some default settings. Intended for
            trace where no server calls have been made.
            </summary>
            <param name="type">Trace Category Type</param>
            <param name="subcategory">Arbitrary subcategory type</param>
            <param name="lastServerOutput">Output from last server call</param>
            <param name="info">Info text</param>
            <param name="stackTrace">Stack trace when trace was called</param>
            <param name="dataRow">A FndDataRow object to trace</param>
            <param name="translationInfo">Additional information about the Translation applied</param>
        </member>
        <member name="P:Ifs.Fnd.FndTraceEventArgs.Category">
            <summary>
            Type of event. 
            The framework will decide this category by analyzing where to call came from.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndTraceEventArgs.Subcategory">
            <summary>
            A custom defined category that the caller can use for grouping.
            Can have any string value.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndTraceEventArgs.Info">
            <summary>
            The message
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndTraceEventArgs.LastServerOutput">
            <summary>
            Last server output for server invocations
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndTraceEventArgs.StackTrace">
            <summary>
            StackTrace when the trace was called
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndTraceEventArgs.ThreadInfo">
            <summary>
            The name of the thread who created this message.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndTraceEventArgs.DataRow">
            <summary>
            A FndDataRow object
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndTraceEventArgs.TranslationTraceInfo">
            <summary>
            Additional information about the Translation applied.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndTraceEventArgs.Duration">
            <summary>
            A timespan object that can be used to show a duration
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndUrlAddress">
            <summary>
            Url address used to parse, format and modify urls with parameters
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.FndUrlAddress.ExternalUrlParamName">
            <summary>
            The parameter name used for exposing IFS URL's externally.
            e.g.: http://cmbgse8:58080/client/runtime/Ifs.Fnd.Explorer.application?url=ifsapf:frmCustomerOrder, url=ifswin:..., url=ifsweb:...
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.FndUrlAddress.FndUriSchemeFeature">
            <summary>
            Defines the Uri for IFS Enterprise Explorer Features ("ifswin")
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.FndUrlAddress.FndUriSchemeDelimiter">
            <summary>
            Defines the delimiter for ifswin uri scheme (":")
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.FndUrlAddress.FndUrlIfswinBlank">
            <summary>
            Defines the Uri for the blank ifswin address ("ifswin:blank")
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.FndUrlAddress.FndUrlIfswinStartAlias">
            <summary>
            Defines the Uri alias for the ifswin start page address ("ifswin:start")
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.FndUrlAddress.FndUrlIfswinWelcomeAlias">
            <summary>
            Defines the Uri alias for the ifswin welcome page address ("ifswin:welcome")
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.FndUrlAddress.FndUrlIfswinStartControlName">
            <summary>
            Defines the control name for the Startpage
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.FndUrlAddress.FndUrlIfswinCompositePageRendererControlName">
            <summary>
            Defines the control name for the Composite Pages Renderer
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.FndUrlAddress.FndUrlIfswinCompositePageRendererPageIdParameterName">
            <summary>
            Defines the parameter name for the Composite Pages Renderer page id
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.FndUrlAddress.FndUriSchemeApplicationForms">
            <summary>
            Defines the Uri for IFS Enterprise Explorer Application Forms ("ifsapf")
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.FndUrlAddress.FndUriSchemeSecureWebPrefix">
            <summary>
            Defines the prefix Uri for IFS Enterprise Explorer hosted secured web pages ("ifsweb:secured/")
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Core.FndUrlAddress.RawUrlString">
            <summary>
            The string used to construct this instance of FndUrlAddress.
            </summary>      
        </member>
        <member name="F:Ifs.Fnd.Core.FndUrlAddress.FndUrlIfswinStartFullName">
            <summary>
            Defines the control name for the Startpage
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddress.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="url">Start URL to load at construction</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddress.Clone">
            <summary>
            Returns an FndUrlAddress object that is identical to this instance.  
            </summary>
            <returns>A FndUrlAddress object that is a copy of this instance.</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddress.Load(System.String)">
            <summary>
            Load an url from a string
            </summary>
            <param name="url">The url in string format</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddress.TryParseUrl(System.String)">
            <summary>
            Try to parse url before creating it. 
            </summary>
            <param name="url">The url represented as a string. </param>
            <returns>True if parsing success, otherwise false.</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddress.SetParameter(System.String,System.String)">
            <summary>
            Set a parameter value, if the parameter doesn't exist it is created
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="value">New value of the parameter</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddress.GetParameter(System.String,System.String)">
            <summary>
            Get a value from a parameter
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="defaultValue">Default value if the paramter doesn't exist</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddress.Format">
            <summary>
            Format the url to a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddress.PrepareUrlString(System.String)">
            <summary>
            Prepare url string. Replaces "+" symbol by "%20"(space).
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddress.ToString">
            <summary>
            Return the url and its parameters as a string
            </summary>
            <returns>The string of parameters</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddress.GetExternalUrl(System.String,System.String)">
            <summary>
            Returns an Url that can be used in external programs
            such as mails, web pages etc. Escapes special characters 
            like " ", # etc to %020 etc.
            </summary>
            <param name="activationUri">The system base url pointing out the application</param>
            <param name="internalUrlAddress">The internal url address</param>
            <returns>The escaped external address</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddress.GetExternalUrl(System.String,Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Returns an Url that can be used in external programs
            such as mails, web pages etc. Escapes special characters 
            like " ", # etc to %020 etc.
            </summary>
            <param name="activationUri">The system base url pointing out the application</param>
            <param name="internalUrlAddress">The internal url address</param>
            <returns>The escaped external address</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddress.ParseExternalUrl(System.String,System.String)">
            <summary>
            Parse and unescapes an url from an external program and strips the activation uri
            and returns the internal url only
            </summary>
            <param name="activationUri">The system base url pointing out the application</param>
            <param name="externalUrl">The escaped external url</param>
            <returns>The internal url</returns>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlAddress.FndUrlIfswinStartBase">
            <summary>
            Defines the Uri for the ifswin start page address base ("ifswin:Ifs.Fnd.StartPage.StartPage")
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlAddress.FndUrlIfswinStart">
            <summary>
            Defines the Uri for the ifswin start page address ("ifswin:Ifs.Fnd.StartPage.StartPage?NavEntryKey={0}")
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlAddress.FndUrlIfswinCompositePageRendererBase">
            <summary>
            Defines the Uri for the ifswin  Composite Pages Renderer address base ("ifswin:Ifs.Fnd.CompositePageRenderer.PageContainer")
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlAddress.FndUrlIfswinWelcome">
            <summary>
            Defines the Uri for the ifswin welcome page address ("ifswin:welcome")
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlAddress.Scheme">
            <summary>
            Return the scheme of the url, example http
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlAddress.LocalPath">
            <summary>
            Return the local path of the url
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlAddress.Tag">
            <summary>
            Gets or sets the object that contains data about the FndUrlAddress.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlAddress.BaseUrl">
            <summary>
            Gets the Scheme, Authority (including Host) and Path parts of the url
            Example: 
            For the URL 
            "http://myuser:mypassword@deployserver.company.com:80/ifs/app/Ifs.Explorer.Starter.exe?ifswin:Ifs.Application.HR.TimeReporting?id=123"
            this will return
            "http://myuser:mypassword@deployserver.company.com"
            (Note: If the port number is the same as the default port for the used scheme, it will be left out.)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlAddress.Bookmark">
            <summary>
            Gets the bookmark part of the url
            Example: 
            For the URL 
            "http://www.ifsworld.com#bookmark1"
            this will return
            "bookmark1"
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlAddress.HasBookmark">
            <summary>
            True if the FndUrlAddress has a valid bookmark part
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlAddress.Parameters">
            <summary>
            Return the collection of all URL parameters for traversion
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndUrlAddressCollection">
            <summary>
            Collection of URL addresses.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddressCollection.Add(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Add a address to the list.
            </summary>
            <param name="value">FndUrlAddress to add</param>
            <returns>Address</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddressCollection.CopyTo(Ifs.Fnd.Core.FndUrlAddress[],System.Int32)">
            <summary>
            Copies a range of elements from the System.Collections.ArrayList to a compatible one-dimensional System.Array, starting at the specified index of the target array.  
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ArrayList. The System.Array must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddressCollection.CopyTo(Ifs.Fnd.Core.FndUrlAddress[])">
            <summary>
            Copies the entire System.Collections.ArrayList to a compatible one-dimensional System.Array, starting at the beginning of the target array. 
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ArrayList. The System.Array must have zero-based indexing.
            </param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddressCollection.IndexOf(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Zero based index of a FndUrlAddress in the list
            </summary>
            <param name="value">FndUrlAddress to get index of</param>
            <returns>Index</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddressCollection.Insert(System.Int32,Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Insert an FndUrlAddress at a specific index.
            </summary>
            <param name="index">Index to insert at</param>
            <param name="value">FndUrlAddress to insert</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddressCollection.Remove(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Remove a specific FndUrlAddress from the Collection
            </summary>
            <param name="value">FndUrlAddress to remove</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlAddressCollection.Contains(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Check if a specific FndUrlAddress is contained in the collection.
            </summary>
            <param name="value">FndUrlAddress to check</param>
            <returns>True if address is contained in list. False otherwise</returns>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlAddressCollection.Item(System.Int32)">
            <summary>
            FndUrlAddress by zero based integer as index.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndUrlParameterCollection">
            <summary>
            Collection of URL parameters within an URL.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.Add(Ifs.Fnd.Core.FndUrlParameter)">
            <summary>
            Add a parameter to the list.
            </summary>
            <param name="value">FndUrlParameter to add</param>
            <returns>Value parameter</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.Add(System.String,System.String)">
            <summary>
            Add a parameter to the list.
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="parameterValue">Parameter value</param>
            <returns>The created FndUrlParameter</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.Add(System.String)">
            <summary>
            Add a parameter to the list.
            </summary>
            <param name="formattedValue">A formatted name/value string (param=paramvalue)</param>
            <returns>The created FndUrlParameter</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.Load(System.String)">
            <summary>
            This Load method is used to load a string with parameters at once.
            </summary>
            <param name="parameterString"></param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.CopyTo(Ifs.Fnd.Core.FndUrlParameter[],System.Int32)">
            <summary>
            Copies a range of elements from the System.Collections.ArrayList to a compatible one-dimensional System.Array, starting at the specified index of the target array.  
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ArrayList. The System.Array must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.CopyTo(Ifs.Fnd.Core.FndUrlParameter[])">
            <summary>
            Copies the entire System.Collections.ArrayList to a compatible one-dimensional System.Array, starting at the beginning of the target array. 
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ArrayList. The System.Array must have zero-based indexing.
            </param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.IndexOf(Ifs.Fnd.Core.FndUrlParameter)">
            <summary>
            Zero based index of a FndUrlParameter in the list
            </summary>
            <param name="value">FndUrlParameter to get index of</param>
            <returns>Index</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.Insert(System.Int32,Ifs.Fnd.Core.FndUrlParameter)">
            <summary>
            Insert an FndUrlParameter at a specific index.
            </summary>
            <param name="index">Index to insert at</param>
            <param name="value">FndUrlParameter to insert</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.Remove(Ifs.Fnd.Core.FndUrlParameter)">
            <summary>
            Remove a specific FndUrlParameter from the Collection
            </summary>
            <param name="value">FndUrlParameter to remove</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.Remove(System.String)">
            <summary>
            Remove a specific FndUrlParameter from the Collection
            Name is case-insensitive.
            </summary>
            <param name="name">Name of the FndUrlParameter to remove</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.Contains(Ifs.Fnd.Core.FndUrlParameter)">
            <summary>
            Check if a specific FndUrlParameter is contained in the collection.
            </summary>
            <param name="value">FndUrlParameter to check</param>
            <returns>True if parameter is contained in list. False otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.Contains(System.String)">
            <summary>
            Check if a specific FndUrlParameter is contained in the collection.
            Name is case-insensitive.
            </summary>
            <param name="name">Name of the FndUrlParameter to check</param>
            <returns>True if parameter is contained in list. False otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.ToString">
            <summary>
            Gets all parameters with their values as a string
            </summary>
            <returns>The string of parameters</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Validate input on insert
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Validate input on remove
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Validate input on set
            </summary>
            <param name="index"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameterCollection.OnValidate(System.Object)">
            <summary>
            Validate input
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlParameterCollection.HasUnsupportedParameters">
            <summary>
            Indicates whether certain parameters were specified more than once.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlParameterCollection.Item(System.String)">
            <summary>
            FndUrlParameter by parameter name as index.
            Name is case-insensitive.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlParameterCollection.Item(System.Int32)">
            <summary>
            FndUrlParameter by zero based integer as index.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndUrlParameter">
            <summary>
            Represents one URL parameter with a parameter name and parameter value pair.
            </summary>
            <remarks>
            Parameter name is mandatory.
            Parameter value and its formattings
            
            Name   Value    Formatted value
            -----  -----    ---------------
            Foo    "Bar"     Foo=Bar
            Foo    ""        Foo=
            Foo    {null}    Foo
            Foo    "=Bar"    Foo=%3DBar
            </remarks>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameter.#ctor(System.String,System.String)">
            <summary>
            Construct an FndUrlParameter instance from its basic parts
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="parameterValue">Parameter value</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameter.#ctor(System.String)">
            <summary>
            Construct an FndUrlParameter instance using a formatted value string
            </summary>
            <param name="formattedValue">A formatted name/value string (param=paramvalue)</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameter.#ctor(Ifs.Fnd.Core.FndUrlParameter)">
            <summary>
            Construct an FndUrlParameter instance from another FndUrlParameter instance
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameter.Clone">
            <summary>
            Clone this FndUrlParameter instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameter.UrlEncode(System.String)">
            <summary>
            Encodes a string for safe transportation as an URL parameter
            </summary>
            <param name="value">A string to be encoded</param>
            <returns>Encoded string</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameter.UrlDecode(System.String)">
            <summary>
            Decodes encoded by UrlEncode. 
            <remarks>See UrlEncode for details about encoding.
            </remarks>
            </summary>
            <param name="encodedString">Encoded string</param>
            <returns>Decoded string</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUrlParameter.ToString">
            <summary>
            Gets the parameter as a string
            </summary>
            <returns>ParameterName=ParameterValue</returns>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlParameter.ParameterName">
            <summary>
            URL Parameter name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUrlParameter.ParameterValue">
            <summary>
            Parameter value (can be null)
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndUserSettings">
            <summary>
            Utility class to store and retreive user settings data,
            like windows positions etc.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUserSettings.LoadWindowPosition(System.Windows.Forms.Form)">
            <summary>
            Restores saved window position, state and size
            </summary>
            <param name="f">The window to affect</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUserSettings.LoadWindowPosition(System.Windows.Forms.Form,System.String)">
            <summary>
            Restores saved window position, state and size given the hash code for ApplicationExplorer form per user
            </summary>
            <param name="f">The window to affect</param>
            <param name="hashCodeForApplicationExplorerForm">The hash code for ApplicationExplorer form per user</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUserSettings.SaveWindowPosition(System.Windows.Forms.Form)">
            <summary>
            Save window position, state and size
            </summary>
            <param name="f">The window to save</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUserSettings.SaveWindowPosition(System.Windows.Forms.Form,System.String)">
            <summary>
            Save window position, state and size given the hash code for ApplicationExplorer form per user
            </summary>
            <param name="f">The window to save</param>
            <param name="hashCodeForApplicationExplorerForm">The hash code for ApplicationExplorer form per user</param>
        </member>
        <member name="T:Ifs.Fnd.Core.FndUserSettings.SavedForm">
            <summary>
            A small class for holding windowstate, location and clientsize of a form. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndUserSettings.SavedForm.#ctor">
            <summary>
            Constructor. Initializes a new instance of SavedForm. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUserSettings.SavedForm.ClientSize">
            <summary>
            Gets or sets the clientsize of the form. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUserSettings.SavedForm.Location">
            <summary>
            Gets or sets the location of the form. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndUserSettings.SavedForm.WindowState">
            <summary>
            Gets or sets the windowstate of the form.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.FndValidationException">
            <summary>
            An expected exception caused by data validation
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndValidationException.#ctor">
            <summary>
            Initializes a new instance of the FndValidationException class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.FndValidationException.#ctor(System.String)">
            <summary>
            Construct an FndValidationException
            </summary>
            <param name="message">Validation error message</param>
        </member>
        <member name="M:Ifs.Fnd.FndValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Construct an FndValidationException
            </summary>
            <param name="message">Validation error message</param>
            <param name="innerException">Inner exception caught to raise this exception</param>
        </member>
        <member name="M:Ifs.Fnd.FndValidationException.#ctor(System.String,System.String)">
            <summary>
            Construct an FndValidationException
            </summary>
            <param name="message">Validation error message</param>
            <param name="record">Returning record that contains validaiton errors.</param>
        </member>
        <member name="M:Ifs.Fnd.FndValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Ifs.Fnd.FndValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:Ifs.Fnd.FndValidationException.Icon">
            <summary>
            Dialog Icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndValidationException.MessageBoxIcon">
            <summary>
            MessageBox icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndValidationException.ValidatedRecord">
            <summary>
            Gets the record that contains the validation errors that caused the exception to be thrown.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.FndValidationException.Caption">
            <summary>
            Dialog Caption
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Windows.Forms.FndLocalizedComponent">
            <summary>
            Subclass of System.ComponentModel.Component which adds IFS specific
            resource management.
            </summary>    
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndLocalizedComponent.#ctor">
            <summary>
            Initializes a new instance of FndLocalizedComponent.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndLocalizedComponent.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of FndLocalizedComponent.
            </summary>
            <param name="container">component collection of parent</param>
        </member>
        <member name="T:Ifs.Fnd.Windows.Forms.FndLocalizedControl">
            <summary>
            Subclass of System.Windows.Forms.Control which adds IFS specific
            resource management.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndLocalizedControl.#ctor">
            <summary>
            Initializes a new instance of FndLocalizedControl.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Windows.Forms.FndLocalizedLinkLabel">
            <summary>
            Subclass of System.Windows.Forms.LinkLabel which adds IFS specific
            resource management.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndLocalizedLinkLabel.#ctor">
            <summary>
            Initializes a new instance of FndLocalizedControl.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Windows.Forms.FndLocalizedUserControl">
            <summary>
            Subclass of System.Windows.Forms.UserControl which adds IFS specific
            resource management.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndLocalizedUserControl.#ctor">
            <summary>
            Initializes a new instance of FndLocalizedUserControl. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Windows.Forms.FndLocalizedUserControl.CreateParams">
            <summary>
            Overrides the CreateParams property to ensure that the
            correct Windows style is applied when the user control is
            hosted in a RTL environment.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.Logging.FndSystemInfo">
            <summary>
            Hold system information
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.FndSystemInfo.CurrentVersionAsString">
            <summary>
            Returns the version as a comma separated string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndSystemInfo.CurrentVersion">
            <summary>
            CurrentVersion
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndSystemInfo.ActivationUri">
            <summary>
            Gets the URL used to launch the deployment manifest of the application.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndSystemInfo.ConnectionString">
            <summary>
            The connection string to IFS Extended Server
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndSystemInfo.SystemBaseUrl">
            <summary>
            The base URL to access the system externally. Should currently point out
            a deploy server holding the Ifs.Fnd.Explorer.Start.exe
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndSystemInfo.IsNetworkDeployed">
            <summary>
            Gets a value indicating whether the current application is a ClickOnce application.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndSystemInfo.CodeBase">
            <summary>
            Application codebase folder. When debugging this is not same folder as where the executable is located.
            In runtime this folder should match the location of the client executable.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.FndSystemInfo.WindowsUser">
            <summary>
            Application user's directory identity. Example: EUROPE\ASMYTHE 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.Logging.IFndLogWriter">
            <summary>
            Interface for a log writer
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.Logging.IFndLogWriter.Write(System.Exception[],Ifs.Fnd.Core.Logging.FndSystemInfo,System.String@)">
            <summary>
            Method called when logs are to be written.
            </summary>
            <param name="exceptions"></param>
            <param name="info"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Core.Logging.IFndLogWriter.Param">
            <summary>
            Common property for writers (used for filename/webservice path/connectionstrings etc).
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.OrderedDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs that are ordered independently of the key and value.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary</typeparam>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.#ctor(Ifs.Fnd.Core.OrderedDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class.
            </summary>
            <param name="copy">The initial dictionary to copy</param>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class using the specified initial capacity.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0</exception>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">IEqualityComparer&lt;TKey&gt;</see> to use when comparing keys, or <null/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1">EqualityComparer&lt;TKey&gt;</see> for the type of the key.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class using the specified initial capacity and comparer.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">IEqualityComparer&lt;TKey&gt;</see> to use when comparing keys, or <null/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1">EqualityComparer&lt;TKey&gt;</see> for the type of the key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0</exception>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.ConvertToKeyType(System.Object)">
            <summary>
            Converts the object passed as a key to the key type of the dictionary
            </summary>
            <param name="keyObject">The key object to check</param>
            <returns>The key object, cast as the key type of the dictionary</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyObject"/> is <null/>.</exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="keyObject"/>.</exception>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.ConvertToValueType(System.Object)">
            <summary>
            Converts the object passed as a value to the value type of the dictionary
            </summary>
            <param name="value">The object to convert to the value type of the dictionary</param>
            <returns>The value object, converted to the value type of the dictionary</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <null/>, and the value type of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The value type of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.</exception>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts a new entry into the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the specified key and value at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. The value can be <null/> if the type of the values in the dictionary is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is greater than <see cref="P:Ifs.Fnd.Core.OrderedDictionary`2.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/>.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</exception>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#Specialized#IOrderedDictionary#Insert(System.Int32,System.Object,System.Object)">
            <summary>
            Inserts a new entry into the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the specified key and value at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. The value can be <null/> if the type of the values in the dictionary is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is greater than <see cref="P:Ifs.Fnd.Core.OrderedDictionary`2.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/>.<br/>
            -or-<br/>
            <paramref name="value"/> is <null/>, and the value type of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="key"/>.<br/>
            -or-<br/>
            The value type of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.<br/>
            -or-<br/>
            An element with the same key already exists in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</exception>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the entry at the specified index from the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <param name="index">The zero-based index of the entry to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            index is equal to or greater than <see cref="P:Ifs.Fnd.Core.OrderedDictionary`2.Count"/>.</exception>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <remarks>A key cannot be <null/>, but a value can be.
            <para>You can also use the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property to add new elements by setting the value of a key that does not exist in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection; however, if the specified key already exists in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>, setting the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property overwrites the old value. In contrast, the <see cref="M:Add"/> method does not modify existing elements.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></exception>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <returns>The index of the newly added entry</returns>
            <remarks>A key cannot be <null/>, but a value can be.
            <para>You can also use the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property to add new elements by setting the value of a key that does not exist in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection; however, if the specified key already exists in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>, setting the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property overwrites the old value. In contrast, the <see cref="M:Add"/> method does not modify existing elements.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></exception>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/>.<br/>
            -or-<br/>
            <paramref name="value"/> is <null/>, and the value type of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="key"/>.<br/>
            -or-<br/>
            The value type of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.</exception>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <remarks>The capacity is not changed as a result of calling this method.</remarks>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</param>
            <returns><see langword="true"/> if the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</param>
            <returns><see langword="true"/> if the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="key"/>.</exception>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.IndexOfKey(`0)">
            <summary>
            Returns the zero-based index of the specified key in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>
            </summary>
            <param name="key">The key to locate in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></param>
            <returns>The zero-based index of <paramref name="key"/>, if <paramref name="key"/> is found in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>; otherwise, -1</returns>
            <remarks>This method performs a linear search; therefore it has a cost of O(n) at worst.</remarks>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the entry with the specified key from the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <param name="key">The key of the entry to remove</param>
            <returns><see langword="true"/> if the key was found and the corresponding element was removed; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the entry with the specified key from the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <param name="key">The key of the entry to remove</param>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> elements to a one-dimensional Array object at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> object that is the destination of the <see cref="T:KeyValuePair`2&gt;"/> objects copied from the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <remarks>The <see cref="M:CopyTo"/> method preserves the order of the elements in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></remarks>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of <paramref name="value"/>. This parameter can be passed uninitialized.</param>
            <returns><see langword="true"/> if the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified value to the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> with the specified key.
            </summary>
            <param name="item">The <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> structure representing the key and value to add to the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> contains a specific key and value.
            </summary>
            <param name="item">The <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> structure to locate in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> to an array of type <see cref="T:KeyValuePair`2&gt;"/>, starting at the specified index.
            </summary>
            <param name="array">The one-dimensional array of type <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> that is the destination of the <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> elements copied from the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes a key and value from the dictionary.
            </summary>
            <param name="item">The <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> structure representing the key and value to remove from the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</param>
            <returns><see langword="true"/> if the key and value represented by <paramref name="item"/> is successfully found and removed; otherwise, <see langword="false"/>. This method returns <see langword="false"/> if <paramref name="item"/> is not found in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</returns>
        </member>
        <member name="P:Ifs.Fnd.Core.OrderedDictionary`2.Dictionary">
            <summary>
            Gets the dictionary object that stores the keys and values
            </summary>
            <value>The dictionary object that stores the keys and values for the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></value>
            <remarks>Accessing this property will create the dictionary object if necessary</remarks>
        </member>
        <member name="P:Ifs.Fnd.Core.OrderedDictionary`2.List">
            <summary>
            Gets the list object that stores the key/value pairs.
            </summary>
            <value>The list object that stores the key/value pairs for the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></value>
            <remarks>Accessing this property will create the list object if necessary.</remarks>
        </member>
        <member name="P:Ifs.Fnd.Core.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the item at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            index is equal to or greater than <see cref="P:Ifs.Fnd.Core.OrderedDictionary`2.Count"/>.</exception>
        </member>
        <member name="P:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#Specialized#IOrderedDictionary#Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the item at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            index is equal to or greater than <see cref="P:Ifs.Fnd.Core.OrderedDictionary`2.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference, and the value type of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The value type of the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.</exception>
        </member>
        <member name="P:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> has a fixed size.
            </summary>
            <value><see langword="true"/> if the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> has a fixed size; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
        </member>
        <member name="P:Ifs.Fnd.Core.OrderedDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection is read-only.
            </summary>
            <value><see langword="true"/> if the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is read-only; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
            <remarks>
            A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modification of the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
            </remarks>
        </member>
        <member name="P:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the keys in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> object containing the keys in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</value>
            <remarks>The returned <see cref="T:System.Collections.ICollection"/> object is not a static copy; instead, the collection refers back to the keys in the original <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. Therefore, changes to the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the key collection.</remarks>
        </member>
        <member name="P:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</value>
            <remarks>The returned <see cref="T:System.Collections.ICollection"/> object is not a static copy; instead, the <see cref="T:System.Collections.ICollection"/> refers back to the values in the original <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection. Therefore, changes to the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the <see cref="T:System.Collections.ICollection"/>.</remarks>
        </member>
        <member name="P:Ifs.Fnd.Core.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key. If the specified key is not found, attempting to get it returns <null/>, and attempting to set it creates a new element using the specified key.</value>
        </member>
        <member name="P:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key. If the specified key is not found, attempting to get it returns <null/>, and attempting to set it creates a new element using the specified key.</value>
        </member>
        <member name="P:Ifs.Fnd.Core.OrderedDictionary`2.Count">
            <summary>
            Gets the number of key/values pairs contained in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <value>The number of key/value pairs contained in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</value>
        </member>
        <member name="P:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> object is synchronized (thread-safe).
            </summary>
            <value>This method always returns false.</value>
        </member>
        <member name="P:Ifs.Fnd.Core.OrderedDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> object.
            </summary>
            <value>An object that can be used to synchronize access to the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> object.</value>
        </member>
        <member name="P:Ifs.Fnd.Core.OrderedDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection{TKey}">ICollection&lt;TKey&gt;</see> object containing the keys in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection{TKey}">ICollection&lt;TKey&gt;</see> object containing the keys in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</value>
            <remarks>The returned <see cref="T:System.Collections.Generic.ICollection{TKey}">ICollection&lt;TKey&gt;</see> object is not a static copy; instead, the collection refers back to the keys in the original <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. Therefore, changes to the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the key collection.</remarks>
        </member>
        <member name="P:Ifs.Fnd.Core.OrderedDictionary`2.Values">
            <summary>
            Gets an <see cref="T:ICollection{TValue}">ICollection&lt;TValue&gt;</see> object containing the values in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.
            </summary>
            <value>An <see cref="T:ICollection{TValue}">ICollection&lt;TValue&gt;</see> object containing the values in the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</value>
            <remarks>The returned <see cref="T:ICollection{TValue}">ICollection&lt;TKey&gt;</see> object is not a static copy; instead, the collection refers back to the values in the original <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. Therefore, changes to the <see cref="T:Ifs.Fnd.Core.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the value collection.</remarks>
        </member>
        <member name="T:Ifs.Fnd.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.Abort">
            <summary>
              Looks up a localized string similar to &amp;Abort.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.AuthenticationFailure">
            <summary>
              Looks up a localized string similar to Authentication Failure.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.CreateDumpInProgress">
            <summary>
              Looks up a localized string similar to Please wait while the process is written to the file....
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.DumpFileCreated">
            <summary>
              Looks up a localized string similar to Dump file created at:\n{0}.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.Error">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.ErrorToDeleteFile">
            <summary>
              Looks up a localized string similar to Error when trying to delete: {0} Ex: {1}.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.FailedToCreateDump">
            <summary>
              Looks up a localized string similar to Failed to create dump file: \&quot;{0}\&quot;.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.HideDetail">
            <summary>
              Looks up a localized string similar to Hide &amp;Detail.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.HideDetails">
            <summary>
              Looks up a localized string similar to Hide details.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.IFSApplication">
            <summary>
              Looks up a localized string similar to IFS Applications.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.Ignore">
            <summary>
              Looks up a localized string similar to &amp;Ignore.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.Information">
            <summary>
              Looks up a localized string similar to Information.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.LicenseError">
            <summary>
              Looks up a localized string similar to License Error.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.MB_Error">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.MB_Exclamation">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.MB_Information">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.MB_Question">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.MB_Security">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.MB_Validation">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.MBError">
            <summary>
              Looks up a localized string similar to Error Message.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.MBInformation">
            <summary>
              Looks up a localized string similar to Information Message.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.MBQuestion">
            <summary>
              Looks up a localized string similar to Question.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.MBWarning">
            <summary>
              Looks up a localized string similar to Warning Message.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.MessageDetailsObjectKeys">
            <summary>
              Looks up a localized string similar to Object Keys:.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.No">
            <summary>
              Looks up a localized string similar to &amp;No.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.NoTypeConverterExists">
            <summary>
              Looks up a localized string similar to No type converter exists for type .
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.OK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.Retry">
            <summary>
              Looks up a localized string similar to &amp;Retry.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.SecurityError">
            <summary>
              Looks up a localized string similar to Security Error.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.ServerErrorMessages">
            <summary>
              Looks up a localized string similar to Server error messages:.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.ServerFault">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.ShowDetails">
            <summary>
              Looks up a localized string similar to Show details.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.Success">
            <summary>
              Looks up a localized string similar to Success.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.SystemExceptionError">
            <summary>
              Looks up a localized string similar to System Exception Error.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.ThankYou">
            <summary>
              Looks up a localized string similar to Error detail copied to Clipboard.\n\nPaste the error message when you report the error.\nThis greatly improves the ability to track and solve the error..
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.Timeout">
            <summary>
              Looks up a localized string similar to Timeout.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.TransactionIdMismatch">
            <summary>
              Looks up a localized string similar to Transaction ID mismatch.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.ValidationError">
            <summary>
              Looks up a localized string similar to Validation Error.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.ViewDetail">
            <summary>
              Looks up a localized string similar to View &amp;Detail.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.Properties.Resources.Yes">
            <summary>
              Looks up a localized string similar to &amp;Yes.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Core.FndReadOnlyDictionary`2">
            <summary>
            Read-only version of generic Dictionary
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary</typeparam>
            <typeparam name="TValue">The type of values in the dictionary</typeparam>
        </member>
        <member name="M:Ifs.Fnd.Core.FndReadOnlyDictionary`2.#ctor">
            <summary>
            Creates a new empty instance of FndReadOnlyDictionary.
            NOTE this dictionary instance will never be able to contain any values
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates new instance of ReadOnlyDictionary wrapping a ordinary dictionary.
            </summary>
            <param name="backingDictionary">Dictionary to wrap</param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
            Throws NotSupportedException
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            <see cref="M:System.Collections.Generic.IDictionary.ContainsKey(TKey)"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndReadOnlyDictionary`2.Remove(`0)">
            <summary>
            Throws NotSupportedException
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            <see cref="M:System.Collections.Generic.IDictionary.TryGetValue"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Throws NotSupportedException
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndReadOnlyDictionary`2.Clear">
            <summary>
            Throws NotSupportedException
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Core.FndReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            <see cref="M:System.Collections.Generic.IDictionary.Contains"/>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            <see cref="M:System.Collections.Generic.IDictionary.CopyTo"/>
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Ifs.Fnd.Core.FndReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Throws NotSupportedException
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndReadOnlyDictionary`2.GetEnumerator">
            <summary>
            <see cref="M:System.Collections.Generic.IDictionary.GetEnumerator"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Core.FndReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <see cref="T:System.Collections.Generic.IDictionary"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Core.FndReadOnlyDictionary`2.Keys">
            <summary>
            <see cref="P:System.Collections.Generic.IDictionary.Keys"/>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndReadOnlyDictionary`2.Values">
            <summary>
            <see cref="P:System.Collections.Generic.IDictionary.Values"/>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndReadOnlyDictionary`2.Item(`0)">
            <summary>
            <see cref="P:System.Collections.Generic.IDictionary"/>
            Setting a value will throw  NotSupportedException
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Core.FndReadOnlyDictionary`2.Count">
            <summary>
            <see cref="P:System.Collections.Generic.IDictionary.Count"/>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Core.FndReadOnlyDictionary`2.IsReadOnly">
            <summary>
            This dictionary is read only
            </summary>
        </member>
    </members>
</doc>
