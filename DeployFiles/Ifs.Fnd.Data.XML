<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ifs.Fnd.Data</name>
    </assembly>
    <members>
        <member name="T:Ifs.Fnd.Data.FndDecimalAttribute">
            <summary>
            Attribute for decimal (high precision) values
            
            <remarks>
            This type uses the .NET decimal type for the internal storage.
            Decimal have a range of -10^30 .. 10^30
            The server support a higher range, normally -10^308 .. 10^308
            
            A configuration setting controls how handle an overflow.
            Setting is named useDecimalPrecisionOverflowFallback, value can be true or false
              true means that overflow will be truncated to decimal.MinValue/MaxValue
              false means that exception will be thrown 
            Default value is false
            </remarks>
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndAttribute">
            <summary>
            Base class for all attributes
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttribute.encodeAttributeNames">
            <summary>
            Set by the framework from FndDataRow for some marshaling operations 
            where the marshaled attribute names must be encoded.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttribute.#ctor">
            <summary>
            Initializes a new instance of the FndAttribute class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttribute.Assign(Ifs.Fnd.Data.FndAttribute)">
            <summary>
            Assigns this attribute with value from supplied attribute
            </summary>
            <param name="source">Attribute to copy value from</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttribute.SetDirty">
            <summary>
            Sets the dirtystate on the attribute
            </summary>
            
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttribute.ClearDirty">
            <summary>
            Clears the dirtystate on the attribute
            </summary>
            
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttribute.Descending">
            <summary>
            Creates a new descending FndAttribute.
            The new sort field will contain only this attribute
            and the sort direction marked as descending.
            </summary>
            <returns>
            a new instance of FndAttribute
            </returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttribute.ToString">
            <summary>
            Returns a string representation of the attribute
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttribute.Format">
            <summary>
            Returns a string representation of the attribute, formatted using the current culture info.
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttribute.Parse(System.String)">
            <summary>
            Parses a string representation of simple attribute types
            This is NOT unmarshalling functionality
            </summary>
            <param name="s">String representation</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttribute.TryParse(System.String,System.Object@)">
            <summary>
            Parses a string representation of simple attribute types and get attribute values
            </summary>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttribute.GetValueType">
            <summary>
            Returns the contained value type
            </summary>
            <returns>Value type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttribute.ExcludeQueryResult">
            <summary>
            Marks the attribute as excluded from the query result
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttribute.IncludeQueryResult">
            <summary>
            Marks the attribute as included in the query result
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttribute.IncludeQueryResult(Ifs.Fnd.Data.FndAttributeStatus)">
            <summary>
            Marks the attribute as included in the query result
            </summary>
            <param name="includeAs">What type of include</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttribute.CompareTo(Ifs.Fnd.Data.FndAttribute)">
            <summary> Compares two attributes for sorting purposes. Overriden in sortable sub-classes.
            </summary>
            <param name="attr">the attribute to compare this object to.
            </param>
            <returns> 0
            
            </returns>
        </member>
        <member name="P:Ifs.Fnd.Data.FndAttribute.EncodeAttributeNames">
            <summary>
            Get and sets the EncodeAttributeNames property to indicate that all attributes marshaled should get their name encoded. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndAttribute.Existent">
            <summary>
            Indicates if the value is included in parent row.
            </summary>
            <remarks>
            A non existent attribute has not been set yet or has been excluded in server call
            </remarks>
        </member>
        <member name="P:Ifs.Fnd.Data.FndAttribute.Status">
            <summary>
            Include / exclude status for the attribute
            Note: If a value hasn't been assigned to the attribute, setting the Status 
            will also set the NoValue property to True
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndAttribute.IsNull">
            <summary>
            Indicates if the contained value is null
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndAttribute.IsInvalidValue">
            <summary>
            Indicates if the contained value is an invalid value
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndAttribute.Name">
            <summary>
            The name of the attribute
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndAttribute.Count">
            <summary>
            Gets number of attributes from a query with this attribute included as FndAttributeStatus.QueryIncludeCount
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndAttribute.TypeMarker">
            <summary>
            Typemarker for this type of value. This should not be used in application development, framework internal use only.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndAttribute.Dirty">
            <summary>
            Indicates if the attribute is dirty
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndAttribute.Column">
            <summary>
            The meta data for this attribute
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndAttribute.SortDirection">
            <summary>
            Returns FndSortOrder.Ascending, which is the default sort direction for an attribute.
            </summary>
            <returns>
            <code>FndSortOrder.Ascending</code>
            </returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDecimalAttribute.#ctor">
            <summary>
            Initializes a new instance of the FndNumberAttribute class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDecimalAttribute.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the FndNumberAttribute class
            </summary>
            <param name="initialValue">Initial value for the attribute</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDecimalAttribute.GetValue(System.Decimal)">
            <summary>
            Gets the contained value
            </summary>
            <remarks>If the value is invalid this method will return defaultValue.</remarks>
            <param name="defaultValue">Return value if attribute is null</param>
            <returns>Attribute value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDecimalAttribute.SetValue(System.Decimal)">
            <summary>
            Sets the Contained value
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDecimalAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDecimalAttribute.GetValueType">
            <summary>
            Returns the contained value type
            </summary>
            <returns>Value type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDecimalAttribute.Parse(System.String)">
            <summary>
            Parses a string representation of simple attribute types
            This is NOT unmarshalling functionality
            </summary>
            <param name="s">String representation</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDecimalAttribute.TryParse(System.String,System.Object@)">
            <summary>
            Parses a string representation of attribute into decimal
            </summary>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDecimalAttribute.CompareTo(Ifs.Fnd.Data.FndAttribute)">
            <summary>Compares two attributes. Used for sorting.
            </summary>
            <param name="attr">Attribute to compare with
            </param>
            <returns> 0 if equal
            
            </returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDecimalAttribute.ToString">
            <summary>
            Returns the numeric value using string representation,
            always using dot (.) as decimal separator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDecimalAttribute.Format">
            <summary>
            <see cref="M:Ifs.Fnd.Data.FndAttribute.Format"/>
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.Serialization.FndRecordSerializableAttribute">
            <summary>
            Used to control the FndRecordSerializer serialization and deserialization process.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Serialization.FndRecordSerializableAttribute.#ctor">
            <summary>
            Initializes a new instance of the FndRecordSerializableAttribute class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Serialization.FndRecordSerializableAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the FndRecordSerializableAttribute class
            Note, IFndCustomRecordSerialzier must be implemented on class to be serialized if customSerializationType
            </summary>
            <param name="customSerializationType">Type to use for serialization/deserialization</param>
        </member>
        <member name="T:Ifs.Fnd.Data.Serialization.IFndCustomRecordAttributeSerializer">
            <summary>
            Implement in classes where custom serialization/deserializtion is needed for certain attributes.
            One usage scenario could be to convert specially formatted string to an enumeration etc.
            When implementing this interface, serialize and deserialize will be called for every property that
            has the FndRecordSerializableAttribute set on it, regardless whenever property visibility and readonly/writeonly/readwrite
            The FndAttribute created in Serialize is sent to Deserialize, so make sure the methods are symetric.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Serialization.IFndCustomRecordAttributeSerializer.Serialize(System.Reflection.PropertyInfo,System.Object,Ifs.Fnd.Data.FndAttribute@)">
            <summary>
            Performs custom serialization
            </summary>
            <param name="propertyInfo">Meta data about the property being serialized</param>
            <param name="instance">The actual object being serialized</param>
            <param name="attr">FndAttribute (or subclass) to be created as serialization result</param>
            <returns>True if custom serializer produced a result, false if default processing should be used</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.Serialization.IFndCustomRecordAttributeSerializer.Deserialize(System.Reflection.PropertyInfo,System.Object,Ifs.Fnd.Data.FndAttribute)">
            <summary>
            Performs custom deserialization of data serialized with custom serialization.
            This method should write the value of attr into the local fields within the instance passed.
            </summary>
            <param name="propertyInfo">Meta data about the property being deserialized</param>
            <param name="instance">The actual object being deserialized.</param>
            <param name="attr">FndAttribute (subclass!) that contains the serialized value.</param>
            <returns>True if custom deserializer handled the value in attr, false if default processing should be used</returns>
        </member>
        <member name="T:Ifs.Fnd.Data.Serialization.FndRecordSerializer">
            <summary>
            Provides functionality to serialize and deserialize .NET classes
            to FndDataRow storage. Class to be serialized must have properties to read/write values
            Properties implementing IList can also be serialized/deserialized as arrays.
            
            This class heaviliy uses reflection and is therefore not as fast as the System.Xml.Serialization
            classes which creates code in runtime.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Serialization.FndRecordSerializer.#ctor(System.Type)">
            <summary>
            Prepares a new instance FndRecordSerializer of a specified type.
            </summary>
            <param name="type">Type to serialize/deserialize</param>
        </member>
        <member name="M:Ifs.Fnd.Data.Serialization.FndRecordSerializer.Serialize(System.Object)">
            <summary>
            Serializes class to FndDataRow. Handles all simple attributes (string, int, doubles etc)
            Can serialize collections if they implement IList
            </summary>
            <example>
            FndRecordSerializer serializer = new FndRecordSerializer(typeof(SomeClass));
            SomeClass source = ...  // Init with data
            FndDataRow row = serializer.Serialize(source);
            SomeClass dest = (SomeClass)serializer.Deserialize(row);
            </example>
            <param name="data">Class instance to serialize</param>
            <returns>Serialized FndDataRow</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.Serialization.FndRecordSerializer.Deserialize(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Deserializes FndDataRow to class instance. Handles all simple attributes (string, int, doubles etc)
            Can deserialize collections if they implement IList and property getter returns
            a precreated collection (preferably empty). That collection class must have an Add(SomeClass value) method.
            The FndRecordSerializer also supports classes implementing ISupportInitialize, in that
            case BeginInit will be called before properties are loaded and EndInit will be called
            after the last property have been loaded that that class.
            </summary>
            <example>
            FndRecordSerializer serializer = new FndRecordSerializer(typeof(SomeClass));
            SomeClass source = ...  // Init with data
            FndDataRow row = serializer.Serialize(source);
            SomeClass dest = (SomeClass)serializer.Deserialize(row, typeof(SomeClass));
            </example>
            <param name="row">FndDataRow to deserialize</param>
            <returns>Deserialized object</returns>
            
        </member>
        <member name="T:Ifs.Fnd.Data.FndLongTextAttribute">
            <summary>
            Attribute for Longtexts, supports PlsqlType.LONG_TEXT type
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndTextAttribute">
            <summary>
            Attribute for unicode-enabled string values
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndAlphaAttribute">
            <summary>
            A non-unicode string attribute
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAlphaAttribute.#ctor">
            <summary>
            Initializes a new instance of the FndAlphaAttribute class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAlphaAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndAlphaAttribute class
            </summary>
            <param name="initialValue">Initial value for the attribute</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAlphaAttribute.GetValue">
            <summary>
            Gets the contained value
            </summary>
            <remarks>If the value is invalid this method will return an empty string.</remarks>
            <returns>Attribute value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAlphaAttribute.SetValue(System.String)">
            <summary>
            Sets the Contained value
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAlphaAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAlphaAttribute.GetValueType">
            <summary>
            Returns the contained value type
            </summary>
            <returns>Value type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAlphaAttribute.Parse(System.String)">
            <summary>
            Parses a string representation of simple attribute types
            This is NOT unmarshalling functionality
            </summary>
            <param name="s">String representation</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAlphaAttribute.TryParse(System.String,System.Object@)">
            <summary>
            No real parsing here. value is same as s
            </summary>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAlphaAttribute.CompareTo(Ifs.Fnd.Data.FndAttribute)">
            <summary>Compares two attributes. Used for sorting.
            </summary>
            <param name="attr">Attribute to compare with
            </param>
            <returns> 0 if equal
            
            </returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTextAttribute.#ctor">
            <summary>
            Initializes a new instance of the FndTextAttribute class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTextAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndTextAttribute class
            </summary>
            <param name="initialValue">Initial value for the attribute</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTextAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndLongTextAttribute.#ctor">
            <summary>
            Initializes a new instance of the FndLongTextAttribute class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndLongTextAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndLongTextAttribute class
            </summary>
            <param name="initialValue">Initial value for the attribute</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndLongTextAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="T:Ifs.Fnd.Data.FndAggregateAttribute">
            <summary>
            This class represents an aggregated single record detail
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAggregateAttribute.#ctor">
            <summary>
            Default constructor for COM visibility
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAggregateAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndAggregateAttribute class
            </summary>
            <param name="type">Row type</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAggregateAttribute.#ctor(Ifs.Fnd.Data.FndDataColumn)">
            <summary>
            Initializes a new instance of the FndAggregateAttribute class
            </summary>
            <param name="column">Data column</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAggregateAttribute.#ctor(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Initializes a new instance of the FndAggregateAttribute class
            </summary>
            <param name="initialValue">Initial value for the attribute</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAggregateAttribute.#ctor(Ifs.Fnd.Data.FndDataColumn,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Initializes a new instance of the FndAggregateAttribute class
            </summary>
            <param name="column">Data Column</param>
            <param name="initialValue">Initial value for the attribute</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAggregateAttribute.GetValue">
            <summary>
            Gets the contained value
            </summary>
            <remarks>If the value is invalid this method will return null.</remarks>
            <returns>Attribute value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAggregateAttribute.SetValue(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Sets the Contained value
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAggregateAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAggregateAttribute.GetValueType">
            <summary>
            Returns the contained value type
            </summary>
            <returns>Value type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAggregateAttribute.ToString">
            <summary>
            Returns a string representation of the attribute
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:Ifs.Fnd.Data.FndArrayAttribute">
            <summary>
            An attribute to contain arrays
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndArrayAttribute.#ctor(Ifs.Fnd.Data.FndDataColumn)">
            <summary>
            Initializes a new instance of the FndArrayAttribute class
            </summary>
            <param name="column">Data column</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndArrayAttribute.#ctor(Ifs.Fnd.Data.FndDataTable)">
            <summary>
            Initializes a new instance of the FndArrayAttribute class
            </summary>
            <param name="initialValue">Initial value for the attribute</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndArrayAttribute class
            </summary>
            <param name="type">Row type</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndArrayAttribute.GetValue">
            <summary>
            Gets the contained value
            </summary>
            <returns>Attribute value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndArrayAttribute.SetValue(Ifs.Fnd.Data.FndDataTable)">
            <summary>
            Sets the Contained value
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndArrayAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndArrayAttribute.GetValueType">
            <summary>
            Returns the contained value type
            </summary>
            <returns>Value type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndArrayAttribute.ClearDirty">
            <summary>
            Clears dirty state recursively
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndArrayAttribute.ToString">
            <summary>
            Returns a string representation of the attribute
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:Ifs.Fnd.Data.FndAttributeStatus">
            <summary>
            Attribute status
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeStatus.None">
            <summary>
            No status set
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeStatus.QueryExclude">
            <summary>
            Exclude in query
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeStatus.QueryInclude">
            <summary>
            Include in query
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeStatus.QueryIncludeMin">
            <summary>
            Include as min in query
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeStatus.QueryIncludeMax">
            <summary>
            Include as max in query
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeStatus.QueryIncludeSum">
            <summary>
            Include as sum in query
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeStatus.QueryIncludeAverage">
            <summary>
            Include as average in query
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeStatus.QueryIncludeCount">
            <summary>
            Include as count in query
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndAttributeInfo">
            <summary>
            Contains information about an attribute within a data row
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndAttributeInfo.#ctor(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FndAttributeInfo class
            </summary>
            <param name="attributeValue">The attribute value</param>
            <param name="mandatory">Mandatory flag</param>
            <param name="updatable">Updatable flag</param>
        </member>
        <member name="P:Ifs.Fnd.Data.FndAttributeInfo.Value">
            <summary>
            Gets the value of the attribute
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndAttributeInfo.Mandatory">
            <summary>
            Gets a value indicating whether the attribute is mandatory
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndAttributeInfo.Updatable">
            <summary>
            Gets a value indicating whether the attribute is updatable
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndAttributeInfo.IsValid">
            <summary>
            Gets a value indicating whether the attribute is valid
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndBinaryAttribute">
            <summary>
            Attribute for binary values
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBinaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the FndBinaryAttribute class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBinaryAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the FndBinaryAttribute class
            </summary>
            <param name="initialValue">Initial value for the attribute</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBinaryAttribute.GetValue">
            <summary>
            Gets the contained value
            </summary>
            <remarks>If the value is invalid this method will return null.</remarks>
            <returns>Attribute value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBinaryAttribute.SetValue(System.Byte[])">
            <summary>
            Sets the Contained value
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBinaryAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBinaryAttribute.GetValueType">
            <summary>
            Returns the contained value type
            </summary>
            <returns>Value type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBinaryAttribute.Parse(System.String)">
            <summary>
            Parse string value into this attribute
            </summary>
            <param name="s">String value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBinaryAttribute.TryParse(System.String,System.Object@)">
            <summary>
            Parses a string representation of attribute into a byte array
            </summary>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBinaryAttribute.ToString">
            <summary>
            Returns a string representation of the attribute
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:Ifs.Fnd.Data.FndBoolAttribute">
            <summary>
            Attribute for boolean values
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBoolAttribute.#ctor">
            <summary>
            Initializes a new instance of the FndBoolAttribute class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBoolAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FndBoolAttribute class
            </summary>
            <param name="initialValue">Initial value for the attribute</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBoolAttribute.GetValue">
            <summary>
            Gets the contained value
            </summary>
            <remarks>If the value is invalid this method will return false.</remarks>
            <returns>Attribute value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBoolAttribute.GetValue(System.Boolean)">
            <summary>
            Gets the contained value
            </summary>
            <remarks>If the value is invalid this method will return defaultValue.</remarks>
            <param name="defaultValue">Return value if attribute is null</param>
            <returns>Attribute value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBoolAttribute.SetValue(System.Boolean)">
            <summary>
            Sets the Contained value
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBoolAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBoolAttribute.GetValueType">
            <summary>
            Returns the contained value type
            </summary>
            <returns>Value type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBoolAttribute.Parse(System.String)">
            <summary>
            Parse string value into this attribute
            </summary>
            <param name="s">String value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBoolAttribute.TryParse(System.String,System.Object@)">
            <summary>
            Parses a string representation of attribute into a bool
            </summary>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndBoolAttribute.CompareTo(Ifs.Fnd.Data.FndAttribute)">
            <summary>Compare the values of two attributes.
            </summary>
            <param name="attr">Attribute to compare with.
            </param>
            <returns> 0 if values are equal, a value less than 0 if the value of this attribute
            is less than the value of the specified attribute. A value greater than 0 is returned
            if the value of this attribute is greater than the specified attribute.
            
            </returns>
        </member>
        <member name="T:Ifs.Fnd.Data.FndCondition">
            <summary>
            Used to define conditions in queries
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndCondition.#ctor">
            <summary>
            Initializes a new instance of the FndCondition class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndCondition.And(Ifs.Fnd.Data.FndCondition)">
            <summary>
            Combines two condition with "and"
            </summary>
            <param name="condition">Condition to combine with</param>
            <returns>Resulting condition</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndCondition.Or(Ifs.Fnd.Data.FndCondition)">
            <summary>
            Combines two conditions with "or"
            </summary>
            <param name="condition">Condition to combine with</param>
            <returns>Resulting condition</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndCondition.Write(System.IO.BinaryWriter)">
            <summary>
            Marshal condition into stream writer
            </summary>
            <param name="writer">Stream writer</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndCondition.SetKeyFieldName(System.String)">
            <summary>
            Set key field name for inner conditions
            </summary>
            <param name="keyName">field name</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndCondition.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndCondition.Clone">
            <summary>
            Clone
            </summary>
            <returns>Cloned condition</returns>
        </member>
        <member name="P:Ifs.Fnd.Data.FndCondition.Left">
            <summary>
            Gets or sets the left part of a compound condition. Can be null.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndCondition.Right">
            <summary>
            Gets or sets the right part of a compound condition. Can be null.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndCondition.ConditionCategory">
            <summary>
            Gets the Category of the condition (OR,AND)
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndConditionCategoryType">
            <summary>
            Type of condition
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionCategoryType.And">
            <summary>
            Represents an and condition
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionCategoryType.Or">
            <summary>
            Represents an or condition
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndConditionOperatorType">
            <summary>
            Type of condition operator
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.Equal">
            <summary>
            Equal
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.NotEqual">
            <summary>
            Not equal
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.LessThan">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.LessThanOrEqual">
            <summary>
            Less than or equal
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.GreaterThan">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.GreaterThanOrEqual">
            <summary>
            Greater than or equal
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.Like">
            <summary>
            Like
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.NotLike">
            <summary>
            Not like
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.Between">
            <summary>
            Between
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.ValueIn">
            <summary>
            Value in
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.ValueNotIn">
            <summary>
            Value not in
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.EqualIgnoreCase">
            <summary>
            Equal ignore case
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.NotEqualIgnoreCase">
            <summary>
            Not equal ignore case
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.LikeIgnoreCase">
            <summary>
            Like ignore case
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.NotLikeIgnoreCase">
            <summary>
            Not like ignore case
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.AnyValue">
            <summary>
            Any value
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.NotSet">
            <summary>
            Not set
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndConditionOperatorType.Soundex">
            <summary>
            Soundex
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndConditionOperator">
            <summary>
            Summary description for FndConditionOperator.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndAttributeType">
            <summary>
            Type of attribute
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.Aggregate">
            <summary>
            Aggregate attribute, represents an FndDataRow
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.Alpha">
            <summary>
            Alpha attribute, represents a string
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.Array">
            <summary>
            Array attribute, represents an FndDataTable
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.Binary">
            <summary>
            Binary attribute, represents a byte[]
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.Boolean">
            <summary>
            Boolean attribute, represents a bool
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.Date">
            <summary>
            Date attribute, represents a DateTime without time precision
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.Decimal">
            <summary>
            Decimal attribute, represents a decimal
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.Enumeration">
            <summary>
            Enumeration attribute, represents a stereotype
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.GenericAspect">
            <summary>
            Generic aspect, represents a FndDataRow as a dynamic aggregate
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.Integer">
            <summary>
            Integer attribute, represents an long
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.Number">
            <summary>
            Number attribute, represents a double
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.Text">
            <summary>
            Text attribute, represents a string
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.Time">
            <summary>
            Time attribute, represents the time part of a DateTime
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.TimeStamp">
            <summary>
            Timestamp attribute, represents the date and time part of a DateTime
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.Shortcut">
            <summary>
            Shortcut attribute, represents a shortcut to a contained attribute
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.Unknown">
            <summary>
            Unknown attribute type
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.SimpleArray">
            <summary>
            Simple Array type
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndAttributeType.LongText">
            <summary>
            Longtext attribute, supports PlsqlType.LONG_TEXT type
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndColumnProperties">
            <summary>
            Flags to set the properties of the column.
            <example>This example shows how to use the Flags
            <code>
            column.Flags =Ifs.Fnd.Data.FndColumnProperties.NotQueryable | Ifs.Fnd.Data.FndColumnProperties.DefaultLOV;
            </code>
            </example>
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndColumnProperties.DefaultLOV">
            <summary>
            DefaultLOV Flag set. This column is eligible to be displayed in a LOV
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndColumnProperties.NotQueryable">
            <summary>
            Column not Queryable
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDataColumn">
            <summary>
            Meta data for an attribute
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.#ctor">
            <summary>
            Initializes a new instance of the FndDataColumn class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndDataColumn class
            </summary>
            <param name="name">Name of the column</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the FndDataColumn class
            </summary>
            <param name="name">Name of the column</param>
            <param name="displayName">Text used for display purposes.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.#ctor(System.String,Ifs.Fnd.Data.FndAttributeType)">
            <summary>
            Initializes a new instance of the FndDataColumn class
            </summary>
            <param name="name">Name of the column</param>
            <param name="type">Attribute type of the column</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.#ctor(System.String,System.String,Ifs.Fnd.Data.FndAttributeType)">
            <summary>
            Initializes a new instance of the FndDataColumn class
            </summary>
            <param name="name">Name of the column</param>
            <param name="type">Attribute type of the column</param>
            <param name="typeMarker">Type marker</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.#ctor(System.String,Ifs.Fnd.Data.FndAttributeType,System.String)">
            <summary>
            Initializes a new instance of the FndDataColumn class
            </summary>
            <param name="name">Name of the column</param>
            <param name="type">Attribute type of the column</param>
            <param name="termPath">Translation path</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.#ctor(System.String,Ifs.Fnd.Data.FndAttributeType,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the FndDataColumn class
            </summary>
            <param name="name">Name of the column</param>
            <param name="type">Attribute type of the column</param>
            <param name="termPath">Translation path</param>
            <param name="ordinal">Ordinal of this column</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.GetTypeMarker(Ifs.Fnd.Data.FndAttributeType)">
            <summary>
            Gets the type marked used to encode an FndAttributeType when
            serializing into IFS Buffer format.
            This is intended for FW use only.
            </summary>
            <param name="type">FndAttributeType to get marker from</param>
            <returns>The marker</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.GetType(System.String)">
            <summary>
            Gets the FndAttributeType from the type marker string used in 
            the IFS Buffer marshalling protocol.
            </summary>
            <param name="typeMarker">Typemarker to get FndAttributeType from</param>
            <returns>The FndAttributeType enum value mapped from typeMarker</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.NewAttribute(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Creates an FndAttribute instance in the provided row
            using this instance of the FndDataColumn.
            </summary>
            <param name="row">Row to add attribute instance to</param>
            <returns>The just created FndAttribute instance</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.CanResetValue(System.Object)">
            <summary>
            Indicates if the value can be resetted
            </summary>
            <param name="component">The datarow</param>
            <returns>bool value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.SetValue(System.String[],Ifs.Fnd.Data.FndDataRow,System.Object)">
            <summary>
            Sets an attribute value in a FndDataRow
            This overload takes the sub path down in the Contained Record structure
            Used for Shortcut attributes
            </summary>
            <param name="namePath">The sub path down in the Contained Record structure</param>
            <param name="row">A datarow</param>
            <param name="value">The attribute value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.GetValue(System.String[],Ifs.Fnd.Data.FndDataRow,Ifs.Fnd.Data.FndAttributeType@,System.Object@)">
            <summary>
            Gets an attribute value for a FndDataRow
            This overload takes the sub path down in the Contained Record structure
            Used for Shortcut attributes
            </summary>
            <param name="namePath">The sub path down in the Contained Record structure</param>
            <param name="row">A datarow</param>
            <param name="attrType">The attribute type</param>
            <param name="value">The attribute value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.GetAttributeInfo(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Gets the attribute Information for a column in a row.
            </summary>
            <param name="dataRow">A datarow the column is included in</param>
            <returns>Attribute information</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.GetValue(System.Object)">
            <summary>
            Gets an attribute value for a FndDataRow
            </summary>
            <remarks>
            This version will only return the real value and no invalid value objects. 
            the existence is typically to support the Microsoft Data Binding model.
            </remarks>
            <param name="component">A datarow</param>
            <returns>The attribute value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.GetEnumNameValue(System.Object)">
            <summary>
            Returns the string enumeration name value of an enumeration type column. Only valid enumerations returns valid values, otherwise a string.Empty value is returned.
            </summary>
            <param name="component">A datarow</param>
            <returns>The enumeration name value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.GetValue(System.Object,System.Boolean)">
            <summary>
            Gets an attribute value for a FndDataRow
            </summary>
            <remarks>
            Internal version that is used by FndBinding. This method enables calling
            method to specify if an existing FndInvalidValue should be returned or if
            the actual value is the wanted one.
            </remarks>
            <param name="component">A datarow</param>
            <param name="invalidValues">specifies if invalid values should be returned or not.
            true if invalid values is wanted and false if not.</param>
            <returns>The attribute value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.ResetValue(System.Object)">
            <summary>
            Resets the value
            </summary>
            <param name="component">The datarow</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.SetInternalValue(System.Object,System.Object)">
            <summary>
            This is SetValue with one difference - for enumeration it expects Name and not a display value.
            There is a problem with enumerations so that GetValue returns Name, but SetValue expects DisplayName. Doing
            consecutive GetValue and SetValue leads to exceptions.
            It's too close to the release to modify this, so this function has been created for use in places where the
            standard SetValue creates problems.
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.SetValue(System.Object,System.Object)">
            <summary>
            Sets an attribute value in a FndDataRow
            </summary>
            <remarks>
            This is used by the DataBinding model
            </remarks>
            <param name="component">A datarow</param>
            <param name="value">The attribute value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.UpdateMirrorColumns(Ifs.Fnd.Data.FndDataRow,Ifs.Fnd.Data.FndDataRow,System.Boolean)">
            <summary>
            Updates the mirror columns with the values in the given aggregate row.
            </summary>
            <param name="row">Data row where the mirror columns resides.</param>
            <param name="compoundRow">Aggregate row.</param>
            <param name="invalidRow">Boolean value specifying whether the compound row is invalid.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.ShouldSerializeValue(System.Object)">
            <summary>
            Indicated if the value should be serialized
            </summary>
            <param name="component"></param>
            <returns>bool value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.SetDisplayName(System.String)">
            <summary>
            A way of setting the display name (set on DisplayName property is not allowed)
            </summary>
            <param name="displayName">Display Name</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.CreateCondition(Ifs.Fnd.Data.FndConditionOperatorType,System.Object)">
            <summary>
            Create a condition for this column
            </summary>
            <param name="operatorType">Type of operator</param>
            <param name="conditionValue">Value. Can be either a simple value or an FndAttribute.</param>
            <returns>The new condition</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.CreateLikeConditionWithFormat(System.String,System.String)">
            <summary>
            Creates a like condition with format mask (for dates and numbers)
            </summary>
            <param name="value">value</param>
            <param name="formatMask">format mask</param>
            <returns>The new condition</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.CreateBetweenCondition(System.Object,System.Object)">
            <summary>
            Creates a between condition
            </summary>
            <param name="conditionValue1">From-value</param>
            <param name="conditionValue2">To-value</param>
            <returns>The new condition</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.CreateValueInCondition(System.Object[])">
            <summary>
            Creates an value-in condition
            </summary>
            <param name="conditionValues">An array of values for the condition</param>
            <returns>The new condition</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.CreateValueNotInCondition(System.Object[])">
            <summary>
            Creates an value-not-in condition
            </summary>
            <param name="conditionValues">An array of values for the condition</param>
            <returns>The new condition</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.CreateDetailCondition(Ifs.Fnd.Data.FndDataRow,Ifs.Fnd.Data.FndDetailQueryCategory)">
            <summary>
            Created a detail condition
            </summary>
            <param name="detail">Row with the detail values</param>
            <param name="category">Type of detail condition</param>
            <returns>The new condition</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current FndDataColumn
            </summary>
            <param name="obj">The System.Object to compare with the current FndDataColumn</param>
            <returns>true if the specified System.Object is equal to the current FndDataColumn; otherwise, false</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table
            </summary>
            <returns>A hash code for the current FndDataColumn</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumn.ToUpperCaseName(System.String)">
            <summary>
              Convert specified name to upper case inserting underscores between words.
            An upper case letter acts as the beginning of a word. In case of
            a sequence of upper case letters the last one, if followed by a lower case letter,
            begins a new word.
            </summary>
            <param name="name">mixed case string to be converted to upper case</param>
            <returns>the specified string converted to upper case</returns>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.IsAvailable">
            <summary>
            Shows if the column is available (apf columns invisible in designer are not)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.ListCommand">
            <summary>
            Used by search for LOV. Contains list command for creating LOV
            for this column (if any was found).
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.LovDependencies">
            <summary>
            Used by search dialog to sort out reference dependencies.
            Contains ReferenceMirrorColumns of the aggregate that points to 
            this column (if it is a mirror column)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.Name">
            <summary>
            Name of the column
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.Type">
            <summary>
            Specifies what kind of attributes will be instantiated under this column
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.TypeMarker">
            <summary>
            keep type marker to figure out length prefix or not.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.EnumerationType">
            <summary>
            For enumeration attributes this property points to the actual enumeration
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.ReferenceView">
            <summary>
            Gets or sets the database view for when this text column is an LU reference
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.EnumMethod">
            <summary>
            Gets or sets the enumeration method (Package.Method) when this text column is an IID LU
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.Queryable">
            <summary>
            Specify whether this column is Queryable. 
            for Aggregate and Array attributes this always returns false.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.Flags">
            <summary>
            Sets the properties of this FndDataColumn. 
            should be given as a set of binary Flags
            <example>This example shows how to use this property
            <code>
            column.Flags =Ifs.Fnd.Data.FndColumnProperties.NotQueryable | Ifs.Fnd.Data.FndColumnProperties.DefaultLOV;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.DefaultLov">
            <summary>
            Specify whether this column should be displayed in LOV dialogs
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.Ordinal">
            <summary>
            Ordinal of this Column.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.ContainedRecordMeta">
            <summary>
            Specifies the meta data for array, aggregate and reference columns
            </summary>
            <remarks>
            For an array this is the columns for each row in the FndDataTable
            For an aggregate this is the columns for the contained FndDataRow
            For a reference this is the columns for the included referent which is a FndDataRow
            </remarks>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.ParentContainerMeta">
            <summary>
            Gets the FndDataColumnCollection containing this FndDataColumn.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.ComponentType">
            <summary>
            Returns FndDataRow
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.IsReadOnly">
            <summary>
            Indicates if the value is readonly
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.PropertyType">
            <summary>
            Returns the value type for this column
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.TermPath">
            <summary>
            Translation path for the column
            </summary>
            <remarks>Translation path used for fetching translations, typically used for field labels and column headers</remarks>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.DisplayName">
            <summary>
            A user friendly version of the name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.Description">
            <summary>
            A description of this column
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.ReferenceMirrorColumns">
            <summary>
            Defines mirror columns to update when a reference-by-value aggregate attribute is updated. Used in generated C# classes only
            </summary>
            <example>
            This code is a sample of generated C# for the ORDER_LINE.SALES_PART reference-by-value definition.
            The reference contains both the exclusively used CATALOG_NO and also CONTRACT that is shared with other references.
            This is a hint to the framework to set CATALOG_NO and CONTRACT when SALESPART is set and clear only CATALOG_NO when SALESPART is cleared.
            <code>
            ...
            col = cols.Add("CATALOG_NO", Ifs.Fnd.Data.FndAttributeType.Text);
            col = cols.Add("CONTRACT", Ifs.Fnd.Data.FndAttributeType.Text);
            ...
            col = cols.Add("SALESPART", Ifs.Fnd.Data.FndAttributeType.Aggregate);
            col.ContainedRecordMeta = Ifs.Application.CustomerOrder.SalesPartActiveLov.Schema;
            col.ReferenceMirrorColumns.Add("CATALOG_NO", "CATALOG_NO", true);
            col.ReferenceMirrorColumns.Add("CONTRACT", "CONTRACT", false);
            ...
            </code>
            </example>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.ReferenceQualifiers">
            <summary>
            Specify Qulifiers for a reference-by-value aggregate attribute. if this Aggrigate 
            attribute is dependent on another aggrigate attribute then reference qulifiers spacify 
            the name of the column this one is dependent on.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumn.Position">
            <summary>
            The position of the column, used for showing search dialog in correct order
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDataColumnConverter">
            <summary>
            This class is for framework internal use
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Detects if data column can be converted to destination type
            </summary>
            <param name="context">Type descritor context</param>
            <param name="destinationType">Destination type</param>
            <returns>True if conversation is possible</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert data column to destination type
            </summary>
            <param name="context">Type descritor context</param>
            <param name="culture">Culture</param>
            <param name="value">Column to convert</param>
            <param name="destinationType">Destination type</param>
            <returns>Converted object</returns>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDataRowState">
            <summary>
            States for a FndDataRow
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndDataRowState.Added">
            <summary>
            Row is added
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndDataRowState.Modified">
            <summary>
            Row is modified
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndDataRowState.Deleted">
            <summary>
            Row is deleted
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndDataRowState.Unchanged">
            <summary>
            Row is unchanged
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDataColumnCollection">
            <summary>
            A collection of FndDataColumn objects. Used as meta data for a row.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.#ctor">
            <summary>
            Initializes a new instance of the FndDataColumnCollection class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndDataColumnCollection class
            </summary>
            <param name="type">Type name for the rows</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the FndDataColumnCollection class
            </summary>
            <param name="package">Owner package name for the type</param>
            <param name="type">Type name for the rows</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the FndDataColumnCollection class
            </summary>
            <param name="package">Owner package name for the type</param>
            <param name="type">Type name for the rows</param>
            <param name="entity">Entity name for the rows</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.#ctor(System.String,System.String,System.String,Ifs.Fnd.Data.FndDataColumnCollection)">
            <summary>
            Initializes a new instance of the FndDataColumnCollection class
            </summary>
            <param name="package">Owner package name for the type</param>
            <param name="type">Type name for the rows</param>
            <param name="entity">Entity name for the rows</param>
            <param name="schema">Schema definition of the parent entity</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.CreateTable">
            <summary>
            Creates a new data table based on the TableType property
            </summary>
            <returns>The new data table</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.CreateRow">
            <summary>
            Creates a new data row based on the ObjectType property
            </summary>
            <returns>The new data row</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.Lock">
            <summary>
            Locks the meta data for generated view classes with fixed meta
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.IsPrimaryKey(Ifs.Fnd.Data.FndDataColumn)">
            <summary>
            Detects if a column is part of primary key
            </summary>
            <param name="column">The column to check</param>
            <returns>true if the column is part of primary key, otherwise false</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.GetStateMarker(Ifs.Fnd.Data.FndDataRowState)">
            <summary>
            Get state marker for a state. Internal framework use only.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.GetState(System.String)">
            <summary>
            Return DataRowState from a state marker. Internal framework use only.
            </summary>
            <param name="stateMarker"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.Add(Ifs.Fnd.Data.FndDataColumn)">
            <summary>
            Add a new FndDataColumn object
            </summary>
            <param name="newColumn">The new FndDataColumn</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.Add(System.String,Ifs.Fnd.Data.FndAttributeType)">
            <summary>
            Add a new FndDataColumn object
            </summary>
            <param name="name">The name of the column</param>
            <param name="type">The type of the column</param>
            <returns>The new FndDataColumn object</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.Add(System.String,Ifs.Fnd.Data.FndAttributeType,System.String)">
            <summary>
            Add a new FndDataColumn object
            </summary>
            <param name="name">The name of the column</param>
            <param name="type">The type of the column</param>
            <param name="termPath">Translation path</param>
            <returns>The new FndDataColumn object</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.Add(System.String,Ifs.Fnd.Data.FndAttributeType,System.String,System.Int32)">
            <summary>
            Add a new FndDataColumn object
            </summary>
            <param name="name">The name of the column</param>
            <param name="type">The type of the column</param>
            <param name="termPath">Translation path</param>
            <param name="ordinal">The Ordinal of the column</param>
            <returns>The new FndDataColumn object</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.Add(System.String,Ifs.Fnd.Data.FndAttributeType,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="termID"></param>
            <param name="termUsage"></param>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.Add(System.String,Ifs.Fnd.Data.FndAttributeType,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="termID"></param>
            <param name="termUsage"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.CopyTo(Ifs.Fnd.Data.FndDataColumn[],System.Int32)">
            <summary>
            Copies the elements of the System.Collections.ICollection to an FndDataColumn array, starting at a particular FndDataColumn array index.
            </summary>
            <param name="columns">The one-dimensional FndDataColumn array that is the destination of the elements copied from System.Collections.ICollection. The FndDataColumn array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.AttributeIndex(System.String)">
            <summary>
            Returns the index of a specified column
            </summary>
            <param name="name">The name of the column</param>
            <returns>The zero based index</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.AttributeExist(System.String)">
            <summary>
            Indicates if a specified column exists in the collection
            </summary>
            <param name="name">The name of the column</param>
            <returns>True if the column exists</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>The hash value generated for the object.</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.Find(System.String,System.Boolean)">
            <summary>
            Try to find the a column in the column collection
            </summary>
            <param name="name">Name of the column</param>
            <param name="ignoreCase">Ignore case sensitive Find</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataColumnCollection.GetFormatStringColumns">
            <summary>
            The format string columns
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.Package">
            <summary>
            Package in model
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.Type">
            <summary>
            The name of the type
            </summary>
            <example>FND_USER</example>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.Entity">
            <summary>
            The name of entity
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.PrimaryKey">
            <summary>
            The primary key columns
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.SpecialColumns">
            <summary>
            The special columns (Returns:OBJ_ID,OBJ_VERSION,CREATED_BY,CREATED_DATE)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.ObjectType">
            <summary>
            Property ObjectType indicates what kind of object should be instantiated to match this meta data.
            This type must be a subclass from FndDataRow and must have a constructor without parameters
            </summary>
            <example>This example shows how to use this property
            <code>
            dataColumns.ObjectType = typeof(OrderLine)
            </code>
            </example>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.ArrayAttributeType">
            <summary>
            Typed definition of an array attribute containing this kind of rows
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.AggregateAttributeType">
            <summary>
            Typed definition of an aggregate attribute containing this kind of row
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.TableType">
            <summary>
            Property TableType indicates what kind of object should be instantiated to match this meta data.
            This type must be a subclass from FndDataTable and must have a constructor without parameters
            </summary>
            <example>This example shows how to use this property
            <code>
            dataColumns.TableType = typeof(OrderLineTable)
            </code>
            </example>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.Item(System.Int32)">
            <summary>
            Returns an item within this collection
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.FormatString">
            <summary>
            Gets or sets the format string
            </summary>
            <remarks>The FormatString is used for the FndDataRow.Format method</remarks>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.Item(System.String)">
            <summary>
            Returns an item within this collection
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.TermID">
            <summary>
            Term for the column
            </summary>
            <remarks>ID for the term, typically used for field labels and column headers</remarks>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.TermUsageID">
            <summary>
            Term usage for the column
            </summary>
            <remarks>ID for the translated term usage, typically used for tooltips</remarks>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.TermPath">
            <summary>
            Term path
            </summary>
            <remarks>translation path for the column title</remarks>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataColumnCollection.Tag">
            <summary>
            Gets or sets the object that contains data about the column collection
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.DeferredPopulate.FndDataMemberAccess">
            <summary>
            Defines an access to a datamember within a dataset
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.DeferredPopulate.FndDataMemberAccess.#ctor(Ifs.Fnd.Data.FndDataSet,System.String)">
            <summary>
            Creates a new instance of FndDataMemberAccess
            </summary>
            <param name="dataSet">Accessed dataset</param>
            <param name="dataMember">Accessed datamember</param>
        </member>
        <member name="M:Ifs.Fnd.Data.DeferredPopulate.FndDataMemberAccess.ColumnFromDataMember(Ifs.Fnd.Data.FndDataSet,System.String)">
            <summary>
            Gets a column from a datamember within a dataset
            </summary>
            <param name="dataSet">A dataset</param>
            <param name="dataMember">A datamember within the dataset</param>
            <returns>The column for the specified datamember</returns>
        </member>
        <member name="P:Ifs.Fnd.Data.DeferredPopulate.FndDataMemberAccess.Column">
            <summary>
            Gets accessed column
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.DeferredPopulate.FndDataMemberAccess.DataMember">
            <summary>
            Gets accessed datamember
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.DeferredPopulate.FndDataMemberAccess.DataSet">
            <summary>
            Gets accessed dataset
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.DeferredPopulate.FndDataMemberAccessConverter">
            <summary>
            Type converter for FndDataMemberAccess
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.DeferredPopulate.FndDataMemberAccessConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A System.Type that represents the type you want to convert to</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.DeferredPopulate.FndDataMemberAccessConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context</param>
            <param name="culture">A System.Globalization.CultureInfo object. If null is passed, the current culture is assumed.</param>
            <param name="value">The System.Object to convert</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.DeferredPopulate.FndDeferredPopulateRequestMonitorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A System.Type that represents the type you want to convert to</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.DeferredPopulate.FndDeferredPopulateRequestMonitorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context</param>
            <param name="culture">A System.Globalization.CultureInfo object. If null is passed, the current culture is assumed.</param>
            <param name="value">The System.Object to convert</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
        </member>
        <member name="T:Ifs.Fnd.Data.DeferredPopulate.FndDataMemberAccessCollection">
            <summary>
            A collection of FndDataMemberAccess objects
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.DeferredPopulate.FndDataMemberAccessCollection.#ctor">
            <summary>
            Creates a new instance of this object
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.DeferredPopulate.FndDataMemberAccessCollection.Add(Ifs.Fnd.Data.DeferredPopulate.FndDataMemberAccess)">
            <summary>
            Add a new FndDataMemberAccess to this collection
            </summary>
            <param name="memberAccess">The FndDataMemberAccess to add</param>
        </member>
        <member name="P:Ifs.Fnd.Data.DeferredPopulate.FndDataMemberAccessCollection.Item(System.Int32)">
            <summary>
            Gets or sets a FndDataMemberAccess in this collection
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.DeferredPopulate.FndDeferredPopulateRequestMonitor">
            <summary>
            Holds information about a control and a specific property of that control, which are used to fire deferred populate event.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.DeferredPopulate.FndDeferredPopulateRequestMonitor.#ctor(System.Object,System.String,System.Boolean)">
            <summary>
            Creates a new instance of DeferredPopulateRequestMonitor
            </summary>
            <param name="control">The control associated with the monitor</param>
            <param name="propertyName">The property of the control which when changed raises the deferred populate event</param>
            <param name="deferredWhen">Specifies which Boolean state of the Property is considered as deferred.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.DeferredPopulate.FndDeferredPopulateRequestMonitor.#ctor(System.Object,System.String)">
            <summary>
            Creates a new instance of DeferredPopulateRequestMonitor
            </summary>
            <param name="control">The control associated with the monitor</param>
            <param name="propertyName">The property of the control which when changed raises the deferred populate event</param>
        </member>
        <member name="M:Ifs.Fnd.Data.DeferredPopulate.FndDeferredPopulateRequestMonitor.#ctor">
            <summary>
            Creates a new instance of DeferredPopulateRequestMonitor
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Data.DeferredPopulate.FndDeferredPopulateRequestMonitor.OnDeferredPopulate">
            <summary>
            Raised when deferred populate is called 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.DeferredPopulate.FndDeferredPopulateRequestMonitor.Control">
            <summary>
            Gets the control associated with the monitor 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.DeferredPopulate.FndDeferredPopulateRequestMonitor.PropertyName">
            <summary>
            Gets the property name of the control associated with the monitor 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.DeferredPopulate.FndDeferredPopulateRequestMonitor.CurrentlyDeferred">
            <summary>
            Gets whether the Binding/BindingList is currently deferred based on the status of the propery value of the control  
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.DeferredPopulate.FndDeferredPopulateRequestMonitor.DeferredWhen">
            <summary>
            Gets or sets the boolean state of the Property that is considered as deferred 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndMarshalOptions">
            <summary>
            Options for the marshal operation.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndMarshalOptions.None">
            <summary>
            No option
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndMarshalOptions.ExcludeTopBuffer">
            <summary>
            Include top buffer in serialization
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndMarshalOptions.EncodedAttributeNames">
            <summary>
            Encode/Decode attribute names when marshaling attributes. 
            Used by functions that store FndDataRows in the profile where attribute names don't comply with XML standard.
            Encoding format according to MS XmlConvert format http://msdn.microsoft.com/en-us/library/system.xml.xmlconvert.encodename.aspx
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDataRow">
            <summary>
            Represents a row of data, typically appears as a row in a FndDataTable
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.#ctor">
            <summary>
            Initializes a new instance of the FndDataRow class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.#ctor(Ifs.Fnd.Data.FndDataColumnCollection)">
            <summary>
            Initializes a new instance of the FndDataRow class
            </summary>
            <param name="meta">Data columns</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.#ctor(Ifs.Fnd.Data.FndDataColumnCollection,System.Object[])">
            <summary>
            Initializes a new instance of the FndDataRow class
            </summary>
            <param name="meta">Data columns</param>
            <param name="values">Array of initial values in column order</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndDataRow class
            </summary>
            <param name="type">Row type</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.OnDeferredPopulate(Ifs.Fnd.Data.FndDataColumn)">
            <summary>
            Raises the DeferredPopulate event.  
            </summary>
            <param name="column">The column to populate</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.ExcludeQueryResult">
            <summary>
            Sets the status of all attributes to QueryExclude
            Use this on a condition parameter to ActivityQueryRow
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.ClearDirty">
            <summary>
            Clears the dirty state of the row
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.SaveBytes">
            <summary>
            Marshal the FndDataRow to a byte array
            </summary>
            <returns>Byte array</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.SaveBytes(Ifs.Fnd.Data.FndMarshalOptions)">
            <summary>
            Marshal the FndDataRow to a byte array
            </summary>
            <param name="marshalOptions">Marshaling option flags. The flags can be combined.</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.Marshal(System.IO.Stream)">
            <summary>
            Marshal to FndDataRow onto the stream
            </summary>
            <param name="stream">Destination Stream</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.LoadBytes(System.Byte[])">
            <summary>
            Unmarshal from a byte array
            </summary>
            <param name="data">Source byte array</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.LoadBytes(System.Byte[],Ifs.Fnd.Data.FndMarshalOptions)">
            <summary>
            Unmarshal from a byte array
            </summary>
            <param name="data">Source byte array</param>
            <param name="marshalOptions">Marshaling options</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.LoadFromFile(System.String)">
            <summary>
            Loads a row from file
            </summary>
            <param name="fileName">Filename</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.SaveToFile(System.String)">
            <summary>
            Saves a row into a file
            </summary>
            <param name="fileName">Filename</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.Unmarshal(System.IO.Stream)">
            <summary>
            Unmarshal onto a Stream
            </summary>
            <param name="stream">Destination Stream</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.Unmarshal(System.IO.Stream,Ifs.Fnd.Data.FndMarshalOptions)">
            <summary>
            Unmarshal onto a Stream
            </summary>
            <param name="stream">Destination Stream</param>
            <param name="marshalOptions">Marshaling options</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.Write(System.IO.BinaryWriter)">
            <summary>
            Marshal data row into stream writer
            </summary>
            <param name="writer">Stream writer</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.SkipBufferBlock(Ifs.Fnd.Buffer.FndTokenReader,System.Int32@)">
            <summary>
            Spools past a complete buffer block, including sub-blocks 
            </summary>
            <param name="tr">The Token Reader</param>
            <param name="bufferBlockDeep">Should be set to zero in the first recursion call level</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.GetPreservedValue(Ifs.Fnd.Data.FndDataColumn)">
            <summary>
            Return row/table value that should be preserved when unmarshalaing
            </summary>
            <param name="column">Column</param>
            <returns>Preserved value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.Clone">
            <summary>
            Clone FndDataRow and all it's contained attributes
            </summary>
            <returns>A cloned row</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.Clone(System.Boolean)">
            <summary>
            Clone FndDataRow
            </summary>
            <param name="includeAttributes">Indicates if the contained attributes should be included in the returned object</param>
            <returns>A cloned row</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.LoadDataRow(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Copies the contents from the source row into this object
            </summary>
            <param name="sourceRow">Source row</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.SetCondition(Ifs.Fnd.Data.FndCondition)">
            <summary>
            Set query condition on data row
            </summary>
            <param name="newCondition">Condition</param>
            <remarks>
            Conditions can be created by using FndDataColumn.CreateCondition and by combining them into compound conditions.
            </remarks>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.AddCondition(Ifs.Fnd.Data.FndCondition,Ifs.Fnd.Data.FndConditionCategoryType)">
            <summary>
            Add a condition to an existing condition on this record.
            Existing condition will be combined with the new condition by
            applying the category cat.
            If no condition exists on the record the new condition will simply be set.
            </summary>
            <param name="newCondition">New condition to add to the record.</param>
            <param name="cat">Query category (and/or) to use.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.AddCondition(Ifs.Fnd.Data.FndCondition)">
            <summary>
            Add a condition to an existing condition on this record using
             standard operator "and".
            </summary>
            <param name="newCondition">New condition to add to the record</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.GetCondition">
            <summary>
            Gets the current advanced condition set on this record.
            </summary>
            <returns>Advanced condition</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.EndEdit">
            <summary>
            Pushes changes since the last System.ComponentModel.IEditableObject.BeginEdit or System.ComponentModel.IBindingList.AddNew call into the underlying object.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.CancelEdit">
            <summary>
            Discards changes since the last System.ComponentModel.IEditableObject.BeginEdit call.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.UnsubscribeFromChild(System.Object)">
            <summary>
            Unsubscribe from child events
            Callers to this method should make sure that contained row is sent for aggregates etc.
            </summary>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.SubscribeToChild(System.Object)">
            <summary>
            Subscribe to child events
            Callers to this method should make sure that contained row is sent for aggregates etc.
            </summary>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.ToString">
            <summary>
            Returns a string representation of the datarow for debug purposes
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.FormatPrimaryKey">
            <summary>
            Formats primary key values in alphabetical order for column names using ^ as separator
            </summary>
            <returns>Formatted value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.FormatPrimaryKeyRef">
            <summary>
            Formats primary key reference list in alphabetical order for column names
            using ^ as key/value separator and = as value separator
            </summary>
            <returns>Formatted key reference list</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.LoadPrimaryKey(System.String)">
            <summary>
            Assigns primary key attributes from formatted string
            </summary>
            <param name="formattedPrimaryKey">Primary key string formatted with FormatPrimaryKey method</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.Format(System.String)">
            <summary>
            Converts an object to a formatted representation by using a format string
            </summary>
            <param name="format">Format string typically &lt;%ORDER_ID%&gt; - &lt;%CUSTOMER.CUSTOMER_NAME%&gt;</param>
            <returns>A formatted representation of the object</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.FormatConditionRow(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Formats a condition in a compact form for transfer.
            Internally it is a base64 encoded gZipped serialized buffer represenation of a condition.
            </summary>
            <param name="condition">Condition FndDataRow to format.</param>
            <returns>Condition formatted with the FormatCondition method.</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.LoadConditionRow(System.String,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Assigns the condition from formatted string.
            </summary>
            <param name="formattedCondition">Condition formatted with the FormatCondition method.</param>
            <param name="conditionRow">FndDataRow instance with conditions set from formatted string.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.GetChanges">
            <summary>
            Returns a clone of this row containing only keys and dirty attributes
            </summary>
            <returns>The clone of this row containing only keys and dirty attributes</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.ApplyChanges(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Applies Changes after save
            </summary>
            <param name="source">The source row</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.DeferredPopulateConditionFromEventArguments(Ifs.Fnd.Data.FndDataPathEventArgs,Ifs.Fnd.Data.FndDeferredPopulateStrategy)">
            <summary>
            Creates a condition for deferred populate server call based on event arguments from FndDataSet.DeferredPopulate
            </summary>
            <param name="e">Event arguments from FndDataSet.DeferredPopulate</param>
            <param name="strategy">Strategy to use for include/exclude</param>
            <returns>A condition that can be used for the deferred populate server call</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.DeferredPopulateMerge(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Merges attributes from source row into this row after a deferred populate.
            </summary>
            <param name="source">The row to copy from</param>
            <remarks>Only non-existent and non-dirty attributes are overwritten.</remarks>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns> true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>The hash value generated for the object.</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.op_Equality(Ifs.Fnd.Data.FndDataRow,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Determines whether two objects are equal.
            </summary>
            <param name="obj1">Object1 to compare</param>
            <param name="obj2">Object2 to compare</param>
            <returns>True if equals</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.op_Inequality(Ifs.Fnd.Data.FndDataRow,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Determines whether two objects are not equal.
            </summary>
            <param name="obj1">Object1 to compare</param>
            <param name="obj2">Object2 to compare</param>
            <returns>True if not equals</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.RequestDefaultValues">
            <summary>
            Sets rowaction so that prepare will be called for this level in row structure
            </summary>
            <remarks>
            Prepare is typically called on top level row in document structure. This flag can be set both on top level row and child rows.
            </remarks>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.Add(System.String,Ifs.Fnd.Data.FndAttribute)">
            <summary>
            Add a new attribute to the row
            </summary>
            <param name="name">Name of the attribute</param>
            <param name="attribute">The attribute</param>
            <returns>The attribute</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.SetAttributeReadOnly(Ifs.Fnd.Data.FndDataColumn,System.Boolean)">
            <summary>
            Sets the Read Only Flag.
            </summary>
            <param name="column">The column which is updated</param>
            <param name="val">True sets the attribute to read only. False makes it updateable.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.SetAttributeValue(System.Int32,System.Object,System.Boolean)">
            <summary>
            Base version of SetAttributeValue that only sets the value without any 
            validation made. 
            </summary>
            <param name="index">attribute index</param>
            <param name="value">value</param>
            <param name="makeDirty">set attribute as dirty</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.AttributeIsDirty(Ifs.Fnd.Data.FndDataColumn)">
            <summary>
            Checks if attribute is dirty.
            </summary>
            <param name="column">The column</param>
            <returns>True if the attribute is dirty, False otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.ApplyInvalidValues(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Merge all invalid values found in the source record onto this record.
            The functionality is similar to ApplyChanges but it only merge invalid values
            and the destination record is not cleared of dirty flags.
            </summary>
            <param name="source">Record containing the structure that should be merged upon this instance</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.MergeInvalidValues(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Searches for all invalid values in the supplied row and merge the errors onto 
            the current row. This method is used by the framework to merge validation errors
            from the server onto the current row.
            </summary>
            <param name="invalid">Row containing the errors to be merged</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.ClearInvalidValues">
            <summary>
            Invalid values should never be sent to the server. If a row is in state deleted
            it will not be catched with FndDataTable.ValidateTable since that only
            validates non deleted rows. Therefor we need to clean the row from any 
            invalid values when validating a table.
            
            Example:
            In an overview grid. Modify an existing row where one of the columns is mandatory.
            Set the mandatory column to null and press Save. There will be a UI clue painted
            to say this is mandatory, and there will be an invalid value created on that row.
            If you now delete this row from the grid and press Save, there will be a deleted row
            in the FndDataTable containing an invalid value. This would be sent to the server
            if we don't clear it, since ValidateTable will not call FndDataRow.ValidateRow for
            deleted rows.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.ValidateRow">
            <summary>
            Validate the current state of the row to know if it can be saved or not.
            
            Verifies that all mandatory fields have values.
            Verifies that the row does not contain any invalid values.
            </summary>
            <returns>returns false if any child object turns out to be invalid</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.IsReferenceColumnsManadatory(Ifs.Fnd.Data.FndDataColumn)">
            <summary>
            Check if all reference mirror columns for a reference is mandatory. 
            </summary>
            <param name="column">aggregate column to investigate</param>
            <returns>returns true if all mirror columns are mandatory and false if not. 
            the method also returns false if there are no mirror columns.</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRow.IsValueEmpty(System.Object)">
            <summary>
            Support method to investigate a value if it is to be regarded as empty or not.
            </summary>
            <param name="value">Value to be investigated</param>
            <returns>true if the value is empty and false if not</returns>
        </member>
        <member name="E:Ifs.Fnd.Data.FndDataRow.RowStateChanged">
            <summary>
            Thrown when the row state of a row has changed.
            Note: This is not fired during unmarshalling of a datarow or dataset
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataRow.Item(System.Int32)">
            <summary>
            Access to the contained attributes
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataRow.Item(Ifs.Fnd.Data.FndDataColumn)">
            <summary>
            Access to the contained attributes
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataRow.Item(System.String)">
            <summary>
            Access to the contained attributes
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataRow.DynamicMeta">
            <summary>
            Indicates if meta data should be dynamically read from unmarshal stream. Typed generated classes returns false.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataRow.Columns">
            <summary>
            The column definition for this row, also known as meta data.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataRow.Count">
            <summary>
            Returns number of attributes
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataRow.RowState">
            <summary>
            Gets or sets the state of the row which can be Added, Modified, Deleted or Unchanged
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataRow.Dirty">
            <summary>
            Indicates if the row is dirty
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataRow.RowIdentity">
            <summary>
            Gets the identity for a row. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataRow.HasRequestDefaultValues">
            <summary>
            Returns true if the marker for GetDefaults has been set on the datarow.
            (FndDataRow.RequestDefaultValues() has been called)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataRow.System#ComponentModel#IDataErrorInfo#Item(System.String)">
            <summary>
            Gets an error message indicating what is wrong with a specific column in this row
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataRow.System#ComponentModel#IDataErrorInfo#Error">
            <summary>
            Gets the aggregated column errors for this row.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataRow.Error">
            <summary>
            Gets the aggregated column errors for this row.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDataRow.AttrStatus">
            <summary>
            Temporary field used during sort operation.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndListChangedEventArgs">
            <summary>
            Extends ListChangedEventArgs with current row for ListchangedType.ItemDeleted and ListchangedType.Reset
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Creates a new instance of FndListChangedEventArgs
            </summary>
            <param name="type">Type of change</param>
            <param name="newIndex">New index of row</param>
            <param name="row">The row causing the event to be raised</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Creates a new instance of FndListChangedEventArgs
            </summary>
            <param name="type">Type of change</param>
            <param name="newIndex">New index of row</param>
            <param name="oldIndex">Old index of row</param>
            <param name="row">The row causing the event to be raised</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32,Ifs.Fnd.Data.FndDataRow,System.Boolean)">
            <summary>
            Creates a new instance of FndListChangedEventArgs
            </summary>
            <param name="type">Type of change</param>
            <param name="newIndex">New index of row</param>
            <param name="oldIndex">Old index of row</param>
            <param name="row">The row causing the event to be raised</param>
            <param name="resetCausedBySort">Indicates is this is a reset event caused by a sort</param>
        </member>
        <member name="P:Ifs.Fnd.Data.FndListChangedEventArgs.Row">
            <summary>
            Gets the row causing the event to be raised
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndListChangedEventArgs.ResetCausedBySort">
            <summary>
            Gets a value indicating if this is a reset event caused by a sort
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDataRowCollection">
            <summary>
            FndDataRowCollection is a collection of FndDataRow objects
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRowCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRowCollection.Add(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Adds a new data row into this collection
            </summary>
            <param name="row">The row to add</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRowCollection.Insert(System.Int32,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Inserts an item to the collection at the specified position.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="row">The FndDataRow to insert into the collection.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRowCollection.Contains(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="row">The object to locate in the collection.</param>
            <returns>true if the object is found in the collection; otherwise, false. </returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRowCollection.Remove(System.Int32)">
            <summary>
            Removes a row from this collection
            </summary>
            <param name="index">Index of the row to remove</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRowCollection.CopyTo(Ifs.Fnd.Data.FndDataRow[],System.Int32)">
            <summary>
            Copies the elements of the System.Collections.ICollection to an FndDataRow array, starting at a particular FndDataRow array index.
            </summary>
            <param name="rows">The one-dimensional FndDataRow array that is the destination of the elements copied from System.Collections.ICollection. The FndDataRow array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRowCollection.Remove(System.Object)">
            <summary>
            Removes a data row from this collection
            </summary>
            <param name="value">The row to remove</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRowCollection.Remove(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Removes a data row from this collection
            </summary>
            <param name="row">The row to remove</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a row at the specified position
            </summary>
            <param name="index">Index of the row to remove</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRowCollection.OnClear">
            <summary>
            Performs additional custom processes when clearing the contents of this collection
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRowCollection.OnClearComplete">
            <summary>
            Performs additional custom processes after clearing the contents of this collection
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataRowCollection.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>The hash value generated for the object.</returns>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataRowCollection.Item(System.Int32)">
            <summary>
            Gets a data row from this collection
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDataSet">
            <summary>
            FndDataSet is a container for one or more FndDataTable objects.
            Supports binding in design time. Can be generated from FndDataAdapter.
            </summary>
            
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataSet.#ctor">
            <summary>
            Initializes a new instance of the FndDataSet class
            Warning: Use the constructor FndDataSet(IContainer container) instead!
            If you use this constructor, you must manually call Dispose() on this object.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataSet.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the FndDataSet class and associates it with the specified container.
            </summary>
            <param name="container">The container to add this component to</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataSet.DisposeCachedDataSets(System.Boolean)">
            <summary>
            Internal framework use only
            </summary>
            <param name="disposing">True to dispose</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataSet.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the System.ComponentModel.Component
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataSet.Validate">
            <summary>
            Validates the data set so that it is free from invalid values and that meta data rules are meet.
            If any invalid values are found or if mandatory attributes are not set this method returns false.
            </summary>
            <returns>returns true if the dataset is ready to save and false if not.</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataSet.BeginInit">
            <summary>
            Used by Visual Studio Designer
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataSet.EndInit">
            <summary>
            Used by Visual Studio Designer
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Data.FndDataSet.ColumnChanging">
            <summary>
            Raised when a value in the DataSet is changing
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Data.FndDataSet.ColumnChanged">
            <summary>
            Raised when a value in the DataSet has been changed
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Data.FndDataSet.RowAdded">
            <summary>
            Raised when a row in the DataSet has been added
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Data.FndDataSet.RowRemoved">
            <summary>
            Raised when a row in the DataSet has been removed
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Data.FndDataSet.DeferredPopulate">
            <summary>
            Raised when a non-recieved attribute is accessed from code or databinding layer
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Data.FndDataSet.DirtyStateChanged">
            <summary>
            Raised when dirty state is changed
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Data.FndDataSet.EditModeChanged">
            <summary>
            Raised when entering or leaving editmode
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataSet.Tables">
            <summary>
            The tables in the dataset
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataSet.Dirty">
            <summary>
            Indicates if the dataset is dirty
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataSet.EditMode">
            <summary>
            Indicates if the dataset is in edit mode
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDeferredPopulateStrategy">
            <summary>
            Defines strategies for how deferred populate should be done for a dataset
            </summary>
            <remarks>Deferred populate is a concept that fetches non-fetched attributes with a separate storage access</remarks>
        </member>
        <member name="F:Ifs.Fnd.Data.FndDeferredPopulateStrategy.None">
            <summary>
            Don't use deferred populate
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndDeferredPopulateStrategy.OneLevelPerRequest">
            <summary>
            Populates one attribute level at a time. Simple attributes are fetched together. Binary attributes, aggregates and arrays are populated separately.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndDeferredPopulateStrategy.CompleteSubStructure">
            <summary>
            Populates the entire sub structure
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.ChildEventType">
            <summary>
            Type of bubbling event in data structures
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.BeginEdit">
            <summary>
            Edit of a row starting
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.CancelEdit">
            <summary>
            Edit of a row cancelled
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.EndEdit">
            <summary>
            Edit of a row finished
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.DeferredPopulate">
            <summary>
            Deferred populate request
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.UnmarshalComplete">
            <summary>
            Unmarshal is completed, typically used to refresh value after it's been changed
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.Dirty">
            <summary>
            Data structure has been dirty
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.Clean">
            <summary>
            Data structure has gone from dirty to clean
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.RowAdded">
            <summary>
            A row has been added
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.RowRemoved">
            <summary>
            A row has been removed
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.ColumnChanging">
            <summary>
            A value in a row is about to be changed
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.ColumnChanged">
            <summary>
            A value in a row has been changed
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.ValidateRowError">
            <summary>
            DataRow.ValidateRow have found an offender that prevents 
            the row from beeing saved.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.RowStateChanged">
            <summary>
            Row state changes in a way that needs parent to act
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.CheckRowAddAllowed">
            <summary>
            Check that it's allowed to add a row in a FndDataRowCollection (bubbles to FndDataRow that checks array attribute's AttributeNotUpdatable)
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.RemovedRowAddAttempt">
            <summary>
            Someone is trying to add a row in state Removed to rowcollection, bubble to table that puts row in deletedrows
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.ChildEventType.ClearComplete">
            <summary>
            Rowcollection has been cleared
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.ChildDataEventHandler">
            <summary>
            Bubbling event in data structures
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndRowStateChangedEventHandler">
            <summary>
            Raised when the state of a row changes
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDataPathEventHandler">
            <summary>
            Bubbling event from structure in a dataset
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDataEditEventHandler">
            <summary>
            Bubbling change events from structure in a dataset
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndRowCollectionChangedEventHandler">
            <summary>
            Raised when a row has been added or removed in the dataset
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDataPathEventArgs">
            <summary>
            EventArgs for events with path into data structure in a dataset
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataPathEventArgs.#ctor(System.String,Ifs.Fnd.Data.FndDataRow[])">
            <summary>
            Initializes a new instance of the FndDataPathEventArgs class
            </summary>
            <param name="childPath">Path to the event source</param>
            <param name="rowPath">Array of rows down to the event source</param>
            <remarks>
            If the childPath is the ORDER/LINES/QTY attribute the rowPath will contain two elements {Order, OrderLine}
            </remarks>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataPathEventArgs.CreateDeferredPopulateCondition(Ifs.Fnd.Data.FndDeferredPopulateStrategy)">
            <summary>
            Creates a condition for deferred populate server call based on event arguments from FndDataSet.DeferredPopulate
            </summary>
            <param name="strategy">Strategy to use for include/exclude</param>
            <returns>A condition for deferred populate server call</returns>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataPathEventArgs.ChildPath">
            <summary>
            The path to the affected information
            </summary>
            <example>CUSTOMER_ORDER/LINES/BUY_QTY_DUE</example>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataPathEventArgs.RowPath">
            <summary>
            An array FndDataRow objects in the data structure
            </summary>
            <example>An event for CUSTOMER_ORDER/LINES/BUY_QTY_DUE will contain 2 FndDataRow objects 
            <code>
            ((CustomerOrder)e.ChildPath[0]).TotalValue.SetValue(0);
            ((CustomerOrderLine)e.ChildPath[1]).SubTotal.SetValue(0);
            </code>
            An event for CUSTOMER_ORDER/CUSTOMER_NO will only contain the CustomerOrder object
            </example>
        </member>
        <member name="P:Ifs.Fnd.Data.ChildDataEventArgs.Info">
            <summary>
            Data for the event.
            RowAdded - index
            RowRemoved - object [] {row, index, oldRowState}
            ColumnChanging - FndDataEditValues
            RowStateChanged - object [] {oldRowState, newRowState}
            ValidateRowError - string with validate error message
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndRowStateChangedEventArgs">
            <summary>
            Event arguments for row state changes
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndRowStateChangedEventArgs.#ctor(Ifs.Fnd.Data.FndDataRowState,Ifs.Fnd.Data.FndDataRowState)">
            <summary>
            Initializes a new instance of the FndRowStateChangedEventArgs class
            </summary>
            <param name="oldState">The old state of the row</param>
            <param name="newState">The new state of the row</param>
        </member>
        <member name="P:Ifs.Fnd.Data.FndRowStateChangedEventArgs.OldState">
            <summary>
            Gets the old state value
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndRowStateChangedEventArgs.NewState">
            <summary>
            Gets the new state value
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDataEditEventArgs">
            <summary>
            Event arguments for data edit events
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataEditEventArgs.#ctor(System.String,Ifs.Fnd.Data.FndDataRow[],System.Object)">
            <summary>
            Initializes a new instance of the FndDataEditEventArgs class
            </summary>
            <param name="childPath">Path to the event source</param>
            <param name="rowPath">Array of rows down to the event source</param>
            <param name="info">Info of type FndDataEditValues</param>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataEditEventArgs.OldValue">
            <summary>
            Old value
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataEditEventArgs.NewValue">
            <summary>
            New value
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataEditEventArgs.IsInvalid">
            <summary>
            Set this flag to cancel the data edit process
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataEditEventArgs.ErrorText">
            <summary>
            Gets or sets the error text for the value
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndRowCollectionChangedEventArgs">
            <summary>
            Event argument for dataset rowcollection events
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndRowCollectionChangedEventArgs.#ctor(System.String,Ifs.Fnd.Data.FndDataRow[],System.Int32)">
            <summary>
            Initializes a new instance of the FndRowCollectionChangedEventArgs class
            </summary>
            <param name="childPath">Path to the event source</param>
            <param name="rowPath">Array of rows down to the event source</param>
            <param name="index">Index of the affected row</param>
        </member>
        <member name="P:Ifs.Fnd.Data.FndRowCollectionChangedEventArgs.Index">
            <summary>
            Index of the affected row
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDataTable">
            <summary>
            FndDataTable contains a collection of rows and a collection of columns that describes the contents in the rows collection.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.#ctor">
            <summary>
            Initializes a new instance of the FndDataTable class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.#ctor(Ifs.Fnd.Data.FndDataColumnCollection)">
            <summary>
            Initializes a new instance of the FndDataTable class
            </summary>
            <param name="columns">Data columns</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndDataTable class
            </summary>
            <param name="type">Type name for rows in this table</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.NewRow">
            <summary>
            Creates a new FndDataRow based on the schema defined in Columns property. Object type is defined in Columns.ObjectType property (default FndDataRow)
            This function only creates the object instance, the new row is NOT automatically added to the Rows collection.
            </summary>
            <returns>The newly created row</returns>
            <example>
            <code>
            table.Rows.Add(table.NewRow());
            </code>
            </example>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.ValidateTable">
            <summary>
            Validate the current state of the rows in the table to know if the data source is 
            ready for a save operation. 
            </summary>
            <returns>returns false if any child contains any offender</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.ApplyInvalidValues(Ifs.Fnd.Data.FndDataTable)">
            <summary>
            Searces this table for matches to the records in the source table.
            For matching records the containing invalid values are merged onto the current structure.
            </summary>
            <param name="srcTable">Source table that should be applied to this</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.FindRow(System.String,Ifs.Fnd.Data.FndDataRow@)">
            <summary>
            Find row searches for and returns a row with specified identifier.
            </summary>
            <param name="rowIdentity">Row identity</param>
            <param name="foundRow">DataRow found if existent in the table.</param>
            <returns>Returns true if the row is found false otherwise.</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.GetChanges">
            <summary>
            Gets all dirty rows in the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.GetChangesAsTable">
            <summary>
            Gets all dirty rows in the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.ClearDirty">
            <summary>
            Clears the dirty state of all contained rows
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.LoadDataTable(Ifs.Fnd.Data.FndDataTable)">
            <summary>
            Fills the datatable from clone of contents in source datatable
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.LoadBytes(System.Byte[])">
            <summary>
            Fills the table from an array of bytes
            </summary>
            <param name="data">The data containing the table</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.LoadPLSQLSelectCommandResult(System.Byte[])">
            <summary>
            Fills the table from an array of bytes.
            Only to be used by FndPLSQLSelectCommand since this
            method has a different way of parsing buffers.
            </summary>
            <param name="data">The data containing the table</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.LoadBytes(System.Byte[],System.Boolean)">
            <summary>
            Fills the table from an array of bytes
            </summary>
            <param name="data">The data containing the table</param>
            <param name="isContainedInRow">Indicates if the table is contained in a row with an array attribute named ARR (used for array return values in unmarshaling)</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.Unmarshal(System.IO.Stream,System.Boolean)">
            <summary>
            Unmarshal from a stream
            </summary>
            <param name="stream">The source stream</param>
            <param name="isContainedInRow">Indicates if the table is contained in a row with an array attribute named ARR (used for array return values in unmarshaling)</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.Unmarshal(System.IO.Stream)">
            <summary>
            Unmarshal from a stream
            </summary>
            <param name="stream">The source stream</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.SaveBytes">
            <summary>
            Save table to a byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.SaveBytes(System.Boolean)">
            <summary>
            Fills the table from an array of bytes
            </summary>
            <param name="containedInRow">Indicates if the table should be contained in a row with an array attribute named ARR (used for array return values in unmarshaling)</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.Marshal(System.IO.Stream)">
            <summary>
            Marshal to a stream
            </summary>
            <param name="stream">Destination stream</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.ToString">
            <summary>
            Returns a string representation of the FndDataTable for debug purposes
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.GetHashCode">
            <summary>
            Returns the hash code of the object.
            </summary>
            <returns>The hash value generated for the object.</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTable.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An System.Collections.IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataTable.Name">
            <summary>
            Returns the name of the table
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataTable.Dirty">
            <summary>
            Indicates if the table contains any dirty rows
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataTable.Columns">
            <summary>
            The meta data for rows in the table
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataTable.Rows">
            <summary>
            The contained rows
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataTable.Count">
            <summary>
            Number of rows in the table
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataTable.PartialResult">
            <summary>
            Do we have a partial result (as a consequence of a MaxRows value given)
            True means there exists more rows than returned
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDataTableConverter">
            <summary>
            For framework internal use only.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
             Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A System.Type that represents the type you want to convert to</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides a format context</param>
            <param name="culture">A System.Globalization.CultureInfo object. If null is passed, the current culture is assumed.</param>
            <param name="value">The System.Object to convert</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDataTableCollection">
            <summary>
            Tables contained in a DataSet.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTableCollection.Add">
            <summary>
            Add a new FndDataTable object
            </summary>
            <returns>The new FndDataTable object</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTableCollection.Add(Ifs.Fnd.Data.FndDataTable)">
            <summary>
            Add a new FndDataTable object
            </summary>
            <param name="newTable">The new FndDataTable object</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTableCollection.Insert(System.Int32,Ifs.Fnd.Data.FndDataTable)">
            <summary>
            Inserts an item to the collection at the specified position.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="newTable">The FndDataTable to insert into the collection.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTableCollection.IndexOf(Ifs.Fnd.Data.FndDataTable)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="table">The object to locate in the collection.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTableCollection.Contains(Ifs.Fnd.Data.FndDataTable)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="table">The object to locate in the collection.</param>
            <returns>true if the object is found in the collection; otherwise, false. </returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTableCollection.Remove(Ifs.Fnd.Data.FndDataTable)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="table">The object to remove from the collection.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTableCollection.CopyTo(Ifs.Fnd.Data.FndDataTable[],System.Int32)">
            <summary>
            Copies the elements of the System.Collections.ICollection to an FndDataTable array, starting at a particular FndDataTable array index.
            </summary>
            <param name="tables">The one-dimensional FndDataTable array that is the destination of the elements copied from System.Collections.ICollection. The FndDataTable array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDataTableCollection.Clear">
            <summary>
            Clear this collection
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Data.FndDataTableCollection.CollectionChanged">
            <summary>
            Occurs when collection is changed
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDataTableCollection.Item(System.Int32)">
            <summary>
            Retrieve a FndDataTable object within this collection
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDateAttribute">
            <summary>
            An attribute for date values
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndTimeStampAttribute">
            <summary>
            Attribute for TimeStamp values
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeStampAttribute.#ctor">
            <summary>
            Initializes a new instance of the FndTimeStampAttribute class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeStampAttribute.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the FndTimeStampAttribute class
            </summary>
            <param name="initialValue">Initial value for the attribute</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeStampAttribute.GetValue(System.DateTime)">
            <summary>
            Gets the contained value
            </summary>
            <returns>Attribute value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeStampAttribute.SetValue(System.DateTime)">
            <summary>
            Sets the Contained value
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeStampAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeStampAttribute.GetValueType">
            <summary>
            Returns the contained value type
            </summary>
            <returns>Value type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeStampAttribute.Parse(System.String)">
            <summary>
            Parse string value into this attribute
            </summary>
            <param name="s">String value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeStampAttribute.TryParse(System.String,System.Object@)">
            <summary>
            Parses a string representation of attribute into DateTime
            </summary>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeStampAttribute.ToString">
            <summary>
            Returns a string representation of an FndTimeStampAttribute
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeStampAttribute.Format">
            <summary>
            <see cref="M:Ifs.Fnd.Data.FndAttribute.Format"/>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeStampAttribute.CompareTo(Ifs.Fnd.Data.FndAttribute)">
            <summary>Compares two attributes. Used in sorting.
            </summary>
            <param name="attr">Attribute to compare to
            </param>
            <returns> 0 if equal
            
            </returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDateAttribute.#ctor">
            <summary>
            Initializes a new instance of the FndDateAttribute class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDateAttribute.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the FndDateAttribute class
            </summary>
            <param name="initialValue">Initial value for the attribute</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDateAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDateAttribute.Format">
            <summary>
            <see cref="M:Ifs.Fnd.Data.FndAttribute.Format"/>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDateAttribute.ToString">
            <summary>
            Returns a string representation of an FndDateAttribute
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDateAttribute.ToStringClientSysFormat">
            <summary>
            Returns a string representation of an FndDateAttribute using database Client_Sys.date_format_
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDateAttribute.Parse(System.String)">
            <summary>
            Parse string value into this attribute
            </summary>
            <param name="s">String value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDateAttribute.TryParse(System.String,System.Object@)">
            <summary>
            Parses a string representation of attribute into DateTime
            </summary>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDescendingSortField">
            <summary>
            FndAttribute with descending ordering of sort keys.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDescendingSortField.#ctor">
            <summary>
            Creates a FndDescendingSortField based on a specified FndAttribute.
            The new sort field will contain the same attributes as the specified sort field
            but the ordering of sort keys will be marked as descending.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDescendingSortField.#ctor(Ifs.Fnd.Data.FndAttributeType,System.Type)">
            <summary>
            Creates a FndDescendingSortField based on a specified FndAttribute.
            The new sort field will contain the same attributes as the specified sort field
            but the ordering of sort keys will be marked as descending.
            </summary>
            <param name="attributeType">Attribute type</param>
            <param name="valueType">Value type</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDescendingSortField.GetValueType">
            <summary>
            Returns the contained value type
            </summary>
            <returns>Value type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDescendingSortField.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDescendingSortField.SortDirection">
            <summary>
            Returns FndSortOrder.Descending because this sort field is a descending sort field.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDetailCondition">
            <summary>
            Defines a detail condition
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndDetailCondition.#ctor(Ifs.Fnd.Data.FndDataColumn,Ifs.Fnd.Data.FndDataRow,Ifs.Fnd.Data.FndDetailQueryCategory)">
            <summary>
            Initializes a new instance of the FndDetailCondition class
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDetailCondition.Category">
            <summary>
            Gets the Reference Category for this condition.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDetailCondition.DetailRow">
            <summary>
            Gets DetailRow for this condition.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDetailCondition.ContainerColumn">
            <summary>
            Gets container meta for this condition.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndDetailCondition.Container">
            <summary>
            Returns the marshal containerColumn name used in serialization
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndDetailQueryCategory">
            <summary>
            Type of detail query
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndDetailQueryCategory.ExistsIn">
            <summary>
            Exists in
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndDetailQueryCategory.NotExistsIn">
            <summary>
            Not exists in
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.Typed.FndEntityView">
            <summary>
            Base class for all entity views
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.Typed.FndTypedDataRowBase">
            <summary>
            Base class for typed data rows.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndTypedDataRowBase.#ctor(Ifs.Fnd.Data.FndDataColumnCollection)">
            <summary>
            Initializes a new instance of the FndTypedDataRowBase class
            </summary>
            <param name="schema">Data columns</param>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndTypedDataRowBase.#ctor(Ifs.Fnd.Data.FndDataColumnCollection,System.Object[])">
            <summary>
            Initializes a new instance of the FndTypedDataRowBase class
            </summary>
            <param name="schema">Data columns</param>
            <param name="values">Array of initial values in column order</param>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndTypedDataRowBase.Add(System.String,Ifs.Fnd.Data.FndAttribute)">
            <summary>
            Add a new attribute to the row
            </summary>
            <param name="name">Name of the attribute</param>
            <param name="attribute">The attribute</param>
            <returns>The attribute</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndTypedDataRowBase.Clone(System.Boolean)">
            <summary>
            Clone to a new identical object
            </summary>
            <param name="includeAttributes">Indicate if the contained attributes should be included</param>
            <returns>A new row</returns>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndTypedDataRowBase.DynamicMeta">
            <summary>
            Indicates if meta data should be dynamically read from unmarshal stream. Typed generated classes returns false.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndEntityView.#ctor(Ifs.Fnd.Data.FndDataColumnCollection)">
            <summary>
            Initializes a new instance of the FndEntityView class
            </summary>
            <param name="schema">Data columns</param>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndEntityView.#ctor(Ifs.Fnd.Data.FndDataColumnCollection,System.Object[])">
            <summary>
            Initializes a new instance of the FndEntityView class
            </summary>
            <param name="schema">Data columns</param>
            <param name="values">Array of initial values in column order</param>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndEntityView.Schema">
            <summary>
            A static FndDataColumnCollection containing column definitions of the EnyityView 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndEntityView.ObjVersion">
            <summary>
            Gets the Object Version of the entity instance
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndEntityView.CreatedBy">
            <summary>
            Gets the entity instance creator 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndEntityView.CreatedDate">
            <summary>
            Gets the created date of the entity instance
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndEnumAttribute">
            <summary>
            An attribute for enumerations
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndEnumAttribute.#ctor">
            <summary>
            Initializes a new instance of the FndEnumAttribute class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndEnumAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FndEnumAttribute class
            </summary>
            <param name="initialValue">Initial value for the attribute</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndEnumAttribute.#ctor(Ifs.Fnd.Data.FndDataColumn)">
            <summary>
            Initializes a new instance of the FndEnumAttribute class
            </summary>
            <param name="column">Data column</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndEnumAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="T:Ifs.Fnd.Data.FndEnumeration">
            <summary>
            Provides parameter support for activity handler enumeration protocol methods
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndEnumeration.#ctor">
            <summary>
            Initializes a new instance of the FndEnumeration class
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndEnumerationItem">
            <summary>
            FndEnumerationItem provides the view definition for server calls with Enumeration parameter
            This class represents each row in result
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndEnumerationItem.#ctor">
            <summary>
            Initializes a new instance of the FndEnumerationItem class
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndEnumerationItem.Schema">
            <summary>
            Returns the schema for this row type
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndEnumerationItem.Id">
            <summary>
            ID of this item
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndEnumerationItem.Description">
            <summary>
            Description for this item
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndEnumerationItemTable">
            <summary>
            FndEnumerationItem provides the view definition for server calls with Enumeration parameter
            This class represents entire resultset and contains FndEnumerationItem objects
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndEnumerationItemTable.#ctor">
            <summary>
            Initializes a new instance of the FndEnumerationItemTable class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndEnumerationItemTable.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the FndEnumerationItemTable class
            </summary>
            <param name="enumType">Enumeration type to create a table for</param>
            <example>
            <code>
            enumTable = new FndEnumerationItemTable(typeof(IssuePrioEnumeration));
            </code>
            </example>
        </member>
        <member name="M:Ifs.Fnd.Data.FndEnumerationItemTable.Add(Ifs.Fnd.Data.FndEnumerationItem)">
            <summary>
            Add a new FndEnumerationItem object to this collection
            </summary>
            <param name="row">The new FndEnumerationItem object</param>
        </member>
        <member name="P:Ifs.Fnd.Data.FndEnumerationItemTable.Item(System.Int32)">
            <summary>
            Retrieve a FndEnumerationItem object within this collection
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndEventDispatcher">
            <summary>
            Provides data structure event dispatching functionality
            For internal framework use only
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndEventDispatcher.#ctor">
            <summary>
            Creates a new instance of FndEventDispatcher
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Data.FndEventDispatcher.ColumnChanged">
            <summary>
            Raised when a value has been changed
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Data.FndEventDispatcher.ListChanged">
            <summary>
            Raised when the table has changed
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Data.FndEventDispatcher.RowRefresh">
            <summary>
            Raised when an entire row has changed
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Data.FndEventDispatcher.InsertComplete">
            <summary>
            Raised when an entire row has changed
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Data.FndEventDispatcher.EndEdit">
            <summary>
            Raised when edit of a row is finished
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndEventDispatcher.Row">
            <summary>
            Gets or sets the row to dispatch events for
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndEventDispatcher.Table">
            <summary>
            Gets or sets the table to dispatch events for
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndGenericAspects">
            <summary>
            This class holds a static list of all registered generic aspects. 
            The storage layer will query this class for meta data for server induced aspects.
            E.g. when unmarchaling finds attributes for which no meta exists in the current entity. 
            this class is asked if the attribute are infact an generic aspect and if so meta is 
            retreived and merged with the current entity.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndGenericAspects.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndGenericAspects.Register(System.String,Ifs.Fnd.Data.FndDataColumnCollection)">
            <summary>
            Register an attribute as generic aspect with meta
            </summary>
            <param name="aspectAttribute">Attribute name as it will appear in the server response</param>
            <param name="meta">Aspect entity meta. E.g. entity schema</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndGenericAspects.GetMeta(System.String)">
            <summary>
            Get meta for a specific attribute
            </summary>
            <param name="aspectAttribute">Aspect attribute</param>
            <returns>Meta collection is returned if aspect is registered and empty collection if not</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndGenericAspects.Registered(System.String)">
            <summary>
            Method used to query if an attribute is registered as aspect or not.
            </summary>
            <param name="aspectAttribute">Attribute to query for</param>
            <returns>Returns true if the attribute is registered and false if not</returns>
        </member>
        <member name="T:Ifs.Fnd.Data.FndIntegerAttribute">
            <summary>
            Attribute for integer values
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndIntegerAttribute.#ctor">
            <summary>
            Initializes a new instance of the FndIntegerAttribute class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndIntegerAttribute.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the FndIntegerAttribute class
            </summary>
            <param name="initialValue">Initial value for the attribute</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndIntegerAttribute.GetValue(System.Int64)">
            <summary>
            Gets the contained value
            </summary>
            <remarks>If the value is invalid this method will return DefaultValue.</remarks>
            <returns>Attribute value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndIntegerAttribute.SetValue(System.Int64)">
            <summary>
            Sets the Contained value
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndIntegerAttribute.Parse(System.String)">
            <summary>
            Parse string value into this attribute
            </summary>
            <param name="s">String value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndIntegerAttribute.TryParse(System.String,System.Object@)">
            <summary>
            Parses a string representation of attribute into long
            </summary>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndIntegerAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndIntegerAttribute.GetValueType">
            <summary>
            Returns the contained value type
            </summary>
            <returns>Value type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndIntegerAttribute.CompareTo(Ifs.Fnd.Data.FndAttribute)">
            <summary>Compares two attributes. Used for sorting.
            </summary>
            <param name="attr">Attribute to compare with
            </param>
            <returns> 0 if attribute values are equal, a value less than 0 if the value of
            this attribute is less than the value of the specified attribute. A value greater than
            0 is returned if the value of this attribute is greater than the value of the specified attribute.
            
            </returns>
        </member>
        <member name="T:Ifs.Fnd.Data.FndInvalidValue">
            <summary>
            Helper object to contain invalid values
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndInvalidValue.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the FndInvalidValueException class.  
            </summary>
            <param name="attributeValue">The invalid attribute value</param>
            <param name="errorText">An error text</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndInvalidValue.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current FndInvalidValue
            </summary>
            <param name="obj">The System.Object to compare with the current FndInvalidValue</param>
            <returns>true if the specified System.Object is equal to the current FndInvalidValue; otherwise, false. </returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndInvalidValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table
            </summary>
            <returns>A hash code for the current FndInvalidValue</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndInvalidValue.ToString">
            <summary>
            Returns a System.String that represents the current FndInvalidValue
            </summary>
            <returns>A System.String that represents the current FndInvalidValue</returns>
        </member>
        <member name="P:Ifs.Fnd.Data.FndInvalidValue.Value">
            <summary>
            Gets the invalid attribute value
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndInvalidValue.ErrorText">
            <summary>
            Gets the error text
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.Typed.FndLUDetailView">
            <summary>
            Base class for all entity views
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndLUDetailView.#ctor(Ifs.Fnd.Data.FndDataColumnCollection)">
            <summary>
            Initializes a new instance of the FndLUDetailView class
            </summary>
            <param name="schema">Data columns</param>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndLUDetailView.#ctor(Ifs.Fnd.Data.FndDataColumnCollection,System.Object[])">
            <summary>
            Initializes a new instance of the FndLUDetailView class
            </summary>
            <param name="schema">Data columns</param>
            <param name="values">Array of initial values in column order</param>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndLUDetailView.Schema">
            <summary>
            A static FndDataColumnCollection containing column definitions of the LUDetailView
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndLUDetailView.ObjId">
            <summary>
            Gets the Object Id of the entity instance
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndLUDetailView.ObjVersion">
            <summary>
            Gets the Object Version of the entity instance
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.Typed.FndLUEntityView">
            <summary>
            Base class for all entity views
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndLUEntityView.#ctor(Ifs.Fnd.Data.FndDataColumnCollection)">
            <summary>
            Initializes a new instance of the FndLUEntityView class
            </summary>
            <param name="schema">Data columns</param>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndLUEntityView.#ctor(Ifs.Fnd.Data.FndDataColumnCollection,System.Object[])">
            <summary>
            Initializes a new instance of the FndLUEntityView class
            </summary>
            <param name="schema">Data columns</param>
            <param name="values">Array of initial values in column order</param>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndLUEntityView.Schema">
            <summary>
            A static FndDataColumnCollection containing column definitions of the LUEntityView
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndLUEntityView.ObjId">
            <summary>
            Gets the Object Id of the entity instance
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndLUEntityView.ObjVersion">
            <summary>
            Gets the Object Version of the entity instance
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndNumberAttribute">
            <summary>
            Attribute for double values
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndNumberAttribute.#ctor">
            <summary>
            Initializes a new instance of the FndNumberAttribute class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndNumberAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the FndNumberAttribute class
            </summary>
            <param name="initialValue">Initial value for the attribute</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndNumberAttribute.GetValue(System.Double)">
            <summary>
            Gets the contained value
            </summary>
            <remarks>If the value is invalid this method will return defaultValue.</remarks>
            <param name="defaultValue">Return value if attribute is null</param>
            <returns>Attribute value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndNumberAttribute.SetValue(System.Double)">
            <summary>
            Sets the Contained value
            </summary>
            <param name="newValue">The new value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndNumberAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndNumberAttribute.GetValueType">
            <summary>
            Returns the contained value type
            </summary>
            <returns>Value type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndNumberAttribute.Parse(System.String)">
            <summary>
            Parses a string representation of simple attribute types
            This is NOT unmarshalling functionality
            </summary>
            <param name="s">String representation</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndNumberAttribute.TryParse(System.String,System.Object@)">
            <summary>
            Parses a string representation of attribute into double
            </summary>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndNumberAttribute.CompareTo(Ifs.Fnd.Data.FndAttribute)">
            <summary>Compares two attributes. Used for sorting.
            </summary>
            <param name="attr">Attribute to compare with
            </param>
            <returns> 0 if equal
            
            </returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndNumberAttribute.ToString">
            <summary>
            Returns the numeric value using string representation,
            always using dot (.) as decimal separator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndNumberAttribute.Format">
            <summary>
            <see cref="M:Ifs.Fnd.Data.FndAttribute.Format"/>
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndNvlFunction">
            <summary>
            Represents null value replacements in queries
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndNvlFunction.#ctor(Ifs.Fnd.Data.FndDataColumn,System.Object)">
            <summary>
            Creates a new instance of FndNvlFunction
            </summary>
            <param name="column">Column</param>
            <param name="replaceWith">Object to replace with when null</param>
        </member>
        <member name="T:Ifs.Fnd.Data.Typed.FndPersistentView">
            <summary>
            Base class for all entity views
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndPersistentView.#ctor(Ifs.Fnd.Data.FndDataColumnCollection)">
            <summary>
            Initializes a new instance of the FndPersistentView class
            </summary>
            <param name="schema">Data columns</param>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndPersistentView.#ctor(Ifs.Fnd.Data.FndDataColumnCollection,System.Object[])">
            <summary>
            Initializes a new instance of the FndPersistentView class
            </summary>
            <param name="schema">Data columns</param>
            <param name="values">Array of initial values in column order</param>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndPersistentView.Schema">
            <summary>
            A static FndDataColumnCollection containing column definitions of the PersistentView
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndQueryOptions">
            <summary>
            Options sent to query methods
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndQueryOptions.NoSkip">
            <summary>
            Constant to indicate no skipped lines
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndQueryOptions.NoMaxLimit">
            <summary>
            Constant to inticate no max limit
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndQueryOptions.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the FndQueryOptions class
            </summary>
            <param name="maxRows">Max rows to return</param>
            <param name="skipRows">Number of rows to skip</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndQueryOptions.#ctor(System.Int32,System.Int32,Ifs.Fnd.Data.FndAttribute[])">
            <summary>
            Initializes a new instance of the FndQueryOptions class
            </summary>
            <param name="maxRows">Max rows to return</param>
            <param name="skipRows">Number of rows to skip</param>
            <param name="orderByFields">Attributes to sort on</param>
        </member>
        <member name="P:Ifs.Fnd.Data.FndQueryOptions.MaxRows">
            <summary>
            Gets max rows to return
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndQueryOptions.SkipRows">
            <summary>
            Gets number of rows to skip
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndQueryOptions.OrderByFields">
            <summary>
            Gets comma separated list of attribute names to sort on
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndQueryOptions.DefaultOptions">
            <summary>
            Options to use for default query behavior (NoMaxLimit, NoSkip)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndQueryOptions.AllRows">
            <summary>
            Options to use when needing all rows in result set
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndReferenceMirrorColumn">
            <summary>
            Defines mirror columns for an aggregate attribute used for reference-by-value
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndReferenceMirrorColumn.CompoundRowAttributeName">
            <summary>
            Name of the attribute in the compound row in the aggregate attribute
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndReferenceMirrorColumn.MirrorAttributeName">
            <summary>
            Name of the attribute to be automatically updated when the aggregate is updated
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndReferenceMirrorColumn.ClearIfNull">
            <summary>
            Indicates that the attribute is exclusively used by this reference and can be cleared when the aggregate is cleared.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndReferenceMirrorColumnCollection">
            <summary>
            A collection of FndReferenceMirrorColumn objects
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndReferenceMirrorColumnCollection.Add(System.String,System.String)">
            <summary>
            Add a new mirror column definition
            </summary>
            <param name="compoundRowAttributeName">Attribute name in the compound row</param>
            <param name="mirrorAttributeName">Attribute name in the row holding the agrregate attribute and the mirror attribute</param>
            <returns>The new FndReferenceMirrorColumn definition</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndReferenceMirrorColumnCollection.Insert(System.Int32,Ifs.Fnd.Data.FndReferenceMirrorColumn)">
            <summary>
            Inserts an item to the collection at the specified position.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="mirrorColumn">The FndReferenceMirrorColumn to insert into the collection.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndReferenceMirrorColumnCollection.IndexOf(Ifs.Fnd.Data.FndReferenceMirrorColumn)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="mirrorColumn">The object to locate in the collection.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndReferenceMirrorColumnCollection.Contains(Ifs.Fnd.Data.FndReferenceMirrorColumn)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="mirrorColumn">The object to locate in the collection.</param>
            <returns>true if the object is found in the collection; otherwise, false. </returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndReferenceMirrorColumnCollection.Remove(Ifs.Fnd.Data.FndReferenceMirrorColumn)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="mirrorColumn">The object to remove from the collection.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndReferenceMirrorColumnCollection.CopyTo(Ifs.Fnd.Data.FndReferenceMirrorColumn[],System.Int32)">
            <summary>
            Copies the elements of the System.Collections.ICollection to an FndReferenceMirrorColumn array, starting at a particular FndReferenceMirrorColumn array index.
            </summary>
            <param name="mirrorColumns">The one-dimensional FndReferenceMirrorColumn array that is the destination of the elements copied from System.Collections.ICollection. The FndReferenceMirrorColumn array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Ifs.Fnd.Data.FndReferenceMirrorColumnCollection.Item(System.Int32)">
            <summary>
            Retrieve a FndReferenceMirrorColumn object within this collection
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndReferenceQualifier">
            <summary>
            Summary description for FndReferenceQulifier.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndReferenceQualifier.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="qulifierName">name of the Qulifier</param>
        </member>
        <member name="P:Ifs.Fnd.Data.FndReferenceQualifier.QulifierName">
            <summary>
            Name of the Entity which this entity is dependent on
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndReferenceQualifierCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndReferenceQualifierCollection.Add(System.String)">
            <summary>
            Add a new reference qualifier definition
            </summary>
            <param name="qulifierName">Qualifier Name</param>
            <returns>The new FndReferenceQualifier definition</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndReferenceQualifierCollection.Insert(System.Int32,Ifs.Fnd.Data.FndReferenceQualifier)">
            <summary>
            Inserts an item to the collection at the specified position.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="qualifierColumn">The FndReferenceQualifier to insert into the collection.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndReferenceQualifierCollection.IndexOf(Ifs.Fnd.Data.FndReferenceQualifier)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="qualifierColumn">The object to locate in the collection.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndReferenceQualifierCollection.Contains(Ifs.Fnd.Data.FndReferenceQualifier)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="qualifierColumn">The object to locate in the collection.</param>
            <returns>true if the object is found in the collection; otherwise, false. </returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndReferenceQualifierCollection.Remove(Ifs.Fnd.Data.FndReferenceQualifier)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="qualifierColumn">The object to remove from the collection.</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndReferenceQualifierCollection.CopyTo(Ifs.Fnd.Data.FndReferenceQualifier[],System.Int32)">
            <summary>
            Copies the elements of the System.Collections.ICollection to an FndReferenceQualifier array, starting at a particular FndReferenceQualifier array index.
            </summary>
            <param name="qualifierColumns">The one-dimensional FndReferenceQualifier array that is the destination of the elements copied from System.Collections.ICollection. The FndReferenceQualifier array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Ifs.Fnd.Data.FndReferenceQualifierCollection.Item(System.Int32)">
            <summary>
            Retrieve a FndReferenceQualifier object within this collection
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndSearchDataColumn">
            <summary>
            FndSearchDataColumn extends FndDataColumn with more search-related meta-information.
            Mostly this is LU related information. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSearchDataColumn.#ctor(System.String,Ifs.Fnd.Data.FndAttributeType)">
            <summary>
            Initializes a new instance of the FndSearchDataColumn class
            </summary>
            <param name="name">Name of the column</param>
            <param name="type">Attribute type of the column</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSearchDataColumn.#ctor(System.String,System.String,Ifs.Fnd.Data.FndAttributeType)">
            <summary>
            Initializes a new instance of the FndSearchDataColumn class
            </summary>
            <param name="name">Name of the column</param>
            <param name="displayName">Display text</param>
            <param name="type">Attribute type of the column</param>		
        </member>
        <member name="M:Ifs.Fnd.Data.FndSearchDataColumn.#ctor(System.String,Ifs.Fnd.Data.FndAttributeType,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="termPath"></param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSearchDataColumn.Clone">
            <summary>
            Returns an FndSearchDataColumn object that is identical to this instance. 
            </summary>
            <returns>The FndSearchDataColumn that this method creates.</returns>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.Derived">
            <summary>
            Gets whether the column is derived.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.DerivedColumnName">
            <summary>
            Column Name does not hold the Get method name on derived columns. This property is used to 
            keep this data.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.EncodeMethod">
            <summary>
            Gets/Sets encode method for IID columns and state columns
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.CheckedValue">
            <summary>
            Gets/Sets checked value
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.UnCheckedValue">
            <summary>
            Gets/Sets unchecked value
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.FormatPicture">
            <summary>
            Gets/Sets format picture
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.Format">
            <summary>
            Gets/Sets format of the column
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.Reference">
            <summary>
            Name of referenced database view. Used for reference attributes in LU
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.EnumPackage">
            <summary>
            Package name for enumerate method for IID LU:s
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.EncodePackage">
            <summary>
            Package name for encode method for IID LU:s
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.EnumFilter">
            <summary>
            List with the database values that should be used as filter for IID LU:s
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.EnumFilterExcludingItems">
            <summary>
            Indicates if the EnumFilter property should use the list with database values to include or exclude them from the IID.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.DisplayName">
            <summary>
            Overriden. See <seealso cref="P:Ifs.Fnd.Data.FndDataColumn.DisplayName"/>
            Returns the prompt if set.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.Prompt">
            <summary>
            Gets the prompt text for a column
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.MultiValue">
            <summary>
            Gets/Sets the support of multiple value in column field
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.SearchHint">
            <summary>
            Gets/Sets the indication for if the column is good or bad to include
            in the search condition conserning the performance it might result in.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.IsParentKey">
            <summary>
            Gets/Sets whether the column is a parent key.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.WildcardsPermitted">
            <summary>
            If set, search on wildcards (%, _) is permitted
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSearchDataColumn.IsMultiSelectionEnumeration">
            <summary>
            Is this a multi selection enumeration, which must be handled in a separate way in searches compared to normal enumerations.
            This method can be removed once we have introduced a new FndAttributeType for multi selection data types.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndSearchHint">
            <summary>
            Indication for if a column is good or bad to include in the search condition conserning the performance it might result in. 
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndSearchHint.Unknown">
            <summary>
            The default state, when nothings is yet known by the column. This state will also result in letting
            the SearchDialog ask the server about the SearchHint information for this column.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndSearchHint.Good">
            <summary>
            The column is indexed and will most likely result in good performance when being part of the search condition.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndSearchHint.Bad">
            <summary>
            Th columns is not index and will most likely result in bad performance when being part of the search condition.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndSimpleArrayAttribute">
            <summary>
            Summary description for FndSimpleArrayAttribute.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.#ctor">
            <summary>
            The default constructor which initializes a new instance of the FndSimpleArrayAttribute class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the FndSimpleArrayAttribute class to hold an array of type string 
            </summary>
            <param name="stringArray">The base string array</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the FndSimpleArrayAttribute class to hold an array of type double 
            </summary>
            <param name="doubleArray">The base double array</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.#ctor(System.Int64[])">
            <summary>
            Initializes a new instance of the FndSimpleArrayAttribute class to hold array of type long 
            </summary>
            <param name="longArray">The base long array</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.#ctor(System.DateTime[])">
            <summary>
            Initializes a new instance of the FndSimpleArrayAttribute class to hold array of type DateTime 
            </summary>
            <param name="dateArray">The base DateTime array</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.#ctor(System.Boolean[])">
            <summary>
            Initializes a new instance of the FndSimpleArrayAttribute class to hold array of type boolean 
            </summary>
            <param name="booleanArray">The base boolean array</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.#ctor(System.Byte[][])">
            <summary>
            Initializes a new instance of the FndSimpleArrayAttribute class to hold array of type byte (binary)
            </summary>
            <param name="binaryArray">The base binary array</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.GetStringArray">
            <summary>
            Returns the stored string array
            </summary>
            <returns>Stored string array</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.SetStringArray(System.String[])">
            <summary>
            Stores a given string array
            </summary>
            <param name="arr">String array to be stored</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.GetDoubleArray">
            <summary>
            Returns the stored double array
            </summary>
            <returns>Stored double array</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.SetDoubleArray(System.Double[])">
            <summary>
            Stores a given double array
            </summary>
            <param name="arr">Double array to be stored</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.GetLongArray">
            <summary>
            Returns the stored long array
            </summary>
            <returns>Stored long array</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.SetLongArray(System.Int64[])">
            <summary>
            Stores a given long array
            </summary>
            <param name="arr">Long array to be stored</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.GetBooleanArray">
            <summary>
            Returns the stored long array
            </summary>
            <returns>Stored boolean array</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.SetBooleanArray(System.Boolean[])">
            <summary>
            Stores a given boolean array
            </summary>
            <param name="arr">Boolean array to be stored</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.GetDateArray">
            <summary>
            Returns the stored DateTime array
            </summary>
            <returns>Stored DateTime array</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.SetDateArray(System.DateTime[])">
            <summary>
            Stores a given DateTime array
            </summary>
            <param name="arr">DateTime array to be stored</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.GetBinaryArray">
            <summary>
            Returns the stored binary array
            </summary>
            <returns>Stored binary array</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleArrayAttribute.SetBinaryArray(System.Byte[][])">
            <summary>
            Stores a given binary array
            </summary>
            <param name="arr">Binary array to be stored</param>
        </member>
        <member name="T:Ifs.Fnd.Data.FndSimpleArrayParser">
            <summary>
            Summary description for FndSimpleArrayParser.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndSimpleCondition">
            <summary>
            Defines a simple condition
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleCondition.#ctor">
            <summary>
            Initializes a new instance of the FndSimpleCondition class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleCondition.#ctor(Ifs.Fnd.Data.FndDataColumn,Ifs.Fnd.Data.FndConditionOperatorType,System.Object)">
            <summary>
            Initializes a new instance of the FndSimpleCondition class
            </summary>
            <param name="column">Data column</param>
            <param name="operatorType">Operator type</param>
            <param name="conditionValue">Condition value</param>
            <example>
            <code>
            customer.AddCondition(customer.ShortName.Column.CreateCondition(ConditionOperatorType.Equal, "Billy"));
            </code>
            </example>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleCondition.#ctor(Ifs.Fnd.Data.FndNvlFunction,Ifs.Fnd.Data.FndConditionOperatorType,System.Object)">
            <summary>
            Initializes a new instance of the FndSimpleCondition class
            </summary>
            <param name="nvlFunction">NVL function</param>
            <param name="operatorType">Operator type</param>
            <param name="conditionValue">Condition value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSimpleCondition.Clone">
            <summary>
            Clone
            </summary>
            <returns>Cloned condition</returns>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSimpleCondition.Name">
            <summary>
            Gets the name of the column for this condition.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSimpleCondition.ColumnMarshalName">
            <summary>
            Returns the marshal column name used in serialization
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSimpleCondition.OperatorType">
            <summary>
            Gets the OperatorType for this condition.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSimpleCondition.Value">
            <summary>
            Gets the condition value
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSimpleCondition.ColumnType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndSortOrder">
            <summary>
            Enumeration class that represents the direction of sort operation.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndSortOrder.Ascending">
            <summary>
            The items are sorted in ascending order.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndSortOrder.Descending">
            <summary>
            The items are sorted in descending order.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndSort">
            <summary>
            Static utilities used for sorting of records.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSort.#ctor">
            <summary>
            Avoid instantiations.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSort.ParseOrderByClause(System.String)">
            <summary>
            Parse an order-by string into an instance of inner class FndSort.OrderBy.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSort.FormatOrderByClause(Ifs.Fnd.Data.FndAttribute[])">
            <summary>
            Create an order-by string representation for a sequence of attributes.
            </summary>
            <param name="fields">an array with instances of FndAttribute that define the ordering for records of the specified type </param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSort.FormatOrderByClause(Ifs.Fnd.Data.FndAttribute[],System.Boolean)">
            <summary>
            Create an order-by string representation for a sequence of attributes.
            </summary>
            <param name="fields">an array with instances of FndAttribute that define the ordering for records of the specified type </param>
            <param name="serverNamingStyle">true indicates that field names should be named using server naming style conventions (uppercase and underscores)</param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Data.FndSort.OrderBy">
            <summary>
            Class representing parsed order-by string.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndSort.OrderBy.names">
            <summary>
            Paths to attributes included in the order by clause.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndSort.OrderBy.direction">
            <summary>
            Sort direction for attributes included in the order by clause.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Data.FndSort.OrderBy.text">
            <summary>
            Source text (order-by string) that has been parsed into this OrderBy instance.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSort.OrderBy.#ctor">
            <summary>
            Constructor OrderBy
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSort.OrderBy.AttributeCount">
            <summary>
            Return the number of attributes included in this order by clause.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSort.OrderBy.AttributeNames">
            <summary>
            Returns an array of names to attributes included in this order by clause.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSort.OrderBy.SortDirections">
            <summary>
            Returns an array of sort directions for attributes included in this order by clause.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSort.OrderBy.Text">
            <summary>
            Returns the source text (order-by string) that has been parsed into this OrderBy instance.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndSort.Tokenizer">
            <summary>
            String Tokenizer
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSort.Tokenizer.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSort.Tokenizer.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="delimiters"></param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSort.Tokenizer.HasMoreTokens">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSort.Tokenizer.NextToken">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSort.Tokenizer.NextToken(System.String)">
            <summary>
            
            </summary>
            <param name="delimiters"></param>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSort.Tokenizer.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndSortingColumn">
            <summary>
            Represents sorting on a column. Sorting can be ascending or descending.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSortingColumn.#ctor">
            <summary>
            Default constructor for FndSortingColumn
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSortingColumn.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for FndSortingColumn
            </summary>
            <param name="columnName">Name of the column to sort on</param>
            <param name="descending">true if sorting is descending</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSortingColumn.#ctor(System.String)">
            <summary>
            Construct FndSortingColumn from an SQL expression
            </summary>
            <param name="sqlString">SQL expression to parse in</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndSortingColumn.ToString">
            <summary>
            Convert to string
            </summary>
            <returns>SQL representation of the sorting column</returns>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSortingColumn.ColumnName">
            <summary>
            Name of the column
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.FndSortingColumn.Descending">
            <summary>
            True if sorting is descending
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.FndTimeAttribute">
            <summary>
            Attribute for Time values
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeAttribute.#ctor">
            <summary>
            Initializes a new instance of the FndTimeAttribute class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeAttribute.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the FndTimeAttribute class
            </summary>
            <param name="initialValue">Initial value for the attribute</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeAttribute.GetAttributeType">
            <summary>
            Returns the attribute type
            </summary>
            <returns>Attribute type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeAttribute.Parse(System.String)">
            <summary>
            Parse string value into this attribute
            </summary>
            <param name="s">String value</param>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeAttribute.TryParse(System.String,System.Object@)">
            <summary>
            Parses a string representation of attribute into DateTime
            </summary>
            <param name="s"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeAttribute.ToString">
            <summary>
            Returns a string representation of an FndTimeAttribute
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.FndTimeAttribute.Format">
            <summary>
            <see cref="M:Ifs.Fnd.Data.FndAttribute.Format"/>
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.Typed.FndTypedDataSetBase">
            <summary>
            Base class for typed datasets containing typed datatables inheriting from FndDataTable. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndTypedDataSetBase.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the FndTypedDataSetBase class
            </summary>
            <param name="container">Container</param>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndTypedDataSetBase.#ctor">
            <summary>
            Initializes a new instance of the FndTypedDataSetBase class
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndTypedDataSetBase.Tables">
            <summary>
            The tables in the generated dataset
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.Typed.FndTypedDataTableBase">
            <summary>
            Base class for typed data tables.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndTypedDataTableBase.#ctor(Ifs.Fnd.Data.FndDataColumnCollection)">
            <summary>
            Initializes a new instance of the FndTypedDataTableBase class
            </summary>
            <param name="cols">Data columns</param>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndTypedDataTableBase.Columns">
            <summary>
            Meta data for the rows in the table
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.Typed.FndEnumArrayAttributeBase">
            <summary>
            Used for meta data on enumerations
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndEnumArrayAttributeBase.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the FndEnumArrayAttributeBase class
            </summary>
            <param name="values">Array of values</param>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndEnumArrayAttributeBase.Values">
            <summary>
            Gets the array of values
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.Typed.FndEnumNamesAttribute">
            <summary>
            Used as meta data on enumerations to specify serialized Name values
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndEnumNamesAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the FndEnumNamesAttribute class
            </summary>
            <param name="names">Names of Enumeration </param>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndEnumNamesAttribute.Names">
            <summary>
            An array of strings to define the database values
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.Typed.FndEnumDisplayValuesAttribute">
            <summary>
            Used as meta data on enumerations to specify default display values
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndEnumDisplayValuesAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the FndEnumDisplayValuesAttribute class
            </summary>
            <param name="displayValues">An array of strings to define default display values</param>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndEnumDisplayValuesAttribute.DisplayValues">
            <summary>
            An array of strings to define default display values
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.Typed.FndEnumTermsAttribute">
            <summary>
            Used as meta data on enumerations to specify term IDs used to translate enum items
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndEnumTermsAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the FndEnumDisplayValuesAttribute class
            </summary>
            <param name="terms">An array of strings to define term IDs used to translate enum items</param>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndEnumTermsAttribute.Terms">
            <summary>
            An array of strings to define term IDs used to translate enum items
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.Typed.FndEnumTermUsagesAttribute">
            <summary>
            Used as meta data on enumerations to specify term usage IDs used to translate enum items
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndEnumTermUsagesAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the FndEnumDisplayValuesAttribute class
            </summary>
            <param name="termUsages">An array of strings to define term usage IDs used to translate enum items</param>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndEnumTermUsagesAttribute.TermUsages">
            <summary>
            An array of strings to define term usage IDs used to translate enum items
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.Typed.FndTypedEnumeration">
            <summary>
            Functional class used for enumerations in generated C# classes
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndTypedEnumeration.DisplayValueToName(System.Type,System.String)">
            <summary>
            Convert from a display value to a Name
            </summary>
            <param name="enumType">Type of the enumeration</param>
            <param name="displayValue">The default display value</param>
            <returns>The Name value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndTypedEnumeration.NameToEnumValue(System.Type,System.String)">
            <summary>
            Converts a Name to an enum value
            </summary>
            <param name="enumType">The enumeration type</param>
            <param name="name">The Name</param>
            <returns>An enumeration value</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndTypedEnumeration.EnumValueToName(System.Type,System.Object)">
            <summary>
            Formats an enumeration value to a Name
            </summary>
            <param name="enumType">The enumeration type</param>
            <param name="value">Value in the enumeration</param>
            <returns>Name</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndTypedEnumeration.GetDisplayValues(System.Type)">
            <summary>
            Retrieves display values for a genereted enumeration type
            </summary>
            <param name="enumType">The enumeration type to retrieve display values for</param>
            <returns>A string array with display values for the enumeration type</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndTypedEnumeration.EnumValueToDisplayValue(System.Type,System.Object)">
            <summary>
            Formats an enumeration value to a localized display representation
            </summary>
            <param name="enumType">The enumeration type</param>
            <param name="value">Enumation value</param>
            <returns>Localized display representation</returns>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndTypedEnumeration.NameToDisplayValue(System.Type,System.String)">
            <summary>
            Formats a Name enumeration value to a localized display representation
            </summary>
            <param name="enumType">The enumeration type</param>
            <param name="name">Serialized Name representation</param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Data.Typed.FndView">
            <summary>
            Base class for all entity views
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndView.#ctor(Ifs.Fnd.Data.FndDataColumnCollection)">
            <summary>
            Initializes a new instance of the FndView class
            </summary>
            <param name="schema">Data columns</param>
        </member>
        <member name="M:Ifs.Fnd.Data.Typed.FndView.#ctor(Ifs.Fnd.Data.FndDataColumnCollection,System.Object[])">
            <summary>
            Initializes a new instance of the FndView class
            </summary>
            <param name="schema">Data columns</param>
            <param name="values">Array of initial values in column order</param>
        </member>
        <member name="P:Ifs.Fnd.Data.Typed.FndView.Schema">
            <summary>
            A static FndDataColumnCollection containing column definitions of the View
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Data.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Data.StringUtil">
            <summary>
            Summary description for StringUtil.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Data.StringUtil.BeautifyName(System.String)">
            <summary>
            Beautifies a string. Space added between captital letters in CamelCasing
            </summary>
            <param name="str">Input string to beautify</param>
            <returns>Beautified string</returns>
        </member>
    </members>
</doc>
