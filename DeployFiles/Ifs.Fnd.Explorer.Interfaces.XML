<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ifs.Fnd.Explorer.Interfaces</name>
    </assembly>
    <members>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomainViewTechnology">
            <summary>
            Type if registered view technologies for a search domain
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomainViewTechnology.None">
            <summary>
            None. Not really an option
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomainViewTechnology.WebClient">
            <summary>
            Viewer available in IFS Web Client
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomainViewTechnology.ApplicationForms">
            <summary>
            Viewer available in ApplicationForms
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomainViewTechnology.NativeFeature">
            <summary>
            Viewer available in native IEE feature technology
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomainType">
            <summary>
            Type of search domain
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomainType.Normal">
            <summary>
            Normal (single source)
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomainType.Group">
            <summary>
            Serveral normal domains grouped into a search domain group.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain">
            <summary>
            Definition of an ApplicationSearch search domain
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain.ALL_INDEXED_LOCATIONS">
            <summary>
            SearchDomainId representing All Indexed Locations
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain.MergeViews(Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain)">
            <summary>
            Merges search domain view into this search domains' Views list
            </summary>
            <param name="domain">FndApplicationSearchDomain to get View from</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain.SearchDomainId">
            <summary>
            Gets the search domain id that uniquely identifies a search domain.
            Instances of this record are created through deserialization of result from server query.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain.Description">
            <summary>
            Gets an end user friendly name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain.View">
            <summary>
            Gets the main view (where UsedInSearchMethod = true)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain.Views">
            <summary>
            Gets the list of all database views where this search domain
            can be used as a part of the query.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain.Column">
            <summary>
            Gets the database column
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain.B2bWebPage">
            <summary>
            Gets the custom registered web page for a Web Client b2b installation
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain.WebPage">
            <summary>
            Gets the custom registered web page for a normal (b2e) Web Client installation
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain.Entity">
            <summary>
            Gets the entity
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain.AvailableIn">
            <summary>
            Gets which viewers that are available for this search domain
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain.UsedInSearchMethod">
            <summary>
            Get if used in search method
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain.WinUrl">
            <summary>
            Gets a form name for custom ApplicationForms viewer
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain.RwcUrl">
            <summary>
            Gets a form name for custom native IEE feature viewer.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationSearchDomain.SearchDomainType">
            <summary>
            Gets the search domain type
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.DetailedSearchItem">
            <summary>
            DetailedSearchItem is used in application search for storing/loading search items from the profile.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileEntity">
            <summary>
            Interface used by profile entities to define keys to use in dictionary.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileEntity.ProfileEntityKey">
            <summary>
            Key to use for naming the subfolder in profile, in which the entity is stored in.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileEntity.CustomDictionaryKey">
            <summary>
            This property is used to specify a custom key for the entity when it's loaded from the profile into a dictionary.		
            As default the subfolder name is used as Id. Return null will result in default behaviour.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.DetailedSearchItem.#ctor">
            <summary>
            
            </summary>		
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.DetailedSearchItem.#ctor(System.String,System.String,Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource,System.Boolean)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="description"></param>
            <param name="source"></param>
            <param name="isOnlySearchSource"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.DetailedSearchItem.#ctor(System.String,System.Int64,System.Boolean)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="timeStamp"></param>
            <param name="isOnlySearchSource"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.DetailedSearchItem.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.DetailedSearchItem.SearchItemId">
            <summary>
            Search item id
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.DetailedSearchItem.Description">
            <summary>
            Search item id
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.DetailedSearchItem.Source">
            <summary>
            Search item id
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.DetailedSearchItem.IsOnlySearchSource">
            <summary>
            Search item id
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.DetailedSearchItem.LastSelectedTime">
            <summary>
            Search item id
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.DetailedSearchItem.ProfileEntityKey">
            <summary>
            Returns a new guid as key
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.DetailedSearchItem.CustomDictionaryKey">
            <summary>
            SearchItemId is used as key in the dictionary when loaded from profile.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndBAReportService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBAReportService.PostScheduledJobForBAES(System.Double@,System.String,System.String,System.String)">
            <summary>
            Posts a BA Execution Server scheduled job
            </summary>
            <param name="scheduleJobID"></param>
            <param name="reportIdFull"></param>
            <param name="reportParameterString"></param>
            <param name="users">Distribution List</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBAReportService.ShowWithExcel(System.String,System.Double)">
            <summary>
            Shows a report with Excel after executing through InfoServices
            </summary>
            <param name="reportId"></param>
            <param name="resultKey"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBAReportService.ShowArchivedReportWithExcel(System.String,System.Double)">
            <summary>
            Shows an archived report with Excel
            </summary>
            <param name="reportId"></param>
            <param name="resultKey"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBAReportService.ValidateEditableParameters(System.String,System.String)">
            <summary>
            Validate Parameters from Info Services Order report Dialog
            </summary>
            <param name="reportId"></param>
            <param name="parameterAttr"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBAReportService.ExportResultDataSet(System.String,System.Double)">
            <summary>
            Exports the result data set as a xml file. 
            </summary>
            <param name="reportId"></param>
            <param name="resultKey"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBAReportService.IsExportResultDataSetPossible(System.String,System.Double)">
            <summary>
            Inquires if Exporting the result data set is possible. 
            </summary>
            <param name="reportId"></param>
            <param name="resultKey"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBAReportService.CheckPDFOutputIsPossible(System.String,System.Double)">
            <summary>
            Inquires if PDF output is possible
            </summary>
            <param name="reportId"></param>
            <param name="resultKey"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBAReportService.IsPrintPossible(System.Collections.Generic.Dictionary{System.Double,System.String})">
            <summary>
            Inquires if Print is possible
            </summary>
            <param name="reportList"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBAReportService.PrintPDFReports(System.Collections.Generic.Dictionary{System.Double,System.String})">
            <summary>
            Print the BA Reports that are in PDF format
            </summary>
            <param name="reportList"></param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndBIReportService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBIReportService.ExecuteAndViewMSReportQuickReport(System.Double,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Executes a MSBI Integration - MsReport Report
            </summary>
            <param name="quickReportId"></param>
            <param name="reportParameters">Parameters</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBIReportService.ExecuteAndViewDashboardQuickReport(System.Double,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Executes a MSBI Integration - Dashboard Report
            </summary>
            <param name="quickReportId"></param>
            <param name="reportParameters">Parameters</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBIReportService.ExecuteAndViewWebReportQuickReport(System.Double,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Execute And View WEB_REPORT-Quick Report
            </summary>
            <param name="quickReportId">Quick report Id</param>
            <param name="reportParameters">Parameters</param>
            <param name="uri">Url to navigate</param>        
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBIReportService.GetSSRSHostUrl(System.Boolean)">
            <summary>
            Returns SSRS host url from MSBI Integration
            </summary>
            <param name="showErrorMessage"></param>
            <returns>string.Empty or the SSRSHost URL</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBIReportService.IsOpenMSBIQuickReportLoVPossible(System.String)">
            <summary>
            Checks whether it is possible to open a MSBI LoV.
            </summary>
            <param name="reportType">should be the db value.</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBIReportService.GetMSBIQuickReportLoVValue(System.String,System.String)">
            <summary>
            Opens the MSBI Integration LoV and returns the selected report
            </summary>
            <param name="reportType">should be the db value.</param>
            <param name="oldReference"></param>
            <returns>string.Empty if no report was selected, else report URL</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBIReportService.ValidateAndCorrectFileReference(System.String,System.String)">
            <summary>
            Validate and returns the modified reference of a given Quick Report Type
            </summary>
            <param name="reportType"></param>
            <param name="fileReference"></param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenuServiceProvider">
            <summary>
            IAPFDynamicMenuServiceProvider is an interface that is implemented by a class that provides a dynamic menus. 
            <remarks>
            The standard way of implementing a Dynamic Menu is to derive from Ifs.Fnd.ApplicationForms.DynamicMenuBase.
            DynamicMenuBase will take care of the plug-in plumbing and service registration. 
            
            If IAPFDynamicMenu is implemented directly by some reason the implementer will need to get IAPFDynamicMenuServiceProvider from the 
            current explorer service container and register the Dynamic Menu class there. 
            </remarks>
            <seealso cref="T:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenu"/>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenuServiceProvider.RegisterDynamicMenu(Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenu)">
            <summary>
            Registers an instance of a <see cref="T:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenu"/>.
            </summary>
            <param name="dynamicMenu">Instance of dynamic menu to register.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenuServiceProvider.EnumDynamicMenusForQuickReport(System.String)">
            <summary>
            Enumerate all registered and granted dynamic menus for a Quick Report using the specified logical unit.
            </summary>
            <param name="logicalUnit">Logical unit</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenuServiceProvider.EnumDynamicMenusForCustomPage(System.String)">
            <summary>
            Enumerate all registered and granted dynamic menus for a Custom Page using the specified logical unit.
            </summary>
            <param name="logicalUnit">Logical unit</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenuServiceProvider.EnumDynamicMenusForPage(System.String,System.String)">
            <summary>
            Enumerate all registered and granted dynamic menus for the specified page and (optionally) version.
            Dynamic menus with no version (most common) will be visible inside all versions of the application page.
            Dynamic menus with a version will only be visible inside versioned page.
            </summary>
            <param name="page">Page name</param>
            <param name="version">Page version</param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenuContainer">
            <summary>
            Interface that window classes should implement to support dynamic menus
            <seealso cref="T:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenu"/>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenuContainer.DynamicMenuContainerType">
            <summary>
            Gets the type of target that the class act as.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenu">
            <summary>
            Dynamic Menus is a concept where an application component can provide dynamic menu items to be attached to external pages. Where external pages 
            in this context is pages that is not owned by other components or framework services. Typical scenario is where dynamic menu items are provided for 
            Quick Reports and Custom Pages, but it is also possible for component A to provide a menu that is dynamically attached to specific page in component B.
            <remarks> 
            This concept is not a replacement for Custom Menus or standard Application Page menus. It is for some components that have actions that is very typicall for 
            some of their entities. E.g. the Order component could decide that "Release Order" is very central for the order entity. They could then implement
            and provide a Dynamic Menu that is enabled for Order logical Unit, Set target to QuickReport and CustomPage. Now if a customer administrator would 
            create a Quick Report of type (QueryBuilder) the menu item "Release Order" is available from the report as well. 
            
            Implement a dynamic menu is done by creating a UserControl that implements IAPFDynamicMenu. To be available 
            to the system it also needs to be registered to the DynamicMenuServiceProvider that implements <see cref="T:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenuServiceProvider"/>.
            The framework provides such a provider on each explorer object. Aquire the provider from the explorer services object.
            
            Application development of dynamic menus should in first hand make use of the Ifs.Fnd.ApplicationForms.DynamicMenuBase class. 
            This base class implements IAPFDynamicMenu and takes care of application plug-in functionalities as well as registering the dynamic menu.
            </remarks>
            <example>
            This sample shows a simple implementation of a dynamic menu using DynamicMenuBase and how to use FndDynamicMenuTarget* attributes to annotate menu availability.
            <code>
            public class MyDynamicMenuManager
            {
            	public void RegisterDynamicMenus(Ifs.Fnd.Explorer.Interfaces.IFndExplorer explorer)
            	{
            		// Request IAPFDynamicMenuService with a callback delegate.
            		// The DynamicMenuService provider is also a plug-in so we request the service when it is available. 
            		explorer.Services.RequestService&lt;IAPFDynamicMenuServiceProvider&gt;(OnDynamicMenuServiceAquired);
            	}
            	
            	// Callback for Services.RequestService&lt;Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenuServiceProvider&gt;
            	
            	private void OnDynamicMenuServiceAquired(IAPFDynamicMenuServiceProvider service)
            	{
            		// Register this class as the menu service provider.
            		service.RegisterDynamicMenu(this);
            	}
            	
            }
            
            [Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetQuickReport("Customer", "CustomerInfo")]
            [Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetCustomPage("Customer", "CustomerInfo")]
            public class MyDynamicMenu: Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenu
            {
            	private System.Windows.Forms.Control owner = null;
            	private ContextMenuStrip contextMenuStrip;
            	
            	public MyDynamicMenu() 
            	{
            		InitializeComponent();
            	}
            	
            	#region IAPFDynamicMenu implementation
            	
            	public System.Windows.Forms.ContextMenuStrip ContextMenuStrip
            	{
            		// Return the contextMenuStrip
            		get { return this.contextMenuStrip; }
            	}
            	
            	public System.Windows.Forms.Control Owner
            	{
            		// The owner control for which the menu should be displayed.
            		// <see cref="P:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenu.Owner"/>
            		set { this.owner = value; }
            	}
            	
            	#endregion
            }
            </code>
            </example>
            <seealso cref="T:Ifs.Fnd.Explorer.Interfaces.IFndApplicationPlugin"/>
            <seealso cref="T:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenuServiceProvider"/>
            <seealso cref="T:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetQuickReport"/>
            <seealso cref="T:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetCustomPage"/>
            <seealso cref="T:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetPage"/>
            <seealso cref="T:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetPageWithVersion"/>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenu.ContextMenuStrip">
            <summary>
            Gets the context menu strip.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IAPFDynamicMenu.Owner">
            <summary>
            Sets the current owner for the usage of the menu.
            This property is set by the framework when the menu is initialized for a target. It can be used by implementers to initiate context variables general for all menu items. 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.DynamicMenuTarget">
            <summary>
            Dynamic menu target is used by the Dynamic Menu concept IAPFDynamicMenu to specify the supported targets for a dynamic menu.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.DynamicMenuTarget.None">
            <summary>
            Empty value 
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.DynamicMenuTarget.QuickReport">
            <summary>
            Enable dynamic menu for QuickReports
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.DynamicMenuTarget.Page">
            <summary>
            Enable dynamic menu for Application Pages
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.DynamicMenuTarget.CustomPage">
            <summary>
            Enable dynamic menu for Custom Pages
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndClientCondition">
            <summary>
            Iterface for a client side condition
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndClientCondition.ValidateRow(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Validates the row with the condition. Returns true if the row fullfills the condition 
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndClientCondition.GetConditionDisplayStrings">
            <summary>
            Returns a list of beutified conditions for information purpose
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndClientCondition.ConditionedColumns">
            <summary>
            Returns a list of all columns that have some kind of condition.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndCustomMenuCondition">
            <summary>
            Interface for a client side condition
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndCustomMenuCondition.Enabled">
            <summary>
            Determins if the condition is enabled or not, if not it will not be used when inquiring a custom menu. 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndClientConditionService">
            <summary>
            Condition service
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndClientConditionService.ShowConditionDialog``1(Ifs.Fnd.Data.FndDataRow,``0@,``0)">
            <summary>
            Show client condition dialog based on the given row
            </summary>
            <param name="row"></param>
            <param name="condition"></param>
            <param name="initCondition"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndClientConditionService.ShowConditionDialog``1(System.String,``0@,``0)">
            <summary>
            Show client condition dialog based on the given name of the source form ('frmInventoryPart')
            </summary>
            <param name="formName"></param>
            <param name="condition"></param>
            <param name="initCondition"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndClientConditionService.Serialize``1(``0)">
            <summary>
            Serialize the IFndClientCondition to XML formatted string converted to base64
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndClientConditionService.Deserialize``1(System.String)">
            <summary>
            Deserialize from base64 encoded string to a IFndClientCondition
            </summary>
            <param name="serializedCondition"></param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo">
            <summary>
            Contains meta data about a column in the database dictionary. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.#ctor(Ifs.Fnd.Explorer.Interfaces.FndViewInfo,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a FndColumnInfo instance.
            </summary>
            <param name="ownerView">View the columns belongs to.</param>
            <param name="columnName">Name of column.</param>
            <param name="datatype">Datatype of column.</param>
            <param name="requiredFlag">Required flag for column.</param>
            <param name="prompt">Translated prompt for column.</param>
            <param name="typeFlag">Type flag for column</param>
            <param name="reference">Reference for column.</param>
            <param name="enumeration">Enumeration for column.</param>
            <param name="enumerationPackage">Database package to use when fetching enumeration values.</param>
            <param name="ordinal">Column index.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.#ctor(Ifs.Fnd.Explorer.Interfaces.FndColumnInfo,System.String,System.String,System.String)">
            <summary>
            Constructor for creating API-functions belonging to a Column.
            </summary>
            <param name="parentColumn"></param>
            <param name="columnName"></param>
            <param name="datatype"></param>
            <param name="prompt"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.EnumerationInvalidate">
            <summary>
            The EnumerationInvalidate function marks the contents of the
            enumeration list as invalid, so that the list is repopulated
            the next time enumeration list is accessed.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.GetApiCall">
            <summary>
            Returns API call for the column with parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.SortFunctions">
            <summary>
            Sort _functions by name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.ToString">
            <summary>
            Converts the value of this instance to a System.String.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.DbNameToPrompt(System.String)">
            <summary>
            Converts Camel Case to Prompt. E.g. CUSTOMER_ORDER_INFO to Customer Order Info.
            </summary>
            <param name="DbName">Name in Camel Case to be converted.</param>
            <returns>Prompt value</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.ID">
            <summary>
            Gets a unique ID for the column. The ID is in the form "ViewName.ColumnName"
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.Name">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.Datatype">
            <summary>
            Gets the datatype of the column, such as STRING(100), NUMBER etc.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.Prompt">
            <summary>
            Gets the translated Prompt for the column.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.TypeFlag">
            <summary>
            Gets the type flag for the column, such as A (attribute), K (key) and P (parent).
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.Reference">
            <summary>
            Gets the Column Reference string if any.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.Enumeration">
            <summary>
            Gets the enumeration reference if any.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.EnumerationPackage">
            <summary>
            Gets the enumeration package if the column is an enumeration. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.Ordinal">
            <summary>
            Gets the Column Index in the view.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.HasForeignKeyReference">
            <summary>
            Gets if the column is referencing another LU.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.IsParentKey">
            <summary>
            Gets if the column is a parent key.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.IsMandatory">
            <summary>
            Gets if the column is modelled as mandatory.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.IsClob">
            <summary>
            Gets if the column is a CLOB (LONG_TEXT).
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.IsEnumeration">
            <summary>
            Gets if the column is an enumeration.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.IsMultiEnumeration">
            <summary>
            Gets if the column is a multi value enumeration.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.IsObjState">
            <summary>
            Gets if the column is the STATE enumeration field of the view.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.IsDate">
            <summary>
            Gets if the column is a date field or date time field.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.IsDateTime">
            <summary>
            Gets if the column is a date time field, i.e. both date and time.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.IsTime">
            <summary>
            Gets if the column is a time field, i.e. only a time field (no date part).
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.IsNumber">
            <summary>
            Gets if the column is a number field.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.IsString">
            <summary>
            Gets if the column is a text field.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.IsCustomReference">
            <summary>
            Gets if the column is a custom reference field.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.IsUpperCase">
            <summary>
            Gets if the column is an always uppercase field.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.IsFrameworkColumn">
            <summary>
            Gets if the column is a framework column, e.g. "OBJID", "OBJVERSION", "OBJKEY", etc.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.IsApiCall">
            <summary>
            Gets if the column value comes from an API call to another package. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.View">
            <summary>
            Gets the view the column belongs to.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.EnumerationItems">
            <summary>
            Gets all enumeration items if this column is an enumeration column. Both client and db values are returned.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndColumnInfo.Functions">
            <summary>
            Gets all public functions available for the LU the column references to. 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndCompositePageRendererDesignerService">
            <summary>
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndCustomHelp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndCustomHelp.ControlID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndCustomHelp.HelpTitle">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndCustomHelp.HelpText">
            <summary>
            The display text of the control.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndCustomHelp.ControlName">
            <summary>
            The display text of the control.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndCustomHelpContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndCustomHelpContainer.GetCustomHelps">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndCustomHelpContainer.GetCustomHelp">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings">
            <summary>
            Interface to access and manage device Specific Settings for mainly UI Settings
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.SetSetting``1(System.String,``0)">
            <summary>
            Set a new setting to Device Specific settings under the active device. setting will be saved under given name.
            Setting will be saved in the currently active device only.
            </summary>
            <typeparam name="T">Any value type</typeparam>        
            <param name="key">Setting name</param>
            <param name="value">Setting Value</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.SetStringSetting(System.String,System.String)">
            <summary>
            Set a new String setting to Device Specific settings under the active device. Setting will be saved under given name.
            Setting will be saved in the currently active device only.
            </summary>        
            <param name="key">Setting name</param>
            <param name="value">Setting Value of type string</param>      
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.SettingExistsInActiveDevice(System.String)">
            <summary>
            checks if a setting exists in the active device
            </summary>
            <param name="key">name of the setting</param>
            <returns>true if setting exists in active device</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.GetSetting``1(System.String,``0)">
             <summary>
            Return the Setting Value if the Setting is available under the currently active device
            Setting is serched for only in the currently active device settings.
             </summary>
             <typeparam name="T">Any value type</typeparam>
             <param name="key">Setting name</param>
             <param name="DefaultValue">Optional Default Value</param>
             <returns>Setting Value</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.GetStringSetting(System.String)">
             <summary>
             Return the string Setting Value, if the Setting is available under the currently active device.
            Setting is serched for only in the currently active device settings. Only strings can be used with this method.
             </summary>
             <param name="key"></param>        
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ChangeDevice(System.String)">
            <summary>
            Change the Currently selected Device to the given device. change is only possible if the device is already registered in the profile. Else, use 
            CreateNew() method.
            Settings for different devices are stored under a Name
            </summary>
            <param name="name">Name of the new device</param>
            <returns>True if operation was successful</returns>        
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.GetDefaultDeviceName">
            <summary>
            Give the name of the default device
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.CreateNewDevice(System.String,System.Boolean,System.String)">
            <summary>
            Create a new set of Device setting under the given name. and switch to that setting
            </summary>
            <param name="name">Name for the new device setting</param>
            <param name="makeActive">If set make the newly crerated device active</param>
            <param name="description">Description for the device</param>
            <returns>True if operation was successful</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.CurrentDeviceName">
            <summary>
            Name of the Device settings that is used currently
            </summary>
            <returns>current device settings name</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.DeleteDevice(System.String)">
            <summary>
            Delete the given Device settings form the profile
            Settings for different devices are stored under a Name
            </summary>
            <param name="deviceName">Name of the device to Delete</param>
            <returns>True if operation was successful</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.DeleteDeviceEntryFromLocalStorage(System.String)">
            <summary>
            Delete the given device entry form the isolated storage
            This operation can be performend only by Adminstrators
            </summary>
            <param name="isolatedStorageEntryName">name of the isolated storage Entry to delete</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.GetDevices">
            <summary>
            List of devices availble for the current user under the selected profile.
            </summary>
            <returns>List of devices available</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.IsolatdStorageDeviceList">
            <summary>
            Get the list of devices saved in the isolated storage
            This operation can be performend only by Adminstrators
            </summary>
            <returns>list of items in the isolated storage</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.RenameCurrentDevice(System.String)">
            <summary>
            Rename active Device settings in the profile to a new name
            Settings for different devices are stored under a Name
            </summary>
            <param name="NewDeviceName">new name of the device setting</param>
            <returns>True if operation was successful</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.RenameDevice(System.String,System.String)">
            <summary>
            Rename the device
            </summary>
            <param name="previousDeviceName">Exsisting device name</param>
            <param name="newDeviceName">New name</param>
            <returns>True if operation was successful</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.GetDeviceDescription(System.String)">
            <summary>
            return description of the device
            </summary>
            <param name="deviceName">Name of the device</param>
            <returns>description</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.DeviceExistingLocation(System.String)">
            <summary>
            Gives where the Device information is located in the profile.
            Some devices are inherited from the profile. Some are totally in the user’s personal profile while others are in both.
            </summary>
            <param name="deviceName">name of the device</param>
            <returns>DeviceExistence</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.SubscribeToActiveDeviceChanging(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{Ifs.Fnd.Explorer.Interfaces.FndDeviceSpecificSettingsEventArgs})">
            <summary>
            Subscribe to Active Device Changing Event. This event is fired before the device has changed. FndDeviceSpecificSettingsEventArgs contains name of the device which is about to change.
            </summary>
            <param name="explorer">invoker</param>
            <param name="callback">callback method</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.SubscribeToActiveDeviceNameChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{Ifs.Fnd.Explorer.Interfaces.FndDeviceSpecificSettingsEventArgs})">
            <summary>
            Subscribe to Device settings changed Event. This event is fired after the device has changed. FndDeviceSpecificSettingsEventArgs contains new device's name.
            </summary>
            <param name="explorer">invoker</param>
            <param name="callback">callback method</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.SubscribeToDeviceListChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{System.EventArgs})">
            <summary>
            Subscribe to Device List changed Event
            </summary>
            <param name="explorer">invoker</param>
            <param name="callback">callback method</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.UnSubscribeToActiveDeviceChanging(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{Ifs.Fnd.Explorer.Interfaces.FndDeviceSpecificSettingsEventArgs})">
            <summary>
            UnSubscribe from Active Device Changing event
            </summary>
            <param name="explorer">invoker</param>
            <param name="callback">callback method</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.UnSubscribeToActiveDeviceNameChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{Ifs.Fnd.Explorer.Interfaces.FndDeviceSpecificSettingsEventArgs})">
            <summary>
            UnSubscribe from Device settings changed event
            </summary>
            <param name="explorer">invoker</param>
            <param name="callback">callback method</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.UnSubscribeToDeviceListChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{System.EventArgs})">
            <summary>
            UnSubscribe to Device List changed event
            </summary>
            <param name="explorer">invoker</param>
            <param name="callback">callback method</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ShortcutsViewWidth">
            <summary>
            Desired Width of the shortcut view
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.NavigatorViewWidth">
            <summary>
            Desired Width of the navigator view 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.StreamsViewWidth">
            <summary>
            Desired Width of the streams view 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.AddressToolbarVisible">
            <summary>
            Stores setting if addressbar is visible
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ContextPaneHeight">
            <summary>
            Stores height of bottom area
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ContextPaneLastActive">
            <summary>
            Stores last active contextpanel
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ContextPaneVisible">
            <summary>
            Stores setting if bottom area is visible
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ExplorerAddressBarVisible">
            <summary>
            Stores the explorer address bar state
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ExplorerMainMenuVisible">
            <summary>
            Stores the explorer main menu state
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ExplorerWindowBottomPaneVisible">
            <summary>
            Stores the explorer form bottom pane state
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ExplorerWindowLeftPaneVisible">
            <summary>
            Stores the explorer form left pane state
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ExplorerWindowPositionX">
            <summary>
            Stores the explorer form window position - X
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ExplorerWindowPositionY">
            <summary>
            Stores the explorer form window position - Y
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ExplorerWindowSizeHeight">
            <summary>
            Stores the explorer form window size - Height
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ExplorerWindowSizeWidth">
            <summary>
            Stores the explorer form window size - Width
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ExplorerWindowStateMaximised">
            <summary>
            Stores the explorer form window state
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ExplorerWindowTopPaneVisible">
            <summary>
            Stores the explorer form top pane state
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.LoadedFeaturesCacheSize">
            <summary>
            Stores the size of the loaded features cache
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.NavigationBoxPanelVisible">
            <summary>
            Stores the navigation Box panel visible state
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.NavigationTreePanelVisible">
            <summary>
            Stores the navigation tree panel visible state
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.NavigationTreePinned">
            <summary>
            Stores the navigation tree pinned state
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.NavigatorPaneWidth">
            <summary>
            Stores the with of the left area
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.NavigatorVisible">
            <summary>
            Stores setting if left area is visible
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.OpenLinkInCurrentWindow">
            <summary>
            Stores the open external links in current window (or new window) setting
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.OpenLinkInNewInstance">
            <summary>
            Stores open external links in new Entprise Explorer process setting
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.OpenLinkInNewWindow">
            <summary>
            Stores the open external links in current window (or new window) setting
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ShortcutsFontSize">
            <summary>
            Stores font size of Shortcut items
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ShortcutsLayoutColumns">
            <summary>
            Stores the number of possible shortcuts columns
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ShortcutsLayoutRows">
            <summary>
            Stores the number of possible shortcuts rows
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ShortcutsShowLabels">
            <summary>
            Stores whether to display labels for shortcuts
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.ShowFeedbackMessages">
            <summary>
            Stores show feedback messages setting
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.StandardToolbarVisible">
            <summary>
            Stores setting if standard toolbar is visible
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.UseCompressionForServerTraffic">
            <summary>
            Stores setting if client should enable compression of server traffic
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDeviceSpecificSettings.UserTypedUrls">
            <summary>
            URLs typed by the user in the address bar
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.DeviceExistence">
            <summary>
            Specify where the Device settings are located in profile
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.DeviceExistence.ClientProfile">
            <summary>
            settings are inClient Profile only
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.DeviceExistence.BaseProfile">
            <summary>
            settings are in Base profile only
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.DeviceExistence.JoinedProfile">
            <summary>
            Settings are in both base profile and client profile
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.DeviceExistence.None">
            <summary>
            settings could not be found in any profile
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndDeviceSpecificSettingsEventArgs">
            <summary>
            Eventargs hold the Name of the new Device (name of the settings)
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndDeviceSpecificSettingsEventArgs.#ctor(System.String)">
            <summary>
            Creates a new FndDeviceSpecificSettingsEventArgs
            </summary>
            <param name="deviceName">Device name</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDeviceSpecificSettingsEventArgs.DeviceName">
            <summary>
            Get the currrent Device name
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndLuReferenceInfo">
            <summary>
            Contains information of a reference from a view to a LU.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndLuReferenceInfo.#ctor(Ifs.Fnd.Explorer.Interfaces.FndColumnInfo)">
            <summary>
            Constructs FndLuReferenceInfo instance from a column.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndLuReferenceInfo.ToString">
            <summary>
            Converts the value of this instance to a System.String.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndLuReferenceInfo.Equals(System.Object)">
            <summary>
            Determines if the object obj is equal to this instance.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>Returns true if the objects are equal else false.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndLuReferenceInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndLuReferenceInfo.ReferenceString">
            <summary>
            Gets the string that defines the reference.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndLuReferenceInfo.LuName">
            <summary>
            Gets the name of the LU the reference refers to.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndLuReferenceInfo.View">
            <summary>
            Gets the view the reference referes to.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndLuReferenceInfo.Keys">
            <summary>
            Gets the key columns used in the reference.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumeration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumeration.IsValidDbValue(System.String)">
            <summary>
            Returns true if an instance corresponding to a given database value exists.
            </summary>
            <param name="dbValue">The database value</param>
            <returns>True when the database value is valid, false otherwise.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumeration.IsValidClientValue(System.String)">
            <summary>
            Returns true if an instance corresponding to a given client value exists.
            </summary>
            <param name="clientValue">The client value</param>
            <returns>True when the client value is valid, false otherwise.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumeration.ExistDbValue(System.String)">
            <summary>
            Checks if an instance corresponding to a given database value exists.
            If not, an exception will be raised.
            </summary>
            <param name="dbValue"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumeration.ExistClientValue(System.String)">
            <summary>
            Checks if an instance corresponding to a given client value exists.
            If not, an exception will be raised.
            </summary>
            <param name="clientValue"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumeration.Encode(System.String)">
            <summary>
            Returns the database representation of a domain value given the client value in current language.
            </summary>
            <param name="clientValue">The client value</param>
            <returns>The database value</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumeration.Decode(System.String)">
            <summary>
            Returns the client representation of a domain value given the database value in current language.
            </summary>
            <param name="dbValue">The database value</param>
            <returns>The client value</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumeration.GetDbValue(System.Int32)">
            <summary>
            Returns the database representation a domain value given its index.
            </summary>
            <param name="index">The index of the database value</param>
            <returns>The database value</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumeration.GetClientValue(System.Int32)">
            <summary>
            Returns the client representation a domain value given its index.
            </summary>
            <param name="index">The index of the client value</param>
            <returns>The client value</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumeration.Name">
            <summary>
            The name (in uppercase) of the domain.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumeration.Count">
            <summary>
            Returns the number of domain values.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumeration.DbValues">
            <summary>
            Returns a set of all domain database values.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumeration.ClientValues">
            <summary>
            Returns a list of all domain client values.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumeration.Values">
            <summary>
            Returns a dictionary of all domain database and client values.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumerationService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumerationService.Get(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumerationService.GetMulti(System.String[])">
            <summary>
            
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndPLSQLEnumerationService.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo">
            <summary>
            This is the information dictionary for IFS Enterprise Explorer.
            It provides lists for all client artifacts (features, plugings etc)
            that is available (=installed).
            
            The information initialize during startup of client, then it's read only
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo.#ctor">
            <summary>
            Creates a new (empty) read only instance of FndApplicationInfo
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo.#ctor(System.Collections.Generic.List{Ifs.Fnd.Explorer.Interfaces.FndAssemblyInfo},System.Collections.Generic.List{Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo},System.Collections.Generic.List{Ifs.Fnd.Explorer.Interfaces.FndTaskParameterSheetInfo},System.Collections.Generic.List{Ifs.Fnd.Explorer.Interfaces.FndWizardPageInfo},System.Collections.Generic.List{Ifs.Fnd.Explorer.Interfaces.FndReportOrderDialogInfo},System.Collections.Generic.List{Ifs.Fnd.Explorer.Interfaces.FndReportParameterDialogInfo},System.Collections.Generic.List{Ifs.Fnd.Explorer.Interfaces.FndCustomizedFormInfo})">
            <summary>
            Creates a new read only instance of FndApplicationInfo which is filled from the supplied arguments.
            This constructor is intended to be called from FW code.
            </summary>
            <param name="assemblies">List of all assemblies installed</param>
            <param name="dynamicTabPages">List of all dynamic tab pages installed</param>
            <param name="taskParameterSheets">List of all task parameter sheets installed</param>
            <param name="wizardPages">List of all wizard pages installed</param>
            <param name="reportOrderDialogs">List of all Report Order Dialogs installed</param>
            <param name="reportParameterDialogs">List of all Report parameter Dialogs installed</param>
            <param name="customizedForms">List of all Customized Forms installed</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serialize dictionary to XML.
            </summary>
            <param name="writer">XmlTextWriter instance to write output to</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo.Deserialize(System.Xml.XmlReader)">
            <summary>
            Deserialize an XML representation of the dictionary.
            </summary>
            <param name="reader">XmlReader to read input from</param>
            <returns>A new FndApplicationInfo instance filled with deserialized content</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo.Assemblies">
            <summary>
            Gets all IFS Application assemblies installed.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo.Plugins">
            <summary>
            Gets all plugins installed (regardless of assembly)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo.Features">
            <summary>
            Gets all features installed (regardless of assembly)
            TODO: JAROSE 2010-11-16. I wanted to remove this property but I didn't dare due to backwards comp issues. Remove in NextCore
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo.FeaturesDictionary">
            <summary>
            Gets all features installed (regardless of assembly)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo.CustomLOVs">
            <summary>
            Gets all custom LOV installed (regardless of assembly)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo.DynamicTabPages">
            <summary>
            Gets all dynamic tab pages installed (regardless of assembly)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo.TaskParameterSheets">
            <summary>
            Gets all task parameter sheets installed (regardless of assembly)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo.WizardPages">
            <summary>
            Gets all dynamic wizard pages installed (regardless of assembly)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo.CustomizedForms">
            <summary>
            Gets all customized forms
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo.ReportOrderDialogs">
            <summary>
            Gets all Report Order dialogs installed (regardless of assembly)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndApplicationInfo.ReportParameterDialogs">
            <summary>
            Gets all Report Parameter dialogs installed (regardless of assembly)
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndAssemblyInfo">
            <summary>
            Dictionary information about a specific assembly installed.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndSerializable">
            <summary>
            Serialization interface
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndAssemblyInfo.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{Ifs.Fnd.Explorer.Interfaces.FndPluginInfo},System.Collections.Generic.List{Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo},System.Collections.Generic.List{Ifs.Fnd.Explorer.Interfaces.FndCustomLovInfo},System.Collections.Generic.List{System.String})">
            <summary>
            Creates new instance of FndAssemblyInfo
            </summary>
            <param name="fullName"></param>
            <param name="component"></param>
            <param name="layerName"></param>
            <param name="plugins"></param>
            <param name="features"></param>
            <param name="customLOVs"></param>
            <param name="referencedApplicationAssemblies"></param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndAssemblyInfo.Component">
            <summary>
            Gets the component from which this assembly is built from
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndAssemblyInfo.LayerName">
            <summary>
            Gets the layer name from which this assembly is built for
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndAssemblyInfo.FullName">
            <summary>
            Full name of the assembly
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndAssemblyInfo.Plugins">
            <summary>
            List of plugins located in assembly or empty list if assembly contains no plugins
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndAssemblyInfo.Features">
            <summary>
            List of features located in assembly or empty list if assembly contains no features
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndAssemblyInfo.CustomLOVs">
            <summary>
            List of custom LOVs located in assembly or empty list if assembly contains no custom LOVs
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndAssemblyInfo.IsCustomizedAssembly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndAssemblyInfo.IsCoreAssembly">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndClientPageTechnology">
            <summary>
            Defines type of technology used to implement a feature
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndClientPageTechnology.NativeWinForms">
            <summary>
            Page built upon System.Windows.Forms and IFS base classes
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndClientPageTechnology.ApplicationForms">
            <summary>
            Page built upon PPJ and ApplicationForms
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndClientPageTechnology.CustomDefinedApplicationForms">
            <summary>
            Custom defined page built upon PPJ and ApplicationForms
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndClientPageTechnology.IfsWebClientPage">
            <summary>
            Page is IFS webclient
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndClientPageTechnology.NativeWPF">
            <summary>
            Page built upon Windows Presentation Foundation and IFS base classes.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndPageViewType">
            <summary>
            Type of view a page can provide
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndPageViewType.Single">
            <summary>
            Single record view (one record visible at the time)
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndPageViewType.List">
            <summary>
            List view (many records of same type visible at one time)
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndPageViewType.MultiType">
            <summary>
            View with several different and independent data source, one visible
            at the time
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndPageViewType.MultiTypeSingle">
            <summary>
            Single record view (one record visible at the time) contained in a MultiType feature
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndPageViewType.MultiTypeList">
            <summary>
            List view (many records of same type visible at one time) contained in a MultiType feature
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndPageViewType.NavigationPage">
            <summary>
            Navigation or menu page
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndPageViewType.Dialog">
            <summary>
            Dialog
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndPageViewType.Other">
            <summary>
            Other (unhandled) type.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndPageEditType">
            <summary>
            Type of editing allowed in page.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndPageEditType.BrowseOnly">
            <summary>
            Page is browse only, can never edit.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndPageEditType.Edit">
            <summary>
            Page is browse and edit.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndPageEditType.Other">
            <summary>
            Other (unhandled) type.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo">
            <summary>
            Dictionary information about a specific feature installed.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.#ctor">
            <summary>
            Creates new instance of FndFeatureInfo
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.#ctor(System.String,System.String,System.String,Ifs.Fnd.Explorer.Interfaces.FndClientPageTechnology,Ifs.Fnd.Explorer.Interfaces.FndPageViewType,Ifs.Fnd.Explorer.Interfaces.FndPageEditType,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.String,System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Creates new instance of FndFeatureInfo
            </summary>
            <param name="title"></param>
            <param name="fullName"></param>
            <param name="uniqueName"></param>
            <param name="technology"></param>
            <param name="featureType"></param>
            <param name="editType"></param>
            <param name="entities"></param>
            <param name="homeForViews"></param>
            <param name="defaultHome"></param>
            <param name="overrideDefaultHome"></param>
            <param name="associatedHomepage"></param>
            <param name="topLevelForm"></param>
            <param name="requiredActivities"></param>
            <param name="requiredViews"></param>
            <param name="pageUrlParameters"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.#ctor(System.String,System.String,System.String,Ifs.Fnd.Explorer.Interfaces.FndClientPageTechnology,Ifs.Fnd.Explorer.Interfaces.FndPageViewType,Ifs.Fnd.Explorer.Interfaces.FndPageEditType,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.String,System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="fullName"></param>
            <param name="uniqueName"></param>
            <param name="technology"></param>
            <param name="featureType"></param>
            <param name="editType"></param>
            <param name="entities"></param>
            <param name="homeForViews"></param>
            <param name="defaultHome"></param>
            <param name="overrideDefaultHome"></param>
            <param name="associatedHomepage"></param>
            <param name="topLevelForm"></param>
            <param name="requiredActivities"></param>
            <param name="requiredViews"></param>
            <param name="pageUrlParameters"></param>
            <param name="isContainer"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.#ctor(System.String,System.String,System.String,Ifs.Fnd.Explorer.Interfaces.FndClientPageTechnology,Ifs.Fnd.Explorer.Interfaces.FndPageViewType,Ifs.Fnd.Explorer.Interfaces.FndPageEditType,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.String,System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="fullName"></param>
            <param name="uniqueName"></param>
            <param name="technology"></param>
            <param name="featureType"></param>
            <param name="editType"></param>
            <param name="entities"></param>
            <param name="homeForViews"></param>
            <param name="defaultHome"></param>
            <param name="overrideDefaultHome"></param>
            <param name="associatedHomepage"></param>
            <param name="topLevelForm"></param>
            <param name="requiredActivities"></param>
            <param name="requiredViews"></param>
            <param name="pageUrlParameters"></param>
            <param name="isContainer"></param>
            <param name="excludedCustomFieldContainers"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.TopLevelFeatuers(System.Collections.Generic.List{Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo})">
            <summary>
            Sets the toplevelFeatures list.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.SubFeatuers(System.Collections.Generic.List{Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo})">
            <summary>
            Sets the subFeatures list.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.GetFeatureByName(Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo@,System.String,System.Collections.Generic.Dictionary{System.String,Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo})">
            <summary>
            Find a feature given a name
            </summary>
            <param name="featureInfo">result of the search</param>
            <param name="featureName">name of the feature</param>
            <param name="features">feature Dictionary to search</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.Assembly">
            <summary>
            Gets the assembly in which feature is located
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.Title">
            <summary>
            Gets the registed title
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.FullName">
            <summary>
            Gets the full feature name (class name including namespace)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.UniqueName">
            <summary>
            Gets the unique name for a feature
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.Technology">
            <summary>
            Gets the FndClientPageTechnology in which feature is implemented
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.FeatureType">
            <summary>
            Gets the view type.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.FeatureEditType">
            <summary>
            Gets the edit type.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.Entities">
            <summary>
            Gets the entity (or LU) list
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.HomeForViews">
            <summary>
             Gets a list of database view name for which this feature has registered viewer.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.DefaultHome">
            <summary>
            Gets whenever feature is default viewer
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.OverrideDefaultHome">
            <summary>
            Indicate that a feature overrides other features as DefaultHome when FndDictionaryService creates the dictionary.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.AssociatedHomepage">
            <summary>
            Returns the unique name of the feature that it is associated with. Typically a single feature is associated with 
            a list feature that has the same entity and vice versa
            .
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.TopLevelFeatures">
            <summary>
            A list of the features that the feature belongs to.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.SubFeatures">
            <summary>
            A list of the features that belongs to the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.SubFeatureNames">
            <summary>
            A list of the features names that belongs to the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.TopLevelFeatureNames">
            <summary>
            A list of the features that belongs to the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.TopLevelForm">
            <summary>
            Indicates that this feature can be navigated to from navigator 
            or from another feature, and guarantee to work standalone. 
            It may or may not contain other features.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.SubForm">
            <summary>
            Indicates that this feature is contained in  another feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.RequiredActivities">
            <summary>
            Gets a list of required activies that this feature needs to start
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.RequiredViews">
            <summary>
            Gets a list of required database views that this feature needs to start
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.PageUrlParameters">
            <summary>
            Gets a list of custom URL parameters that can be set on this feature
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.IsContainer">
            <summary>
            Indicate that a feature overrides other features as DefaultHome when FndDictionaryService creates the dictionary.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.ExcludedCustomFieldsContainers">
            <summary>
            Gets the exclusion information for Custom Fields
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo.Url">
            <summary>
            Gets the internal URL to this feature
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndCustomLovInfo">
            <summary>
            Dictionary information about a specific custom LOV installed.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndCustomLovInfo.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of FndCustomLovInfo
            </summary>
            <param name="fullName"></param>
            <param name="entity"></param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndCustomLovInfo.Assembly">
            <summary>
            Gets the assembly in which custom LOV is located
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndCustomLovInfo.FullName">
            <summary>
            Gets the full classname (including namespace) for the custom LOV
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndCustomLovInfo.Entity">
            <summary>
            Gets the entity/LU for which this is a custom LOV for
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndPluginType">
            <summary>
            Type of plugin
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndPluginType.Application">
            <summary>
            Plugin on application level (instantiated once per process)
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndPluginType.Explorer">
            <summary>
            Plugin on explorer level (instantiated once per enterprise explorer window)
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndPluginInfo">
            <summary>
            Dictionary information about a specific plugin installed.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndPluginInfo.#ctor(System.String,Ifs.Fnd.Explorer.Interfaces.FndPluginType)">
            <summary>
            Creates new instance of FndPluginInfo
            </summary>
            <param name="fullName"></param>
            <param name="type"></param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndPluginInfo.Assembly">
            <summary>
            Gets the assembly in which plugin is located
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndPluginInfo.FullName">
            <summary>
            Gets the full classname (including namespace) for the plugin
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndPluginInfo.Type">
            <summary>
            Gets the plugin type
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo">
            <summary>
            Dictionary information about a specific dynamic tabpage installed.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Collections.Generic.List{Ifs.Fnd.Explorer.Interfaces.FndAttributeMapping})">
            <summary>
            Creates new instance of FndDynamicTabPageInfo
            </summary>
            <param name="containerName"></param>
            <param name="containerVersion"></param>
            <param name="controlName"></param>
            <param name="tabPageId"></param>
            <param name="tabTitle"></param>
            <param name="tabProgText"></param>
            <param name="ordinal"></param>
            <param name="isHomePage"></param>
            <param name="parentKeyMappings"></param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo.ContainerName">
            <summary>
            Gets the name of the container in which this dynamic tab is hosted
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo.ContainerParentName">
            <summary>
            Gets the name of the parent of the container which this dynamic tab is hosted.
            Example: The ContainerName "frmABC.picTab" will make ContainerParentName return "frmABC".
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo.ContainerVersion">
            <summary>
            Gets the version of the container in which this dynamic tab is hosted (can be omitted)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo.ControlName">
            <summary>
            Get the name of the dynamic tab control itself (without namespace)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo.TabPageId">
            <summary>
            Gets the tab page id
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo.TabTitle">
            <summary>
            Gets the title text for the dynamic tab
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo.TabProgText">
            <summary>
            Gets the prog text for the dynamic tab
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo.Ordinal">
            <summary>
            Gets the ordinal for the dynamic tab which represents the tab position related to other dynamic tabs.
            Tabs with lower Ordinal are placed before tabs with higher Ordinal.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo.IsHomePage">
            <summary>
            Dynamic tabs that are hosted in a cContainerTabFormWindow and being a homepage for the registered view they support, returns TRUE.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo.ParentKeyMappings">
            <summary>
            List of parent key connections defined for tabPage feature
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo.HasParentKeyMapping">
            <summary>
            Returns true if dynamic tabpage has parent key mappings, otherwise false.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndAttributeMapping">
            <summary>
            Attributes that are connected between a parent and a child feature
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndAttributeMapping.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of FndAttributeMapping
            </summary>
            <param name="parentAttribute"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndAttributeMapping.Equals(Ifs.Fnd.Explorer.Interfaces.FndAttributeMapping,Ifs.Fnd.Explorer.Interfaces.FndAttributeMapping)">
            <summary>
            FndAttributeMapping are equal if their attribute and parentAttribute are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndAttributeMapping.GetHashCode(Ifs.Fnd.Explorer.Interfaces.FndAttributeMapping)">
            <summary>
            
            </summary>
            <param name="attributeMapping"></param>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndAttributeMapping.ParentAttribute">
            <summary>
            Gets the parent attribute to connect with
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndAttributeMapping.Attribute">
            <summary>
            Gets the child attribute to connect with
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndAttributeMapping.EmptyList">
            <summary>
            Gets an empty ReadOnlyCollection of FndAttributeMapping
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndWizardPageInfo">
            <summary>
            Dictionary information about a specific dynamic wizard page installed.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndWizardPageInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates new instance of FndWizardPageInfo
            </summary>
            <param name="parentObject"></param>
            <param name="window"></param>
            <param name="resource"></param>
            <param name="title"></param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndWizardPageInfo.ParentObject">
            <summary>
            Gets the name of the container wizard
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndWizardPageInfo.Window">
            <summary>
            Get the name of the wizard class
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndWizardPageInfo.Resource">
            <summary>
            Gets the custom image for the wizard page
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndWizardPageInfo.Title">
            <summary>
            Gets the wizard page title
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndTaskParameterSheetInfo">
            <summary>
            Dictionary information about a specific task parameter sheet installed.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndTaskParameterSheetInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates new instance of FndTaskParameterSheetInfo
            </summary>
            <param name="paramSheet"></param>
            <param name="methodName"></param>
            <param name="factoryAssembly"></param>
            <param name="factoryClass"></param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndTaskParameterSheetInfo.ParameterSheet">
            <summary>
            Gets the name of the parameter sheet class name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndTaskParameterSheetInfo.MethodName">
            <summary>
            Gets Method name for which this parameter sheet is registered
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndTaskParameterSheetInfo.FactoryAssembly">
            <summary>
            Name of the assembly where factory class is present
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndTaskParameterSheetInfo.FactoryClass">
            <summary>
            Name of the factory class
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndReportOrderDialogInfo">
            <summary>
            Dictionary information about a specific Custom report parameter sheet installed.
            </summary>	
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndReportOrderDialogInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates new instance of FndReportOrderDialogInfo
            </summary>
            <param name="orderDialog"></param>
            <param name="reportId"></param>
            <param name="factoryAssembly"></param>
            <param name="factoryClass"></param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndReportOrderDialogInfo.OrderDialog">
            <summary>
            Gets the name of the Order Diaolg class name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndReportOrderDialogInfo.ReportID">
            <summary>
            Gets ReportID for which this Order Dialog is registered
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndReportOrderDialogInfo.FactoryAssembly">
            <summary>
            Name of the assembly where factory class is present
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndReportOrderDialogInfo.FactoryClass">
            <summary>
            Name of the factory class
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndReportParameterDialogInfo">
            <summary>
            Dictionary information about a specific Custom report parameter sheet installed.
            </summary>	
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndReportParameterDialogInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates new instance of FndReportParameterDialogInfo
            </summary>
            <param name="parameterDialog"></param>
            <param name="reportId"></param>
            <param name="factoryAssembly"></param>
            <param name="factoryClass"></param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndReportParameterDialogInfo.ParameterDialog">
            <summary>
            Gets the name of the Parameter Diaolg class name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndReportParameterDialogInfo.ReportID">
            <summary>
            Gets ReportID for which this Parameter Dialog is registered
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndReportParameterDialogInfo.FactoryAssembly">
            <summary>
            Name of the assembly where factory class is present
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndReportParameterDialogInfo.FactoryClass">
            <summary>
            Name of the factory class
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndCustomParameterSheetInfo">
            <summary>
            FndCustomParameterSheetInfo is used to exchange information on Custom parameter sheets
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndCustomParameterSheetInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            creare FndCustomParameterSheetInfo class
            </summary>
            <param name="customParameterSheetName">Name of the custom parameter sheet.</param>
            <param name="factoryAssembly">Assembly name where the Factory class to create the custom paremeter sheet, resides.</param>
            <param name="factoryClass">Factory class name ,which s used to create the custom paremeter sheet.</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndCustomParameterSheetInfo.ParameterSheetName">
            <summary>
            Name of the Custom parameter sheet
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndCustomParameterSheetInfo.FactoryAssembly">
            <summary>
            Assembly name where the Factory class to create the custom paremeter sheet, resides
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndCustomParameterSheetInfo.FactoryClass">
            <summary>
            Factory class name ,which s used to create the custom paremeter sheet.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndCustomizedFormInfo">
            <summary>
            FndCustomizedFormInfo is used to...
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndCustomizedFormInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="originalFormName"></param>
            <param name="customizedFormName"></param>
            <param name="layerName"></param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndCustomizedFormInfo.OriginalFormName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndCustomizedFormInfo.CustomizedFormName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndCustomizedFormInfo.LayerName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndEntityAttribute">
            <summary>
            Specifies the Entity (or LU) that should be the main entity for a form
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndEntityAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of FndEntityAttribute
            </summary>
            <param name="entity">Entity name (eg FndUser)</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndEntityAttribute.Entity">
            <summary>
            Get the entity name, eg FndUser
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndFormLevelType">
            <summary>
            Specifies the navigatable characteristics of a form
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndFormLevelType.TopLevelForm">
            <summary>
            A top level form which can be navigated to. 
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndFormLevelType.SubForm">
            <summary>
            A sub form which must within another top level form. These forms can not be navigated to (they will fail)
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndFormLevelAttribute">
            <summary>
            Specifies whenever the form is navigateable or not
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndFormLevelAttribute.#ctor(Ifs.Fnd.Explorer.Interfaces.FndFormLevelType)">
            <summary>
            Creates a new instance of FndFormLevelAttribute
            </summary>
            <param name="formLevelType">Form level</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFormLevelAttribute.FormLevelType">
            <summary>
            Gets the form navigatable characteristics
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfoAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfoAttribute.#ctor(Ifs.Fnd.Explorer.Interfaces.FndPageEditType)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfoAttribute.#ctor(System.String,Ifs.Fnd.Explorer.Interfaces.FndPageEditType)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfoAttribute.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureInfoAttribute.EditType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndHomeForViewsAttribute">
            <summary>
            Specifies "home" for database views.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndHomeForViewsAttribute.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of FndHomeForViewsAttribute
            </summary>
            <param name="homeForViews">Comma separated list of views for which this form is home (whitespace are trimmed)</param>
            <param name="defaultHome"></param>
            <param name="overrideDefaultHome"></param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndHomeForViewsAttribute.HomeForViews">
            <summary>
            List a view names (eg FND_USER) for which this form is home of.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndHomeForViewsAttribute.DefaultHome">
            <summary>
            Gets whenever feature is default viewer
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndHomeForViewsAttribute.OverrideDefaultHome">
            <summary>
            Indicate that a feature overrides other features as DefaultHome.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndSecurityRequirementType">
            <summary>
            Specifies the how to interpret a security requirement
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndSecurityRequirementType.View">
            <summary>
            Security should be checked using database views (eg FND_USER)
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndSecurityRequirementType.Activity">
            <summary>
            Security should be checked using activity names (eg ManageFndUser)
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndSecurityRequirementsAttribute">
            <summary>
            Specifies the security requirements for a page. This attribute can be specified several times on a class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSecurityRequirementsAttribute.#ctor(Ifs.Fnd.Explorer.Interfaces.FndSecurityRequirementType,System.String)">
            <summary>
            Creates a new instace of FndSecurityRequirementsAttribute
            </summary>
            <param name="type">Security requirement type</param>
            <param name="securityRequirements">Comma separated list of security requirements (whitespace trimmed)</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSecurityRequirementsAttribute.#ctor(Ifs.Fnd.Explorer.Interfaces.FndSecurityRequirementType,System.String,System.Boolean)">
            <summary>
            Creates a new instace of FndSecurityRequirementsAttribute
            </summary>
            <param name="type">Security requirement type</param>
            <param name="securityRequirements">Comma separated list of security requirements (whitespace trimmed)</param>
            <param name="required">true = all items in list are required for form to start. false = all items in list are optional (form will start without them granted)</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSecurityRequirementsAttribute.SecurityRequirements">
            <summary>
            Gets a list of security requirements
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSecurityRequirementsAttribute.Required">
            <summary>
            Get required/optional state. true = all items in list are required for form to start. false = all items in list are optional (form will start without them granted)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSecurityRequirementsAttribute.SecurityRequirementType">
            <summary>
            Gets the security requirement type (how to interpret SecurityRequirements list)
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndPageUrlParameter">
            <summary>
            Marks a property as being a custom parameter that should be added (or parsed from) an URL.
            Those parameters are intended to reflect a state of the current feature.
            The property must of type string and the developer adding the property should implement both getter and setter
            fo that property. The setter will be called by the framework when navigating to an url containing the parameter
            and the getter will be called by the framework when creating an URL reflecting the current feature state. 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndWindowRegistrationFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.ApplicationForms.FndWindowRegistrationFlags.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.ApplicationForms.FndWindowRegistrationFlags.HomePage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.ApplicationForms.FndWindowRegistrationFlags.NoSecurity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndWindowRegistrationAttribute">
            <summary>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndWindowRegistrationAttribute.#ctor(System.String,System.String,System.String,Ifs.Fnd.ApplicationForms.FndWindowRegistrationFlags)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="entity"></param>
            <param name="defaultWindowText"></param>
            <param name="flags"></param>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndWindowRegistrationAttribute.#ctor(System.String,System.String,Ifs.Fnd.ApplicationForms.FndWindowRegistrationFlags)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="entity"></param>
            <param name="flags"></param>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndWindowRegistrationAttribute.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndWindowRegistrationAttribute.#ctor(System.String,System.String,System.String,Ifs.Fnd.ApplicationForms.FndWindowRegistrationFlags,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="entity"></param>
            <param name="defaultWindowText"></param>
            <param name="flags"></param>
            <param name="overrideDefaultHome"></param>
            <param name="associatedHomepage"></param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndWindowRegistrationAttribute.View">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndWindowRegistrationAttribute.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndWindowRegistrationAttribute.DefaultWindowText">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndWindowRegistrationAttribute.Flags">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndWindowRegistrationAttribute.OverrideDefaultHome">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndWindowRegistrationAttribute.AssociatedHomepage">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute">
            <summary>
            Decoration class attaching pages in runtime as dynamic tabs to a container where the tab is hosted.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Decorate the page as dynamic tab. The tab is unversioned and is not a homepage for the view it supports.
            </summary>
            <param name="parentObject"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.ParentObject"/></param>
            <param name="tabTag"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.TabTag"/></param>
            <param name="tabTitle"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.TabTitle"/></param>
            <param name="ordinal"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.Ordinal"/></param>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Decorate the page as dynamic tab. The tab is not a homepage for the view it supports.
            </summary>
            <param name="parentObject"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.ParentObject"/></param>
            <param name="windowVersion"><see cref="F:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.windowVersion"/></param>
            <param name="tabTag"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.TabTag"/></param>
            <param name="tabTitle"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.TabTitle"/></param>
            <param name="ordinal"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.Ordinal"/></param>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Decorate the page as dynamic tab. The dynamic tab does not have any key mapping that connect data in the container form with the form on the tabPage. 
            </summary>
            <param name="parentObject"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.ParentObject"/></param>
            <param name="windowVersion"></param>
            <param name="tabTag"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.TabTag"/></param>
            <param name="tabTitle"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.TabTitle"/></param>
            <param name="ordinal"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.Ordinal"/></param>
            <param name="isHomePage"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.IsHomePage"/></param>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.String[])">
            <summary>
            Decorate the page as dynamic tab.
            </summary>
            <param name="parentObject"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.ParentObject"/></param>
            <param name="windowVersion"></param>
            <param name="tabTag"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.TabTag"/></param>
            <param name="tabTitle"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.TabTitle"/></param>
            <param name="ordinal"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.Ordinal"/></param>
            <param name="isHomePage"><see cref="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.IsHomePage"/></param>
            <param name="parentKeyMappings"><see cref="F:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.parentKeyMappings"/> ParentKeyMappings connect an attribute on tab page form with an attribute on a parent form, as parent key. Enter parent form sql column followed by the tab page form sql column in uppercase. Separate them by comma. Example: "ORDER_NO,ORDER_NUMBER". Specify one or more parent key mappings .</param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.ParentObject">
            <summary>
            The name of the parent container. This is typically the name of the picTab object that is the actual tab control hosting all tabs. <example>frmCountPart.picTab</example>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.WindowVersion">
            <summary>
            The version of the container in which this dynamic tab is hosted.
            When left empty, the tab will be appended to all unversioned containers.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.TabTag">
            <summary>
            The tab page id. A unique id that is set to programmatically distinguish the specific tab among all other tabs.
            The value is static and will never change during its lifetime. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.TabTitle">
            <summary>
            The tab title. A translatable value that is being shown as tab title.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.Ordinal">
            <summary>
            The ordinal number. Represents the tab position related to other dynamic tabs.
            Tabs with lower Ordinal are placed before tabs with higher Ordinal (zero is lowest).
            Use -1 to place the dynamic tab last.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.IsHomePage">
            <summary>
            Dynamic tabs hosted in a cContainerTabFormWindow and acting as a homepage for the view they support,
            should have this flag set to TRUE to get a proper zoom operation opening the hosting cContainerTabFormWindow
            page that in turn activates the correct tab and completes the zooming.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndDynamicTabPageAttribute.ParentKeyMappings">
            <summary>
            Dynamic tab ParentKeyMappings is a way to connect attributes in the parent container with attributes in the detail form on the tab page. This 
            enable any attribute on a detail form to work as a parent key with functionality such as populate. Enter each parentKeyMapping by specifying 
            container form sql column followed by tab page form sql column in uppercase. Separate them by comma. Example: "ORDER_NO,ORDER_NUMBER".
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndTaskParameterSheetAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndTaskParameterSheetAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="methodName"></param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndTaskParameterSheetAttribute.MethodName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndWizardPageAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndWizardPageAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="parentObject"></param>
            <param name="resourceId"></param>
            <param name="title"></param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndWizardPageAttribute.ParentObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndWizardPageAttribute.ResourceId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndWizardPageAttribute.Title">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndReportDialogType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.ApplicationForms.FndReportDialogType.ReportOrderDialog">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.ApplicationForms.FndReportDialogType.ReportParameterDialog">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndReportDialogAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndReportDialogAttribute.#ctor(System.String,Ifs.Fnd.ApplicationForms.FndReportDialogType)">
            <summary>
            
            </summary>
            <param name="reportId"></param>
            <param name="dialogType"></param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndReportDialogAttribute.ReportId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndReportDialogAttribute.DialogType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndSecurityAllowReadOnlyAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndSecurityAllowReadOnlyAttribute.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="allowReadOnly"></param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndSecurityAllowReadOnlyAttribute.AllowReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetQuickReport">
            <summary>
            Attaches the dynamic menu to all Quick Reports (QueryBuilder) that is typed for the specified logical unit(s).
            <example>
            Following example registers MyDynamicMenu class to all QueryBuilder reports that is typed as logical unit Customer
            <code>
            [FndDynamicMenuTargetQuickReport("Customer")]
            public partial class MyDynamicMenu : DynamicMenuBase
            {
            	public MyDynamicMenu()
            	{
            		InitializeComponent();
            	}
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetQuickReport.#ctor(System.String[])">
            <summary>
            Attaches the dynamic menu to Quick Reports using the specified logical unit(s).
            </summary>
            <param name="logicalUnits">The logical unit(s) for which the dynamic menu should be displayed for.</param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetQuickReport.LogicalUnits">
            <summary>
            The logical unit(s) for which the dynamic menu should be displayed for.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetCustomPage">
            <summary>
            Attaches the dynamic menu to Custom Pages using the specified logical unit(s).
            <example>
            Following example registers MyDynamicMenu class to all custom pages using the logical unit Customer
            <code>
            [FndDynamicMenuTargetCustomPage("Customer")]
            public partial class MyDynamicMenu : DynamicMenuBase
            {
            	public MyDynamicMenu()
            	{
            		InitializeComponent();
            	}
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetCustomPage.#ctor(System.String[])">
            <summary>
            Attaches the dynamic menu to Custom Pages using the specified logical unit(s).
            </summary>
            <param name="logicalUnits">The logical unit(s) for which the dynamic menu should be displayed for.</param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetCustomPage.LogicalUnits">
            <summary>
            The logical unit(s) for which the dynamic menu should be displayed for.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetPage">
            <summary>
            Attaches the dynamic menu to a specific page or a list of pages.
            <example>
            Following example registers MyDynamicMenu class to frmCustomer and tbwCustomers
            <code>
            [FndDynamicMenuTargetPage("frmCustomer", "tbwCustomers")]
            public partial class MyDynamicMenu : DynamicMenuBase
            {
            	public MyDynamicMenu()
            	{
            		InitializeComponent();
            	}
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetPage.#ctor(System.String[])">
            <summary>
            Attaches the dynamic menu to the specified page(s).
            </summary>
            <param name="pages">The name of the page(s) for which the dynamic menu should be displayed for.</param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetPage.Pages">
            <summary>
            The page(s) name(s) for which the dynamic menu should be displayed for
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetPageWithVersion">
            <summary>
            Attaches the dynamic menu to the specified page(s) with a specific version.
            <example>
            Following example registers MyDynamicMenu class to frmCustomer and tbwCustomers if run in SUPPLIER mode/version
            <code>
            [FndDynamicMenuTargetPageWithVersion("SUPPLIER", "frmCustomer", "tbwCustomers")]
            public partial class MyDynamicMenu : DynamicMenuBase
            {
            	public MyDynamicMenu()
            	{
            		InitializeComponent();
            	}
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetPageWithVersion.#ctor(System.String,System.String[])">
            <summary>
            Attaches the dynamic menu to the specified page(s) with a specific version.
            </summary>
            <param name="version">The specific page version.</param>
            <param name="pages">The name of the page(s) for which the dynamic menu should be displayed for.</param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetPageWithVersion.Version">
            <summary>
            The specific page version.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndDynamicMenuTargetPageWithVersion.Pages">
            <summary>
            The page(s) for which the dynamic menu should be displayed for
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndPresentationObject">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndPresentationObject.UsedBy">
            <summary>
            The Presentation Object items hosted in the base class will be scanned and transferred to the specified window objects(s).
            Otherwise, the items for base classes will always be scanned into the global Presentation Object defined the current component.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndPresentationObject.UsedBy.#ctor(System.String[])">
            <summary>
            The window object(s) where the Presentation Object items for the base class should be scanned and transferred.
            </summary>
            <param name="windows">The windows that should host the scanned Presentation Object items</param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndPresentationObject.UsedBy.Windows">
            <summary>
            The window object(s) where the Presentation Object items for the base class should be scanned and transferred.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndPresentationObject.Exclude">
            <summary>
            Application Forms object that should be excluded from the Presentation Object Scan.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndPresentationObject.IncludeMethod">
            <summary>
            Database method that should be included as security object for the Presentation Object.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndPresentationObject.IncludeMethod.#ctor(System.String[])">
            <summary>
            Includes the methods(s) to the Presentation Object.
            </summary>
            <param name="methods"></param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndPresentationObject.IncludeMethod.Methods">
            <summary>
            Additional method(s), apart from the scanned ones, that will be attached to the Presentation Object when it’s scanned
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndPresentationObject.IncludeView">
            <summary>
            View that should be included as a security object for the Presentation Object.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndPresentationObject.IncludeView.#ctor(System.String[])">
            <summary>
            Includes the view(s) to the Presentation Object.
            </summary>
            <param name="views"></param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndPresentationObject.IncludeView.Views">
            <summary>
            Additional view(s), apart from the scanned ones, that will be attached to the Presentation Object when it’s scanned
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndPresentationObject.IncludeLovView">
            <summary>
            LOV view that should be included as security object for the Presentation Object.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndPresentationObject.IncludeLovView.#ctor(System.String[])">
            <summary>
            Includes the LOV view(s) to the Presentation Object.
            </summary>
            <param name="lovViews"></param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndPresentationObject.IncludeLovView.LovViews">
            <summary>
            Additional LOV view(s), apart from the scanned ones, that will be attached to the Presentation Object when it’s scanned
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndPresentationObject.IncludeWindow">
            <summary>
            Form/Table Window or Dialog that should be included as a dependency object for the Presentation Object.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndPresentationObject.IncludeWindow.#ctor(System.String[])">
            <summary>
            Includes the window(s) to the Presentation Object.
            </summary>
            <param name="windows"></param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndPresentationObject.IncludeWindow.Windows">
            <summary>
            Additional window(s), apart from the scanned ones, that will be attached to the Presentation Object when it’s scanned.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.ApplicationForms.FndExcludeCustomFieldContainerAttribute">
             <summary>
             Decoration class that register the given top level page or one of its child controls in the Custom Fields exclude list.
             A decorated page will show up in the runtime dictionary as excluded from Custom Fields logic, meaning that no Custom Fields can be attached to the page.
             <remarks>
             This should be used by the applications when the design of a page is made in a way that Custom Fields framework 
             can not support the design. The decoration shows that the problem caused by the design is intended and that framework functions 
             like menu items can show UI effordance to the administrator at an early stage.
             
             A class without the attribute is by default included.
             
             Excluding a main form will automatically exclude any child containers; e.g.; child tables. 
             In the situation where the main container should be excluded but a child container should not. Then the child container needs to be explicitly set as not excluded.
             <example>
             [FndCustomFieldsExcludeContainer(true)]
             public class X
             {
            		// In none derived classes the attribute can be attached directly to the member field.
            		[FndCustomFieldsExcludeContainer(false)]
            		private cChildTable childTable1;
             }
             </example>
             
             For a more robust implementation it is always recomended to use above anotations for child containers where the anotation is attched 
             directly to the member field declaration. However in rare situations where an inherited container needs to be controlled and where 
             the member field is not accessible. Then it is possible to anotate the main container class with an explicit anotation.
             
             <example>
             // In derived classes it is possible, when needed to reference a child container by name.
             [FndCustomFieldsExcludeContainer("childTable1", false)]
             public class Y : X 
             {
             }
            </example>	
             </remarks>
             </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndExcludeCustomFieldContainerAttribute.#ctor">
            <summary>
            Initiates an instance of FndCustomFieldsExcludeContainer class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndExcludeCustomFieldContainerAttribute.#ctor(System.Boolean)">
            <summary>
            Initiates an instance of FndCustomFieldsExcludeContainer class to register an container as excluded or not.
            </summary>
            <param name="exclude">Sets the specific container to be excluded or not. If no attribute is attached to the container the default is not excluded.</param>
        </member>
        <member name="M:Ifs.Fnd.ApplicationForms.FndExcludeCustomFieldContainerAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initiates an instance of FndCustomFieldsExcludeContainer class to register child containers as excluded or not.
            It is recomended that this syntax is only used for inherited containers. Whenever it is possible a more robust syntax 
            is to anotate the container member field declaration directly.
            </summary>
            <param name="exclude">Sets the specific container(s) to be excluded or not.</param>
            <param name="childContainers"></param>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndExcludeCustomFieldContainerAttribute.ChildContainers">
            <summary>
            Gets the name of the child control that is excluded. If this value is empty the whole page is excluded.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.ApplicationForms.FndExcludeCustomFieldContainerAttribute.Exclude">
            <summary>
            Gets if child containers like child tables should be excluded together with the main window.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndExplorerContextPaneUIService">
            <summary>
            IFndExplorerContextPaneUIService provides methods to manipulate
            contents in the context pane.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerContextPaneUIService.RegisterContextPaneControl(Ifs.Fnd.Explorer.Interfaces.IFndContextPaneControl,Ifs.Fnd.Explorer.Interfaces.ContextPaneUpdateType)">
            <summary>
            Registers a context pane control to the context pane (lower left corner)
            </summary>
            <param name="contextPaneControl">The control to show</param>
            <param name="updateType">Tells the framework what events should cause UI update on the pane</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerContextPaneUIService.UnregisterContextPaneControl(Ifs.Fnd.Explorer.Interfaces.IFndContextPaneControl)">
            <summary>
            Unregisters a control which previously have been registered from the context pane.
            </summary>
            <param name="contextPaneControl">Control to remove</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerContextPaneUIService.GetContextPaneRMBCommands">
            <summary>
            Returns a list of all the FndCommand objects associated with the RMB menu.
            </summary>
            <returns>FndCommand list of all Context Pane RMB menu items' commands</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerContextPaneUIService.ChangeTitle(System.Windows.Forms.Control,System.String)">
            <summary>
            Change the Title of the Control at the Context pane
            </summary>
            <param name="contextPaneControl">Control which the name needs to be changed</param>
            <param name="newTitle">New Title text</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerContextPaneUIService.Hide(System.Windows.Forms.Control)">
            <summary>
            Hide the Context pane Control
            </summary>
            <param name="contextPaneControl">Control to hide</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerContextPaneUIService.Highlight(System.Windows.Forms.Control)">
            <summary>
            Highlight context pane control
            </summary>
            <param name="contextPaneControl">Control to highlight</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerContextPaneUIService.IsVisible(Ifs.Fnd.Explorer.Interfaces.IFndContextPaneControl)">
            <summary>
            Checks if the control is visible right now (for UI update purposes)
            </summary>
            <param name="contextPaneControl"></param>
            <returns>True if visible (selected and not collapsed)</returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigatorUIService">
            <summary>
            IFndExplorerNavigatorUIService provides methods
            to give UI notifications when the contents of the navigator
            is changed, such as new nodes creates or existing nodes changed
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigatorUIService.Highlight(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry)">
            <summary>
            Highlight a navigator entry (in the navigator tree or breadcrumb contextual navigator)
            </summary>
            <param name="navigatorEntry">NavigatorEntry to highlight</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigatorUIService.FilterTreeNodes(System.String)">
            <summary>
            Filters the navigator nodes matching the given pattern.
            </summary>
            <param name="filter">Pattern to search for.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigatorUIService.CreateFilterExpression(System.String)">
            <summary>
            Create a navigator filter
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigatorUIService.IsFilterApplicable(System.String)">
            <summary>
            Don't update filter if empty or only special characters.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigatorUIService.HighLightNavigatorEntry">
            <summary>
            Fired by the navigator container when a navigator entry is beeing highlighted
            Controls subscribe to this event if they are interested in showing highlight tracks
            to the navigator entry, ie the breadcrumb container control and the Aurora Explorer Form
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService">
            <summary>
            IFndExplorerNavigationService provides convenient methods
            to navigate between the feature area in the explorer to the feature
            that visualizes the supplied url.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.Navigate(System.String)">
            <summary>
            Navigate the feature area in the explorer to the feature
            that visualizes the supplied url.
            </summary>
            <param name="url">The destination.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.Navigate(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry)">
            <summary>
            Navigate the feature area in the explorer to the feature
            that visualizes the supplied url.
            </summary>
            <param name="entry">Navigate to destination of entry (Action) </param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.Navigate(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Navigate the feature area in the explorer to the feature
            that visualizes the supplied url.
            </summary>
            <param name="url">Destination url</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.Navigate(Ifs.Fnd.Core.FndUrlAddress,System.Boolean)">
            <summary>
            Navigate the feature area in the explorer to the feature
            that visualizes the supplied url.
            </summary>
            <param name="url">Destination url</param>
            <param name="newWindow">true -> open a new explorer instance</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.Navigate(Ifs.Fnd.Core.FndUrlAddress,System.Boolean,System.Boolean)">
            <summary>
            Navigate the feature area in the explorer to the feature
            that visualizes the supplied url.
            </summary>
            <param name="url">Destination url</param>
            <param name="newWindow">Set to true to open a new explorer instance</param>
            <param name="repopulate">Set to true to force a repopulate</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.Navigate(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,System.Boolean,System.Boolean)">
            <summary>
            Navigate the feature area in the explorer to the feature
            that visualizes the supplied url. This method is intended
            to be used when navigating from Navigator/BreadCrumbs etc in
            the explorer frame.
            </summary>
            <param name="navigatorEntry">NavigatorEntry that initiated navigation</param>
            <param name="newWindow">Set to true to open a new explorer instance</param>
            <param name="repopulate">Set to true to force a repopulate</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.Navigate(System.String,Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions)">
            <summary>
            Navigate the feature area in the explorer to the feature
            that visualizes the supplied url.
            </summary>
            <param name="url">The destination.</param>
            <param name="navigationOptions">Navigation options to be used for this navigation.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.Navigate(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions)">
            <summary>
            Navigate the feature area in the explorer to the feature
            that visualizes the supplied url.
            </summary>
            <param name="entry">Navigate to destination of entry (Action) </param>
            <param name="navigationOptions">Navigation options to be used for this navigation.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.Navigate(Ifs.Fnd.Core.FndUrlAddress,Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions)">
            <summary>
            Navigate the feature area in the explorer to the feature
            that visualizes the supplied url.
            </summary>
            <param name="url">Destination url</param>
            <param name="navigationOptions">Navigation options to be used for this navigation.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.NavigateHome">
            <summary>
            Navigates to home URL.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.NavigateRefresh">
            <summary>
            Navigates to the current URL with forced repulate.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.NavigateBack">
            <summary>
            Navigates back in history (if possible)
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.NavigateForward">
            <summary>
            Navigates forward in history 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.UpdateCurrentUrl(System.String)">
            <summary>
            Update the current url of the feature without doing a new navigation.
            Can only change the query part of the Url, not the base part.
            Example: 
            For the URL 
            ifswin:Ifs.Application.HR.TimeReporting?parameter1
            you can only change the right part
            parameter1
            </summary>
            <param name="url">The new url</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.GetAddresses(Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.NavigationActivityType,System.Type,System.String)">
            <summary>
            Get URL addresses for differnt types of features for the requested feature base class
            Fetches data from the runtime repository. Can be cached.
            Example: GetAddresses(NavigationActivityType.Edit, typeof(FndSingleDocumentFeatureBase), dataRow.Columns.Meta.Entity)
            </summary>
            <param name="activityType">Enumeration for different types of activties the feature to navigate to implements</param>
            <param name="featureBaseType">The typeof the feature to navigate to</param>
            <param name="entity">The entity string for the entity that the requested feature operate on</param>
            <returns>A collection of URL addresses. The Tag property on an address contains the caption.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.GetAddresses(Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.NavigationActivityType,System.Type)">
            <summary>
            Get URL addresses for differnt types of features for the requested feature base class
            Will get the Entity from the current active feature.
            Fetches data from the runtime repository. Can be cached.
            Example: GetAddresses(NavigationActivityType.Browse, typeof(FndSingleDocumentFeatureBase))
            </summary>
            <param name="activityType">Enumeration for different types of activties the feature to navigate to implements</param>
            <param name="featureBaseType">The typeof the feature to navigate to</param>
            <returns>A collection of URL addresses. The Tag property on an address contains the caption.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.GetAddresses(Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.NavigationActivityType,System.String)">
            <summary>
            Get URL addresses for differnt types of features matching any feature base class
            Fetches data from the runtime repository. Can be cached.
            Example: GetAddresses(NavigationActivityType.Edit, dataRow.Columns.Meta.Entity)
            </summary>
            <param name="activityType">Enumeration for different types of activties the feature to navigate to implements</param>
            <param name="entity">The entity string for the entity that the requested feature operate on</param>
            <returns>A collection of URL addresses. The Tag property on an address contains the caption.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.GetAddressesForDetail(System.String)">
            <summary>
            Get URL addresses for detail (SingleDocument) features for the specific entity (can be both Edit and Browse types)
            Fetches data from the runtime repository. Can be cached.
            Example: GetAddressesForDetail(dataRow.Columns.Meta.Entity)
            </summary>
            <param name="entity">The entity string for the entity that the requested feature operate on</param>
            <returns>A collection of URL addresses. The Tag property on an address contains the caption.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.IsUrlSchemeIfsSpecific(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Determines whether a URL is IFS specific or not (i.e. internet page)
            </summary>
            <param name="urlAddress">The url address.</param>
            <returns>True if IFS specific address, otherwise false.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.IsUrlSchemeSupportedWithinExplorer(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Determins whether a URL is supported. 
            </summary>
            <param name="urlAddress">The url address.</param>
            <returns>True if address is supported, otherwise false.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.CanCreateExternalUrl">
            <summary>
            Returns whether an external url address can be created.
            An external url consists of publishing location and
            parameters. When deployíng using http:// or https:// this is 
            possible, but when using file based publishing location (file://) or
            ftp this is not possible.
            Call this before GetExternalUrl.
            If this returns false and GetExternalUrl is called anyway, GetExternalUrl will
            return the SystemBaseUrl only, without parameters (internal url).
            </summary>
            <returns>True or false whether a valid external url can be created</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.GetExternalUrl(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Converts a FndUrlAddress to its escaped representation that can be used in external programs
            such as mails, web pages etc. Escapes special characters like " ", # etc to %020 etc.
            
            First call CanCreateExternalUrl to know whether a valid external url can be created.
            </summary>
            <param name="urlAddress">The internal url address</param>
            <returns>The escaped representation of urlAddress</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationService.NavigationHistory">
            <summary>
            Collection of Url addresses that have been visited.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService">
            <summary>
            Static class holding types and enums to support IFndExplorerNavigationService
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.NavigationActivityType">
            <summary>
            Enumeration for different types of features to navigate to
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.NavigationActivityType.Browse">
            <summary>
            Browse type activities
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.NavigationActivityType.Edit">
            <summary>
            Edit type activities
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.NavigationActivityType.Any">
            <summary>
            Any type of activities
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions">
            <summary>
            Used to specify additional actions to be performed with the navigation.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions.#ctor">
            <summary>
            Creates a new instance of the FndNavigationOptions
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions.#ctor(Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.NavigationOpenWindowAction,Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.RepopulatePolicy,System.Boolean)">
            <summary>
            Creates a new instance of the FndNavigationOptions
            </summary>
            <param name="openInNewWindow">Specifies whether to open in a new Explorer window. Default is NavigationOpenWindowAction.UserPreference.
            (NavigationOpenWindowAction.ForceSame is the same as newWindow=false in overloaded Navigate method)
            </param>
            <param name="repopulate">Specifies if and when the page should repopulate. Default is RepopulatePolicy.Detect.
            (RepopulatePolicy.Force is the same as repopulate=true in overloaded Navigate method)</param>
            <param name="navigatorNodeLookup">Specifies whether to use Navigator node resolve (lookup). Default is true.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions.#ctor(Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.NavigationOpenWindowAction,System.Boolean)">
            <summary>
            Creates a new instance of the FndNavigationOptions
            </summary>
            <param name="openInNewWindow">Specifies whether to open in a new Explorer window. Default is NavigationOpenWindowAction.UserPreference.
            (NavigationOpenWindowAction.ForceSame is the same as newWindow=false in overloaded Navigate method)
            </param>
            <param name="navigatorNodeLookup">Specifies whether to use Navigator node resolve (lookup). Default is true.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions.#ctor(Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.RepopulatePolicy,System.Boolean)">
            <summary>
            Creates a new instance of the FndNavigationOptions
            </summary>
            <param name="repopulate">Specifies if and when the page should repopulate. Default is RepopulatePolicy.Detect.
            (RepopulatePolicy.Force is the same as repopulate=true in overloaded Navigate method)</param>
            <param name="navigatorNodeLookup">Specifies whether to use Navigator node resolve (lookup). Default is true.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the FndNavigationOptions
            </summary>
            <param name="navigatorNodeLookup">Specifies whether to use Navigator node resolve (lookup). Default is true.</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions.OpenInNewWindow">
            <summary>
            Specifies whether the navigation should take place on the same explorer window or a new window.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions.Repopulate">
            <summary>
            Specifies whether repopulate is needed after the navigation.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions.VisiblePanes">
            <summary>
            Specifies the visibility of the explorer panels after the navigation.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions.ContextPaneVisibility">
            <summary>
            Specifies the visibility of the context pane
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions.DefaltNavigatorFilter">
            <summary>
            Specifies if the navigator should be filtered after the navigation.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions.NavigatorNodeLookup">
            <summary>
            Specifies whether the navigator should try to resolve the URL adress and find
            and select the corresponding navigator node with the closest match.
            Set to false if you don't want this behaviour (ie. for data driver Explore trees)
            
            Note: This property is only valid for URL (string) based navigation. If you call Navigate
            and pass a NavigatorEntry, the entry will always be looked up and selected in the navigator.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.NavigationOpenWindowAction">
            <summary>
            Enumeration for different ways of handling a navigation.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.NavigationOpenWindowAction.NewWindow">
            <summary>
            Request to open in new window but let the user override with shift key.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.NavigationOpenWindowAction.ForceNew">
            <summary>
            Force open the url in a new explorer window.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.NavigationOpenWindowAction.ForceSame">
            <summary>
            Force open the url in the same explorer window.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.NavigationOpenWindowAction.UserPreference">
            <summary>
            open the url in a new explorer window if the user pressed the shift with the navigation trigger.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.RepopulatePolicy">
            <summary>
            Enumeration for defining the repopulate strategy for the navigation.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.RepopulatePolicy.Force">
            <summary>
            Always repopulate.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.RepopulatePolicy.Detect">
            <summary>
            Repopulate 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.ExplorerPaneVisibility">
            <summary>
            Enumaration for specifying which explorer pane should be visible/hidden.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.ExplorerPaneVisibility.NoChange">
            <summary>
            Keep the curent setting.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.ExplorerPaneVisibility.Top">
            <summary>
            Top pane visible.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.ExplorerPaneVisibility.Bottom">
            <summary>
            Bottom pane visible.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.ExplorerPaneVisibility.Left">
            <summary>
            Left pane visible.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.ExplorerPaneVisibility.None">
            <summary>
            No penes visible
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.ContextPaneVisibility">
            <summary>
            Enumeration for specifying context pane visibility
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.ContextPaneVisibility.NoChange">
            <summary>
            Keep the current settings
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.ContextPaneVisibility.Show">
            <summary>
            Show the context pane
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.ContextPaneVisibility.Hide">
            <summary>
            Hide the context pane
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndExplorerFeatureService">
            <summary>
            IFndExplorerFeatureService provides access to explorer
            properties and methods that can be changed by the feature
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerFeatureService.BeginRequestTransaction">
            <summary>
            Begins a new request transaction. A call to BeginRequestTransaction MUST be
            followed by a call to EndRequestTransaction with corresponding handle.
            
            If a server call is aborted during a request transaction, the RequestTransactionAborted
            will return true.
            
            Request transactions can be nested, only the current (ie the last BeginRequestTransaction) 
            is affected by abort request.
            </summary>
            <returns>Handle used EndRequestTransaction or RequestTransactionAborted</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerFeatureService.EndRequestTransaction(System.Object)">
            <summary>
            Ends a request transaction
            </summary>
            <param name="handle">Request transaction to end</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerFeatureService.RequestTransactionAborted(System.Object)">
            <summary>
            Check if request transaction is aborted.
            </summary>
            <param name="handle">Request transaction to check</param>
            <returns>true if it was aborted, false otherwise.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerFeatureService.OnFeatureMainDataSourceChanged(System.String)">
            <summary>
            Feature calls this method to inform that maindatasource is changed within the feature.
            <param name="mainDataSourceName">main datasource string identifier</param>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerFeatureService.OnFeatureDocumentCountChanged">
            <summary>
            Feature calls this method to inform that document count is changed within the feature.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerFeatureService.OnFeatureFocusChanged">
            <summary>
            Feature calls this method to inform that focus has changed within the feature.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerFeatureService.OnRefreshContextPane(System.EventArgs)">
            <summary>
            Feature calls this method to inform that Context pane should be Refreshed.
            </summary>
            <param name="e">EventArgs</param>        
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorerFeatureService.ExplorerTitle">
            <summary>
            Get/Set the explorer title
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorerFeatureService.BannerTitle">
            <summary>
            Get/Set the banner title
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorerFeatureService.FeatureSettings">
            <summary>
            Get the feature settings.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorerFeatureService.LastActiveFrameworkControl">
            <summary>
            Last active framework control.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerFeatureService.FeatureFocusChanged">
            <summary>
            Raised when focus is changed in the feature.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerFeatureService.RefreshContextPane">
            <summary>
            Raised when the Context pane needs to be Refreshed.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndNavigationEventArgs">
            <summary>
            Navigation Event Argments
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigationEventArgs.#ctor(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Creates an instance of NavigationEventArgs
            </summary>
            <param name="url">The URL to pass</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigationEventArgs.#ctor(System.String)">
            <summary>
            Creates an instance of NavigationEventArgs
            </summary>
            <param name="url">The URL (as string) to pass</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigationEventArgs.#ctor(Ifs.Fnd.Core.FndUrlAddress,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry)">
            <summary>
            Creates an instance of NavigationEventArgs
            </summary>
            <param name="url">The URL to pass</param>
            <param name="navigatorEntry">NavigatorEntry that initiated navigation</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigationEventArgs.#ctor(System.String,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry)">
            <summary>
            Creates an instance of NavigationEventArgs
            </summary>
            <param name="url">The URL (as string) to pass</param>
            <param name="navigatorEntry">NavigatorEntry that initiated navigation</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigationEventArgs.Url">
            <summary>
            The URL
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigationEventArgs.NavigatorEntry">
            <summary>
            The navigator node used to initiate navigation, ff naviation
            occured from Navigator. Null otherwise.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndNavigationErrorEventArgs">
            <summary>
            Navigation errors event arguments
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigationErrorEventArgs.#ctor(Ifs.Fnd.Core.FndUrlAddress,System.Exception)">
            <summary>
            Creates an instance of NavigationErrorEventArgs
            </summary>
            <param name="url">The URL being navigated to</param>
            <param name="exception">Exception occurred</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigationErrorEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of NavigationErrorEventArgs
            </summary>
            <param name="url">The URL being navigated to</param>
            <param name="exception">Exception occurred</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigationErrorEventArgs.Exception">
            <summary>
            Gets the exception which occurred when navigated
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ContextPaneControlChangedEventArgs">
            <summary>
            Context Pane Control Changed Event Argments
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ContextPaneControlChangedEventArgs.#ctor(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Creates an instance of ContextPaneControlChangedEventArgs
            </summary>
            <param name="control">Context Pane control instance</param>
            <param name="show">True, pane is shown, False, pane is hidden</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ContextPaneControlChangedEventArgs.Show">
            <summary>
            Gets whenever context panel is shown.
            True, pane is shown, False, pane is hidden
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ContextPaneControlChangedEventArgs.Control">
            <summary>
            Context Pane control instance
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.MainDataSourceChangedEventArgs">
            <summary>
            Context Pane Control Changed Event Argments
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.MainDataSourceChangedEventArgs.#ctor(System.String)">
            <summary>
            Creates an instance of MainDataSourceChangedEventArgs
            </summary>
            <param name="activeDataSourceName">Name of the datasource</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.MainDataSourceChangedEventArgs.ActiveDataSourceName">
            <summary>
            Gets or sets active DataSource name after it has been changed. 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndNavigationEventHandler">
            <summary>
            Navigation Event Handler
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndNavigationErrorEventHandler">
            <summary>
            Navigation Error Event Handler
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ContextPaneControlChangedDelegate">
            <summary>
            Context Pane Control Changed event handler
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.MainDataSourceChangedEventHandler">
            <summary>
            Main DataSource Changed event handler
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationNotificationService">
            <summary>
            IExplorerNavigationNotificationService provides events for every navigation
            step within the Explorer form. 
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationNotificationService.Navigating">
            <summary>
            Raised when any navigation is about to begin. 
            URL is the navigation target.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationNotificationService.NavigateCompleted">
            <summary>
            Raised when any navigation is completed. 
            URL is the navigation target.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationNotificationService.NavigateCancelled">
            <summary>
            Raised when any navigation is cancelled 
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationNotificationService.NavigateFeatureActivating">
            <summary>
            Raised before the feature is about to activate
            URL is the navigation target.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationNotificationService.NavigateFeatureActivated">
            <summary>
            Raised before the feature is activated
            URL is the navigation target.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationNotificationService.NavigateFeaturePopulating">
            <summary>
            Raised when the feature is about to populate
            URL is the navigation target.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationNotificationService.NavigateFeaturePopulated">
            <summary>
            Raised when the feature has been populated
            URL is the navigation target.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationNotificationService.NavigateFeatureDeactivating">
            <summary>
            Raised before the feature is about to deactivate
            URL is the deactivated features URL.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationNotificationService.NavigateFeatureDeactivated">
            <summary>
            Raised after the feature is deactivated
            URL is the deactivated features URL.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationNotificationService.NavigateError">
            <summary>
            Raised when an error occurs during navigation
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationNotificationService.FeatureMainDataSourceChanged">
            <summary>
            Event stating that document type has changed.
            Used by explorer extenders to react on new feature main datasource.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationNotificationService.ActiveUrl">
            <summary>
            Returns the URL for currently visible feature, or the currently active application dialog box.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationNotificationService.ActiveFeature">
            <summary>
            Returns the currently visible feature. Can be null if
            HTML content is shown in the WebBrowser, or if an application dialog box is active.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerNavigationNotificationService.ActiveUrlChanged">
            <summary>
            Raised when the IFndExplorerNavigationService.UpdateCurrentUrl
            method has been called and the ActiveUrl has changed without
            a new Navigation.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndDataSourceNotificationEventHandler">
            <summary>
            Data Source Notification Event Handler
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndDataRecordNotificationEventHandler">
            <summary>
            Data Record Notification Event Handler
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndExplorerDataNotificationService">
            <summary>
            IFndExplorerDataNotificationService provides events for data focus changed
            within the current active form in this Explorer Form instance.
            Both change of data source and change of current record.
            </summary>
            <remarks>
            Raising ONLY a MainDataRecordChanged event and excluding raising the DataRecordChanged event 
            when both MainDataRecord and CurrentDataRecord are the same, is wrong. The event model is based 
            on the following rules:
            
            * Main data source is ALWAYS the top frame data source and can NEVER be a detail data source.
            * Current data source is ANY data source meaning that is can be a main data source or a detail data source.
            * When a main data source is changed, the current data source is changes as well. (Typically, 
            when you navigate to other features, or select other tabs in a cCTFW frame). The same goes for 
            data records (exchange the "source" to "record" in above rules)
            
            Examples: (Main Data Source is MDS, Data Source is DS, Main Data Record is MDR, Data Record is DR)
            
            1 Navigate to a tbwWindow and populate it, following events should be fired: MDS, DS, MDR, DR
            2 Select another row than the first one: MDR, DR (the MDS and DS are unchanged)
            3 Navigate to a frmWindow and populate it: MDS, DS, MDR, DR
            4 Place the cursor on the child table in a frmWindow: DS, DR (the MDS and MDR are unchanged)
            5 Select another row in the child table: DR
            6 Select another main record using the RecordSelector in the toolbar: DS, MDR, DR (the MDS is unchanged, 
            but we have moved focus from the child table DS to the main DS, which fires the DS changed event)
            
            The RWC DocumentCollectionBase class fires BOTH MDR and DR event, just like APF does
            The general rule is this: You should (in most of all known cases) only subscribe for one 
            of the events: Main OR Current, NOT BOTH! 
            
            An important thing that might also require an small explanation is why we have two different 
            events (Main and Current) in RWC, only having Documents containing a Main (There are no "details" 
            as in APF). Well, in order to establish a unified event model, we decided to fire the same events 
            no matter what type of client framework is used (RWC or APF). The subscribers "don’t care", so to 
            speak. They only need to know when to execute their code. Since APF have both master and detail 
            data sources/records and RWC have only a master source/record, the unified solution was here to 
            make RWC fire both events (Main and Current) instead of only Main.
            </remarks>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerDataNotificationService.OnChartModeChanged(Ifs.Fnd.Explorer.Interfaces.FndDataSourceNotificationEventArgs)">
            <summary>
            Raises the ChartModeChanged event
            </summary>
            <param name="e">Datasource</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerDataNotificationService.OnMainDataSourceChanged(Ifs.Fnd.Explorer.Interfaces.FndDataSourceNotificationEventArgs)">
            <summary>
            Raises the MainDataSourceChanged event
            </summary>
            <param name="e">Datasource</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerDataNotificationService.OnDataSourceChanged(Ifs.Fnd.Explorer.Interfaces.FndDataSourceNotificationEventArgs)">
            <summary>
            Raises the DataSourceChanged event
            </summary>
            <param name="e">Datasource</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerDataNotificationService.OnMainDataRecordChanged(Ifs.Fnd.Explorer.Interfaces.FndDataRecordNotificationEventArgs)">
            <summary>
            Raises the MainDataRecordChanged event
            </summary>
            <param name="e">Record Key</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerDataNotificationService.OnDataRecordChanged(Ifs.Fnd.Explorer.Interfaces.FndDataRecordNotificationEventArgs)">
            <summary>
            Raises the DataRecordChanged event
            </summary>
            <param name="e">Record Key</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerDataNotificationService.OnMainDataRecordStateChanged(Ifs.Fnd.Explorer.Interfaces.FndDataRecordNotificationEventArgs)">
            <summary>
            Raises the MainDataRecordStateChanged event
            </summary>
            <param name="e">Record State</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerDataNotificationService.OnDataRecordStateChanged(Ifs.Fnd.Explorer.Interfaces.FndDataRecordNotificationEventArgs)">
            <summary>
            Raises the DataRecordStateChanged event
            </summary>
            <param name="e">Record State</param>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerDataNotificationService.MainDataSourceChanged">
            <summary>
            Raised when the form header (main) data source has changed.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerDataNotificationService.ChartModeChanged">
            <summary>
            Raised when the chart mode changes
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerDataNotificationService.DataSourceChanged">
            <summary>
            Raised when the current data source has changed
            Note: This is raised also for the header (main) data source.
            When focus is set to the form header, MainDataSourceChanged is raised first,
            then DataSourceChanged 
            For RWC features, DataSource is always same as MainDataSource. However, both
            events are raised.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerDataNotificationService.MainDataRecordChanged">
            <summary>
            Raised when the current header (main) record has changed.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerDataNotificationService.DataRecordChanged">
            <summary>
            Raised when the current (child or header/main) record has changed
            Note: This is raised also for the header (main) record.
            When focus is set to the form header, MainDataRecordChanged is raised first,
            then DataRecordChanged.
            For RWC features, DataRecord is always same as MainDataRecord. However, both
            events are raised.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerDataNotificationService.MainDataRecordStateChanged">
            <summary>
            Raised when the state of the main data record changes
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorerDataNotificationService.DataRecordStateChanged">
            <summary>
            Raised when the state of the current (child or header/main) record changes
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndDataSourceNotificationEventArgs">
            <summary>
            Data Source Notification Event Arguments
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndDataSourceNotificationEventArgs.#ctor(System.String)">
            <summary>
            Creates an instance of FndDataSourceNotificationEventArgs
            </summary>
            <param name="dataSourceName">The name of the data source</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndDataSourceNotificationEventArgs.ToString">
            <summary>
            Gets a string representation of the FndDataSourceNotificationEventArgs object
            </summary>
            <returns>A string</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDataSourceNotificationEventArgs.DataSourceName">
            <summary>
            Gets the name of the data source
            Note: This can be null, when no data source is active
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndDataRecordNotificationEventArgs">
            <summary>
            Data Record Notification Event Arguments
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndDataRecordNotificationEventArgs.#ctor(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Creates an instance of FndDataRecordNotificationEventArgs
            </summary>
            <param name="record">The record (can be null)</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndDataRecordNotificationEventArgs.#ctor(Ifs.Fnd.Data.FndRowStateChangedEventArgs)">
            <summary>
            Creates an instance of FndDataRecordNotificationEventArgs
            </summary>
            <param name="e">Contains info about the row state</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndDataRecordNotificationEventArgs.#ctor(Ifs.Fnd.Data.FndDataRow,Ifs.Fnd.Data.FndRowStateChangedEventArgs)">
            <summary>
            Creates an instance of FndDataRecordNotificationEventArgs
            </summary>
            <param name="record">The record (can be null)</param>
            <param name="e">Contains info about the row state</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndDataRecordNotificationEventArgs.#ctor(Ifs.Fnd.Data.FndDataRow,System.Boolean)">
            <summary>
            Creates an instance of FndDataRecordNotificationEventArgs
            </summary>
            <param name="record">The record (can be null)</param>
            <param name="notifyDataRecordChanged"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndDataRecordNotificationEventArgs.ToString">
            <summary>
            Gets a string representation of the FndDataRecordNotificationEventArgs object
            </summary>
            <returns>A string</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDataRecordNotificationEventArgs.Record">
            <summary>
            Gets the FndDataRow containing the primary keys of the current record.
            Note: This can be null, when there is no current record
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDataRecordNotificationEventArgs.OldRowState">
            <summary>
            Gets the old row state of the current record
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDataRecordNotificationEventArgs.NewRowState">
            <summary>
            Gets the new row state of the current record
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndDataRecordNotificationEventArgs.NotifyDataRecordChanged">
            <summary>
            Notifyes if the record update was forced. This is typically seen during a record refresh operation (due to having the same key values).
            This is an internal notification flag and should not be used outside the Foundation1 framework.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndFeatureNotFoundException">
            <summary>
            FndFeatureNotFoundException is used by the FndFeatureContainer and FeatureShim's to 
            notify when something is going wrong during the creation of a feature.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndFeatureNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            FndFeatureNotFoundException is used by the FndFeatureContainer and FeatureShim's to
            notify when something is going wrong during the creation of a feature.
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndFeatureNotFoundException.#ctor(System.String)">
            <summary>
            FndFeatureNotFoundException is used by the FndFeatureContainer and FeatureShim's to
            notify when something is going wrong during the creation of a feature.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary">
            <summary>
            Collection class for FndSearchExploreAttributeMeta.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.#ctor(Ifs.Fnd.AccessProvider.Activity.FndActivityDataAdapter)">
            <summary>
            Creates a new instance of FndSearchExploreAttributeMeta.
            </summary>
            <param name="dataAdapter">Mandatory DataAdapter reference.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.Add(Ifs.Fnd.Data.FndDataColumn,System.String)">
            <summary>
            Creates an instance of FndSearchExploreAttributeMeta and adds it to the list.
            </summary>
            <param name="col">The FndDataColumn instance to which this FndSearchExploreAttributeMeta is associated.</param>
            <param name="lovMethod"></param>
            <returns>The FndSearchExploreAttributeMeta instance</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.Add(Ifs.Fnd.Data.FndDataColumn)">
            <summary>
            Creates an instance of FndSearchExploreAttributeMeta and adds it to the list.
            </summary>
            <param name="col">The FndDataColumn instance to which this FndSearchExploreAttributeMeta is associated.</param>
            <returns>The FndSearchExploreAttributeMeta instance</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.Add(Ifs.Fnd.Explorer.Interfaces.FndSearchExploreAttributeMeta)">
            <summary>
            Adds an instance of FndSearchExploreLovMeta to the list
            </summary>
            <param name="item">FndSearchExploreLovMeta instance to add</param>
            <returns>Index of the item added</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.AddRange(Ifs.Fnd.Explorer.Interfaces.FndSearchExploreAttributeMeta[])">
            <summary>
            Adds the elements of an FndSearchExploreAttributeMeta array to the end of the list
            </summary>
            <param name="items">FndSearchExploreAttributeMeta array to add to the end of the list</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.Insert(System.Int32,Ifs.Fnd.Explorer.Interfaces.FndSearchExploreAttributeMeta)">
            <summary>
            Inserts FndSearchExploreAttributeMeta instance to the list at the specified position.  
            </summary>
            <param name="index">Zero-based index at which value should be inserted.</param>
            <param name="value">FndSearchExploreAttributeMeta instance to insert into the list</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.Remove(Ifs.Fnd.Explorer.Interfaces.FndSearchExploreAttributeMeta)">
            <summary>
            Removes the first occurrence of a specific object from the list
            </summary>
            <param name="value">The FndSearchExploreAttributeMeta instance to remove from the list</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.Contains(Ifs.Fnd.Explorer.Interfaces.FndSearchExploreAttributeMeta)">
            <summary>
            Determines whether the list contains a specific instance of FndSearchExploreAttributeMeta.
            </summary>
            <param name="value">The FndSearchExploreAttributeMeta instance to locate in the list. </param>
            <returns>true if the System.Object is found in the list; otherwise, false</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.IndexOf(Ifs.Fnd.Explorer.Interfaces.FndSearchExploreAttributeMeta)">
            <summary>
            Determines the index of a specific FndSearchExploreAttributeMeta instance in the list.
            </summary>
            <param name="value">The FndSearchExploreAttributeMeta instance to locate in the list</param>
            <returns>The index of value if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.OnClear">
            <summary>
            Performs additional custom processes when clearing the contents of the System.Collections.CollectionBase instance. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.OnInsert(System.Int32,System.Object)">
            <summary>
             Performs additional custom processes before inserting a new element into the System.Collections.CollectionBase instance.  
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the System.Collections.CollectionBase instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
             Performs additional custom processes before setting a value in the System.Collections.CollectionBase instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.ServerInterface">
            <summary>
            Gets the ServerInterface reference. This ServerInterface instance
            is used for all server interaction from Search and Explore
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.DataAdapter">
            <summary>
            Gets the DataAdapter reference. This DataAdapter instance
            is used for all server interaction from Search and Explore
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.Item(System.Int32)">
            <summary>
            Gets the FndSearchExploreAttributeMeta instance at a zero based index.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreMetaDictionary.Item(Ifs.Fnd.Data.FndDataColumn)">
            <summary>
            Gets the FndSearchExploreAttributeMeta instance using its corresponding FndDataColumn as index.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreAttributeMeta">
            <summary>
            Contains extra meta information about an attribute (FndDataColumn)
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreAttributeMeta.#ctor(Ifs.Fnd.Data.FndDataColumn)">
            <summary>
            Creates a new instance of FndSearchExploreAttributeMeta
            </summary>
            <param name="col">The FndDataColumn instance to which this FndSearchExploreAttributeMeta is associated.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreAttributeMeta.#ctor(Ifs.Fnd.Data.FndDataColumn,System.String)">
            <summary>
            Creates a new instance of FndSearchExploreAttributeMeta
            </summary>
            <param name="col">The FndDataColumn instance to which this FndSearchExploreAttributeMeta is associated.</param>
            <param name="lovMethod">Name of the LOV-method. Only applicable for Aggregate/Reference types</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreAttributeMeta.Column">
            <summary>
            Gets the FndDataColumn instance to which this FndSearchExploreAttributeMeta is associated
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreAttributeMeta.LovMethod">
            <summary>
            Gets or sets LOV method. Only applicable for Aggregate/Reference types.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreAttributeMeta.SearchString">
            <summary>
            Gets or sets search string. Only applicable for Aggregate/Reference types.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreAttributeMeta.ShowDetails">
            <summary>
            Gets or sets whether it's possible to search by columns in the contained record.
            Only applicable for Aggregate/Array types.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryValueEnumerationHandler">
            <summary>
            Describes the method signature for the EnumerateValues event in FndSearchExploreCategory
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory">
            <summary>
            FndSearchExploreCategory defines one node branch in the explore tree.
            A category can be of two types.
            1) Normal attribute.
            2) Custom condition
            
            Normal attribute is using meta data to build the explore tree branch.
            The attribute can be of any type, and can be pointing to details in arrays etc.
            Important is that the last attribute is of a browsable type (not array).
            
            Custom conditions are for categories like "My Orders".
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.#ctor(Ifs.Fnd.Data.FndDataColumn[])">
             <summary>
             Creates a new instance using a list of FndDataColumns using FndDataColumns as meta data.
             The last attribute must be of a Browsable type (i e not array)
             A list of FndDataColumns can be provided if aggregates/arrays is used.
             </summary>
             <example>
             Consider the following entities:
             
             Customer:
               Id
               Name
               
             Product:
               Id
               Name
             
             Order:
               Customer : Customer
               Lines : OrderLine
             
             OrderLine:
               Product : Product
               
             Browse orders by Customer name:
             <code>
             new FndSearchExploreCategory(Order.Customer, Customer.Name);
             </code>
            
             Browse orders by Customer: (using LOV)
             <code>
             new FndSearchExploreCategory(Order.Customer);
             </code>
               
             Browse orders by Product name:
             <code>
             new FndSearchExploreCategory(Order.OrderLine, OrderLine.Product, Product.Name);
             </code>
             
             Browse orders by Product (using LOV)
             <code>
             new FndSearchExploreCategory(Order.OrderLine, OrderLine.Product);
             </code>
             </example>
             <param name="columnMetas">FndDataColumns path.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.#ctor(System.String,Ifs.Fnd.Data.FndDataColumn[])">
            <summary>
            Creates a new instance using a list of FndDataColumns using FndDataColumns as meta data.
            See constructor without customLabel for examples.
            </summary>
            <param name="customLabel">Custom Label (in Explore tree)</param>
            <param name="columnMetas">FndDataColumns path.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.#ctor(System.String,Ifs.Fnd.Data.FndCondition)">
            <summary>
            Creates a new instance using a custom condition
            </summary>
            <param name="customLabel">Custom Label (in Explore tree)</param>
            <param name="customCondition">Condition associated with this node in explore tree</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.OnEnumerateValues">
            <summary>
            Raises the EnumerateValues event.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.ExcludeEnumerations(System.Type,System.Object[])">
            <summary>
            Excludes a set of enumeration values in te explorer.
            </summary>
            <param name="type">System type of the enumeration.</param>
            <param name="values">An array of objects specifying the values to be excluded.</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.CustomLabel">
            <summary>
            Gets the custom label.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.CustomCondition">
            <summary>
            Gets the custom condition. Can be null if the FndSearchExploreCategory is based on an attribute.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.ReferenceFilter">
            <summary>
            Gets or sets a static reference filter condition. This filter is only applied if the
            BrowseColumn is an aggregate.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.Hierarchy">
            <summary>
            Gets or sets whenever this category should be treated
            hierachical. This only applies to aggreagte by value reference attributes
            where the aggregated record contains a self-reference by value.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.HierarchyRootFilter">
            <summary>
            Gets or sets a static root filter for the hierarchy.
            This filter is only applied to the root query for the hierarchy.
            A common use is to place a null condition on the "parent attribute" here.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.OnlyLeafNodesConnected">
             <summary>
             Gets or sets whenever only the leaf nodes in the hiearchy
             should be used in the query.
             
             Example
              + By Owner Hierachy
                + Distribution   
                  - Order      
            		 - Cussch
            	   + Manufacturing
            
             OnlyLeafNodesConnected = false:
               A click on Distribution will lead to WHERE owner IN ('Distribution')
               A click on Order will lead to WHERE owner IN ('Distribution', 'Order')
             OnlyLeafNodesConnected = true:
               A click on Distribution will lead to WHERE owner IN ('Order','Cussch')
               A click on Order will lead to WHERE owner IN ('Order')
             </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.ChildCategoriesOnAllLevels">
             <summary>
             Gets or sets whenever the child categories will be placed on all 
             levels or only under the leaf level.
             
             Example:
             
             Child category under "By Owner Hierarchy" is state.
             
             ChildCategoriesOnAllLevels = false
             
              + By Owner Hierachy
                + Distribution   
                  + Order      
                    + Released
                    + Closed
            		 + Cussch
                    + Released
                    + Closed
            	   + Manufacturing
            
             ChildCategoriesOnAllLevels = true
              + By Owner Hierachy
                + Distribution   
                  + Order      
                    + Released
                    + Closed
            		 + Cussch
                    + Released
                    + Closed
            	   + Manufacturing
            	   + By State
                  + Released
                  + Closed
             </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.Values">
            <summary>
            Gets a list of values used when a custom enumeration is needed.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.EnumerateValues">
            <summary>
            Occurs the first time when a FndSearchExploreCategory is about to enumerate the values in the Explore tree.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.Columns">
            <summary>
            Gets the FndDataColunm path.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.BrowseColumn">
            <summary>
            Gets the last (browsable) column
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.FeatureUrl">
            <summary>
            Gets or sets the URL for the feature to navigate to when clicking on
            a node created from this FndSearchExploreCategory instance.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.ImageResource">
            <summary>
            Gets or sets the ImageResource used for icons in the explore tree
            for this FndSearchExploreCategory instance.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.ChildCategories">
            <summary>
            Gets a <see cref="T:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryCollection"/> represnting the child categories.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.ParentCategory">
            <summary>
            Gets the parent FndSearchExploreCategory instance.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory.ExcludedEnumerationValues">
            <summary>
            Gets the list of Excluded enumeration names.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryValue">
            <summary>
            FndSearchExploreCategoryValue holds information about one single enumerated value to be used
            when a custom enumeration is needed for a FndSearchExploreCategory.
            
            The ValueLabel is shown in the explore tree.
            The ValueData is used to build condition.
            
            Depending on the type of FndSearchExploreCategory, the ValueData
            will be interpreted differently. Example:
            For Date/TimeStamp columns it is possible to have special keywords like "TODAY".
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryValue.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of FndSearchExploreCategoryValue with 
            label and data provided.
            </summary>
            <param name="valueLabel">Label (shown in the Explore tree</param>
            <param name="valueData">Data (used to build condition)</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryValue.ValueLabel">
            <summary>
            Gets the label (shown in the Explore tree).
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryValue.ValueData">
            <summary>
            Gets the data (used to build condition)
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryValueCollection">
            <summary>
            Collection class for FndSearchExploreCategoryValue
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryValueCollection.Add(Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryValue)">
            <summary>
            Adds an instance of FndSearchExploreCategoryValue to the collection.
            </summary>
            <param name="value">FndSearchExploreCategoryValue instance to add</param>
            <returns>FndSearchExploreCategoryValue instance</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryValueCollection.Add(System.String,System.String)">
            <summary>
            Creates a new instance of FndSearchExploreCategoryValue and adds it to the collection.
            </summary>
            <param name="valueLabel">Label (shown in the Explore tree</param>
            <param name="valueData">Data (used to build condition)</param>
            <returns>FndSearchExploreCategoryValue instance</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryValueCollection.Item(System.Int32)">
            <summary>
            Gets or sets the value of the FndSearchExploreCategory at a specific position in the FndSearchExploreCategoryCollection.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryCollection">
            <summary>
            Strongly typed collection of FndSearchExploreCategory.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryCollection.#ctor(Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryCollection.Add(Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory)">
            <summary>
            Append a FndSearchExploreCategory entry to this collection.
            </summary>
            <param name="value">FndSearchExploreCategory instance.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryCollection.AddRange(Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory[])">
            <summary>
            Adds an array of FndSearchExploreCategories to the collection.  
            </summary>
            <param name="categories"> An array of FndSearchExploreCategory objects.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryCollection.CopyTo(Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory[],System.Int32)">
            <summary>
            Copies all elements in this collection to an array.
            </summary>
            <param name="array">Array to copy to.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryCollection.Contains(Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory)">
            <summary>
            Determines whether a specified FndSearchExploreCategory instance is in this collection.
            </summary>
            <param name="value">FndSearchExploreCategory instance to search for.</param>
            <returns>True if the FndSearchExploreCategory instance is in the collection; otherwise false.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryCollection.IndexOf(Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory)">
            <summary>
            Retrieve the index a specified FndSearchExploreCategory instance is in this collection.
            </summary>
            <param name="value">FndSearchExploreCategory instance to find.</param>
            <returns>The zero-based index of the specified Ifs.Fnd.Explorer.SearchExplore.FndSearchExploreCategory instance. If the object is not found, the return value is -1.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryCollection.Remove(Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory)">
            <summary>
            Removes a specified FndSearchExploreCategory instance from this collection.
            </summary>
            <param name="value">The FndSearchExploreCategory instance to remove.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryCollection.Insert(System.Int32,Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategory)">
            <summary>
            Insert a FndSearchExploreCategory instance into this collection at a specified index.
            </summary>
            <param name="index">Zero-based index.</param>
            <param name="value">The Ifs.Fnd.Explorer.SearchExplore.FndSearchExploreCategory instance to insert.</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchExploreCategoryCollection.Item(System.Int32)">
            <summary>
            Gets or sets the value of the FndSearchExploreCategory at a specific position in the FndSearchExploreCategoryCollection.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IDraftManagerService">
            <summary>
            Service interface that enables Managing Draft.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IDraftManagerService.SaveDraft">
            <summary>
            Saves a draft of the document.  
            </summary>
            <returns>True if draft saved successfully</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IDraftManagerService.NewFromDraft(System.String)">
            <summary>
            Loads any Drafts for this entity. The binary data are excluded.
            Show Draft dialog and possibly create a new document from a draft.
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IDraftManagerService.GetDraft(System.String,Ifs.Fnd.Data.FndDataTable)">
            <summary>
            Gets a saved draft.
            </summary>
            <param name="draftId">Draft ID</param>
            <param name="table">Destination for draft.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IDraftManagerService.GetDraft(System.String,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Gets a saved draft.
            </summary>
            <param name="draftId">The Draft ID.</param>
            <param name="dataRow">The DataRow to get from database.</param>
            <returns>The DataRow with draft data.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IDraftManagerService.LoadMyDrafts(System.String)">
            <summary>
            Loads any Drafts for this entity. The binary data are excluded.
            </summary>
            <param name="entity">Entity</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IDraftManagerService.OnDocumentSave(System.String)">
            <summary>
            Removes existing draft when a document is saved 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IDraftManagerService.UpdateMyDraftsAfterDraftRemove(System.String)">
            <summary>
            Updates my drafts (the drafts drop-down list), when a draft is removed.
            </summary>
            <param name="removedDraftId">Draft id of the removed draft</param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ISendDraftService">
            <summary>
            Interface for sending a document as draft.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ISendDraftService.SendDraft(System.String,System.String,System.String,Ifs.Fnd.Core.FndUrlAddress,System.String,Ifs.Fnd.Data.FndDataTable)">
            <summary>
            Sends a document (FndDataTable) as a draft.
            </summary>
            <param name="receiver">The person who this draft is sent to</param>
            <param name="title">The default title.</param>
            <param name="message">The message.</param>
            <param name="url">Url to the document. Any Actions or parameters are not considered</param>
            <param name="entity">The entity.</param>
            <param name="document">The data the should be saved.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ISendDraftService.SendDraft(Ifs.Fnd.Data.FndDataTable,System.String,System.String,Ifs.Fnd.Core.FndUrlAddress,System.String,Ifs.Fnd.Data.FndDataTable)">
            <summary>
            Sends a document (FndDataTable) as a draft.
            </summary>
            <param name="receivers">The personss who this draft is sent to</param>
            <param name="title">The default title.</param>
            <param name="message">The message.</param>
            <param name="url">Url to the document. Any Actions or parameters are not considered</param>
            <param name="entity">The entity.</param>
            <param name="document">The data the should be saved.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ISendDraftService.SendDraft(System.String,System.String,System.String,Ifs.Fnd.Core.FndUrlAddress,System.String,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Sends a document (FndDataRow) as a draft.
            </summary>
            <param name="receiver">The person who this draft is sent to</param>
            <param name="title">The default title.</param>
            <param name="message">The message.</param>
            <param name="url">Url to the document. Any Actions or parameters are not considered</param>
            <param name="entity">The entity.</param>
            <param name="document">The data the should be saved.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ISendDraftService.SendDraft(Ifs.Fnd.Data.FndDataTable,System.String,System.String,Ifs.Fnd.Core.FndUrlAddress,System.String,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Sends a document (FndDataRow)  as a draft.
            </summary>
            <param name="receivers">The personss who this draft is sent to</param>
            <param name="title">The default title.</param>
            <param name="message">The message.</param>
            <param name="url">Url to the document. Any Actions or parameters are not considered</param>
            <param name="entity">The entity.</param>
            <param name="document">The data the should be saved.</param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndApplication">
            <summary>
            IFndApplication is a singleton object which represents the whole executable with login information etc.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.IFndApplication.application">
            <summary>
            The one and only IFndApplication instance
            Must be set by subclass.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplication.GetExplorerFromCurrentThread">
            <summary>
            Gets the IFndExplorer instance from the explorer thread
            Uses thread local storage as implementation. 
            Will return null for threads not being main Explorer threads.
            </summary>
            <returns>IFndExplorer instance or null</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplication.SetThreadExplorer(Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Set the IFndExplorer instance from the explorer thread
            Uses thread local storage as implementation. 
            Only intended to be used from FW code.
            </summary>
            <param name="explorer">IFndExplorer instance to connect to thread</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplication.GetServerSetting(System.String,System.String@)">
            <summary>
            Retrieves a setting value given a setting name from the server settings
            (server.xml)
            </summary>
            <param name="settingName">Name to get setting value for</param>
            <param name="settingValue">Value if setting is available</param>
            <returns>true if setting name exists (settingValue contains value), false otherwise (settingValue set to null)</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplication.CreateExplorer(System.String,Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.ExplorerPaneVisibility,Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.ContextPaneVisibility)">
            <summary>
            Creates an FndExplorer instance and performs initial navigation if startUrl is navigable 
            </summary>
            <param name="startUrl">Initial URL to navigate to</param>
            <param name="explorerPaneVisibility">Initial visibility of explorer panes</param>
            <param name="contextPaneVisibility">Initial visibility of context pane</param>
            <returns>The created FndExplorer object</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplication.RequestRestart(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,System.Boolean,System.ComponentModel.CancelEventArgs)">
            <summary>
            Internal Framework use only!
            
            Called from SwitchUser and from ClickOnce application update restart. 
            Tries to close all explorer windows - except the calling ExplorerWindow
            If all other Explorer windows was closed successfully, prepare application for a restart, which
            will be executed when the calling Explorer window also closes.
            </summary>
            <param name="caller">The calling Explorer form</param>
            <param name="forcedShowLogin">Set to true to force the login dialog to show after the restart. Overrides the Show Login settings in the Options dialog. Set this when SwithUser is calling this method</param>
            <param name="e">Holds information whether the Restart is cancelled.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplication.CancelRestart">
            <summary>
            Cancel a requested restart (requested by a call to RequestRestart)
            
            Note: Supports the Foundation1 framework infrastructure and is not intended to be used directly from your code. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplication.InstantiateDeferredAttachmentsPlugin(System.String)">
            <summary>
            Instatiate an attachment plugin, that was deferred during Explorer startup
            
            Note: Supports the Foundation1 framework infrastructure and is not intended to be used directly from your code. 
            </summary>
            <param name="serviceName">The service name of the object connections</param>
            <returns>Success</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplication.StartIFS(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Starts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new Process component.
            In addition to the arguments passed in startInfo IEE framework passes encrypted credentials in an argument named credentials.
            </summary>
            <param name="startInfo">The ProcessStartInfo that contains the information that is used to start the process, including the file name and any command-line arguments. </param>
            <returns>A new Process component that is associated with the process resource, or null if no process resource is started (for example, if an existing process is reused).</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplication.GetCredentials">
            <summary>
            Return current credentials in a form that can be passed to another connection.
            If creating a new AP connection send empty username and set password to those credentials.
            </summary>
            <returns>Encoded credentials</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplication.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            <see cref="T:System.ComponentModel.ISynchronizeInvoke"/>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplication.EndInvoke(System.IAsyncResult)">
            <summary>
            <see cref="T:System.ComponentModel.ISynchronizeInvoke"/>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplication.Invoke(System.Delegate,System.Object[])">
            <summary>
            <see cref="T:System.ComponentModel.ISynchronizeInvoke"/>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.FndApplication">
            <summary>
            Gets the one and only instance of IFndApplication
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.CodeBase">
            <summary>
            Application codebase folder. When debugging this is not same folder as where the executable is located.
            In runtime this folder should match the location of the client executable.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.ConnectionString">
            <summary>
            The connection string used to connect to the server
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.SystemName">
            <summary>
            The system name. This is a human readable name of the system logged on to.
            The system also includes the specific deployment of the client.
            Example: running the system "production1" could mean that the
            client is deployed at http://productionserver1/client and the
            server we connect to (ConnectionString) is appserver1:8080
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.SystemBaseUrl">
            <summary>
            The base URL to access the system externally. Should currently point out
            a deploy server holding the Ifs.Fnd.Explorer.Start.exe
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.IsPasswordChangeEnabled">
            <summary>
            Indicates if password change is possible or not
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.Uptime">
            <summary>
            Gets the uptime for the current session 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.User">
            <summary>
            Application user data.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.UserSessionGlobalCollection">
            <summary>
            Application user globals name and value.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.CurrentLanguage">
            <summary>
            Gets the current language for all connections.
            This is the five character long RFC3066 language code, used by the client (example: "en-US", "se-SV")
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.Services">
            <summary>
            Access the IFndServiceManager for Application level services
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.Dictionary">
            <summary>
            Access the dictionary for the installed system.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.Navigator">
            <summary>
            Access the Navigator
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.LocalSettings">
            <summary>
            Get the local user settings
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.Security">
            <summary>
            Gets the Security Service, possible to check whether user is granted an activity
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.InfoServicesManager">
            <summary>
            Gets the InforServiceManager Service
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.SearchExplore">
            <summary>
            Access the search/explore providers
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.MapSourceManager">
            <summary>
            Access the search/explore providers
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.ApplicationDeploymentService">
            <summary>
            Access application deployment methods
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.ResourceUtilities">
            <summary>
            Access resource utilities
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.Profile">
            <summary>
            Access profile database
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.UserProfileOptions">
            <summary>
            User Options 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.ContextSubstitutionVariables">
            <summary>
            Access Context Substitution Variable definitions
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.SystemSettings">
            <summary>
            System settings defined in FND_SETTING.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.SystemComponents">
            <summary>
            Enumerates all IFS based components and shows if they are installed in the system.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.ServerLanguageCode">
            <summary>
            Returns the server language code.
            This is the two character long language code, used by the server (example: "en", "sv")
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.FirstCalendarDate">
            <summary>
            Get the lowest calendar date supported by server
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.LastCalendarDate">
            Get the highest calendar date supported by server
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndApplication.ExplorerAdded">
            <summary>
            Occurs when an explorer form is opened.
            
            NOTE: Framework internal only! 
            IF YOU SUBSCRIBE TO THIS EVENT FROM THE EXPLORER LIFETIME, MAKE SURE TO UNSUBSRCRIBE!
            Please also note that you probably need to SWITCH TO YOUR THREAD when handling this event!
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndApplication.ExplorerRemoved">
            <summary>
            Occurs when an explorer form is closed.
            
            NOTE: Framework internal only! 
            IF YOU SUBSCRIBE TO THIS EVENT FROM THE EXPLORER LIFETIME, MAKE SURE TO UNSUBSRCRIBE!
            Please also note that you probably need to SWITCH TO YOUR THREAD when handling this event!
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.ActiveExplorer">
            <summary>
            Returns the IFndExplorer which currently is active.
            Can be null if no explorer windows are active.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.Explorers">
            <summary>
            Returns a collection of IFndExplorers.
            Can have zero (0) items if no explorer windows are yet created.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.MultipleExplorersOpened">
            <summary>
            Returns true if multiple explorer windows were open at any time even though there's ony one explorer window is open now.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.SecurityService">
            <summary>
            Gets the Security Service, possible to check whether user is granted an activity
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.FndApplicationDeployment">
            <summary>
            Returns a reference to a ClickOnce compatible application instance.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.Plugins">
            <summary>
            Access the ApplicationPlugins
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.PluginManagerWorking">
            <summary>
            Returns true if the plugin manager is loading, initializing or terminating plugins
            
            Note: Supports the Foundation1 framework infrastructure and is not intended to be used directly from your code. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.AutoCompleteEnabled">
            <summary>
            Flag indicating if MRU functionality is enabled in the application.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.DefaultHomePage">
            <summary>
            The default home page of the application.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.OptionalAssemblyResolvePath">
            <summary>
            Optional assembly resolve path
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.SecurityMode">
            <summary>
            Debug setting that can be set for a debug compiled assembly .
            If set the security service should not enforce security.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.SystemDefaultCulture">
            <summary>
            Get the system's default culture (i.e.: System.Windows.Forms.Application.CurrentCulture at startup).
            This could be different from Application.CurrentCulture since it is set to the one specified
            in the user's profile.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.ActivityContext">
            <summary>
            Creates new activity context based on a clone of initial connection.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplication.InvokeRequired">
            <summary>
            <see cref="T:System.ComponentModel.ISynchronizeInvoke"/>
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndApplicationDeployment">
            <summary>
            IFndApplicationDeployment represents a .NET ClickOnce deployable application.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplicationDeployment.EnableUpdates">
            <summary>
            Gets or sets a boolean indicating whether the application should check for updates.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplicationDeployment.UpdateInterval">
            <summary>
            Gets or sets the interval at which the application checks for updates.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndApplicationDeploymentService">
            <summary>
            This service provides a method for downloading optional files when running a ClickOnce deployed application
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationDeploymentService.OnDemandDownloadOptionalFiles(System.String,System.Boolean)">
            <summary>
            Download an assembly using ClickOnce
            </summary>
            <param name="assemblyName">Name of the assembly file</param>
            <param name="blockDialog">Prevent creation of the download dialog on new thread</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationDeploymentService.CheckAndUpdateFrameworkFiles">
            <summary>
            Invokes a check for a framework update. Updates only if updates has been enabled in FndApplicationDeployment.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndApplicationUser">
            <summary>
            Contains data about the application user.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplicationUser.Id">
            <summary>
            Application user's identity. Example: ASMYTHE
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplicationUser.DirectoryId">
            <summary>
            Application user's directory identity. Example: EUROPE\ASMYTHE 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplicationUser.Name">
            <summary>
            Application user's name. Example: Albin Smythe
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplicationUser.HomePage">
            <summary>
            Gets or sets the home page.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplicationUser.Picture">
            <summary>
            Gets or sets the user's picture stored in byte array
            To get a bitmap use the code below.
            ImageConverter ic = new ImageConverter();
            Bitmap bitmap = (Bitmap)ic.ConvertFrom(Picture);  
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndBroadcastMessagesService">
            <summary>
            IFndBroadcastMessgesService gives public methods for Broadcast Messages Service
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBroadcastMessagesService.GetBroadcastMessages">
            <summary>
            Return cached Broadcast Messages that are active.
            If invoked for the first time, initiate a request to asyncronously fetch 
            them from the server. This will result in returning null and 
            OnBroadcastMessagesUpdates will be invoked when messages have arrived.        
            </summary>
            <returns>Broadcast Messages</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBroadcastMessagesService.AddToClosedBroadcastMessageIdList(System.String[])">
            <summary>
            Adds to closed Broadcast Message Id list
            </summary>
            <param name="broadcastMsgIdArray"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBroadcastMessagesService.SubscribeBroadcastMessageUpdates(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{Ifs.Fnd.Explorer.Interfaces.FndBroadcastMessagesEventArgs})">
            <summary>
            Subscribe to Broadcast Message updates
            </summary>
            <param name="explorer">explorer</param>
            <param name="callback">callback method</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndBroadcastMessagesService.UnsubscribeBroadcastMessageUpdates(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{Ifs.Fnd.Explorer.Interfaces.FndBroadcastMessagesEventArgs})">
            <summary>
            Unsubscribe to Broadcast Message updates
            </summary>
            <param name="explorer">explorer</param>
            <param name="callback">callback method</param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndBroadcastMessagesEventArgs">
            <summary>
            Eventargs hold the broadcast messages
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndBroadcastMessagesEventArgs.#ctor(System.Collections.Generic.IDictionary{System.String,Ifs.Fnd.Explorer.Interfaces.FndCommonMessage})">
            <summary>
            Creates a new FndBroadcastMessagesEventArgs
            </summary>
            <param name="broadCastMessages">Messages</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndBroadcastMessagesEventArgs.Messages">
            <summary>
            Gets the messages
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndCommonMessage">
            <summary>
            FndCommonMessage
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndCommonMessage.#ctor">
            <summary>
            FndCommonMessage
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndCommonMessage.#ctor(System.String,System.String,System.String)">
            <summary>
            FndCommonMessage
            </summary>
            <param name="msgID"></param>
            <param name="msg"></param>
            <param name="link"></param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndCommonMessage.MessageID">
            <summary>
            Gets or sets message id
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndCommonMessage.Message">
            <summary>
            Gets or sets message text
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndCommonMessage.LinkAddress">
            <summary>
            Link addresses
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndContextPaneControl">
            <summary>
            Objects placed in the Context Pane have to implement this interface
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndContextPaneControl.UpdateUI(Ifs.Fnd.Explorer.Interfaces.ContextPaneUpdateType)">
            <summary>
            Called when the control needs updating
            </summary>
            <param name="updateType">specifies what event caused the update</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndContextPaneControl.UpdateTitle(Ifs.Fnd.Explorer.Interfaces.ContextPaneUpdateType)">
            <summary>
            Called when the control is hidden but the visible title needs an update
            </summary>
            <param name="updateType">specifies what event caused the update</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndContextPaneControl.UpdateType">
            <summary>
            Tells the framework what events should cause the content pane to update its GUI
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndContextPaneControl.Dirty">
            <summary>
            A pane is set to dirty by the framework
            if it should run its UpdateUI method next time it is made visible
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndContextPaneControl.MenuStripForTitle">
            <summary>
            If this is set, the title of the pane will have a separate menu
            that can be used even when the pane is minimized
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndContextPaneControl.POName">
            <summary>
            Presentaion Object name associated with this context pane.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ContextPaneUpdateType">
            <summary>
            Enumeration for different types of update strategy for the Context Pane
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.ContextPaneUpdateType.Feature">
            <summary>
            Update when feature changes
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.ContextPaneUpdateType.DataSource">
            <summary>
            Update when data source changes
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.ContextPaneUpdateType.DataRecord">
            <summary>
            Update when data record changes
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.ContextPaneUpdateType.RecordState">
            <summary>
            Update when a data record state changes
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.ContextPaneUpdateType.Item">
            <summary>
            Update when a new item gets focus.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.ContextPaneUpdateType.None">
            <summary>
            Never update (custom update)
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndCustomParameterSheetService">
            <summary>
            An explorer service which supports custom parameter sheets.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndCustomParameterSheetService.GetCustomParameterSheet(Ifs.Fnd.Explorer.Interfaces.FndCustomParameterSheetInfo,System.Boolean)">
            <summary>
            Returns the custom parameter sheet instance.
            </summary>
            <param name="info">FndCustomParameterSheetInfo instance with name of the custom parameter sheet to be created, and other info</param>
            <param name="setTheme">States whether theming should be used in the created custom parameter sheet</param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ListButtonStateChangedDelegate">
            <summary>
            Delegate for the List button state in the Hosting Dialog
            </summary>
            <param name="sender">sender</param>
            <param name="e">ListButtonStateEventArgs instance</param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ReportParameterValuesChanged">
            <summary>
            Delegate when report Parameter values are changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndCustomParameterSheet">
            <summary>
            IFndCustomParameterSheet is used for supporting custom parameter sheets in RWC features
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndCustomParameterSheet.SetDefaultValues(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set the values to custom Task Parameter Sheet
            </summary>
            <param name="mandatoryParameterValues">Mandatory parameter names and values</param>
            <param name="nonMandatoryParamValues">Non-mandatory parameter names and values</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndCustomParameterSheet.GetParameterValues(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get the values from the custom Task parameter sheet
            </summary>
            <param name="mandatoryParamValues">Mandatory parameter names and values</param>
            <param name="nonMandatoryParamValues">Non-mandatory parameter names and values</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndCustomParameterSheet.GetParameterValues(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Return the Parameter names and values
            </summary>
            <returns>A dictionary containing parameter names and values</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndCustomParameterSheet.SetDefaultValues(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set default parameter values at the parameter sheet
            </summary>
            <param name="customParameterValues">Dictionary containing names and default values custom parameter sheet</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndCustomParameterSheet.DisplayCustomLOV">
            <summary>
            This Method is called when the List button is clicked in the Hosting dialog and a Custom Lov dialog needs to be invoked.
            if a custom Lov is available for the Current selected data item, then it should be invoked.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndCustomParameterSheet.CustomParametersValueChanged">
            <summary>
            This event is raised when parameter values are changed at the custom parameter sheet
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndCustomParameterSheet.ListButtonStateChanged">
            <summary>
            ListButtonStateChanged event is Raised when the Enable state of the "List" button in the 
            Hosting dialog needs to be changed.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndCustomParameterSheetFactory">
            <summary>
            Interface for Custom Parameter Sheet factory which will used to create the actual instance.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndCustomParameterSheetFactory.CreateInstance(System.String,Ifs.Fnd.AccessProvider.Activity.FndActivityContext,System.Boolean)">
            <summary>
            Creates an instance of actual parameter sheet which is loaded. if the assembly in not available it is loaded
            </summary>
            <param name="parameterSheetName">Name of the parameter sheet to load</param>
            <param name="activityContext">Activity context</param>
            <param name="scheduling">Specify whether the created parameter sheet is Used for Scheduling</param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ListButtonStateEventArgs">
            <summary>
            Event Arguments For  List button state in order Report Dialog
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ListButtonStateEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="buttonState">Button state of the List Button of the Order report Dialog</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ListButtonStateEventArgs.ButtonState">
            <summary>
            State of the List button in Order Report Dialog
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndContextSubstitutionVariables">
            <summary>
            Contains method for accessing CSVs
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndContextSubstitutionVariables.GetValue(System.String)">
            <summary>
            Get the value of a specific context substitution variable
            </summary>
            <param name="variableId">id of the variable</param>
            <returns>the value</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndContextSubstitutionVariables.GetListOnDatatype(System.String)">
            <summary>
            List names of all context substitution variables of a certain type
            </summary>
            <param name="datatype">type to list</param>
            <returns>list of names</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndContextSubstitutionVariables.ReplaceString(System.String)">
            <summary>
            Replaces the CSVs with their values in a string
            </summary>
            <param name="stringWithVariables">string containing CSV variables</param>
            <returns>decoded string</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndContextSubstitutionVariables.ReplaceCondition(Ifs.Fnd.Data.FndCondition)">
            <summary>
            Replaces CSVs in a condition
            </summary>
            <param name="condition">Condition in which to replace the CVSs</param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService">
            <summary>
            The IFndDictionaryService contains all client artifacts (features, plugings etc)
            that is available (=installed). A specfic assembly might not (yet) be downloaded.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.GetDefaultHomepageForEntity(System.String,System.String)">
            <summary>
            Gets FeatureInfo for the feature that is registered as default viewer for a specific entity or LU. 
            Returns default homepage of featureType List or Single.
            </summary>
            <param name="entity">Entity or LU identifier</param>
            <param name="featureType">The feature view type to be returned. Can either be "Single" or "List".</param>
            <returns>FndFeatureInfo instance or null if none found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.GetHomepagesForEntity(System.String)">
            <summary>
            Gets a list of FeatureInfo for the feature that is registered as viewer for a specific entity or LU
            </summary>
            <param name="entity">Entity or LU identifier</param>
            <returns>List of FndFeatureInfo, empty list if none found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.GetDefaultHomepageForView(System.String)">
            <summary>
            Gets FeatureInfo for the feature that is registered as default viewer for a specific VIEW.
            </summary>
            <param name="view">Database view name</param>
            <returns>FndFeatureInfo instance or null if none found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.GetHomepagesForView(System.String)">
            <summary>
            Gets a list of FeatureInfo for the feature that is registered as viewer for a specific VIEW
            </summary>
            <param name="view">Database view name</param>
            <returns>List of FndFeatureInfo, empty list if none found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.GetTaskParameterSheet(System.String)">
            <summary>
            Gets registered Task Parameter Sheet name given it's registered method name
            </summary>
            <param name="methodName">Registered method name to look for</param>
            <returns>FndCustomParameterSheetInfo instance with Task Parameter Sheet name and factory info or null if none found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.GetWizardPages(System.String)">
            <summary>
            Gets a list of dynamic Wizard Pages registered for a specific container (parentObject)
            </summary>
            <param name="parentObject"></param>
            <returns>List of FndWizardPageInfo, empty list if none found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.IsFeatureAvailable(System.String)">
            <summary>
            Gets information whenever a named feature is installed.
            </summary>
            <param name="fullname">Full feature name (eg Ifs.Application.Xyz.AbcFeature)</param>
            <returns>True if named feature is installed, false otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.GetFeatureFromUniqueName(System.String)">
            <summary>
            Gets feature information from it's unique name.
            For ApplicationForms, the unique name is the classname
            For Features, the unique name is class including namespace.
            </summary>
            <param name="name">Unique name</param>
            <returns>FndFeatureInfo instance or null if not found (not installed)</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.GetFeatureFromFullname(System.String)">
            <summary>
            Gets feature information from it's full name (class name including namespace)
            </summary>
            <param name="Fullname">Full name</param>
            <returns>FndFeatureInfo instance or null if not found (not installed)</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.GetDynamicTabPagesForContainer(System.String,System.String)">
            <summary>
            Gets list of dynamic tab pages for a specific dynamic tab container.
            Dynamic tabs are registered per container and container version.
            <remarks>
            If container version is omitted, dynamic tab pages regardless of version will
            be returned.
            </remarks>
            </summary>
            <param name="containerName">Name of the container</param>
            <param name="containerVersion">Optional version, if it has a non empty value, it will be considered in search.</param>
            <returns>List of FndDynamicTabPageInfo or empty list if not found (installed)</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.CustomLOVsForEntity(System.String)">
            <summary>
            Gets a list of custom LOV:s for an entity or LU.
            </summary>
            <param name="entity">Entity or LU.</param>
            <returns>List of FndCustomLovInfo or empty list if not found (not installed)</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.GetReportOrderDialog(System.String)">
            <summary>
            Gets registered Order report Dialog given Report id
            </summary>
            <param name="reportID">Report ID to look for</param>
            <returns>FndCustomParameterSheetInfo instance with Order report dialog info or null if none found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.GetReportParameterDialog(System.String)">
            <summary>
            Gets registered report Parameter sheet given Report id
            </summary>
            <param name="reportID">Report ID to look for</param>
            <returns>FndCustomParameterSheetInfo instance with report parameter dialog info or null if none found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.AddCustomApplicationPages(System.Collections.Generic.IList{Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo})">
            <summary>
            Add a list of custom application pages in the dictionary.
            </summary>
            <param name="customApplicationPageList"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.RemoveCustomApplicationPages(System.Collections.Generic.IList{Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo})">
            <summary>
            Removes  a list of custom application pages from the dictionary
            </summary>
            <param name="customApplicationPageList"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.FindActiveInstanceName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.FindOriginalInstanceName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.ActivateInstanceName(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="activate"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.AddDynamicTabPage(Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo)">
            <summary>
            Adds a dynamic tab page to dictionary.
            </summary>
            <param name="dynamicTabPageInfo"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.RemoveDynamicTabPage(Ifs.Fnd.Explorer.Interfaces.FndDynamicTabPageInfo)">
            <summary>
            Removes a dynamic tab page from dictionary.
            </summary>
            <param name="dynamicTabPageInfo"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.ChangeDefaultPage(System.String,System.String,Ifs.Fnd.Explorer.Interfaces.FndFeatureInfo)">
            <summary>
            Change the default home page used for zooming , used in custom pages
            </summary>
            <param name="viewName"></param>
            <param name="entity"></param>
            <param name="feature"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.RemoveFromDefaultPageList(System.String)">
            <summary>
            Remove a custom view name from default home page lists
            </summary>
            <param name="viewName"></param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.ApplicationInfo">
            <summary>
            Gets the FndApplicationInfo instance. This contains lists of
            all client artifacts (features, plugins, custom LOVs etc)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.Views">
            <summary>
            Gets dictionary of all views in the system.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndDictionaryService.CustomApplicationPages">
            <summary>
            Gets a read only list of all the custom application pages that are defined in the system.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndExplorer">
            <summary>
            Represents an Explorer. Corresponds one to one with an Enterprise Explorer Window.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorer.ShowToolbarMenu">
            <summary>
            Shows/activates the toolbarmenu in the explorer.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorer.ExplorerForm">
            <summary>
            Access the Explorer Form associated with this object.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorer.Application">
            <summary>
            Access the IFndApplication object
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorer.Services">
            <summary>
            Access the IFndServiceManager for this IFndExplorer
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorer.Navigation">
            <summary>
            Access the navigation functionality provided by IFndExplorerNavigationService
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorer.FeatureSupport">
            <summary>
            Access feature support functions provided by IFndExplorerNavigationService
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorer.InfoServices">
            <summary>
            Access infoservices functionality provided by IFndInfoServicesService
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorer.BroadcastMessagesService">
            <summary>
            Access Broadcast Messges Service functionality provided by IFndBroadcastMessgesService
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorer.NavigationNotification">
            <summary>
            Get notification events provided by IFndExplorerNavigationNotificationService
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorer.DataNotification">
            <summary>
            Get notification events provided by IFndExplorerDataNotificationService
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorer.Plugins">
            <summary>
            Access the FndExplorerPlugins
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndExplorer.ExplorerStarted">
            <summary>
            This event is fired when all initialization of an Explorer is finished
            and application is just going idle.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorer.Credential">
            <summary>
            Get the Credential associated with this explorer instance.
            </summary>		
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorer.ExplorerPaneVisibility">
            <summary>
            Get the initial explorer pane visibility state
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorer.ContextPaneVisibility">
            <summary>
            Gets the intial explorer context pane visibility
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndRecursionBreaker">
            <summary>
            Interface used by objects ment to break the OnSizeChanged recursion
            on 64bit Windows.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndRecursionBreaker.RegisterResizeControl(Ifs.Fnd.Explorer.Interfaces.IFndRecursionBreaker)">
            <summary>
            Used by child controls to register for a callback on OnCallSizeChanged event.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndRecursionBreaker.CallOnSizeChanged">
            <summary>
            Called to continue OnSizeChanged chain after breaking recursion
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndRecursionBreaker.HasBeenCalled">
            <summary>
            Set to true if OnSizeChanged has been called.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndExplorerForm">
            <summary>
            IFndExplorerForm is used to determine if a form is an IFS Explorer Form
            </summary>
            <code>
            private void OnClick()
            {
               IFndExplorerForm form = this.FindForm() as IFndExplorerForm;
               
               if(form != null)
               {
                  form.Explorer.Navigate(...)
               
            </code>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExplorerForm.Explorer">
            <summary>
            Gets the explorer object to which this form is associated.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndFeatureSettings">
            <summary>
            Settings class, encapsulates properties effecting the functionality in a feature 
            Used in combination with IFndCustomizedFeature
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndFeatureSettings.#ctor">
            <summary>
            Default contstructor
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureSettings.UseDrafts">
            <summary>
            Indicates if draft functionality is to be used or not
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureSettings.UseTemplates">
            <summary>
            Indicates if templates functionality is to be used or not
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndFeatureSettings.Default">
            <summary>
            Returns the default settings for a feature.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndCustomizedFeature">
            <summary>
            Interface is intended for features/"Top APF-forms" to enable/disable standard feature functionality
            such as drafts and templates.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndCustomizedFeature.FeatureSettings">
            <summary>
            
            </summary>
            <example>
            Implement interface in feature and provivde the desired property;
            
            public FndFeatureOptions FeatureOptions
            {
                get
                {
                    return new FndFeatureOptions()
                            {
                                UseDrafts = false,
                                UseTemplates = false
                            };
                }
            }
            </example>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControl.Parent">
            <summary>
            Method for accessing the parent control hosting this control
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControl.WhatsThisControlId">
            <summary>
            Id for the control to use when looking up whats this info
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControl.DisplayText">
            <summary>
            The display text of the control.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndAPFTabPage">
            <summary>
            A wrapper class for APF tab pages. Used for figuring out which controls are inside
            tabs and which are not.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndAPFTabPage.ContainsControl(System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndAPFTabPage.ContainsForm">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndAPFTabPage.FormName">
            <summary>
            Name of the form
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndSalControlContainer">
            <summary>
            Interface is aimed for container controls that may host pure PPJ controls, such as SalDataField.
            Containers are required to implement the TryGenerateFrameworkControl() method in order to
            make it possible to get whats this information from those controls.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSalControlContainer.TryGetSalFrameworkControl(System.Windows.Forms.Control,Ifs.Fnd.Explorer.Interfaces.FndSalFrameworkControl@)">
            <summary>      
            Implemented if the container may contain controls that not of type IFndFrameworkControl.
            If called, it will be called on each control located within the containers root level.
            A return value of NULL will result in the control being ignored. 
            </summary>        
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndSalFrameworkControl">
            <summary>
            FndSalFrameworkControl works as a wrapper of PPJ controls that are to be what's this aware.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSalFrameworkControl.#ctor(System.String,System.String,System.Windows.Forms.Control)">
            <summary>
            Default contstrucor
            </summary>
            <param name="whatsThisId">Usually the name of the control</param>
            <param name="displayText">Usually the text of the connected label</param>
            <param name="control">The Salcontrol to be wrapped</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSalFrameworkControl.WhatsThisControlId">
            <summary>
            Id for the control to use when looking up whats this info
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSalFrameworkControl.DisplayText">
            <summary>
            The display text of the control.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSalFrameworkControl.Control">
            <summary>
            The Sal control that is being wrapped
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSalFrameworkControl.ControlParent">
            <summary>
            The parent of the control.
            Note that the inherited control class parent property cannot be used as this
            would result in making this control a membemer in the parents Controls list.
            Resulting in undesired and wierd behaviour.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControlExtensionMethods">
            <summary>
            Extension methods for making the retrival of contexts and IFndFrameworkControls easier.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControlExtensionMethods.GetFrameworkControlsInContainer(System.Windows.Forms.Control)">
            <summary>
            Method to get all relevant IFndFrameworkControls in the given container.
            </summary>
            <param name="contrainerControl"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControlExtensionMethods.GetContext(System.Windows.Forms.Control)">
            <summary>
            Retrives the context for the control
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControlExtensionMethods.GetContext(Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControl)">
            <summary>
            Retrives the context for the control
            </summary>
            <param name="frameworkControl"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControlExtensionMethods.GetBaseContext(Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControl)">
            <summary>
            Retrives the base context for the control
            </summary>
            <param name="frameworkControl"></param>
            <returns></returns>        
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndMultilineEditorControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndMultilineEditorControl.EditorSize">
            <summary>
            Size of the multiline editor
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndMultilineEditorControl.ParentForm">
            <summary>
            Parent Form
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndContainerInfo">
            <summary>
            Presents information about the container
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndContainerInfo.IsContextAware">
            <summary>
            Indicates if this container defines a context or not. 
            If no context is defined the context of the first parent that defines one is used.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndContainerInfo.UseCustomControlCollection">
            <summary>
            Indicates if this container has controls stored in a custom datastructure other than in the default Controls propery
            If true, a invoke to IFndFrameworkControlContainer.GetCustomFrameworkControls will be made to fetch the collection of controls. 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControlContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControlContainer.GetContext(System.Windows.Forms.Control)">
            <summary>
            Retrives the current context in the container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControlContainer.GetCustomFrameworkControls">
            <summary>
            Retrives framework controls from a custom defined collection.
            This property requires the UseCustomControlCollection property be set in the ContainerInfo.
            If not set, the default controls property will be used for fetching controls.
            </summary>        
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControlContainer.ContainerInfo">
            <summary>
            Information about the container
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControlContainerExtensions">
            <summary>
            Extension methods for IFndFrameworkControlContainer interface
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControlContainerExtensions.GetDefaultContainerContext(Ifs.Fnd.Explorer.Interfaces.IFndFrameworkControlContainer)">
            <summary>
            Extends the IFndFrameworkControlContainerExtensions interface with a default method to get the context
            </summary>
            <param name="frameworkControlContainer"></param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndHelpType">
            <summary>
            A set of predefined help categories.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndHelpType.Concepts">
            <summary>
            The concepts in Enterprise Explorer
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndHelpType.Applications">
            <summary>
            Start page for the documentation of the current version of IFS Apllications.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndHelpType.IFSPublicWebSite">
            <summary>
            IFS Web Page, currently www.ifsworld.com
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndHelpType.IFSCustomerSupportWebSite">
            <summary>
            Custeomer Support Site.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndHelpType.IFSTipsAndTricksWebSite">
            <summary>
            Tips and tricks Site.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndHelpType.IFSCommunity">
            <summary>
            openIFS community home.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndHelpType.Page">
            <summary>
            Help for current Page.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndHelpNavigationTargetType">
            <summary>
            Targets where to show help.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndHelpNavigationTargetType.Internal">
            <summary>
            The help will be shown inside Enterprise Explorer.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndHelpNavigationTargetType.External">
            <summary>
            The help will be shown in an external browser.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndHelpParameterType">
            <summary>
            Parameters that is understood by Help Manager.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndHelpParameterType.Context">
            <summary>
            The value for the parameter should be the full context for the current page
            Ex: Ifs.Application.Appsrv.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndHelpParameterType.NavigationTarget">
            <summary>
            If the value for the NavigationTarget parameter equals Internal an internal navigation
            will be done. Else an extarnal browser will be launched.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndHelpService">
            <summary>
            This interface contains methods handling help requests.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndHelpService.GetHelpURL(System.String,System.String)">
            <summary>
            Get the URL to the online documentation for a specific feature
            </summary>
            <param name="assemblyName">string</param>
            <param name="featureName">string</param>
            <returns>Helppath in the following format:
            [baseurl]/[language]/onlinedocnav/rwc.htm?assemblyname=[hhd]?featurename=[fn]
            </returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndHelpService.ShowFndHelp(Ifs.Fnd.Explorer.Interfaces.FndHelpType,System.Collections.Generic.Dictionary{Ifs.Fnd.Explorer.Interfaces.FndHelpParameterType,System.Object})">
            <summary>
            Shows help for the specified help type.
            </summary>
            <param name="helpType">The help type to show help for</param>
            <param name="parameters">Optional dictionary of parameters, different help types uses different parameters. 
            The parameter NavigationTarget with value Internal or External are valid for all types.
            Internal means that help will be shown inside Enterprise Explorer and External that an
            external browser will be launched.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndHelpService.GetControlPaths">
            <summary>
            Returns a dictionary containing for all current controls: possible paths - one or many (comma separated) if there is inheritance involved to the control
            and the translated text of the control.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndLocalUserSettings">
            <summary>
            Contains local user settings. These settings are stored in local disk
            and is not part of the user profile
            These settings should be device specific or be needed before logon.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndLocalUserSettings.Instance">
            <summary>
            Gets the FndLocalUserSettings instance
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndLocalUserSettings.DeviceIdentifiers">
            <summary>
            Store and retrieve device identifier
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndLocalUserSettings.OpenLinkInNewInstance">
            <summary>
            Stores open external links in new Entprise Explorer process setting
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndInformationCard">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndInformationCard.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndInformationCard.Prompt">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndInformationCard.ValueRetrieved">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndInformationCard.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndInformationCards">
            <summary>
            Interface for InformationCards.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInformationCards.Retrieve(System.Collections.Generic.ISet{System.String})">
            <summary>
            
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndInformationCards.ProfileSection">
            <summary>
            TODO: This must be moved to a "core" interface, being an common used property.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndInformationCards.Published">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndCacheType">
            <summary>
            Specify the type of caching for LOV users. Can be None for no caching.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndCacheType.None">
            <summary>
            Do not use caching
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndCacheType.Session">
            <summary>
            Cache server fetched rows per client session
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndCacheType.Persistent">
            <summary>
            Reserved. Not implemented yet!
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndLOVService">
            <summary>
            IFndLOVService handles communications requests between LOV Providers
            and LOV Users (controls)
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndLOVService.Initialize(System.Windows.Forms.Control,Ifs.Fnd.Explorer.Interfaces.IFndExplorer,Ifs.Fnd.AccessProvider.Activity.FndActivityHandlerBase,Ifs.Fnd.Data.FndDataColumn,Ifs.Fnd.Explorer.Interfaces.FndCacheType,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Initializes the LOV.
            </summary>
            <param name="invoker">Reference to the <see cref="T:System.Windows.Forms.Control"/> instance that invoked the LOV.</param>
            <param name="explorer">Explorer instance using the LOV.</param>
            <param name="handler">Activity handler from the LOV user.</param>
            <param name="referenceField">Referencefield for which the LOV is called upon.</param>
            <param name="caching">Caching type used for this LOV.</param>
            <param name="condition">Extra conditions passed from the LOV user.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndLOVService.SetCondition">
            <summary>
            Sets clientsearch condition.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndLOVService.FindMatch(System.String)">
            <summary>
            Validates a value, displays LOV with subset if multiple matches.
            </summary>
            <param name="matchPattern">String to match</param>
            <returns>Number of datarows matching the condition sent in Initialize</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndLOVService.ConditionDialog">
            <summary>
            Displays a dialog to let user set search condition.
            </summary>
            <returns>True if user selects Ok, False otherwise.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndLOVService.ClearCache">
            <summary>
            Removes all entries from the result cache.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndLOVService.MultiSelect">
            <summary>
            Sets or gets flag indicating if multiple rows can be selected in the LOV dialog.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndLOVService.ListCommand">
            <summary>
            Temp property to get or set list command in LOV dialog.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndLOVService.SelectedRows">
            <summary>
            Gets the selected rows. May contain 0 or more rows.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndLOVService2">
            <summary>
            IFndLOVService gives public methods required to access clientsearch
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndLOVService2.SetClientSearch(Ifs.Fnd.Explorer.Interfaces.FndClientSearch)">
            <summary>
            Sets clientsearch.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndLOVManagerService">
            <summary>
            IFndLOVManagerService handles communications requests between LOV Providers
            and LOV Users (controls)
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndLOVManagerService.FindConfiguredLOVService(Ifs.Fnd.Data.FndDataColumn)">
            <summary>
            Find configured LOV service which is capable of being the LOV for the
            referencefield.
            </summary>
            <param name="referenceField"></param>
            <returns>A matching IFndLovService, or null if none found.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndLOVManagerService.GetStandardLOVProvider">
            <summary>
            Gets the standard LOV implmentation.
            </summary>
            <returns>A new instance of standard LOV provider.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndLOVManagerService.ShowDialog(Ifs.Fnd.Explorer.Interfaces.IFndLOVService)">
            <summary>
            Shows a modal dialog containing the UI for the selected LOV service.
            </summary>
            <param name="lovService"></param>
            <returns>True if the user clicked OK, false if Cancelled.</returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndLOVProviderService">
            <summary>
            IFndLOVProviderService handles communications requests between LOV Providers
            and LOV Managers
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndLOVProviderService.Activating">
            <summary>
            Called by LOV manager when LOV is beign shown.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndLOVProviderService.Deactivating">
            <summary>
            Called by LOV Manager when LOV is being closed.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndOptionalAssemblyResolveService">
            <summary>
            Specifies the service to use when resolving references using the optional assembly resolve path.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndOptionalAssemblyResolveService.FilePath(System.String)">
            <summary>
            Returns the file path given the assembly name
            </summary>
            <param name="fileName">Name of the file</param>
            <returns>Full path of the file</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndOptionalAssemblyResolveService.DirectoryParentPath(System.String)">
            <summary>
            Returns the Directory parent path
            </summary>
            <param name="directoryName">Name of the directory</param>
            <returns>Full path of the directory parent</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndOptionalAssemblyResolveService.OptionalAssemblyResolveActive">
            <summary>
            Returns true if OptionalAssemblyResolvePath can be used to resolve assemblies
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndOptionalAssemblyResolveService.OptionalAssemblyResolvePath">
            <summary>
            Returns the optional assembly resolve path retrieved from command line
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndOutputChannelsService">
            <summary>
            Specifies the service to use output channels
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndOutputChannelsService.ExportData">
            <summary>
            Export data to an output format
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndOutputChannelsService.QuickPrint(System.Boolean)">
            <summary>
            Quick Print
            </summary>
            <param name="includeConditionalFormatting"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndOutputChannelsService.InitiateOutputChannel(System.String)">
            <summary>
            Initiates the given output channel
            </summary>
            <param name="channelName">channel name of the output channel</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndOutputChannelsService.CurrentOutputChannelNames">
            <summary>
            Returns a string array of current output channel names
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndOutputChannelsService.CurrentOutputChannelState">
            <summary>
            Return the output channel state
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndOutputChannelsService.SiteTextAttr">
            <summary>
            Return the company name to be displayed in outputs
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndOutputChannelsService.CompanyLogo">
            <summary>
            Return the company logo to be displayed in outputs
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndQuickChartService">
            <summary>
            The QuickChart service
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndQuickChartService.QuickChart(System.String)">
            <summary>
            Create a quickchart
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndResourceUtilities">
            <summary>
            Interface for resource utilities 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndResourceUtilities.GetActiveLanguageFolderPath">
            <summary>
            Returns the folder path for the current UI language
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndResourceUtilities.GetCurrentLanguageZipFileName">
            <summary>
            Return the language zip filename for the current UI language
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndResourceUtilities.GetCurrentLanguageZipFilenameWithFullPath">
            <summary>
            Return the language zip filename for the current UI culture with full path
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndResourceUtilities.GetModelTranslations(System.Collections.Generic.List{System.String})">
            <summary>
            Get model translations for a set of paths
            </summary>
            <param name="paths">List of paths to translate</param>
            <returns>A dictionary containing translations for paths</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndResourceUtilities.GetModelTranslation(System.String)">
            <summary>
            Retrieves mode translation for a given path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndResourceUtilities.LoadResourceAssembly(System.String)">
            <summary>
            Load a resource assembly from language zip file.
            </summary>
            <param name="resourceFilename">File name of the resource</param>
            <returns>Returns the assembly is found in the zip file, returns null otherwise</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndResourceUtilities.IsLanguageZipDownloaded">
            <summary>
            True, if the language zip file for the current UI culture is locally present
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndSearchHints">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchHints.GetSearchHints(System.String)">
            <summary>
            
            </summary>
            <param name="viewName"></param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.SearchHints">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SearchHints.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SearchHints.ViewFunctions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SearchHints.ViewHints">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IndexData">
            <summary>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IndexData.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IndexData.Edited">
            <summary>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IndexData.Columns">
            <summary>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IndexData.ContainsTextColumn">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndSecurityService">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSecurityService.IsActivityGranted(System.String)">
            <summary>
            Checks if an activity is granted to the user and possible to invoke without security error exception
            </summary>
            <param name="activityName">The name of the Activity</param>
            <returns>true if the activity is granted to the user; false otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSecurityService.IsViewGranted(System.String)">
            <summary>
            Checks if a View is granted to the user and possible to invoke without security error exception
            </summary>
            <param name="viewName">The name of the view</param>
            <returns>true if the view is granted to the user; false otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSecurityService.IsPresObjectGranted(System.String)">
            <summary>
            Checks if a Presentation Object is granted to the user and possible to invoke without security error exception
            </summary>
            <param name="presObjectName">The name of the Presentation Object</param>
            <returns>true if the Presentation object is granted to the user; false otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSecurityService.IsReportGranted(System.String)">
            <summary>
            Checks if a Report is granted to the user and possible to invoke without security error exception
            </summary>
            <param name="reportName">The name of the Report</param>
            <returns>true if the Report is granted to the user; false otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSecurityService.IsMethodGranted(System.String,System.String)">
            <summary>
            Checks if a method is restricted to the user and possible to invoke without security error exception
            </summary>
            <param name="packageName">name of the package</param>
            <param name="methodName">name of the method</param>
            <returns>true if the method is not restricted to the user; false otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSecurityService.IsPackageGranted(System.String)">
            <summary>
            Checks if a Package is granted to the user and possible to invoke without security error exception
            </summary>
            <param name="packageName">The name of the package</param>
            <returns>true if the package is granted to the user; false otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSecurityService.IsSystemPrivilegeGranted(System.String)">
            <summary>
            Return whether the specified system privilage is granted
            </summary>
            <param name="systemPrivilage">system privilage</param>
            <returns>True if system privilage is granted to the current user, False otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSecurityService.RefreshSecurityInfo">
            <summary>
            Reinitializes all security info from server.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.SecurityMode">
            <summary>
            Application security mode that is used to speicify different modes that the security 
            service works with. 
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.SecurityMode.SimulateNotGranted">
            <summary>
            This mode is set so the security service should respond negative to all requests. It is used to verify that the application
            is closed down accordingly when run as a user without rights.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.SecurityMode.DebugDisabled">
            <summary>
            When developing this mode can be set for a debug built application to disable all security checks. 
            Used to make it possible to develop and debug the application without the need of security scaning and granting of application objects.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.SecurityMode.Runtime">
            <summary>
            Default runtime mode that performs all the checks as normal.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndStreamType">
            <summary>
            Type of stream
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndStreamType.General">
            <summary>
            General Stream Items
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndStreamType.Task">
            <summary>
            Stream Items from Tasks
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndStreamType.Talk">
            <summary>
            Stream Items from IFS Talk
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndStreamType.SubscribedObject">
            <summary>
            Stream Items from Subscribed Objects
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndStreamType.SubscriptionExpired">
            <summary>
            Stream Items from Expiration Alerts
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionType">
            <summary>
            Type of subscription
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionType.Lu">
            <summary>
            Lu Subscription
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionType.Object">
            <summary>
            Object Subscription
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService">
            <summary>
            Subscription Service Interface
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.SubscribeToObject(Ifs.Fnd.Explorer.Interfaces.FndObjSubscription)">
            <summary>
            Creates a subscription to an object
            </summary>
            <param name="subscription">FndObjSubscription object</param>
            <returns>Subscription success</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.SubscribeToObject(Ifs.Fnd.Data.FndTextAttribute,Ifs.Fnd.Data.FndTextAttribute,Ifs.Fnd.Data.FndTextAttribute,Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionType,Ifs.Fnd.Data.FndTextAttribute,Ifs.Fnd.Data.FndTimeStampAttribute,System.Collections.Generic.HashSet{Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionCol},Ifs.Fnd.Data.FndTextAttribute,Ifs.Fnd.Data.FndTextAttribute,Ifs.Fnd.Data.FndTextAttribute,Ifs.Fnd.Data.FndTextAttribute)">
            <summary>
            Creates a subscription to an object
            </summary>
            <param name="luName">Lu Name</param>
            <param name="viewName">Client View Name for security</param>
            <param name="subObjId">ObjId of subscribed object</param>
            <param name="subscriptionType">Type of subscritption: FndObjSubscriptionType</param>
            <param name="clientUrl">Url of client object</param>
            <param name="expiryDate">Expiry Date</param>
            <param name="columns">Unique list of columns to subscribe to</param>
            <param name="userName">Username of subscriber</param>
            <param name="header">Title of Subscription</param>
            <param name="notes">Notes</param>
            <param name="sendEmail">Send email updates</param>
            <returns>Subscription success</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.UpdateSubscription(Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionUpdatable)">
            <summary>
            Updates an existing subscription
            </summary>
            <param name="subscription">IFndObjSubscriptionUpdatable subscription object</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.UpdateSubscription(Ifs.Fnd.Data.FndNumberAttribute,Ifs.Fnd.Data.FndTextAttribute,Ifs.Fnd.Data.FndTextAttribute,System.Collections.Generic.HashSet{Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionCol},Ifs.Fnd.Data.FndTimeStampAttribute,Ifs.Fnd.Data.FndTextAttribute,Ifs.Fnd.Data.FndTextAttribute)">
            <summary>
            Updates an existing subscription
            </summary>
            <param name="subscriptionId">Subscription Id</param>
            <param name="objId">Objid of subscription</param>
            <param name="objVersion">ObjVersion of subscription</param>
            <param name="columns">Total set of columns to subscribe to</param>
            <param name="expiryDate">Expiry Date</param>
            <param name="notes">Notes</param>
            <param name="sendEmail">Send Email</param>
            <returns>Subscription update success</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.RemoveSubscription(System.Double)">
            <summary>
            Removes a Subscription
            </summary>
            <param name="subscriptionId">Subscription Id</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.RemoveSubscription(System.String,System.String)">
            <summary>
            Removes a Subscription
            </summary>
            <param name="objId">Objid of subscription</param>
            <param name="objVersion">ObjVersion of subscription</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.GetSubscription(System.Double)">
            <summary>
            Gets the subscription object
            </summary>
            <param name="subscriptionId">SubscriptionId</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.GetSubscription(System.String,System.String,System.String)">
            <summary>
            Gets the subscription object
            </summary>
            <param name="luName">Lu of subscriber</param>
            <param name="objId">Objid of subscribed row</param>
            <param name="viewName">Client view name</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.GetSubscriptionId(System.String,System.String,System.String)">
            <summary>
            Gets the SubscriptionId
            </summary>
            <param name="luName">Lu of subscriber</param>
            <param name="objId">Objid of subscribed row</param>
            <param name="viewName">Client view name</param>
            <returns>SubscriptionId</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.IsTracked(System.String,System.String,System.String)">
            <summary>
            Check if tracking is enabled
            </summary>
            <param name="luName">Lu of subscriber</param>
            <param name="objId">Objid of subscribed row</param>
            <param name="viewName">Client view name</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.IsSubscriptionAllowed">
            <summary>
            Check if tracking subscriptions are enabled for the currently active feature
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.ShowSubscriptionDialog">
            <summary>
            Invokes Subscription Dialog
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.NavigateToReference(System.String,System.Boolean)">
            <summary>
            Navigate To Referenced Url for Subscriptions
            </summary>
            <param name="url">Subscription Url</param>
            <param name="newWindow">Open in new window</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.NavigateToReference(Ifs.Fnd.Explorer.Interfaces.FndStreamType,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Navigate To Referenced Object
            </summary>
            <param name="streamType">Type of Stream</param>
            <param name="reference">Keys to referenced object</param>
            <param name="newWindow">Open in new window</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.SubscriptionMeta">
            <summary>
            Stores Meta info about subscribed object
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionService.DisabledLuList">
            <summary>
            Stores a list of lu's where subscriptions are disabled
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionUpdatable">
            <summary>
            Modifyable Interface of FndObjSubscription
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionUpdatable.SubscriptionId">
            <summary>
            SubscriptionId
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionUpdatable.Objid">
            <summary>
            Objid of subscription
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionUpdatable.Objversion">
            <summary>
            Objversion of subscription
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionUpdatable.Notes">
            <summary>
            Notes
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionUpdatable.SendEmail">
            <summary>
            Send Email
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionUpdatable.ExpiryDate">
            <summary>
            Expiry Date
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionUpdatable.SubscribedColumnsChanged">
            <summary>
            Check if subscribed columns changed
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjSubscriptionUpdatable.SubscribedColumns">
            <summary>
            Subscribed Columns
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription">
            <summary>
            FndObjSubscription
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.ClearDirty">
            <summary>
            Clears all dirty flags
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.SubscriptionId">
            <summary>
            SubscriptionId
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.LuName">
            <summary>
            LuName
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.ClientView">
            <summary>
            View of subscribed object for security
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.SubObjectKey">
            <summary>
            ObjectKey of subscribed object
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.SubObjid">
            <summary>
            Objid of subscribed object
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.Username">
            <summary>
            Username
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.Notes">
            <summary>
            Notes
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.SendEmail">
            <summary>
            Send Email
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.ClientUrl">
            <summary>
            Url of referring client
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.ExpiryDate">
            <summary>
            Expiry Date
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.Header">
            <summary>
            Title of Subscription
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.SubscribedColumns">
            <summary>
            Subscribed Columns
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.SubscriptionType">
            <summary>
            Subscription Type
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.Objid">
            <summary>
            Objid of subscription
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.Objversion">
            <summary>
            Objversion of subscription
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscription.SubscribedColumnsChanged">
            <summary>
            Check if subscribed columns changed
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionCol">
            <summary>
            FndObjSubscriptionCol
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionCol.ColumnName">
            <summary>
            Column Name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionCol.DisplayName">
            <summary>
            Display Name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionCol.TermVersionHandleId">
            <summary>
            Term Usage Version Id
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionCol.TermDisplayType">
            <summary>
            Display Type
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionMeta">
            <summary>
            Stores Meta info about subscribed object
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionMeta.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionMeta.CanSubscribe">
            <summary>
            Returns whether object is available for subscription
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionMeta.LuName">
            <summary>
            Lu Name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionMeta.ViewName">
            <summary>
            View Name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionMeta.Username">
            <summary>
            User Id of Subscriber
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionMeta.ObjId">
            <summary>
            Objid of subscribed object
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionMeta.TabName">
            <summary>
            Header of subscribed object
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionMeta.VisibleColumns">
            <summary>
            Dictionary of End User visible columns
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndObjSubscriptionMeta.PrimaryKeys">
            <summary>
            Dictionary of Primary Keys
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndSystemComponents">
            <summary>
            Enumerates all IFS based components and shows if they are installed in the system.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSystemComponents.IsInstalled(System.String)">
            <summary>
            
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSystemComponents.GetDescription(System.String)">
            <summary>
            
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSystemComponents.GetVersion(System.String)">
            <summary>
            
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSystemComponents.Enumerate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSystemComponents.EnumerateInstalled">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndUISecurity">
            <summary>
            Interface to apply UI Security
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUISecurity.ApplyUISecurity">
            <summary>
            This method is used to apply UI security where it requires
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects">
            <summary>
            This class is to keep all the EE UI Security Related Presentation objects
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_NAV_CONFIG">
            <summary>
            Navigator Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_SHORTCUT_CONFIG">
            <summary>
            Shorcut Panel Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_CONTEXTPANE_CONFIG">
            <summary>
            Context Pane Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_OUTPUTCHANNELS_CONFIG">
            <summary>
            Output Channels Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_HELPPANEL_CONFIG">
            <summary>
            Help Panel Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_HOMEPAGE_CONFIG">
            <summary>
            Home page Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_INFORMATION_CARDS">
            <summary>
             Information Cards Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_INFORMATION_CARDS_CONFIG">
            <summary>
            Information Cards Configuration Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_THEME_CONFIG">
            <summary>
            Theme Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_USERPROFILE_CONFIG">
            <summary>
            User Profile Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_OPTIONS_SERVER">
            <summary>
            Options Server Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_OPTIONS_ADVANCED">
            <summary>
            Options Advanced Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_SEARCH_ADVANCED">
            <summary>
            Search Advanced Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_SEARCH_CONFIG">
            <summary>
            Search Config Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_PAGELAYOUT_CONFIG">
            <summary>
            Page Layout Presentation Object 
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_CONTEXTMENU_CONFIG">
            <summary>
            Context Menu Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_PAGEBEHAVIOR_CONFIG">
            <summary>
            Page Behavior Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_DRAFTS_CONFIG">
            <summary>
            Drafts Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_TEMPLATES_CONFIG">
            <summary>
            Templates Presentation Objects
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_NOTES_CONFIG">
            <summary>
            Notes Presentation Objects
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_CONTEXTPANEL_SYSTEMINFO">
            <summary>
            System Info Context Panel Presentation Objects
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_WEB_DOCKOUT">
            <summary>
            Webfeatureshim Presentation Objects
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_COL_REORG">
            <summary>
            Column reorganize Presentation Object
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_QUICKCHART_DIALOG">
            <summary>
            QuickChart dialog
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.UISecurityPresentationObjects.EE_QUICKCHART_CONFIG">
            <summary>
            QuickChart configuration
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId">
            <summary>
            Profile options entries
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.NotesBackgroundColor">
            <summary>
            Color for notes background.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.ReadOnlyTextColor">
            <summary>
            Color for read only text.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.EditedTextColor">
            <summary>
            Color for edited text.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.FrameworkPageToolbarLeftAligned">
            <summary>
            Specfies if the framework page toolbar is left or right aligned.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.ShowProgressInformation">
            <summary>
            Indicates if the progressdialog should be shown when loading.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.CurrencyFormat">
            <summary>
            Currency format
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.EnableAbortRequest">
            <summary>
            Gets or sets a value indicating whether the abort request functionality is enabled. Default is true.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.HomePageUrl">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.ShowVerticalGridLines">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.OpenZoomTargetsProfileEntry">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.HideDisabledMenuItems">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.UseServerCallGroupingProfileEntry">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.DateTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.TimeTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.DateAndTimeTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.AutomaticallyAddUsedSearchFileds">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.ShowPreviousSearch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.DownloadAttachments">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.DownloadNotes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.DownloadPictures">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.ShowCalendarWeekNumbers">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.ColumnSortMaxRows">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.FindAndReplaceMaxRows">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.ShowUserPicture">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.HideOpenInNewInstanceWarning">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.SelectedTheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId.FrameworkPageToolbarAlwaysHighlight">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileOptions">
            <summary>
            Interface for user profile settings
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileOptions.ToCurrencyFormattedString(System.Double)">
            <summary>
            Converts the double value to a currency formatted string
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileOptions.ApplySavedDialogSize(System.Windows.Forms.Form)">
            <summary>
            Apply Stored Dialog Size if form is sizable (FormBorderStyle set to Sizable)
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileOptions.SaveDialogSize(System.Windows.Forms.Form)">
            <summary>
            Save the dialog size in the profile if the dialog is sizable (FormBorderStyle set to Sizable)
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileOptions.GetProfileValue``1(Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId)">
            <summary>
            Get the value for the given ProfileEntryId
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entryId"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileOptions.SetProfileValue``1(Ifs.Fnd.Explorer.Interfaces.FndProfileEntryId,``0)">
            <summary>
            Set the profile value for the given ProfileEntryId
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entryId"></param>
            <param name="value"></param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileOptions.FrameworkPageToolbarLeftAligned">
            <summary>
            Specfies if the framework page toolbar is left or right aligned.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileOptions.FrameworkPageToolbarAlwaysHighlight">
            <summary>
            Specfies if the framework page toolbar is always highlighted
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileOptions.EditedTextColor">
            <summary>
            Color for edited text.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileOptions.ReadOnlyTextColor">
            <summary>
            Color for read only text.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileOptions.NotesBackgroundColor">
            <summary>
            Color for notes background.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileOptions.EnableAbortRequest">
            <summary>
            Gets or sets a value indicating whether the abort request functionality is enabled. Default is true.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndValidationLock">
            <summary>
            This interface has been added to prevent getting unresponsive tabControls and buttons. 
            This could occur if a datafield contained invalid data and if you at the same time 
            grabbed a splitcontainers spliter and resized it.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndValidationLock.IsValidated">
            <summary>
            Checks if the control has been succesfully validated.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndViewInfo">
            <summary>
            Contains meta data about a view in the database dictionary. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.#ctor">
            <summary>
            Constructor for View.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructs view with properties in param.
            </summary>
            <param name="name"></param>
            <param name="nameDatabase"></param>
            <param name="prompt"></param>
            <param name="viewType"></param>
            <param name="lu"></param>
            <param name="module"></param>
            <param name="package"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.OnColumnsLoaded">
            <summary>
            Raises the ColumnsLoaded event.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.InvalidateColumns">
            <summary>
            Invalidate columns collection so it loads the columns from the database next time.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.LoadColumns">
            <summary>
            Loads the columns from the database. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.GetColumn(System.String)">
            <summary>
            Gets the column with the name in the Columns collection or null if not found.
            </summary>
            <param name="name">Name of column to find</param>
            <returns>The column searched for or null.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.GetKeys">
            <summary>
            Gets the primary key for this view.
            </summary>
            <returns>The column(s) the key is made of.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.GetReference(System.String)">
            <summary>
            Finds the reference from this view to the view the name in the parameter.
            </summary>
            <param name="viewName">Name of view to find reference for.</param>
            <returns>Reference object for the view.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.RefreshReferences">
            <summary>
            Refreshes references between views. Usually called after columns have been loaded for a view.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.Equals(System.Object)">
            <summary>
            	Determines whether the specified System.Object is equal to the current FndViewInfo.
            </summary>
            <param name="obj">The System.Object to compare with the current FndViewInfo.</param>
            <returns> true if the specified System.Object is equal to the current System.Object; otherwise false</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.GetHashCode">
            <summary>
            Returns the hash code for this view.
            </summary>
            <returns>The hash code for this view</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.ToString">
            <summary>
            Returns a string that represents the FndViewinfo object.
            </summary>
            <returns>A string that represents the FndViewinfo object</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.Lu">
            <summary>
            Gets the name of the logical unit the view belongs to.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.Name">
            <summary>
            Gets the name of the view.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.NameDatabase">
            <summary>
            Gets the database view name. If the view has custom fields then this property is different from Name.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.Prompt">
            <summary>
            Gets the translated View Prompt.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.ViewType">
            <summary>
            Gets the View type.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.Module">
            <summary>
            Gets the module the view belongs to.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.Package">
            <summary>
            Gets the name of the PLSQL package for the logical unit the view belongs to.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.Columns">
            <summary>
            Gets the columns for this view. If columns are not loaded they will automatically be loaded when accessing this property.
            If you want to control the loading and e.g. do asynchronously then call LoadColumns and subscribe to ColumnsLoaded event.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.References">
            <summary>
            Gets the references for the view.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.IsBaseView">
            <summary>
            Gets if this view is a Base view.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.LoadColumnsState">
            <summary>
            Gets the load state of the Columns property.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.FndViewInfo.ColumnsLoaded">
            <summary>
            Fired when the columns property has been populated. 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.LoadState">
            <summary>
            State of loaded meta data.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.LoadState.NotLoaded">
            <summary>
            Meta data has not yet been loaded.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.LoadState.Loaded">
            <summary>
            Meta data has successfully been loaded.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.LoadState.Failed">
            <summary>
            Meta data failed to load. 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndViews">
            <summary>
            Meta data dictionary of all views in the connected database.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViews.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Default constructor for serialization.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViews.#ctor(System.Func{System.String,System.Collections.Generic.IEnumerable{Ifs.Fnd.Explorer.Interfaces.FndViewInfo}},System.Func{Ifs.Fnd.Explorer.Interfaces.FndViewInfo,System.Collections.Generic.IEnumerable{Ifs.Fnd.Explorer.Interfaces.FndColumnInfo}},System.Func{System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Func{System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Func{System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}})">
            <summary>
            Constructs the FndViews dictionary.
            </summary>
            <param name="ViewLoader"></param>
            <param name="ColumnLoader"></param>
            <param name="DataItemsLoader"></param>
            <param name="EnumerationLoader"></param>
            <param name="StateEnumerationLoader"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViews.RefreshDictionaryAsync(System.Action{System.Boolean})">
            <summary>
            Clears the cache and reloads all views from database.
            Provide callback if you want a notification when loading is done.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViews.NotifyWhenLoaded(System.Action{System.Boolean})">
            <summary>
            Register callback to be notified when the views are loaded and ready to access.
            The callback has a parameter succeeded that tells whether the loading succeeded or not.
            The callback function is only called once. Always check IsLoaded before registering a callback.
            </summary>
            <param name="callback">Callback function that is called when views are done loading.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViews.GetBaseView(System.String)">
            <summary>
            Gets the base view for the logical unit.
            </summary>
            <param name="luName">Name of logical unit.</param>
            <returns>The found view or null if not found.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViews.GetViewFromReference(System.String)">
            <summary>
            Gets the base view from a reference in a view comment.
            </summary>
            <param name="reference">Reference in view comment.</param>
            <returns>The base view if found else null.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViews.GetView(System.String)">
            <summary>
            Gets a view from the dictionary with the name. Returns null if no view was found.
            </summary>
            <param name="viewName">The name of the view.</param>
            <returns>The view if found else null.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndViews.ReloadViewsFromDatabase(System.String)">
            <summary>
            Reload all views for a Logical Unit.
            </summary>
            <param name="logicalUnitName">Name of the Logical Unit to reload views for.</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndViews.IsLoaded">
            <summary>
            Gets if views are loaded.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.FndViews.DictionaryChanged">
            <summary>
            Fired when the Dictionary has changed.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndWebSocketService">
            <summary>
            IFndWebSocketService gives public methods for WebSocket Service
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndWebSocketService.SubscribeReceived(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{Ifs.Fnd.Explorer.Interfaces.FndWebSocketReceivedArgs},System.String)">
            <summary>
            Subscribe to WebSocket Received Events
            </summary>
            <param name="invoker">invoker</param>
            <param name="callback">callback method</param>
            <param name="messageType">Type of Message to Subscribe to</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndWebSocketService.UnsubscribeReceived(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{Ifs.Fnd.Explorer.Interfaces.FndWebSocketReceivedArgs})">
            <summary>
            Unsubscribe from WebSocket Received Events
            </summary>
            <param name="invoker">invoker</param>
            <param name="callback">callback method</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndWebSocketService.State">
            <summary>
            The state of the WebSocket
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndWebSocketReceivedArgs">
            <summary>
            Abstract class for Messages/Data received from websocket
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndWebSocketReceivedArgs.DeserializeData(System.Object,System.Net.WebSockets.WebSocketReceiveResult)">
            <summary>
            Deserialize received data
            </summary>
            <param name="data">Data to deserialize</param>
            <param name="receiveResult">Meta about data</param>
            <returns>Deserialized Result</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndWebSocketReceivedArgs.ReceiveResult">
            <summary>
            Description of results
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndWebSocketReceivedArgs.ResultDictionaryList">
            <summary>
            Deserialized Result set
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndWebSocketDataReceivedEventArgs">
            <summary>
            Used to store results of WebSocket DataReceived Event
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndWebSocketDataReceivedEventArgs.#ctor(System.Byte[])">
            <summary>
            Creates a new FndWebSocketDataReceivedEventArgs
            </summary>
            <param name="data">Receive buffer</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndWebSocketDataReceivedEventArgs.#ctor(System.Byte[],System.Net.WebSockets.WebSocketReceiveResult)">
            <summary>
            Creates a new FndWebSocketDataReceivedEventArgs
            </summary>
            <param name="data">Receive buffer</param>
            <param name="receiveResult">WebSocketReceiveResult of Receive buffer</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndWebSocketDataReceivedEventArgs.DeserializeData(System.Object,System.Net.WebSockets.WebSocketReceiveResult)">
            <summary>
            Deserialize received data
            </summary>
            <param name="data">Data to deserialize</param>
            <param name="receiveResult">Meta about data</param>
            <returns>Deserialized Result</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndWebSocketDataReceivedEventArgs.Data">
            <summary>
            Receive buffer
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndWebSocketMessageReceivedEventArgs">
            <summary>
            Used to store results of WebSocket MessageReceived Event
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndWebSocketMessageReceivedEventArgs.#ctor(System.String)">
            <summary>
            Creates a new FndWebSocketMessageReceivedEventArgs
            </summary>
            <param name="message">Received Message</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndWebSocketMessageReceivedEventArgs.#ctor(System.String,System.Net.WebSockets.WebSocketReceiveResult)">
            <summary>
            Creates a new FndWebSocketMessageReceivedEventArgs
            </summary>
            <param name="message">Received Message</param>
            <param name="receiveResult">WebSocketReceiveResult of Message</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndWebSocketMessageReceivedEventArgs.DeserializeData(System.Object,System.Net.WebSockets.WebSocketReceiveResult)">
            <summary>
            Deserialize received data
            </summary>
            <param name="message">Message to deserialize</param>
            <param name="receiveResult">Meta about data</param>
            <returns>Deserialized Result</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndWebSocketMessageReceivedEventArgs.Message">
            <summary>
            Received Message
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndSelectionService">
            <summary>
            Public interface to provide selections UI.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionService.Activate(Ifs.Fnd.Explorer.Interfaces.FndVirtualTree,System.String,System.String)">
            <summary>
            Initialize a selections node with UI and register needed node event handler.
            </summary>
            <param name="root"></param>
            <param name="rootLabelName"></param>
            <param name="key"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionService.Navigate(Ifs.Fnd.Core.FndUrlAddress,Ifs.Fnd.Explorer.Interfaces.FndExplorerNavigationService.FndNavigationOptions)">
            <summary>
            Navigate to a selection
            </summary>
            <param name="url"></param>
            <param name="options"></param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager">
            <summary>
            Public interface to handle storage logic of selections.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.SubscribeSelectionRemoved(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{System.EventArgs})">
            <summary>
            Subscribe to SelectionRemoved event.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.UnsubscribeSelectionRemoved(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{System.EventArgs})">
            <summary>
            Unsubscribe to SelectionRemoved event.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.CreateNavigatorEntry(System.String,Ifs.Fnd.Core.FndUrlAddress,Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Creates a new navigator entry for a selection.
            </summary>
            <param name="selectionName"></param>
            <param name="detailUrl"></param>
            <param name="overviewUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.UpdateNavigatorEntryUrl(System.String,System.String)">
            <summary>
            Update url for a navigator entry.
            </summary>
            <param name="entryKey"></param>
            <param name="url"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.HighLightNewNavigatorEntry(System.String,Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Highlights a selection in the UI.
            </summary>
            <param name="entryKey"></param>
            <param name="explorer"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.NavigatorEntryChanged(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs)">
            <summary>
            Handle changes of navigator entries.
            </summary>
            <param name="explorer"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.GetSelectionKey(System.String,System.String)">
            <summary>
            Returns the selection key value.
            </summary>
            <param name="entity"></param>
            <param name="selectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.GetSelectionDetailUrl(Ifs.Fnd.Explorer.Interfaces.FndVirtualTree)">
            <summary>
            Returns the selection detail url.
            </summary>
            <param name="virtualTreeSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.GetSelectionOverviewUrl(Ifs.Fnd.Explorer.Interfaces.FndVirtualTree)">
            <summary>
            Returns the selection overview url.
            </summary>
            <param name="virtualTreeSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.GetSelectionUrl(Ifs.Fnd.Explorer.Interfaces.FndVirtualTree,System.String@,System.String@)">
            <summary>
            Returns the selection detail and overview url.
            </summary>
            <param name="virtualTreeSelection"></param>
            <param name="detailUrl"></param>
            <param name="overviewUrl"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.IsSelectionEditable(System.String,System.String)">
            <summary>
            Check that a selection exist in active userprofile.
            </summary>
            <param name="entity">Entity connected to the selection.</param>
            <param name="selectionName">Selection name as stored in userprofile.</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.SelectionAlreadyExist(System.String,System.String)">
            <summary>
            Returns true if a selection with same selection name already exists for an entity.
            </summary>
            <param name="selectionName"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.UpdateSelectionTable(System.String,System.String,System.String)">
            <summary>
            Update selection table with a selection.
            </summary>
            <param name="key"></param>
            <param name="entity"></param>
            <param name="selectionName"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.GetSelection(System.String,System.String,System.String@,System.String@,System.String@,System.String@,System.DateTime@)">
            <summary>
            Get stored selection information.
            </summary>
            <param name="entity"></param>
            <param name="name"></param>
            <param name="detailUrl"></param>
            <param name="overviewUrl"></param>
            <param name="notes"></param>
            <param name="key"></param>
            <param name="entryDate"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.SaveSelection(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Save a selection.
            </summary>
            <param name="entity"></param>
            <param name="name"></param>
            <param name="detailUrl"></param>
            <param name="overviewUrl"></param>
            <param name="notes"></param>
            <param name="key"></param>
            <param name="clearExistingValues"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSelectionManager.RemoveSelection(System.String,System.String,System.String)">
            <summary>
            Remove a selection.
            </summary>
            <param name="name"></param>
            <param name="entity"></param>
            <param name="key"></param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ServiceAcquiredEventHandler`1">
            <summary>
            Delegate represents the callback method used to handle service acquiring
            </summary>
            <param name="service"></param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndServiceManager">
            <summary>
            The Service Registry.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndServiceManager.RequestService``1(Ifs.Fnd.Explorer.Interfaces.ServiceAcquiredEventHandler{``0})">
            <summary>
            Request a service by type. If service is registered and has been initialized then this method will return the instance of the service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="onServiceAquiredDelegate">Callback delegate to be called when service has been initialized and registered. Delgate is also called if the service is 
            already available</param>
            <returns>Returns the service instance if available, otherwise null.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndServiceManager.AddServiceProvider``1(``0,System.Boolean)">
            <summary>
            Add a service provider. Only one provider per service type is allowed.
            Service is marked as non-thread-safe service. 
            Note:This API is required to make RequestService to broadcast to the listening delegates. Listeners will not be notified unless the service is
            registered using this method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serviceProviderInstance"></param>
            <param name="threadSafe"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndServiceManager.GetServiceProvider``1">
            <summary>
            Retrieves a service from the service registry using service type as search criteria
            </summary>
            <typeparam name="T">Type of service to retrieve</typeparam>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndServiceManager.AddServiceProvider(System.String,System.Object,System.Boolean)">
            <summary>
            Add a service provider. Only one provider per service name is allowed
            Framework cannot check whenever a service really is thread safe or not.
            Framework will completely trust the service being what is says it is.
            </summary>
            <param name="serviceName"></param>
            <param name="serviceProviderInstance"></param>
            <param name="threadSafe"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndServiceManager.GetServiceProvider(System.String)">
            <summary>
            Retrieves a service from the service registry using service type as search criteria
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndSupportMRUList">
            <summary>
            Summary description for IFndMRUList.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSupportMRUList.Mru">
            <summary>
            Gets or sets the mode of activation of Most Recently Used functionality.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSupportMRUList.MruBehaviour">
            <summary>
            Gets or sets if Most Recently Used should be global or local.
            Global means that the Most Recently Used values will be accessible in all TextBoxes which have the same term.
            Local means that the Most Recently Used values will be local the this specific TextBox.
            </summary>	
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSupportMRUList.MruGlobalTerm">
            <summary>
            Gets or sets the term that descibes the data in the TextBox. 
            All textboxes with the same term will use the same Most Recently Used values if the MruBehaviour is set to global.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSupportMRUList.MruObject">
            <summary>
            Gets Most Recently Used Object
            </summary>		
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSupportMRUList.MruListDroppedDown">
            <summary>
            Gets whether the MRU list is currently shown.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndMruActivationType">
            <summary>
            Defines how Mru function would be activated in controls that support it.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndMruActivationType.Default">
            <summary>
            Mru functionality will be activated conditionally.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndMruActivationType.Enabled">
            <summary>
            Mru activated unconditionally.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndMruActivationType.Disabled">
            <summary>
            Mru functionality disabled.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService">
            <summary>
            Interface for FreeTextSearch.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService.ConvertSearchCriteria(System.String)">
            <summary>
            Convert search criteria
            </summary>
            <param name="criteria">Search criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService.IsHybridSearchAvailable">
            <summary>
            Returns true if hybrid search is available
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService.GetSnippet(System.String,System.String,System.String)">
            <summary>
            Get snippet value
            </summary>
            <param name="searchDomain">Search domain</param>
            <param name="primaryKey">Primary key</param>
            <param name="criteria">Search criteria</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService.GetUserSelectedSearchDomains">
            <summary>
            Get selected search domain ids from the profile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService.SetUserSelectedSearchDomains(System.Collections.Generic.List{System.String})">
            <summary>
            Set selected search domain ids in the profile.
            </summary>
            <param name="selectedDomains">List of SearchDomainIds that are selected</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService.GetSearchDomainsMRUUsage">
            <summary>
            Gets the most recently used search domains from the profile. MRU is size limited to default 20 items
            </summary>
            <returns>List of most recently used search domains. Most recent first, least recent last</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService.UpdateSearchDomainMRU(System.String)">
            <summary>
            Touhch this search domain to be most recently used in the profile
            </summary>
            <param name="searchDomainId">SearchDomainId to set as most recent.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService.GetIndexedAttributes(System.String)">
            <summary>
            Get indexed attributes for specified domain
            </summary>
            <param name="searchDomain">Search Domain</param>
            <returns>Indexed Attributes</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService.GetAllIndexedAttributes(System.String[])">
            <summary>
            Get all indexed attributes for specified domains
            </summary>
            <param name="searchDomains">Array of Search Domains</param>
            <returns>All Indexed Attributes</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService.GetGroupIndexedLocations(System.String)">
            <summary>
            Get Group Indexed Locations
            </summary>
            <param name="domain">Selected group search domain</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService.GetIndexedLocationFields(System.String)">
            <summary>
            Get Indexed Location fields
            </summary>
            <param name="domain">Selected search domain</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService.Search(System.String,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Do search
            </summary>
            <param name="criteria">Search criteria</param>
            <param name="indexedLocations">Indexed Locations to be searched</param>
            <param name="openInNewWindow">True to open in a new Explorer window</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService.ShowSearchOptionsDialog(System.Boolean@,System.Int32@)">
            <summary>
            Show the search options dialog
            </summary>
            <param name="snippets"></param>
            <param name="maxRows"></param>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService.AvailableSearchDomains">
            <summary>
            Gets available search domains in a dictionary keyed by SearchDomainId
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndApplicationSearchService.TranslatedIndexedFieldsDictionary">
            <summary>
            Gets Translated Search Domain Indexed Fields in a dictionary keyed by SearchDomainId
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndUserSessionGlobalCollection">
            <summary>
            IFndUserSessionGlobalCollection holds the collection of FndUserGlobalVariable's that are available for a user.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserSessionGlobalCollection.IsValid(System.String)">
            <summary>
             Checks is the name is a valid session global variable
            </summary>
            <param name="name"></param>
            <returns>Returns TRUE is the name is a valid session global variable</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserSessionGlobalCollection.Item(System.String)">
            <summary>
            Gets the named session global variable
            </summary>
            <param name="name">Name of the session global variable</param>
            <returns>The named session global variable</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserSessionGlobalCollection.ListServerSessionGlobals">
            <summary>
            Returns the list of Names of all FndUserGlobalVariables that are server based, meaning they can be used
            both in the server and the client. Such FndUserGlobalVariable always have a Description, DefaultValue,
            AllowedValues and CurrentValue.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserSessionGlobalCollection.ListClientSessionGlobals">
            <summary>
            Returns the list of Names of all FndUserGlobalVariables that are client based, meaning the server is not aware
            them. Such FndUserGlobalVariable do not have any Description, DefaultValue,
            AllowedValues or CurrentValue, and is used only as a global within each Feature instance.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndUserGlobalVariable">
            <summary>
            FndUserGlobalVariable holds all information about a user session global variable.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndUserGlobalVariable.#ctor(System.String)">
            <summary>
            Constructor for client session user globals, only providing their name
            </summary>
            <param name="name">The name</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndUserGlobalVariable.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Main constructor
            </summary>
            <param name="name">The name</param>
            <param name="description">The description</param>
            <param name="defaultValue">The default value. Current value will be initialized with this value</param>
            <param name="allowedValues">All allowed values, separated with unit separator (char(31))</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndUserGlobalVariable.Name">
            <summary>
            Name of the user global variable
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndUserGlobalVariable.Description">
            <summary>
            Description of the user global variable
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndUserGlobalVariable.DefaultValue">
            <summary>
            Default value of the user global variable
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndUserGlobalVariable.AllowedValues">
            <summary>
            All allowed values for the user global variable, separated with unit separator (char(31))
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndUserGlobalVariable.CurrentValue">
            <summary>
            Current value of the user global variable
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndUserGlobalVariable.IsClientSessionGlobal">
            <summary>
            TRUE if the global variable is only client based, meaning the server is not aware of it.
            Such FndUserGlobalVariable do not have any Description, DefaultValue, AllowedValues or
            CurrentValue, and is used only as a global within each Feature instance.
            "PROCESS" and "VERSION" are typical client session global variables.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService">
            <summary>
            Interface for manually read and write user profile values. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.Save(System.String,System.String,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            saves a record
            </summary>
            <param name="section">Section is the path to where the profile value is located</param>
            <param name="entry">Entry is the name of the profile value</param>
            <param name="row">Record which is saved</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.Get(System.String,System.String,Ifs.Fnd.Data.FndDataColumnCollection)">
            <summary>
            Gets a record
            </summary>
            <param name="section">Section is the path to where the profile value is located</param>
            <param name="entry">Entry is the name of the profile value</param>
            <param name="meta">The type of record that should be fetched.</param>
            <returns>The fetched row. Returns null if no row is found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.Save(System.String,System.String,Ifs.Fnd.Data.FndDataRow,System.Boolean)">
            <summary>
            saves a record
            </summary>
            <param name="section">Section is the path to where the profile value is located</param>
            <param name="entry">Entry is the name of the profile value</param>
            <param name="row">Record which is saved</param>
            <param name="preserveRowState">if true, RowState is not updated after completing the save operation</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.Get(System.String,System.String,Ifs.Fnd.Data.FndDataColumnCollection,System.Boolean)">
            <summary>
            Gets a record
            </summary>
            <param name="section">Section is the path to where the profile value is located</param>
            <param name="entry">Entry is the name of the profile value</param>
            <param name="meta">The type of record that should be fetched.</param>
            <param name="preserveRowState">if true, RowState is set to the same state as when saved</param>
            <returns>The fetched row. Returns null if no row is found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetChildren(System.String,System.String,Ifs.Fnd.Data.FndDataTable)">
            <summary>
            Gets all rows for the propertyKey.
            </summary>
            <param name="section">Section is the path to where the profile value is located</param>
            <param name="entry">Entry is the name of the profile value</param>
            <param name="destination">The Datatable containing all matching rows</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetValue``1(System.String,System.String,``0)">
            <summary>
            Returns the value found for the propertyKey
            </summary>
            <param name="section">Section is the path to where the profile value is located</param>
            <param name="entry">Entry is the name of the profile value</param>
            <param name="defaultValue">Default value</param>
            <returns>Returns the user profile value for this property. If no value is found the default value is returned</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetValue(System.String,System.String,System.Type,System.Object)">
            <summary>
            Returns the value found for the propertyKey
            </summary>
            <param name="section">Section is the path to where the profile value is located</param>
            <param name="entry">Entry is the name of the profile value</param>
            <param name="propertyType">Type of the value</param>
            <param name="defaultValue">Default value</param>
            <returns>Returns the user profile value for this property. If no value is found the default value is returned</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.SetValue(System.String,System.String,System.Object)">
            <summary>
            Writes the value to the user profile.
            </summary>
            <param name="section">Section is the path to where the profile value is located</param>
            <param name="entry">Entry is the name of the profile value</param>
            <param name="propertyValue">The value.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.RemoveEntry(System.String,System.String)">
            <summary>
            Removes an entry from the user profile
            </summary>
            <param name="section">Section is the path to where the profile value is located.</param>
            <param name="entry">Entry is the name of the profile value.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.RemoveSection(System.String)">
            <summary>
            Removes a section with all entries from the user profile
            </summary>
            <param name="section">Section is the path to where the profile value is located.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetFeatureSection(System.String)">
            <summary>
            Returns the section which describes where the content is located
            The Feature Section is for profiles values specific for the feature.
            </summary>
            <param name="featureName">The full name of the feature</param>
            <returns>A section</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetFeatureSection(System.String,System.String)">
            <summary>
            Returns the section which describes where the content is located
            The Feature Section is for profiles values specific for the feature.
            </summary>
            <param name="featureName">The full name of the feature</param>
            <param name="mySection">Adds a specific path at the end of the feature section</param>
            <returns>A section</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetApplicationDataSection">
            <summary>
            Returns the section which describes where the content is located.
            The Application Section is for profiles values common for all features and the application framework.
            </summary>
            <returns>A section</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetApplicationDataSection(System.String)">
            <summary>
            Returns the section which describes where the content is located.
            The Application Section is for profiles values common for all features and the application framework.
            </summary>
            <param name="mySection">Adds a specific path at the end of the Application Section</param>
            <returns>A section</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetApplicationSection">
            <summary>
            Returns the section which describes where the content is located.
            The Application Section is for profiles values common for all features and the application framework.
            </summary>
            <returns>A section</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetApplicationSection(System.String)">
            <summary>
            Returns the section which describes where the content is located.
            The Application Section is for profiles values common for all features and the application framework.
            </summary>
            <param name="mySection">Adds a specific path at the end of the Application Section</param>
            <returns>A section</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetGeneralSection">
            <summary>
            Returns the section which describes where the content is located.
            The General Section is for profiles values common for Windows, Web, Mobile.
            </summary>
            <returns>A section</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetGeneralSection(System.String)">
            <summary>
            Returns the section which describes where the content is located.
            The General Section is for profiles values common for Windows, Web, Mobile.
            </summary>
            <param name="mySection">Adds a specific path at the end of the General Section</param>
            <returns>A section</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.EntryExistsInActiveProfile(System.String,System.String)">
            <summary>
            Gets a Boolean value indicating whether the profile value exist in the active profile.
            </summary>
            <param name="section">Section is the path to where the profile value is located.</param>
            <param name="entry">Entry is the name of the profile value.</param>
            <returns><b>true</b> If value exist in active profile; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.EntryExistsInBaseProfile(System.String,System.String)">
            <summary>
            Gets a Boolean value indicating whether the profile value exist in the active profile.
            </summary>
            <param name="section">Section is the path to where the profile value is located.</param>
            <param name="entry">Entry is the name of the profile value.</param>
            <returns><b>true</b> If value exist in active profile; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetSubSections(System.String)">
            <summary>
             Returns the subsections for the section
            </summary>
            <param name="section"></param>
            <returns> A string array containing the subsections </returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetSubSections(System.String,Ifs.Fnd.Explorer.Interfaces.ProfileType)">
            <summary>
             Returns the subsections for the section
            </summary>
            <param name="section"></param>
            <param name="profileType">Specify profile type where to locate the sections. Use active to get only the sections from the current writeable profile. Active is in many cases the same as the personal.</param>
            <returns> A string array containing the subsections </returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.SubscribeEndAllCurrentChanges(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{System.EventArgs})">
            <summary>
            Subscribe to End all current changes.
            </summary>
            <param name="explorer">explorer</param>
            <param name="callback">callback method</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.UnsubscribeEndAllCurrentChanges(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{System.EventArgs})">
            <summary>
            Unsubscribe to End all current changes.
            </summary>
            <param name="explorer">explorer</param>
            <param name="callback">callback method</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.SubscribeActiveProfileChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{System.EventArgs})">
            <summary>
            Subscribe to Active Profile Changed.
            </summary>
            <param name="explorer">explorer</param>
            <param name="callback">callback method</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.UnsubscribeActiveProfileChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{System.EventArgs})">
            <summary>
            Unsubscribe to Active Profile Changed.
            </summary>
            <param name="explorer">explorer</param>
            <param name="callback">callback method</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.SubscribeProfileValuesChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{Ifs.Fnd.Explorer.Interfaces.FndProfileEventArgs},System.String)">
            <summary>
            Subscribe to Profile Value changes.    
            </summary>
            <param name="explorer">explorer</param>
            <param name="callback">callback method</param>
            <param name="profileSection">profile section</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.UnsubscribeProfileValuesChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{Ifs.Fnd.Explorer.Interfaces.FndProfileEventArgs},System.String)">
            <summary>
            Unsubscribe to Profile Value changes.
            </summary>
            <param name="explorer">explorer</param>
            <param name="callback">callback method</param>
            <param name="profileSection">profile section</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetStringValue(System.String,System.String,System.String)">
            <summary>
            Returns the profile value
            </summary>
            <param name="section">Section is the path to where the profile value is located.</param>
            <param name="entry">Entry is the name of the profile value.</param>		
            <param name="defaultValue">Default value, returned if no value found</param>
            <returns>the profile value</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetStringValue(System.String,System.String,System.String,System.String@)">
            <summary>
            Get the profile value
            </summary>
            <param name="section">Section is the path to where the profile value is located.</param>
            <param name="entry">Entry is the name of the profile value.</param>		
            <param name="defaultValue">Default value, returned if no value found</param>
            <param name="value">the profile value</param>
            <returns>ProfileValueStatus indicating if the value was found and in which profile, personal or base</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetStringValue(System.String,System.String,System.String,Ifs.Fnd.Explorer.Interfaces.ProfileType,System.String@)">
            <summary>
            Get the profile value
            </summary>
            <param name="section">Section is the path to where the profile value is located.</param>
            <param name="entry">Entry is the name of the profile value.</param>		
            <param name="defaultValue">Default value, returned if no value found</param>
            <param name="profileType">Specify profile type where to locate the value. Use Unspecified to get default behaviour, which means that the value will be returned from the base profile only if it does not exist in the personal profile</param>
            <param name="value">the profile value</param>
            <returns>ProfileValueStatus indicating if the value was found and in which profile, personal or base</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.SetStringValue(System.String,System.String,System.String)">
            <summary>
            Writes the value to the user profile.
            </summary>
            <param name="section">Section is the path to where the profile value is located.</param>
            <param name="entry">Entry is the name of the profile value.</param>		
            <param name="profileValue">The value.</param>
            <returns>true if the value is written to the profile, false otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.SetValues``1(System.Collections.Generic.Dictionary{System.String,``0},System.String,System.String)">
            <summary>
            Writes the collection of entity values to user profile.
            </summary>
            <param name="entityTable">Entities to write</param>
            <param name="section">Section is the path to where the subsections of entites are located.</param>
            <param name="entityName">Name of the profile entity</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetValues``1(System.String,System.String)">
            <summary>
            Reads a collection entity values from user profile.
            </summary>
            <param name="section">Section is the path to where the subsections of entities are located.</param>
            <param name="entityName">Name of the profile entity</param>
            <returns>A collection of entities</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetEntries(System.String,Ifs.Fnd.Explorer.Interfaces.ProfileType)">
            <summary>
             Returns the entries for the section
            </summary>
            <param name="section"></param>
            <param name="profileType">Specify profile type where to locate the sections. Use active to get only the entries from the current writeable profile. Active is in many cases the same as the personal.</param>
            <returns> A string array containing the entries </returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.GetEntries(System.String)">
            <summary>
             Returns the entries for the section
            </summary>
            <param name="section"></param>
            <returns> A string array containing the entries </returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService.DeviceSpecificSettings">
            <summary>
            Returns Device specific settings of the IEE client. sattings saved in Profile under custom name
            </summary>        
            <returns>Settings under given name (device)</returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService2">
            <summary>
            Extebds IFndUserProfileService to add ActiveProfileChanging event
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService2.SubscribeActiveProfileChanging(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{System.EventArgs})">
            <summary>
            Subscribe to Active Profile Changing.
            </summary>
            <param name="explorer">explorer</param>
            <param name="callback">callback method</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService2.UnsubscribeActiveProfileChanging(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{System.EventArgs})">
            <summary>
            Unsubscribe to Active Profile Changing.
            </summary>
            <param name="explorer">explorer</param>
            <param name="callback">callback method</param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService3">
            <summary>
            Extends IFndUserProfileService to add SaveBaseProfile property
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileService3.SaveAdministratorEditedProfile">
            <summary>
            Flag to indicate if the active, admin edited, profile should be saved.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ProfileType">
            <summary>
            bla
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.ProfileType.Personal">
            <summary>
            The personal profile.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.ProfileType.Base">
            <summary>
            The base profile.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.ProfileType.Active">
            <summary>
            The current active profile. Can be a personal or a base profile. 
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.ProfileType.Unspecified">
            <summary>
            No specific profile.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ProfileValueStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.ProfileValueStatus.ValueFoundInPersonal">
            <summary>
            Value is found in Personal Profile
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.ProfileValueStatus.ValueFoundInBase">
            <summary>
            Value found in Base Profile
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.ProfileValueStatus.ValueFoundInActiveBase">
            <summary>
            Value found in Base Profile
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.ProfileValueStatus.ValueNotFound">
            <summary>
            Value is not found in the profile.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndUserProfileEventHandler">
            <summary>
            Profile Event Handler
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndControlHost">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndControlHost.FEATURE">
            <summary>
            Control is hosted in a Feature 
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndControlHost.ATTACHMENT">
            <summary>
            Control is hosted in a attachment
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAutomationService">
            <summary>
            Interface used to read and write user profile values for controls.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAutomationService.LoadUserProfile(Ifs.Fnd.Explorer.Interfaces.FndControlHost,System.String)">
            <summary>
             Loads User Profile values for a control.
            </summary>
            <param name="controlHost">The control host</param>
            <param name="controlHostName">The name of the host control for which user profile information is loaded</param>
            <returns>True if the user profile is found and loaded. False otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAutomationService.SetProfileValues(System.Windows.Forms.Control,Ifs.Fnd.Explorer.Interfaces.FndControlHost,System.String)">
            <summary>
            Sets the values for all properties on this control and subcontrols to the value found in the user profile. 
            </summary>
            <param name="ctrl">The Control</param>
            <param name="controlHost">The control host</param>
            <param name="controlHostName">The name of the host control.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAutomationService.SetProfileValues(System.Windows.Forms.Control,Ifs.Fnd.Explorer.Interfaces.FndControlHost,System.String,System.Boolean)">
            <summary>
            Sets the values for all properties on this control and subcontrols to the value found in the user profile. 
            </summary>
            <param name="ctrl">The Control</param>
            <param name="controlHost">The control host</param>
            <param name="controlHostName">The name of the host control.</param>
            <param name="useParentFeatureIfExist">If true set profile value from parent feature. Only applicable for Features host</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAutomationService.WriteProfileValues(System.Windows.Forms.Control,Ifs.Fnd.Explorer.Interfaces.FndControlHost,System.String)">
            <summary>
            Writes back the current values for all properties on this control and subcontrols to the user profile. 
            </summary>
            <param name="ctrl">The Control</param>
            <param name="controlHost">The control host</param>
            <param name="controlHostName">The name of the host control.</param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService">
            <summary>
            Interface for administrate User profile.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.RestoreUserProfile">
            <summary>
            Restores default settings
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.RestoreUserProfile(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Restores the user profile to the default values
            </summary>
            <param name="navigator">restore navigator</param>
            <param name="formData">restore formData</param>
            <param name="appearance">restore appearance</param>
            <param name="links">restore links</param>
            <param name="options">restore options</param>
            <param name="savedSearches">restore savedSearches</param>
            <param name="selections">restore selections</param>
            <param name="templates">restore templates</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.SetActiveProfile(System.String,System.Boolean)">
            <summary>
            Activates an existing profile. Should only be used for activating base profiles as personal. Since no base profile
            will be loaded if a regular profileId is give. Only the specific profile and the standard IFS Profile will be returned.
            </summary>
            <param name="profileId">Profile ID</param>
            <param name="readOnly">If set to true no changes will be made to the profile will running the application.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.IsDirty">
            <summary>
            True if the active profile is dirty
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.IsReadOnly">
            <summary>
            True if the active profile is read only
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.SaveProfile">
            <summary>
            Saves the Active profile 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.EndAllCurrentChanges">
            <summary>
            Fires EndAllCurrentChanges event. Requires changed profile values to be written to the profile.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.ChangePersonalProfile(System.String,System.Boolean)">
            <summary>
            Activates an existing personal profile.
            </summary>
            <param name="profileId">Profile ID</param>
            <param name="useAsDefault">true if this should be the new default profile</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.ChangePersonalProfile(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Activates an existing personal profile.
            </summary>
            <param name="profileId">Profile ID</param>
            <param name="useAsDefault">true if this should be the new default profile</param>
            <param name="isAdmin">true if this profile is selected to be edited by an administrator</param>
            <param name="isReadOnly">true if this profile should be set in read only mode</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.ChangeToUserProfile(System.String,System.Boolean)">
            <summary>
            Activates a specific user's profile.
            </summary>
            <param name="userId">User identity</param>
            <param name="readOnly">true if profile changes should not be saved;false if the profile changes should be saved</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.ListPersonalProfiles">
            <summary>
             Returns the Personal Profiles for the current user
            </summary>
            <returns>a ClientProfileTable containing the Personal Profiles for the current user</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.CreateNewPersonalProfile(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new Personal Profile for the user
            </summary>
            <param name="profileName">name of the profile</param>
            <param name="defaultProfile">use this as default</param>
            <param name="applyNow">change to this profile in this session</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.CreateNewBaseProfile(System.String,System.Boolean)">
            <summary>
            Creates a new Base Profile
            </summary>
            <param name="profileName">name of the profile</param>
            <param name="applyNow">change to this profile in this session</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.DeletePersonalProfile(System.String)">
            <summary>
            Removes a profile if it is not the default or the active profile
            </summary>
            <param name="profileId">the profile id</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.ActiveProfileName">
            <summary>
            The name of the profile active in current session
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.ActiveProfileId">
            <summary>
            The ID of the profile active in current session
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.DefaultProfileId">
            <summary>
            The ID of the default personal profile.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.BaseProfileIsActive">
            <summary>
            Returns true when a base profile is active in current session.
            </summary>		
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.IsEditingPersonalProfileAsAdmin">
            <summary>
            Returns true when a administrator is editing an personal profile.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndUserProfileAdministrationService.PersonalProfileEnabled">
            <summary>
            Gets if the persobnal profile should be enabled or not.
            If false, No personal profile setting will be applied or saved. 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndProfileEventArgs">
            <summary>
            FndNavigatorEntryEventArgs contains change information for 
            the SubscribeNavigatorEntryChanged callback
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndProfileEventArgs.#ctor">
            <summary>
            creates a new instance of FndProfileEventArgs
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndProfileEventArgs.#ctor(System.String,System.String,System.Object)">
            <summary>
            creates a new instance of FndProfileEventArgs
            </summary>
            <param name="section">the profile section</param>
            <param name="entry">the profile entry</param>
            <param name="newValue">the new profile value</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndProfileEventArgs.Section">
            <summary>
            gets or sets the profile section
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndProfileEventArgs.Entry">
            <summary>
            gets or sets the profile entry
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndProfileEventArgs.NewValue">
            <summary>
            gets or sets the new profile value
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IMyTodoPluginSendToService">
            <summary>
            Service contract to supply send-to collegue functionality
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IMyTodoPluginSendToService.SendToColleague(Ifs.Fnd.Core.FndUrlAddress,System.String,System.String,System.String,System.String)">
            <summary>
            The method used to send information to a colleague.
            </summary>
            <param name="url">Url to the document.</param>
            <param name="businessObject">The business object.</param>
            <param name="receiverList">The receiver list.</param>
            <param name="title">The default title.</param>
            <param name="message">The default message.</param>
            <returns>Whether the send was successfull or not.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IMyTodoPluginSendToService.SendToColleagueAsDraft(Ifs.Fnd.Core.FndUrlAddress,System.String,System.String,System.String,System.String,Ifs.Fnd.Data.FndDataTable,System.String)">
            <summary>
            The method which sends the draft to a colleague.
            </summary>
            <param name="url">Url to the document.</param>
            <param name="businessObject">The business object.</param>
            <param name="receiverList">The receiver list.</param>
            <param name="title">The default title.</param>
            <param name="message">The default message.</param>
            <param name="document">The data the should be saved.</param>
            <param name="feature">The feature Name.</param>
            <returns>Whether the send was successfull or not.</returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionHost">
            <summary>
            Host to keep the Object Connection services
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionHost.RegisterConnectedObjectServer(Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionServer,System.String)">
            <summary>
            Registers an IFndObjectConnectionServer instance for a service at the Host
            </summary>
            <param name="server"></param>
            <param name="serviceName"></param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionHost.CurrentKeys">
            <summary>
            get the keys of the current selected Document
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionHost.KeyDescriptions">
            <summary>
            Get the Description for the current selected keys
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionHost.CurrentEntity">
            <summary>
            Gets the Entity (LU in the case of application Forms) connected to the current Document
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionHost.AttachmentsAllowed">
            <summary>
            TRUE is attachments are currently allowed to be added/modifyed/removed. Depends on the
            currently selected document, its state and if there's a Obj-Connection service connected to it.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionHost.Enabled">
            <summary>
            Gets whether Object Connections are Enabled or not. may depend on row state
            current selected document is connected with a Obj-Connection service etc.
            and most importently if the whether the current row has any Attachment hits. 
            if there are no hits the services should clear out its contents and need not query the server
            Services should query the server only if this property is true.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionServer">
            <summary>
            An object Connection Service
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionServer.UpdateUI(System.Boolean)">
            <summary>
            This method will be called by the Host (Subject). It's a notify call to update the current state
            
            Note: If called with clearEntries = true, it means that the framework is asking to just clear the UI panel. The 
            framework has already called the object connections server and received that there are no Object Connections (Attachments)
            for this type, so having UpdateUI calling the server is unnecessary.
            </summary>
            <param name="clearEntries">If True, the implementing panel should simply be cleared. Do NOT fetch data from the server if that can be avoided.</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionServer.ServiceName">
            <summary>
            Object Connection service this server is catering for
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionServer.DisplayName">
            <summary>
            Text used as the title for the service. 
            (Make sure it is translated)
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionServer.AttachmentsServiceContentsChanged">
            <summary>
            Raise this event when the number of attachments in the service changed at runtime. 
            (Ex. user had addded a new object to the service or deleted an exsisting one).
            Then the counts in the EE Explorer shoud change their hit counts.
            service should Notify the IFndObjectConnectionHost about the change
            through this event.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionServerExt">
            <summary>
            Extended version of IFndObjectConnectionServer. 
            </summary>
            <remarks>
            This interface was added during the Zenith project, and I did not want to break the compability of all
            Attachment plugins by adding a new method to IFndObjectConnectionServer - since that would force all
            those plugins to implement this method. Now the plugins will load even though Fnd is updated with Zenith code
            and plugins are still on 7.5SP4 level. /JAROSE
            </remarks>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionServerExt.Save">
            <summary>
            This method will be called by the Host when the current data record is changing and the content of the
            attachments pane needs to be saved. It is up to the attachment pane to decide if a save is needed and to implement
            the save operation.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionServerExt.ServiceViewName">
            <summary>
            Return the custom LU name. Return string.Empty or null to instead use
            the default IFndAttachedDocument.AttachmentLuName implemented by the framework.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionServerSecured">
            <summary>
            IFndObjectConnectionServerSecured interface contains methods to check permission for user to use the Attachment plug-in.
            </summary>
            <remarks>
            This Interface was added separately so that current attachment services will continue to work with new framework changes (Backward compatible with 7.5SP4 code)
            </remarks>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndObjectConnectionServerSecured.SecurityPermissionsGranted">
            <summary>
            This method is called by the framework when the attachment service tries to register at the Object connections (Attachments) Host.
            the Service will be registered only if the method returns true. Its up to the Attachment service to check whether the current user is granted
            all the security requirements needed by the service, in this method.
            </summary>
            <returns>true if security requirements are granted to current user</returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.AttachmentsServiceContentsChangedDeligate">
            <summary>
            This delegate is used to send information from the IFndObjectConnectionServer to
            IFndObjectConnectionHost that attachments were added or removed from the service. the IFndObjectConnectionHost
            will update the hit counts accordingly
            </summary>
            <param name="sender">IFndObjectConnectionServer</param>
            <param name="e">AttachmentsServiceContentsChangedEventArgs object</param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.AttachmentsServiceContentsChangedEventArgs">
            <summary>
            sends information on the changed attachments 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.AttachmentsServiceContentsChangedEventArgs.#ctor(System.Int32,System.Boolean)">
            <summary>
            EventArgs to send information on the changed attachments
            </summary>
            <param name="count">number of attachments records added or deleted to the service</param>
            <param name="recordsAdded">true if attachments were added false if removed</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.AttachmentsServiceContentsChangedEventArgs.ChangedAttachmentsCount">
            <summary>
            Number of changed attachments
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.AttachmentsServiceContentsChangedEventArgs.RecordsAdded">
            <summary>
            true if attachments were added, false if removed
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndApplicationPlugin">
            <summary>
            Interface for application-level plugins.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationPlugin.Initialize(Ifs.Fnd.AccessProvider.Activity.FndActivityContext,Ifs.Fnd.Explorer.Interfaces.IFndApplication)">
            <summary>
            Request the Application plugin to initialize
            </summary>
            <param name="context">ActivtyContext used to access server</param>
            <param name="application">Application which hosts the plugin</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndApplicationPlugin.Terminate">
            <summary>
            Requests the plugin to terminate
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndExplorerPlugin">
            <summary>
            Interface for explorer-level plugins.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerPlugin.Initialize(Ifs.Fnd.AccessProvider.Activity.FndActivityContext,Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Request the Explorer plugin to initialize
            </summary>
            <param name="context">ActivtyContext used to access server</param>
            <param name="explorer">Explorer which hosts the plugin</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExplorerPlugin.Terminate">
            <summary>
            Requests the plugin to terminate
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndAssemblyType">
            <summary>
            FndAssemblyType indicates where an assembly should be deployed.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndAssemblyType.Feature">
            <summary>
            Feature assemblies are deployed normal DeployFiles folder
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndAssemblyType.Plugin">
            <summary>
            Plugin assemblies are deployed DeployFiles\plugins folder.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndAssemblyType.Portlet">
            <summary>
            Portlet assemblies are deployed DeployFiles\portlets folder.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndAssemblyTypeAttribute">
            <summary>
            Indicates IFS Application assembly types. Determines deploy location.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndAssemblyTypeAttribute.#ctor(Ifs.Fnd.Explorer.Interfaces.FndAssemblyType)">
            <summary>
            Creates an instance of FndAssemblyTypeAttribute
            </summary>
            <param name="assemblyType">FndAssemblyType of this assembly.</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndAssemblyTypeAttribute.FndAssemblyType">
            <summary>
            Gets the FndAssemblyType for this assembly
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ISearchField">
            <summary>
            Defines common properties for any search field
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ISearchField.Clear">
            <summary>
            Clear the search field
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ISearchField.GetCondition(System.Boolean)">
            <summary>
            Gets the condition from the field
            </summary>
            <returns>condition</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ISearchField.ValidateField">
            <summary>
            Validates the entered value and displays an error if not valid.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ISearchField.ValidateField(System.Boolean)">
            <summary>
            Validates the entered value and throws an exception or displays an error if not valid.
            </summary>
            <param name="throwExceptionOnInvalids">If true throws an exception instead of showing the messagebox on validation errors.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ISearchField.SetValue(System.Object)">
            <summary>
            Set the value of the search control
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ISearchField.SetFocus">
            <summary>
            Set focus in the search control
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.ISearchField.ValueChanged">
            <summary>
            Event triggered when the field value changes
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ISearchField.IsNull">
            <summary>
            Check if the field is null
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ISearchField.TextValue">
            <summary>
            Return text representation of the search field
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ISearchField.Values">
            <summary>
            Return the values entered in the control
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ISearchField.Column">
            <summary>
            Metadata for the search control
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ISearchField.Control">
            <summary>
            The windows control object for the search control
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ISearchField.SupportedOperators">
            <summary>
            Supported operators
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ISearchField.ShowDropDown">
            <summary>
            Gets or sets a value indicating show/hide drop down
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ISendToMailService">
            <summary>
            Service contract to supply "Send To Mail" functionality
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ISendToMailService.SendToMail(System.String,Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Creates a mail message with given title and the URL of the document to be sent to.
            </summary>
            <param name="subject">subject of the mail message</param>
            <param name="documentUrl">URL of the target document. This will be the body of the mail message</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ISendToMailService.CanSendMail">
            <summary>
            Gets whether it is possible to send mails
            </summary>
            <returns>true if send-mail functionality is available</returns>
            <remarks>Make sure you check this property before calling <see cref="M:Ifs.Fnd.Explorer.Interfaces.ISendToMailService.SendToMail(System.String,Ifs.Fnd.Core.FndUrlAddress)"/>.</remarks>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndSendToService">
            <summary>
            IFndSendToService owns the "Send-To" menu. SendTo providers can then
            register themselves as SendTo targets.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSendToService.CreateSendToProvider(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Creates a SendToProvider and adds it to the collection of SendToProviders
            </summary>
            <param name="sendToMenuItem">A menuitem to which the Send-To menu is connected</param>
            <returns>The new FndSendToProvider object</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSendToService.AddSendToProvider(Ifs.Fnd.Explorer.Interfaces.FndSendToProvider)">
            <summary>
            Add an already created SendTo provider to the collection
            </summary>
            <param name="sendToProvider">FndSendToProvider to add</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSendToService.RemoveSendToProvider(Ifs.Fnd.Explorer.Interfaces.FndSendToProvider)">
            <summary>
            Remove an added FndSendToProvider from the collection
            </summary>
            <param name="sendToProvider"></param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSendToService.SendToProviders">
            <summary>
            Get the collection of SendTo providers
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndSendToProvider">
            <summary>
            SendToProvider represents one Send-To target in the Send-To menu.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSendToProvider.#ctor(System.Windows.Forms.ToolStripMenuItem)">
            <summary>
            Creates an FndSendToProvider.
            </summary>
            <param name="sendToMenu">Menu item associated with this SendTo provider.</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSendToProvider.SendToMenu">
            <summary>
            Gets the menu item connected to this SendTo provider
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSendToProvider.Data">
            <summary>
            Gets or set data object associated with this instance of FndSendToProvider
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndSendToProviderCollection">
            <summary>
            SendToProviderCollection is a collection of SendToProvider classes
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSendToProviderCollection.Add(Ifs.Fnd.Explorer.Interfaces.FndSendToProvider)">
            <summary>
            Adds a previously created SendToProvider to the collection
            </summary>
            <param name="sendToProvider">SendTo provider to add</param>
            <returns>The added SendTo provider</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSendToProviderCollection.AddRange(Ifs.Fnd.Explorer.Interfaces.FndSendToProvider[])">
            <summary>
            Add an array of previously created FndSendToProvider to the collection
            </summary>
            <param name="sendToProviders">Array of FndSendToProviders to add</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSendToProviderCollection.Remove(System.Int32)">
            <summary>
            Removes an FndSendToProvider from collection using zero based index.
            </summary>
            <param name="index">Zero-based index of FndSendToProvider to remove</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSendToProviderCollection.Remove(Ifs.Fnd.Explorer.Interfaces.FndSendToProvider)">
            <summary>
            Remove a specified FndSendToProvider instance from the collection
            </summary>
            <param name="sendToProvider">The FndSendToProvider instance to remove</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSendToProviderCollection.Insert(System.Int32,Ifs.Fnd.Explorer.Interfaces.FndSendToProvider)">
            <summary>
            Insert a previously created FndSendToProvider at a specified index in the collection.
            </summary>
            <param name="index">Zero-based index of where to insert the FndSendToProvider</param>
            <param name="sendToProvider">The FndSendToProvider to insert.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSendToProviderCollection.CopyTo(Ifs.Fnd.Explorer.Interfaces.FndSendToProvider[],System.Int32)">
            <summary>
            Copy the collection to an FndSendToProvider array from a specific index.
            </summary>
            <param name="array">Array to copy to</param>
            <param name="index">Zero based index in array where copy should begin.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSendToProviderCollection.IndexOf(Ifs.Fnd.Explorer.Interfaces.FndSendToProvider)">
            <summary>
            Returns a zero-based index of an FndSendToProvider in the collection.
            </summary>
            <param name="sendToProvider">FndSendToProvider to return index of.</param>
            <returns>Zero-based index of the FndSendToProvider. -1 if not found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSendToProviderCollection.Contains(Ifs.Fnd.Explorer.Interfaces.FndSendToProvider)">
            <summary>
            Determines whenever an FndSendToProvider is located in the collection.
            </summary>
            <param name="sendToProvider">FndSendToProvider to look for</param>
            <returns>true means that the FndSendToProvider was found in the collection</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSendToProviderCollection.Item(System.Int32)">
            <summary>
            Collection main indexer
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.DataSourceInfo">
            <summary>
            Stores information about the datasource.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.DataSourceInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance.
            </summary>
            <param name="lu">Logical unit connected to the current form/table window</param>
            <param name="view">Database view that populates the current form/table window</param>
            <param name="package">Database package connected with the view</param>
            <param name="defWhere">Default WHERE condition</param>
            <param name="defOrder">Default ORDER BY condition</param>
            <param name="host">Database host computer</param>
            <param name="sid">Oracle SID</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.DataSourceInfo.LogicalUnit">
            <summary>
            Logical unit connected to the current form/table window.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.DataSourceInfo.View">
            <summary>
            Database view that populates the current form/table window.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.DataSourceInfo.Package">
            <summary>
            Database package connected with the view.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.DataSourceInfo.DefaultWhere">
            <summary>
            Default WHERE condition.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.DataSourceInfo.DefaultOrderBy">
            <summary>
            Default ORDER BY condition.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.DataSourceInfo.DbHost">
            <summary>
            Database host computer.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.DataSourceInfo.DbSid">
            <summary>
            Oracle SID.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FeatureAssemblyInfo">
            <summary>
            Information about assembly for the currently active page
            <remarks> 
            This class should only be used for transporting information between active page shim and 
            the SystemInformationContainer.
            </remarks>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FeatureAssemblyInfo.#ctor(System.String,System.String)">
            <summary>
            Initiates an instance of FeatureAssemblyInfo
            </summary>
            <param name="assemblyName">Name of the assembly containing currently active page</param>
            <param name="component">Name of the component name for the currently active page</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FeatureAssemblyInfo.AssemblyName">
            <summary>
            Name of the assembly containing currently active page
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FeatureAssemblyInfo.Component">
            <summary>
            Name of the component name for the currently active page
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ObjectRelationInfo">
            <summary>
            Stores information about the current form/table window in focus.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ObjectRelationInfo.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Creates an instance.
            </summary>
            <param name="datasource">Current data source</param>
            <param name="parentFrm">Parent frame</param>
            <param name="currentFrm">Current frame</param>
            <param name="childItems">Child data items of the current frame</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ObjectRelationInfo.DataSource">
            <summary>
            Current data source.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ObjectRelationInfo.ParentFrame">
            <summary>
            Parent frame.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ObjectRelationInfo.CurrentFrame">
            <summary>
            Current frame.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ObjectRelationInfo.Children">
            <summary>
            Child data items of the current frame.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ISystemInformationContainer">
            <summary>
            Implemented by the container classes hosting features/application forms for exposing to external classes
            wanting to use system information.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ISystemInformationContainer.CurrentAssembly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ISystemInformationContainer.CurrentDataSource">
            <summary>
            Contains information about the data source that populates the current form/table window.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ISystemInformationContainer.ObjectRelations">
            <summary>
            Contains information about forms/table windows/data items related to the current form/table window.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ISystemInformationContainer.FoundationUser">
            <summary>
            Foundation user identity.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ITemplateManagerService">
            <summary>
            Service interface that enables Managing Template.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ITemplateManagerService.GetTemplate(System.String,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Gets a saved Template.
            </summary>
            <param name="templateId">Template ID</param>
            <param name="row">Destination for Template.</param>
            <returns>Returns the requested Template</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ITemplateManagerService.GetTemplates(System.String,System.String)">
            <summary>
            Gets a List of templates available for a given entity.
            </summary>
            <param name="entity">name of the entity</param>
            <param name="dataSourceName">name of the current datasource</param>
            <returns>List of available templates if any</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ITemplateManagerService.NewFromDefaultTemplate">
            <summary>
            If a default template is available, a new record will
            be created and the template will be applied.
            </summary>
            <returns>True if a default template was found and applied. False otherwise.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ITemplateManagerService.SaveTemplate(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,Ifs.Fnd.Data.FndDataTable,System.String,System.String,System.String)">
            <summary>
            Handles Saving of a new or modified Template.
            </summary>
            <param name="explorer">Explorer for current Feature</param>
            <param name="dataTable">DataTable for the current Feature</param>
            <param name="entity">Entity for current Feature</param>
            <param name="defaultTitle">Title to display in Save As Template dialog</param>
            <param name="featureName">Name of the feature used when saving the template</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ITemplateManagerService.ApplyTemplate(System.String)">
            <summary>
            Applies the given template to the current feature.
            </summary>
            <param name="templateId">Template Id to be applied.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ITemplateManagerService.SetDefaultTemplate(System.String,System.String)">
            <summary>
            Opens the 'set default template' dialog.
            </summary>
            <param name="entity">Entity name</param>
            <param name="dataSourceName">Data source name</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ITemplateManagerService.GetDefaultTemplate(System.String@,System.String@,System.String,System.String)">
            <summary>
             Check if a default template exist for active feature.
            </summary>
            <param name="templateTitle">The name of the default template.</param>
            <param name="templateId">The id of the default template.</param>
            <param name="name">Data source name</param>
            <param name="entity">Entity name</param>
            <returns>True if a default template exist.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ITemplateManagerService.AddStandardTemplateMenuItems(System.Windows.Forms.ToolStripItemCollection)">
            <summary>
            Adds Organize templates and Set Default templates menu items to the given ToolStripItemCollection
            </summary>
            <param name="items">ToolStripItemCollection to add to.</param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndTemplate">
            <summary>
            Holds information about a template
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndTemplate.TemplateName">
            <summary>
            Gets/Sets template name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndTemplate.TemplateId">
            <summary>
            Gets/Sets template id
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IWindowTitleBarExtension">
            <summary>
            Represents a control that can act as an extension to the title bar of a window,
            providing a set of behaviors that a window title bar provides.
            </summary>
            <remarks>When a user performs a supported action, implementing controls are expected to raise the corresponding event, 
            so that the runtime would handle it and perform the action requested.</remarks>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IWindowTitleBarExtension.WindowMoveRequested">
            <summary>
            Raised when the explorer window is needed to be moved.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IWindowTitleBarExtension.WindowMaximizeRestoreRequested">
            <summary>
            Raised when the explorer window is needed to be maximized/restored.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry">
            <summary>
            An FndNavigatorEntry represents one node in a navigator hierarchy.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.GetSiblings(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry)">
            <summary>
            Gets all the siblings to the specified entry
            </summary>
            <param name="entry">The entry to get the siblings for</param>
            <returns>A collection of entries which are siblings to the specified entry</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.ToString">
            <summary>
            Shows key and name for easy debugging
            </summary>
            <returns>Key + " - " + Name</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.AddChild(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry)">
            <summary>
            Adds an FndNavigatorEntry as a child to this FndNavigatorEntry
            </summary>
            <param name="entry">Child FndNavigatorEntry instance</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.AddChild(System.String,System.String,System.String,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType,System.Boolean)">
            <summary>
            Creates a new FndNavigatorEntry instance and add as a child to this FndNavigatorEntry
            </summary>
            <param name="name">Display name</param>
            <param name="url">URL to navigate to</param>
            <param name="imageResource">Themed resource id for node image</param>
            <param name="type">Node type</param>
            <param name="hidden">Create as hidden (true=hidden, false=visible)</param>
            <returns>The new added FndNavigatorEntry</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.AddChild(System.String,System.String,System.String,System.String,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType)">
            <summary>
            Creates a new FndNavigatorEntry instance and add as a child to this FndNavigatorEntry
            </summary>
            <param name="name">Display name</param>
            <param name="url">URL to navigate to</param>
            <param name="tag">Optional tag (used for example by saved searches)</param>
            <param name="imageResource">Themed resource id for node image</param>
            <param name="type">Node type</param>
            <returns>The new added FndNavigatorEntry</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Remove(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry)">
            <summary>
            Remove specified child navigator entry.
            </summary>
            <param name="child">Child navigator entry to remove</param>
            <returns>true if the child entry was removed, false otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Update(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Update navigator entry
            </summary>
            <param name="name">New name</param>
            <param name="url">New URL</param>
            <param name="tag">New tag</param>
            <param name="hidden">Hidden (true=hidden, false=visible)</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Copy(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry)">
            <summary>
             Copies the Entry and adds the new entry as a child the the New Parent 
            </summary>
            <param name="newParent">Target parent navigator entry</param>
            <returns>The new FndNavigatorEntry</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Hide">
            <summary>
            Hide this navigator entry
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Unhide">
            <summary>
            Show this navigator entry
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Reset">
            <summary>
            Reset this navigator entry to default (either from base profile
            or from programmers default)
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Move(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry)">
            <summary>
            Moves a child (to this entry) navigator entry to a new parent
            </summary>
            <param name="childEntry">Child entry to move</param>
            <param name="newParent">New parent for childEntry</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Reposition(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryInsertPosition)">
            <summary>
            Moves a navigator entry to a new position located after or before a sibling.
            </summary>
            <param name="sibling">New closest sibling</param>
            <param name="position">Indicates if the entrty should be before or after the sibling</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.SortChildrenAlphabetically(System.Boolean)">
            <summary>
            Sort the child entries after Display Name
            </summary>
            <param name="keepFoldersTogether">if true all folders are placed before other nodes</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.TotalUrl">
            <summary>
            Dynamically calculated URL. In most cases just the value of the Url 
            property.
            </summary>
            <returns>The Url to navigate to when the node is clicked</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.PObjects">
            <summary>
            Gets the Presentation Objects Collection
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Reports">
            <summary>
            Gets the Reports Collection
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Name">
            <summary>
            Gets the name (including translation constant)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.NameOverriden">
            <summary>
            True if renamed node
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.TranslatedText">
            <summary>
            The translation (fetched and set when the node is created)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.DisplayName">
            <summary>
            Get the name to display to the enduser
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Key">
            <summary>
            Gets the unique key that identifies an FndNavigatorEntry instance in peristent storage.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.EntryModule">
            <summary>
            Gets the module where the navigator entry belongs (not the object it refers)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.ImageResource">
            <summary>
            Gets the themed image resource id for the icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.SelectedImageResource">
            <summary>
            Gets the themed image resource id for the icon when selected
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Url">
            <summary>
            Get the URL to navigate to
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Tag">
            <summary>
            Extra data used for navigation
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Description">
            <summary>
            Gets the descriptive text.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Type">
            <summary>
            Gets the type of FndNavigatorEntry.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Hidden">
            <summary>
            Gets hidden flag. True = FndNavigatorEntry is hidden
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Highlighted">
            <summary>
            Gets or sets if the navigator entry should be highlighted in the UI
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Granted">
            <summary>
            Gets granted flag. True = FndNavigatorEntry is accessable for the enduser
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Status">
            <summary>
            Gets the override status of FndNavigatorEntry
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.HiddenByParent">
            <summary>
            Gets information whenever node located in a tree branch which is hidden
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.ChildEntries">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.Parent">
            <summary>
            Gets the parent FndNavigatorEntry
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry.ChildList">
            <summary>
            Gets the list of child FndNavigatorEntry
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryStatus">
            <summary>
            Defines status for a FndNavigatorEntry
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryStatus.Default">
            <summary>
            All properties in entry are on their default values
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryStatus.Overriden">
            <summary>
            Navigator entry exists in base profile or programmers default 
            and one or more properties are updated in personal profile
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryStatus.Custom">
            <summary>
            Navigator entry defined in personal profile
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryStatus.OverridenInBase">
            <summary>
            Entry is overriden in base profile
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType">
            <summary>
            Type of navigator entry
            </summary>
            <remarks>
            There are several values that probably not will be valid in the future.
            Some are marked Obsolete
            </remarks>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.StartProgram">
            <summary>
            Start an external program
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.ProcessModel">
            <summary>
            Reference to process model
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.Report">
            <summary>
            Reference to report (bring up report order dialog)
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.ExecuteSAL">
            <summary>
            Execute SAL
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.ScheduledTask">
            <summary>
            Scheduled task
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.Task">
            <summary>
            Task
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.Url">
            <summary>
            Navigate to URL
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.DialogBox">
            <summary>
            Node is an ApplicationForms dialog box
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.FormWindow">
            <summary>
            Node is an ApplicationForms form window
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.TableWindow">
            <summary>
            Node is an ApplicationForms table window
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.CustomFormWindow">
            <summary>
            Node is a custom ApplicationForms form window
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.CustomTableWindow">
            <summary>
            Node is a custom ApplicationForms table window
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.QuickReport">
            <summary>
            Node executes a quickreport
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.Feature">
            <summary>
            Node is a feature
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.Explore">
            <summary>
            Node URL is interpreted as name of FndExploreUIProvider
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.Folder">
            <summary>
            Folder node
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.Selection">
            <summary>
            Node contains a selection
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType.SavedSearch">
            <summary>
            Node contains a saved search
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryMeta">
             <summary>
             Entry meta information. This class holds data that describes a FndNavigatorEntry base information.
             This class can be used by VirtualTree providers to enable drag of Explore items to the NavigatorTree and NavigatorBox.
             
             <remarks>
             By default VirtualTrees that implements IFndVirtualTreeDragDropHandler can only provide drag and drop functionality within the
             bounds of the virtual tree. It is not possible and should not be possible to drag an explore node in a general navigator location.
             The reason for this is that in most cases a static navigator node linked to dynamic data would not make sense. 
             
             However, in cases where the explored data can be converted to static types by the explore node provider; e.g.; Expore Quick Reports will enumerate available 
             quick reports and the provider can convert such an explore node into a QuickReport navigator item. 
             
             To provide support for drag and drop nodes outside the virtual tree the explore provider needs to add an instance of FndNavigatorEntryMeta to DragEventArgs.Data.
             </remarks>
             <example>
             	#region IFndVirtualTreeDragDropHandler Implementation
            
            		void IFndVirtualTreeDragDropHandler.DragDrop(FndVirtualTreeItem dragItem, FndVirtualTreeItem targetItem, object sender, System.Windows.Forms.DragEventArgs e)
            		{
            			// No drag drop support within the virtual tree 
            		}
            
            		void IFndVirtualTreeDragDropHandler.DragOver(FndVirtualTreeItem dragItem, FndVirtualTreeItem targetItem, object sender, System.Windows.Forms.DragEventArgs e)
            		{
            			// When a QuickReport is first draged we add FndNavigatorEntryMeta to the draged data 
            			// for the item to be droppable in the main navigator.
            			if (!e.Data.GetDataPresent(typeof(FndNavigatorEntryMeta)))
            			{
            				FndNavigatorEntryMeta entryMeta = new FndNavigatorEntryMeta(dragItem.Text, string.Format("ifsrep:qr.{0}", (string)dragItem.Tag), ICON_QUICK_REPORT, FndNavigatorEntryType.QuickReport);
            				e.Data.SetData(entryMeta);
            			}
            
            			// We don't allow drop in this tree structure; i.e.; no administration editing of categories etc
            			e.Effect = System.Windows.Forms.DragDropEffects.None;
            		}
            
            		#endregion
            
             </example>
             </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryMeta.#ctor(System.String,System.String,System.String,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType)">
            <summary>
            Create and initiate an instance of FndNavigatorEntryMeta
            </summary>
            <param name="name">Name (including translation constant)</param>
            <param name="url">URL to navigate to</param>
            <param name="imageResource">Themed image resource id for the icon</param>
            <param name="type">Type of FndNavigatorEntry</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryMeta.ParseDragEventDataURLStream(System.Windows.Forms.DragEventArgs)">
            <summary>
            Utility method that will extract a UniformResourceLocator from drag drop event args.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryMeta.Name">
            <summary>
            Gets the name (including translation constant)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryMeta.Url">
            <summary>
            Gets the URL to navigate to
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryMeta.ImageResource">
            <summary>
            Gets the themed image resource id for the icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryMeta.Type">
            <summary>
            Gets the type of FndNavigatorEntry.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndShortcutItem">
            <summary>
            An FndShortcutItem represents one item in the shortcut box
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndShortcutItem.Move(System.Int32,System.Int32)">
            <summary>
            Move a shortcut item to a new position in the shortcut items box
            </summary>
            <param name="newIndex">New position for the item</param>
            <param name="oldIndex">Position of the item to move</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndShortcutItem.Update(System.String,System.String,System.String)">
            <summary>
            Update shortcut item values
            </summary>
            <param name="displayName">New displayed name</param>
            <param name="imageResource">New themed image resource id</param>
            <param name="url">New URL</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndShortcutItem.Update(System.String,System.String,System.Drawing.Color,System.String)">
            <summary>
            Update shortcut item values
            </summary>
            <param name="displayName">New displayed name</param>
            <param name="imageResource">New themed image resource id</param>
            <param name="color">The color to apply to the icon</param>
            <param name="url">New URL</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndShortcutItem.Key">
            <summary>
            Gets the key that uniquely identifies a FndShortcutItem in storage
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndShortcutItem.DisplayName">
            <summary>
            Gets the displayed name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndShortcutItem.Url">
            <summary>
            Gets the URL
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndShortcutItem.ImageResource">
            <summary>
            Gets the themed image resource id
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndShortcutItem.Coloring">
            <summary>
            Gets the coloring of the icon
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndShortcutItem.UseNavigatorNodeTranslation">
            <summary>
            Gets the flag indicating if this node is to get its display name from the connected (key reference) navigator node
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndShortcutItem.Ordinal">
            <summary>
            Gets the ordinal of the shortcut item in shortcutbox
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndShortcutItem.Hidden">
            <summary>
            Gets whenever shortcut item is hidden (true=hidden)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndShortcutItem.UseTranslatedText">
            <summary>
            Gets the flag indicating if this node is to get its display name from the TranslatedText property
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndShortcutItem.TranslatedText">
            <summary>
            Gets or sets the translated text of the shortcut item in shortcutbox
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndShortcutItem.Type">
            <summary>
            Gets the type of shortcut item in shortcutbox
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService">
            <summary>
            IFndInfoServicesService gives public methods for report ordering and printing
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService.ReportExecute(System.Double@,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Executes a report. It also does any necessary distribution if the list is supplied.
            </summary>
            <param name="resultKey">Generated ResultKey in Archive</param>
            <param name="reportID">report id for report to execute.</param>
            <param name="reportParameters">Parameters passed to the report</param>
            <param name="distributionList">list of users and groups</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService.ReportPrint(Ifs.Fnd.Explorer.Interfaces.ReportPrintInstance,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Prints a report in archive
            </summary>
            <param name="report">ReportPrintInstance instance containing info on the report to print </param>
            <param name="parameters">Print specific attributes for output control.</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService.ReportListPrint(System.Collections.Generic.List{Ifs.Fnd.Explorer.Interfaces.ReportPrintInstance},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            print a list of Reports
            </summary>
            <param name="reports">a list of ReportPrintInstance</param>
            <param name="printParameters">Print specific attributes for output control.</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService.ReportExecuteAndPrint(System.Double@,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method performs both ReportExecute and ReportPrint in one call. ReportPrint is only called if ReportExecute returns TRUE
            </summary>
            <param name="resultKey">Generated ResultKey in Archive</param>
            <param name="reportID">Report id</param>
            <param name="reportParameters">Parameters passed to the report.</param>
            <param name="distributionList">List of users and groups</param>
            <param name="printParameters">Print specific attributes</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService.ReportOrderDialogOpen(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method opens the Report Order dialog.
            </summary>
            <param name="reportID">report id</param>
            <param name="reportParameters">Parameters passed to the report</param>
            <param name="distributionList">List of users and groups</param>
            <param name="printParameters">Print specific attributes</param>
            <returns>true if success</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService.ReportOrderDialogOpenEmpty">
            <summary>
            This method opens the Report Order dialog empty, simply by assigning NULL values to all parameters in ReportOrderDialogOpen().
            </summary>
            <returns>true if success</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService.GetQRParameters(System.String,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Fetch all parameters to be sent in the URL for SQL quick report viewer 
            </summary>
            <param name="quickReportId"></param>
            <param name="reportParams"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService.ExecuteQuickReport(System.Double,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64)">
            <summary>
            Executes a Quick Report and returns the created dataset.
            </summary>
            <param name="quickReportId">Quick Report ID</param>
            <param name="reportParameters">Parameters with optional supplied values passed to the report</param>
            <param name="numberOfRecords">Max number of returned rows, 0 means all</param>
            <returns>The resulting table with data or null if the query doesn't return any rows</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService.ExecuteAndViewQuickReport(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Executes a Quick Report and show the returned result in the Quick report viewer.
            </summary>
            <param name="quickReportId">Quick Report ID</param>
            <param name="reportParameters">Parameters with optional supplied values passed to the report</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService.PrintJobDialogOpen(System.Double)">
            <summary>
            Open the print dialog with the reports in the print job		  
            </summary>
            <param name="printjobid">Print job id to load</param>
            <returns>true if operation is successful</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService.LoadPrintJob(System.Double)">
            <summary>
            Load the Print job
            </summary>
            <param name="printJobId">Print job id to load</param>
            <returns>true if the print job exists</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService.ExecuteAndViewCrystalQuickReport(System.Double)">
            <summary>
            Execute And View Crystal-Quick Report
            </summary>
            <param name="quickReportId">Quick report Id</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService.ExecuteAndViewCrystalQuickReport(System.Double,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Execute And View Crystal-Quick Report with given report parameters
            </summary>
            <param name="quickReportId">Quick report Id</param>
            <param name="reportParameters">Report parameters</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService.GetReportSchedulingMethodId">
            <summary>
            Return the Report Scheduling Method ID (name) 
            </summary>
            <returns>Report Scheduling Method ID</returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService2">
            <summary>
            This interface gives public method required for render Excel document
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesService2.RenderExcelDocument(System.String)">
            <summary>
            Executes a quick report and render Excel document.
            </summary>
            <param name="quickReportId">Quick Report ID</param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesManager">
            <summary>
            This interface gives public methods required for obtaining report information 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesManager.GetAvailableReports">
            <summary>
            Gives a dictionary instance containing the report-id's and report titles available for the current user
            </summary>
            <returns>dictionary containing available reports</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesManager.IsReportAvailable(System.String)">
            <summary>
            Specify a given report is available for the current user
            </summary>
            <param name="reportId">Report id</param>
            <returns>true if report is available</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesManager.GetReportMode(System.String)">
            <summary>
            Returns Report Mode of given report
            </summary>
            <param name="reportId">Report id</param>
            <returns>Report Mode if a report exists with given reportId; null otherwise.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesManager.ValidateEditableParameters(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Validates editable parameters
            </summary>
            <param name="reportId">Report id</param>
            <param name="parameters">Parameters to be validated</param>        
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesManager.GetAvailableQuickReports">
            <summary>
            Gives a dictionary instance containing the quick report id's and descriptions available for the current user.
            </summary>
            <returns>Dictionary containing available Quick Reports.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesManager.GetSSRSHostUrl">
            <summary>
            Returns SSRS Host URL
            </summary>
            <returns>Returns SSRS host URL. </returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndInfoServicesManager.IsReportsForComponentAvailable(System.String)">
            <summary>
            Returns if the current user has any reports granted which belongs to the given component.
            </summary>
            <param name="componentName">Name of the component</param>
            <returns>True if at least one report belonging to the component is available for the current user</returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.ReportPrintInstance">
            <summary>
            A structure which should be used to pass infomation to the methods in IFndInfoServicesService
            this structure contains result key, layout and the language of the report to be printed
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.ReportPrintInstance.#ctor(System.Double,System.String,System.String)">
            <summary>
            creates an instance of the structure
            </summary>
            <param name="resultKey">result key of the report to print</param>
            <param name="layout">Layout id of the report which should be used to print. if this is not given default layout will be used</param>
            <param name="language">Language id of the report which should be used to print. if this is not given default Language will be used</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ReportPrintInstance.ResultKey">
            <summary>
            Return the ResultKey set for the print instance
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ReportPrintInstance.LayoutId">
            <summary>
            Return the Layout set for the print instance
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.ReportPrintInstance.LanguageCode">
            <summary>
            Return the Language set for the print instance
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IOrderReportPanel">
            <summary>
            Creates a Panal for the order report dialog
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IOrderReportPanel.FindParameterField(System.String)">
            <summary>
            Find report parameter field from the Report parameter panal.
            </summary>
            <param name="paramName">name of the parameter></param>
            <returns>IReportParamField control</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IOrderReportPanel.CreateWhereStatement(Ifs.Fnd.Explorer.Interfaces.FndClientSearch,Ifs.Fnd.Data.FndDataColumnCollection,System.Boolean)">
            <summary>
            Creates the where statement() this is used in LOV columns to create the correct where statement.
            </summary>
            <param name="clientSearch">client search instance</param>
            <param name="meta">data row</param>
            <param name="useBinds">useBinds</param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IReportParamField">
            <summary>
            Defines common properties for any report parameter field. 
            This also implements ISearchField and this new interface should be used to add any report specific functionality. 
            We should avoid adding any report specific functionality  in ISearchField
            </summary>s
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IReportParamField.ValidateField">
            <summary>
            Validates the entered value and displays an error if not valid.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndQuickReportExploreNode">
            <summary>
            Defines methods that are used to communicate with QuickReportExplore node 
            Framework is typically using this interface to refresh the explore node when reports are added and removed.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndQuickReportExploreNode.Refresh">
            <summary>
            Refresh the QuickReportExploreNode
            This implementation should refresh the whole explore tree
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndQuickReportExploreNode.RefreshPersonal">
            <summary>
            Refresh personal quick reports 
            this implementation only refresh the parts of the explore node that holds personal reports.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService">
            <summary>
            IFndNavigatorStorageService provides access to the navigator contents.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.SubscribeNavigatorEntryChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs})">
            <summary>
            Add callback subscription for changes of FndNavigatorEntry.
            This is very similar to an ordinary event, but an (normally) FndExplorer
            must be provided to do the callback on the correct thread.
            </summary>
            <param name="explorer">Explorer object to callback on correct thread</param>
            <param name="callback">Callback delegate</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.SubscribeShortcutItemChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs})">
            <summary>
            Add callback subscription for changes of FndShortcutItem.
            This is very similar to an ordinary event, but an (normally) FndExplorer
            must be provided to do the callback on the correct thread.
            </summary>
            <param name="explorer">Explorer object to callback on correct thread</param>
            <param name="callback">Callback delegate</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.UnsubscribeNavigatorEntryChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs})">
            <summary>
            Remove subscription for FndNavigatorEntry changes.
            </summary>
            <param name="explorer">Explorer object to callback on correct thread</param>
            <param name="callback">Callback delegate</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.UnsubscribeShortcutItemChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs})">
            <summary>
            Remove subscription for FndShortcutItem changes.
            </summary>
            <param name="explorer">Explorer object to callback on correct thread</param>
            <param name="callback">Callback delegate</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.ResetNavigator">
            <summary>
            Reset complete navigator to it's default (remove all custom and overridden nodes)
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.ReloadNavigator">
            <summary>
            Reloads the complete navigator
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.AddEntry(System.String,System.String,System.String,System.String,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType)">
            <summary>
            Adds the given entry to the navigator. A dialog pops up to select the parent node.
            </summary>
            <param name="name">Display name</param>
            <param name="url">URL to navigate to</param>
            <param name="imageResource">Themed resource id for node image</param>
            <param name="tag">Additional data if any (like saved search path)</param>
            <param name="type">Node type</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.GetEntry(System.String)">
            <summary>
            Finds an FndNavigatorEntry instance given it's unique public key. Hidden
            items are NOT returned
            </summary>
            <param name="key">Unique key for to look for</param>
            <returns>FndNavigatorEntry instance or null if not found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.GetEntry(System.String,System.Boolean)">
            <summary>
            Finds an FndNavigatorEntry instance given it's unique public key.
            </summary>
            <param name="key">Unique key for to look for</param>
            <param name="includeNonVisible">true = hidden items can be returned</param>
            <returns>FndNavigatorEntry instance or null if not found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.GetEntryByTag(System.String,System.Boolean)">
            <summary>
            Finds an FndNavigatorEntry instance given it's unique tag
            </summary>
            <param name="tag">Unique tag for to look for</param>
            <param name="includeNonVisible">true = hidden items can be returned</param>
            <returns>FndNavigatorEntry instance or null if not found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.GetFirstHiddenParent(System.String)">
            <summary>
            Finds the topmost hidden parent located above the FndNavigatorEntry 
            which has the supplied key.
            </summary>
            <param name="key">Unique key for to look for</param>
            <returns>FndNavigatorEntry instance or null if not found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.GetEntry(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Finds an FndNavigatorEntry instance given an URL. Case sensitive.
            </summary>
            <param name="urlAddress">URL to look for</param>
            <returns>FndNavigatorEntry instance which matches the URL or null if none is found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.GetEntry(Ifs.Fnd.Core.FndUrlAddress,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryMatchType,System.Boolean)">
            <summary>
            Finds an FndNavigatorEntry instance given an URL. Case sensitive.
            </summary>
            <param name="urlAddress">URL to look for</param>
            <param name="matchType">Uses different patterns for searching, such as if the complete url including parameters matches or parts or only the base adress. See FndNavigatorEntryMatchType for more info.</param>
            <param name="includeHiddenEntries">Includes hidden entries if set to true.</param>
            <returns>FndNavigatorEntry instance which matches the URL or null if none is found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.GetEntry(Ifs.Fnd.Core.FndUrlAddress,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryMatchType,System.Boolean,System.Boolean)">
            <summary>
            Finds an FndNavigatorEntry instance given an URL. Case sensitive.
            </summary>
            <param name="urlAddress">URL to look for</param>
            <param name="matchType">Uses different patterns for searching, such as if the complete url including parameters matches or parts or only the base adress. See FndNavigatorEntryMatchType for more info.</param>
            <param name="includeHiddenEntries">Includes hidden entries if set to true.</param>
            <param name="givePriorityToVisibleEntry">If set to true, Select visible entry, even when hidden entries are included</param>
            <returns>FndNavigatorEntry instance which matches the URL or null if none is found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.IsEntryGranted(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry)">
            <summary>
            Checks if an entry is granted or not
            </summary>
            <param name="entry">The FndNavigatorEntry to check grants on</param>
            <returns>True if entry is granted, otherwise false</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.ResetShortcuts">
            <summary>
            Reset the Shortcut panel to default
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.Delete(Ifs.Fnd.Explorer.Interfaces.FndShortcutItem)">
            <summary>
            Delete one FndShortcutItem from shortcut panel
            </summary>
            <param name="shortcutItem">FndShortcutItem item to delete</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.Add(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,System.String)">
            <summary>
            Add one FndShortcutItem to shortcut panel based on FndNavigatorEntry
            </summary>
            <param name="entry">FndNavigatorEntry that shortcut item should reference</param>
            <param name="imageResource">Themed image resource id for the icon. Should be from "USERITEMS/"</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.Add(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,System.String,System.Drawing.Color)">
            <summary>
            Add one FndShortcutItem to shortcut panel based on FndNavigatorEntry
            </summary>
            <param name="entry">FndNavigatorEntry that shortcut item should reference</param>
            <param name="imageResource">Themed image resource id for the icon. Should be from "USERITEMS/"</param>
            <param name="coloring">Color to apply to the icon. Color.Empty for no coloring</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.Add(System.String,System.String,System.String)">
            <summary>
            Add one custom FndShortcutItem to shortcut panel
            </summary>
            <param name="displayName">Display name to show</param>
            <param name="url">URL to navigate to when clicked</param>
            <param name="imageResource">Themed image resource id for the icon. Should be from "USERITEMS/". If empty a default will be added</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.Add(System.String,System.String,System.String,System.Drawing.Color)">
            <summary>
            Add one custom FndShortcutItem to shortcut panel
            </summary>
            <param name="displayName">Display name to show</param>
            <param name="url">URL to navigate to when clicked</param>
            <param name="imageResource">Themed image resource id for the icon. Should be from "USERITEMS/". If empty a default will be added</param>
            <param name="coloring">Color to apply to the icon. Color.Empty for no coloring</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.Insert(System.Int32,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry)">
            <summary>
            Add one FndShortcutItem to shortcut panel based on FndNavigatorEntry at a
            specifed index
            </summary>
            <param name="index">Index of where FndShortcutItem should be inserted. Use -1 for adding at the end.</param>
            <param name="entry">FndNavigatorEntry that shortcut item should reference</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.Insert(System.Int32,System.String,System.String,System.String)">
            <summary>
            Add one custom FndShortcutItem at a specific index.
            </summary>
            <param name="index">Index for the new shortcut. Use -1 for adding at the end.</param>
            <param name="displayName">Display name to show</param>
            <param name="url">URL to navigate to when clicked</param>
            <param name="imageResource">Themed image resource id for the icon. Should be from "USERITEMS/". If empty a default will be added</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.Move(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry)">
            <summary>
            Moves an FndNavigatorEntry to a new parent
            </summary>
            <param name="movedEntry">FndNavigatorEntry to move</param>
            <param name="newParent">New parent for the movedEntry</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.NavigatorRoot">
            <summary>
            Gets the virtual root entry for the navigator
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.SelectedEntry">
            <summary>
            Gets the current selected navigator entry (selected node)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.NavigatorEntries">
            <summary>
            Gets the FndNavigatorEntry list for the child FndNavigatorEntry under NavigatorRoot
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorStorageService.ShortcutItems">
            <summary>
            Gets the FndShortcutItem list of all FndShortcutItem user has
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorTranslationService">
            <summary>
            IFndNavigatorTranslationService provide funtionality that makes it possible to translate the custom items in the navigator. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorTranslationService.RegisterCustomNodeTranslator(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryType,Ifs.Fnd.Explorer.Interfaces.IFndNavigatorTranslationProvider)">
            <summary>
            Registers a translation provider for custom navigator items of given entry type. 
            </summary>
            <param name="entryType">The entry type to translate</param>
            <param name="translationProvider">The object implementing translation support for the entry type</param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorTranslationProvider">
            <summary>
            IFndNavigatorTranslationProvider provide translations for custom items in the navigator.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorTranslationProvider.NavigatorEntryGetTranslatedText(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,System.String@)">
            <summary>
            Gives a translation for a navigator entry.
            </summary>
            <param name="entry"></param>
            <param name="translatedText"></param>
            <returns>true if translated otherwise false</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndNavigatorTranslationProvider.ShortcutItemGetTranslatedText(Ifs.Fnd.Explorer.Interfaces.FndShortcutItem,System.String@)">
            <summary>
            Gives a translation for a shortcut item.
            </summary>
            <param name="item"></param>
            <param name="translatedText"></param>
            <returns></returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryMatchType">
            <summary>
            Type of address matching used in the GetEntry method on IFndNavigatorStorageService
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryMatchType.Exact">
            <summary>
            The url address must be an an exact match
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryMatchType.Partial">
            <summary>
            Part of the url address matches. 
            Ie. ifswin:Ifs.Foo.Bar?param1=x can return an entry 
            such as ifswin:Ifs.Foo.Bar?param1=x&amp;param2=y or vice versa. 
            However, ifswin:Ifs.Foo.Bar?param1=x will not return an entry such as ifswin:Ifs.Foo.Bar?param2=y.
            The logic is searchedUrl.Contains(repositoryUrl) || repositoryUrl.Contains(searchedUrl)
            So only the whole urls are matched.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryMatchType.Base">
            <summary>
            The base url address matches. Ie. ifswin:Ifs.Foo.Bar?param1=x can return an entry 
            such as ifswin:Ifs.Foo.Bar or ifswin:Ifs.Foo.Bar?param1=y
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryMatchType.TryAll">
            <summary>
            Try to match using Exact, then Partial and finally Base matching.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryInsertPosition">
            <summary>
            Position where to insert a new entry relative anothor entry
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryInsertPosition.Before">
            <summary>
            Insert before existing entry
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryInsertPosition.After">
            <summary>
            Insert after existing entry
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs">
            <summary>
            FndNavigatorEntryEventArgs contains change information for 
            the SubscribeNavigatorEntryChanged callback
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.#ctor(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorChangeType)">
            <summary>
            Creates a new FndNavigatorEntryEventArgs instance for whole navigator
            </summary>
            <param name="changeType">Type of change valid for all Navigator Entries</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.#ctor(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorChangeType,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry)">
            <summary>
            Creates a new FndNavigatorEntryEventArgs instance for a specific FndNavigatorEntry
            </summary>
            <param name="changeType">Type of change</param>
            <param name="navigatorEntry">Affected FndNavigatorEntry</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.#ctor(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorChangeType,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry)">
            <summary>
            Creates a new FndNavigatorEntryEventArgs instance for a specific FndNavigatorEntry
            </summary>
            <param name="changeType">Type of change</param>
            <param name="navigatorEntry">Affected FndNavigatorEntry</param>
            <param name="parentEntry">Parent entry for the changed FndNavigatorEntry</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.#ctor(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorChangeType,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry)">
            <summary>
            Creates a new FndNavigatorEntryEventArgs instance for a specific FndNavigatorEntry
            </summary>
            <param name="changeType">Type of change</param>
            <param name="navigatorEntry">Affected FndNavigatorEntry</param>
            <param name="parentEntry">Parent entry for the changed FndNavigatorEntry</param>
            <param name="originalNavigatorEntry">Navigator entry before the change</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.#ctor(Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorChangeType,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryInsertPosition)">
            <summary>
            Creates a new FndNavigatorEntryEventArgs instance for a specific FndNavigatorEntry
            </summary>
            <param name="changeType">Type of change</param>
            <param name="navigatorEntry">Affected FndNavigatorEntry</param>
            <param name="parentEntry">Parent entry for the changed FndNavigatorEntry</param>
            <param name="originalNavigatorEntry">Navigator entry before the change</param>
            <param name="sibling">New closest navigator entry.</param>
            <param name="position">Position relative to the sibling entry</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.NavigatorEntry">
            <summary>
            Gets the affected FndNavigatorEntry
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.ParentEntry">
            <summary>
            Gets the parent FndNavigatorEntry for the affected FndNavigatorEntry
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.OriginalNavigatorEntry">
            <summary>
            Gets the original values of the affected FndNavigatorEntry
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.ChangeType">
            <summary>
            Gets the type of change
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the event should be canceled.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.EntryPosition">
            <summary>
            Gets or sets an EntryPosition that can be relative another NavigatorEntry
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorChangeType">
            <summary>
            Type of change for the FndNavigatorEntry
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorChangeType.EntryAdded">
            <summary>
            Navigator entry was added
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorChangeType.EntryChanged">
            <summary>
            One or more properties on navigator entry was changed
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorChangeType.EntryChanging">
            <summary>
            One or more properties on navigator entry is about to be changed
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorChangeType.EntryRemoved">
            <summary>
            Navigator entry was deleted
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorChangeType.EntryMoved">
            <summary>
            Navigator entry was moved to new location (new parent or new index on the current parent)
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorChangeType.Reset">
            <summary>
            Navigator entry is reset to it's default values.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorChangeType.Reload">
            <summary>
            Navigator entry is reloaded.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorChangeType.CopyingEntry">
            <summary>
            Navigator entry is being copied.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorChangeType.ChildrenRearranged">
            <summary>
            Child Entries are rearranged
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorEntryPosition">
            <summary>
            Position of the Navigator Entry
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorEntryPosition.SiblingEntry">
            <summary>
            Gets or sets the closest entry
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntryEventArgs.FndNavigatorEntryPosition.Position">
            <summary>
            Gets or sets the position relative to the Sibling Entry
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs">
            <summary>
            FndShortcutItemEventArgs contains change information for 
            the SubscribeShortcutItemChanged callback
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.#ctor(Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.FndShortcutItemChangeType)">
            <summary>
            Creates a new FndShortcutItemEventArgs instance for whole shortcut items box
            </summary>
            <param name="changeType">Type of change valid for all Navigator Entries</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.#ctor(Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.FndShortcutItemChangeType,Ifs.Fnd.Explorer.Interfaces.FndShortcutItem)">
            <summary>
            Creates a new FndShortcutItemEventArgs instance for a specific FndNavigatorEntry
            </summary>
            <param name="changeType">Type of change</param>
            <param name="shortcutItem">Affected FndShortcutItem</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.#ctor(Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.FndShortcutItemChangeType,System.Int32,Ifs.Fnd.Explorer.Interfaces.FndShortcutItem)">
            <summary>
            Creates a new FndShortcutItemEventArgs instance for a specific FndNavigatorEntry
            </summary>
            <param name="changeType">Type of change</param>
            <param name="newIndex">New index location for the shortcut item</param>
            <param name="shortcutItem">Affected FndShortcutItem</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.#ctor(Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.FndShortcutItemChangeType,System.Int32,System.Int32,Ifs.Fnd.Explorer.Interfaces.FndShortcutItem)">
            <summary>
            Creates a new FndShortcutItemEventArgs instance for a specific FndNavigatorEntry
            </summary>
            <param name="changeType">Type of change</param>
            <param name="newIndex">New index location for the shortcut item</param>
            <param name="oldIndex">Old index location for the shortcut item</param>
            <param name="shortcutItem">Affected FndShortcutItem</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.ShortcutItem">
            <summary>
            Gets the affected FndShortcutItem
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.NewIndex">
            <summary>
            Gets the new index location for the shortcut item
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.OldIndex">
            <summary>
            Gets the old index location for the shortcut item
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.ChangeType">
            <summary>
            Get the type of change
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.FndShortcutItemChangeType">
            <summary>
            Type of change for the FndShortcutItem
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.FndShortcutItemChangeType.ItemAdded">
            <summary>
            Shortcut Item was added
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.FndShortcutItemChangeType.ItemChanged">
            <summary>
            One or more properties on Shortcut Item  was changed
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.FndShortcutItemChangeType.ItemRemoved">
            <summary>
            Shortcut Item  was deleted
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.FndShortcutItemChangeType.ItemMoved">
            <summary>
            Shortcut Item  was moved to new index
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndShortcutItemEventArgs.FndShortcutItemChangeType.Reset">
            <summary>
            Shortcut Item is reset to it's default values.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.Properties.Resources.GlobalSavedSearchSuffix">
            <summary>
              Looks up a localized string similar to  (global).
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.Properties.Resources.SavedSearchNotFound">
            <summary>
              Looks up a localized string similar to Saved search does not exist anymore. Remove from Navigator?.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.CountHitsDelegate">
            <summary>
            Represents the method that will count the number of hits for a given search condition.
            </summary>
            <param name="clientSearch">The client search to return the hit count for.</param>
            <returns>Returns the hit count</returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.PublishedConditionDelegate">
            <summary>
            Represents the method that will return a condition that can be stored and invoked later.
            For APF pages, this returns the SQL WHERE clause and the view name etc.
            For Features, this returns the serialized condition row and the activity handler etc.
            </summary>
            <param name="clientSearch">The client search to return the published condition for.</param>
            <returns>Returns the condition (SQL WHERE and view or condition row and activity handler name) so that it can be saved and invoked later.</returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndSearchable">
            <summary>
            Privides functionality to a feature to be able search.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndSearchable.SearchEntityChanged">
            <summary>
            Raised when search entity is changed.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchable.SearchEntity">
            <summary>
            Gets the meta model used for searching when this feature is activated. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchable.IsSearchable">
            <summary>
            Gets whether this feature supports search.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldPanel">
            <summary>
            A panel containing search fields
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldPanel.ClearAllSearchFields">
            <summary>
            Clear all search conditions entered
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldPanel.ConfigureSearch(Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Opens the ColumnSelectorDialog to configure the search panel
            </summary>
            <param name="explorer">The current Explorer</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldPanel.CreateCondition">
            <summary>
            Creates the search condition
            </summary>
            <returns>An FndClientSearch containing the search condition</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldPanel.LoadCondition(Ifs.Fnd.Explorer.Interfaces.FndClientSearch)">
            <summary>
            Loads a given condition to the search panel.
            </summary>
            <param name="condition">condition to be loaded</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldPanel.FindSearchField(System.String)">
            <summary>
            Finds a specific search field in the panel
            </summary>
            <param name="name">name of the field to find</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldPanel.FocusOnFirstField">
            <summary>
            Set focus on the first field
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldPanel.Changed">
            <summary>
            Raised when any search condition in the panel has changed
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldPanel.Source">
            <summary>
            The Search Source that the SearchFieldPanel serves
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldPanel.HasValue">
            <summary>
            Returns true if any field contain a value
            </summary>
            <returns>True if any field contain a value</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldPanel.Panel">
            <summary>
            Returns the container control hosting the search fields
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldPanel.CaseSensitive">
            <summary>
            Gets/Sets whether the query should be case sensitive.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldPanel.DataSourceName">
            <summary>
            Gets/Sets the data source name
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldFactory">
            <summary>
            A factory for creating search fields
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldFactory.CreateSearchField(Ifs.Fnd.Data.FndDataColumn,Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource)">
            <summary>
            Create a search field
            </summary>
            <param name="col">Meta data for the field</param>
            <param name="source">Search source</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldFactory.CreateWhereStatement(Ifs.Fnd.Explorer.Interfaces.FndClientSearch,Ifs.Fnd.Data.FndDataColumnCollection,System.Boolean)">
            <summary>
            Creates a where statement from the given Client Search
            </summary>
            <param name="clientSearch">Client Search containing the condition</param>
            <param name="meta">FndDataColumnCollection with search meta info.</param>
            <param name="useBinds">true if bind variables should be used for strings</param>
            <returns>Created where statement</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldFactory.CreateOrderByStatement(Ifs.Fnd.Explorer.Interfaces.FndClientSearch)">
            <summary>
            Creates order by statement from the given Client Search
            </summary>
            <param name="clientSearch">Client Search containing the condition</param>
            <returns>Created order by statement</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldFactory.CreateGroupByStatement(Ifs.Fnd.Explorer.Interfaces.FndClientSearch)">
            <summary>
            Creates group by statement from the given Client Search
            </summary>
            <param name="clientSearch">Client Search containing the condition</param>
            <returns>Created group by statement</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldFactory.GroupAndSumActionsEncode(Ifs.Fnd.Explorer.Interfaces.FndClientSearch)">
            <summary>
            Encodes the group and sum actions found in the FndClientSearch into a string attribute. 
            </summary>
            <param name="clientSearch">Client Search containing the condition</param>
            <returns>The group and sum actions, encoded into a string</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchFieldFactory.SupportCustomWhere">
            <summary>
            Gets whether the search field factory support custom where statements
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndClientSearch">
            <summary>
            FndClientSearch contains all search related data that is transported
            between search dialog (search pages) and feature. 
            Contains conditions, grouping, sorting etc.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.#ctor">
            <summary>
            Creates a new instance of FndClientSearch
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the serialization constructor.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.ZipAndSerializeBase64">
            <summary>
            Serialize current object to a base64 encoded zipped string
            </summary>
            <returns>Compressed string representation of the current FndClientSearch object</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.SerializeBase64">
            <summary>
            Serialize current object to a base64 encoded string
            </summary>
            <returns>String representation of the current FndClientSearch object</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.DeserializeBase64(System.String)">
            <summary>
            Deserialize from a base64 encdoded string
            </summary>
            <param name="s"></param>
            <returns>The deserialized FndClientSearch object</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.FromExternalSearch(System.String)">
            <summary>
            Converts an extern_search url to a client search
            </summary>
            <param name="externalSearch">The url encoded external search url</param>		
            <returns>Base64 encoded client search url</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Populates a System.Runtime.Serialization.SerializationInfo with the data
                needed to serialize the target object.		/// </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.CaseSensitive">
            <summary>
            indicates if the ClientSearch should be case sensitive
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.Condition">
            <summary>
            Gets or sets field based conditions
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.SearchKeywords">
            <summary>
            Gets or sets enterprise application search keywords.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.SavedSearchName">
            <summary>
            Gets or sets saved search name for this search.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.SearchMode">
            <summary>
            Gets or sets saved search mode used in search dialog for this search.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.SearchKeywordColumnName">
            <summary>
            Gets or sets enterprise application search keyword column name.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.GroupingColumns">
            <summary>
            Gets a list of columns used to group query
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.SummarizeActions">
            <summary>
            Gets the list of summarize actions
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.SortColumns">
            <summary>
            Gets a list of colunms used for sorting. 
            First column has highes precendece
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.CustomWhereStatement">
            <summary>
            Gets a custom where statement to be injected directly into the generated SQL
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.CustomOrderByStatement">
            <summary>
            Gets/Sets a custom order by statement to be injected directly into the generated SQL
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndClientSearch.CustomGroupByStatement">
            <summary>
            Gets/Sets a custom group by statement to be injected directly into the generated SQL
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource">
            <summary>
            Provides functionality to a plugin to provide the ability to search and explore using the framework search/explore UI.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource.SearchExploreType">
            <summary>
            Gets the searchable/explorable view type. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource.SearchSourceDisplayName">
            <summary>
            Gets the display string shown in the search in combobox.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource.MetaDictionary">
            <summary>
            Gets the FndSearchExploreAttributeMeta.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource.ExploreCategories">
            <summary>
            Gets the ExploreCategories.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource.DefaultSearchColumns">
            <summary>
            Gets the search columns to show when no configuration data is present 
            in the profile.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource.ExploreResultFeatureUrl">
            <summary>
            Gets the default url of the feature to display the results, if not
            specified on the FndSearchExploreCategory.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource.SearchResultFeatureUrl">
            <summary>
            Gets the default url of the feature to display the results, if not
            specified on the FndSearchExploreCategory.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource.SearchFieldFactory">
            <summary>
            Factory for creating search fields
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource.Context">
            <summary>
            Current context
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource.EnableGroupSum">
            <summary>
            Gets/Sets whether the group and sum column should be enabled in the advanced search dialog
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndExploreUIProvider">
            <summary>
            An IFndExploreUIProvider is repsonsible for defining an explore tree
            For IFndSearchExploreSource a standard IFndExploreUIProvider is used.
            For custom usages implement IFndExploreUIProvider and register it into
            the IFndSearchExploreManager.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExploreUIProvider.Activate(Ifs.Fnd.Explorer.Interfaces.FndVirtualTree,System.String,System.String)">
            <summary>
            Initialized the source at a specified FndVirtualTree root
            </summary>
            <param name="root">Root node to build custom explore tree within</param>
            <param name="rootLabelName">Label name for the root.</param>
            <param name="key"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndExploreUIProvider.Refresh(Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem)">
            <summary>
            Called when the Refresh menu item is clicked on a explore tree node.
            </summary>
            <param name="node">Encapsulates the node that needs to be refreshed.</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExploreUIProvider.ActivityHandler">
            <summary>
            Gets the ActivityHandler used by this IFndExploreUIProvider.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndExploreUIProvider.DefaultNavigationTargetUrl">
            <summary>
            Gets the default navigation target. Used in startpage to perform a top level navigation
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndMapSourceManager">
            <summary>
            Provides an interface for map sources.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndMapSourceManager.RegisterMapSource(System.String,Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource)">
            <summary>
            Should be called by the application plugin providing the MapSourceManager to register it self.
            plugin will be rendered by the standard Explore UI provider
            </summary>
            <param name="sourceName">Name of the search source</param>
            <param name="source">An object instance that implements the ISearchExploreSource interface.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndMapSourceManager.GetMapSources">
            <summary>
            Enumeration of all map sources
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndMapSourceManager.FindMapSource(System.String)">
            <summary>
            Finds a map source of type IFndSearchExploreSource for a specified name
            </summary>
            <param name="mapSourceName">Name of the map source</param>
            <returns>IFndSearchExploreSource instance or null if not found</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndMapSourceManager.ShowSearchDialog(Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings,Ifs.Fnd.Explorer.Interfaces.FndClientSearch@)">
            <summary>
            Show the new search dialog.
            </summary>
            <param name="settings">Settings for the search dialog</param>
            <param name="clientSearch">ConditionRow containing all conditions, or null if DialogResult != OK</param>
            <returns></returns>	
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndMapSourceManager.ShowSearchDialog(Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings,Ifs.Fnd.Explorer.Interfaces.FndClientSearch@,Ifs.Fnd.Explorer.Interfaces.FndSearchInfo@)">
            <summary>
            Show the new search dialog.
            </summary>
            <param name="settings">Settings for the search dialog</param>
            <param name="clientSearch">ConditionRow containing all conditions, or null if DialogResult != OK</param>
            <param name="searchInfo">SearchInfo that returns the state of search dialog whent it was closed</param>
            <returns>DialogResult</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndMapSourceManager.GetSearchFieldPanel(Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Create and return a panel that will contain the search fields
            </summary>
            <returns>Panel</returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreManager">
            <summary>
            Provides an interface to register a SearchExploreSource.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreManager.RegisterSearchExploreSource(System.String,Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource)">
            <summary>
            Should be called by the application plugin providing the SearchExplorerSource to register it self.
            plugin will be rendered by the standard Explore UI provider
            </summary>
            <param name="sourceName">Name of the search source</param>
            <param name="source">An object instance that implements the ISearchExploreSource interface.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreManager.UnregisterSearchExploreSource(System.String)">
            <summary>
            Removes a search explore source previously registered via RegisterSearchExploreSource.
            If given shource has not been registered, this method returns with no effect.
            </summary>
            <param name="sourceName">Name of the search source to be unregistered</param>        
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreManager.CreateApplicationFormsSearchExploreSource(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Creates a SearchExploreSource.
            </summary>
            <param name="row">row to be used for the SearchSource</param>
            <returns>Created SearchSource</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreManager.CreateStandardSearchExploreSource(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Creates a SearchExploreSource.
            </summary>
            <param name="row">row to be used for the SearchSource</param>
            <returns>Created SearchSource</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreManager.RegisterCustomExploreUIProvider(System.String,Ifs.Fnd.Explorer.Interfaces.IFndExploreUIProvider)">
            <summary>
            Should be called by the application plugin providing the SearchExplorerSource to register it self.
            plugin will be rendered by a custom Explore UI provider
            </summary>
            <param name="entity">Entity used as registration key</param>
            <param name="customUIProvider">Custom Explore UI provider to render the explore source</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreManager.ShowSearchDialog(Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings,Ifs.Fnd.Explorer.Interfaces.FndClientSearch@)">
            <summary>
            Show the new search dialog.
            </summary>
            <param name="settings">Settings for the search dialog</param>
            <param name="clientSearch">ConditionRow containing all conditions, or null if DialogResult != OK</param>
            <returns></returns>	
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreManager.ShowSearchDialog(Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings,Ifs.Fnd.Explorer.Interfaces.FndClientSearch@,Ifs.Fnd.Explorer.Interfaces.FndSearchInfo@,System.Windows.Forms.Form)">
            <summary>
            Show the new search dialog.
            </summary>
            <param name="settings">Settings for the search dialog</param>
            <param name="clientSearch">ConditionRow containing all conditions, or null if DialogResult != OK</param>
            <param name="searchInfo">SearchInfo that returns the state of search dialog whent it was closed</param>
            <param name="owner">Sets the Owner property of the search dialog</param>
            <returns>DialogResult</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreManager.GetSearchFieldPanel(Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Create and return a panel that will contain the search fields
            </summary>
            <returns>Panel</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreManager.GetSearchSources">
            <summary>
            Enumeration of all search sources
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreManager.GetSelectedSearchSources">
            <summary>
            Enumeration of selected search sources (from profile)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreManager.ShowResult(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,System.Boolean,Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource,Ifs.Fnd.Data.FndDataRow,System.String)">
            <summary>
            Performs search by navigating to the correct feature with correct
            search condition set in the URL parameters.
            </summary>
            <param name="explorer">Explorer object which hosts the UI</param>
            <param name="newWindow">Open result in a new window</param>
            <param name="source">Search source to use</param>
            <param name="condition">Search condition for Search Source</param>
            <param name="appSearch">Search criteria for Search Domains</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreManager.ShowResult(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,System.Boolean,Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource,Ifs.Fnd.Explorer.Interfaces.FndClientSearch)">
            <summary>
            Performs search by navigating to the correct feature with correct
            search condition set in the URL parameters.
            </summary>
            <param name="explorer">Explorer object which hosts the UI</param>
            <param name="newWindow">Open result in a new window</param>
            <param name="source">Search source to use</param>
            <param name="clientCondition">Client Condition for Search</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreManager.FindSource(System.String)">
            <summary>
            Finds a IFndSearchExploreSource for a specified name
            </summary>
            <param name="sourceName">Name of the search source</param>
            <returns>IFndSearchExploreSource instance or null if not found</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreManager.ExploreUIProviders">
            <summary>
            Gets a collection of all registered Explore UI providers
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager">
            <summary>
            Encapsulates the functionality for saved searches
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.RemoveSearch(System.String,System.String)">
            <summary>
            Removes the given saved query from the profile.
            </summary>
            <param name="name">Name of the query</param>
            <param name="datasourceName">Name of the form or entity</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.LoadSavedSearch(Ifs.Fnd.Explorer.Interfaces.SavedSearch)">
            <summary>
            Loads a FndClientSearch object that was saved by the Search dialog as a Saved Search
            </summary>
            <param name="savedSearch">The Saved Search to load</param>
            <returns>A FndClientSearch object, holding the actual condition that is stored for the Saved Search</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.HasPreviousSeach(System.String,Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Gets whether the given source has a previous search saved
            </summary>
            <param name="sourceName">Source name</param>
            <param name="explorer">Explorer instance to use</param>
            <returns>true if previous search exists</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.LoadPreviousSearch(System.String,Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Loads the previous search if there's any for the given source.
            </summary>
            <param name="sourceName">Source name</param>
            <param name="explorer">Explorer instance to use</param>
            <returns>Previous search</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.SavePreviousSearch(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,Ifs.Fnd.Explorer.Interfaces.FndClientSearch,System.String,System.String)">
            <summary>
            Saves the given query as the previous search for the given data source.
            </summary>
            <param name="explorer">calling explorer</param>
            <param name="clientSearch">FndClientSearch to be saved</param>
            <param name="mode">Search mode</param>
            <param name="dataSourceName">Name of the data source</param>
            <returns>Returns true if the save operation was successful</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.LoadSavedSearch(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name">Name of the saved search</param>
            <param name="sourceName">Name of the datasource or entity</param>
            <returns>SavedSearch</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.ListSearches(System.String)">
            <summary>
            Gets a List of query names saved for the given entity and data source.
            </summary>
            <param name="dataSourceName">Datasource name</param>
            <returns>List of names of the queries matching given filter</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.ListSavedSearchesForEntity(System.String,Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Gets a List of searches saved for the given entity.
            </summary>
            <param name="entity">Name of the entity</param>
            <param name="explorer">Explorer instance to use</param>
            <returns>List of saved searches</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.ListSavedSearchesForDataSource(System.String,Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Gets a List of searches saved for the given data source.
            </summary>
            <param name="dataSourceName">Name of the data source</param>
            <param name="explorer">Explorer instance to use</param>
            <returns>List of saved searches</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.ListAllSearches">
            <summary>
            Gets a list of all saved searches.
            </summary>
            <returns>list of saved searches</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.SubscribeSavedSearchesChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{System.EventArgs})">
            <summary>
            Subscribe to Saved Searches changed event
            </summary>
            <param name="explorer"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.UnsubscribeSavedSearchesChanged(System.ComponentModel.ISynchronizeInvoke,System.EventHandler{System.EventArgs})">
            <summary>
            Unsubsribe from Saved Searches changed event
            </summary>
            <param name="explorer"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.SavedSearchExists(System.String,System.String)">
            <summary>
            Checks whether a saved search with the same name exists
            </summary>
            <param name="name">Name</param>
            <param name="dataSourceName">Datasource name</param>
            <returns>Returns true if the saved search exists</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.SaveSearch(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,Ifs.Fnd.Explorer.Interfaces.FndClientSearch,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the given query in the userprofile
            </summary>
            <param name="explorer">calling explorer</param>
            <param name="clientSearch">FndClientSearch to be saved</param>
            <param name="name" >Name</param>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entity">Entity</param>
            <param name="note" >Note</param>
            <param name="mode">Search mode</param>
            <param name="replace">If true replaces the existing search</param>
            <param name="global">if true the search is saved as a global search</param>	
            <returns>Returns true if the save operation was successful</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.SaveSearch(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,Ifs.Fnd.Explorer.Interfaces.FndClientSearch,System.String@,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the given query in the userprofile
            </summary>
            <param name="explorer">calling explorer</param>
            <param name="clientSearch">FndClientSearch to be saved</param>
            <param name="name" >Name</param>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entity">Entity</param>
            <param name="note" >Note</param>
            <param name="mode">Search mode</param>
            <param name="replace">If true replaces the existing search</param>
            <param name="global">if true the search is saved as a global search</param>	
            <returns>Returns true if the save operation was successful</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.SaveSearch(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,Ifs.Fnd.Explorer.Interfaces.FndClientSearch,System.String@,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,Ifs.Fnd.Explorer.Interfaces.FndSearchSource)">
            <summary>
            Saves the given query in the userprofile
            </summary>
            <param name="explorer">calling explorer</param>
            <param name="clientSearch">FndClientSearch to be saved</param>
            <param name="name" >Name</param>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entity">Entity</param>
            <param name="note" >Note</param>
            <param name="mode">Search mode</param>
            <param name="replace">If true replaces the existing search</param>
            <param name="global">if true the search is saved as a global search</param>
            <param name="searchSource">Type of search source</param>
            <returns>Returns true if the save operation was successful</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.SaveSearch(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,Ifs.Fnd.Explorer.Interfaces.FndClientSearch,System.String@,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,Ifs.Fnd.Explorer.Interfaces.FndSearchSource,Ifs.Fnd.Explorer.Interfaces.PublishedConditionInfo)">
            <summary>
            Saves the given query in the userprofile
            </summary>
            <param name="explorer">calling explorer</param>
            <param name="clientSearch">FndClientSearch to be saved</param>
            <param name="name">Name</param>
            <param name="dataSourceName">Name of the data source</param>
            <param name="entity">Entity</param>
            <param name="note">Note</param>
            <param name="mode">Search mode</param>
            <param name="replace">If true replaces the existing search</param>
            <param name="global">if true the search is saved as a global search</param>
            <param name="searchSource">Type of search source</param>
            <param name="publishedConditionInfo"></param>
            <returns>Returns true if the save operation was successful</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.ShowConnectedNavigatorNodes(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,System.String,System.String,System.String)">
            <summary>
            Shows the navigator entries connected to the given saved search 
            </summary>
            <param name="explorer">calling explorer</param>
            <param name="name">Name of the saved search.</param>
            <param name="datasource">Datasource name.</param>
            <param name="entity">Entity name.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndSavedSearchManager.ValidateName(System.String)">
            <summary>
            Validates name by checking for invalid characters
            </summary>
            <param name="name">name of saved search</param>
            <returns>Return true if name doesn't contain any invalid characters</returns>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndSearchSource">
            <summary>
            Used for specifying the data source used for a saved search
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndSearchSource.MainDataSource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndSearchSource.ChildDataSource">
            <summary>
            
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings">
            <summary>
            Holds settings for a search dialog. Since the Search dialog caches this object, callers should not pass in a settings object that other threads can modify while the Search dilaog is open.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings.#ctor(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource,Ifs.Fnd.Explorer.Interfaces.CountHitsDelegate,System.String)">
            <summary>
            Constructor for FndSearchDialogSettings
            </summary>
            <param name="explorer">The explorer from which the search dialog is invoked from.</param>
            <param name="searchExplorerSource">Custom meta to build search dialog.</param>
            <param name="countDelegate"> A delegate to be called when the count hits button is pressed.</param>
            <param name="dataSourceName">Name of the data source.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings.#ctor(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource,Ifs.Fnd.Explorer.Interfaces.CountHitsDelegate,System.String,System.Boolean)">
            <summary>
            Constructor for FndSearchDialogSettings
            </summary>
            <param name="explorer">The explorer from which the search dialog is invoked from.</param>
            <param name="searchExplorerSource">Custom meta to build search dialog.</param>
            <param name="countDelegate"> A delegate to be called when the count hits button is pressed.</param>
            <param name="dataSourceName">Name of the data source.</param>
            <param name="searchSourceChanged">Whether search source will be changed at runtime.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings.#ctor(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource,Ifs.Fnd.Explorer.Interfaces.CountHitsDelegate,System.String,System.String,Ifs.Fnd.Explorer.Interfaces.FndSearchSource)">
            <summary>
            Constructor for FndSearchDialogSettings
            </summary>
            <param name="explorer">The explorer from which the search dialog is invoked from.</param>
            <param name="searchExplorerSource">Custom meta to build search dialog.</param>
            <param name="countDelegate"> A delegate to be called when the count hits button is pressed.</param>
            <param name="dataSourceName">Name of the data source.</param>
            <param name="dataSourceDisplayName">Display name of the data source. Shown in the title of the Search Dialog.</param>
            <param name="searchSource">Type of search source. One area of use is to hide SavedSearches for child datasources as they can't be navigated to.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings.#ctor(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource,Ifs.Fnd.Explorer.Interfaces.CountHitsDelegate,System.String,System.String,Ifs.Fnd.Explorer.Interfaces.FndSearchSource,System.Boolean)">
            <summary>
            Constructor for FndSearchDialogSettings
            </summary>
            <param name="explorer">The explorer from which the search dialog is invoked from.</param>
            <param name="searchExplorerSource">Custom meta to build search dialog.</param>
            <param name="countDelegate"> A delegate to be called when the count hits button is pressed.</param>
            <param name="dataSourceName">Name of the data source.</param>
            <param name="dataSourceDisplayName">isplay name of the data source. Shown in the title of the Search Dialog.</param>
            <param name="searchSource">Type of search source. One area of use is to hide SavedSearches for child datasources as they can't be navigated to.</param>
            <param name="searchSourceChanged">Whether search source will be changed at runtime.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings.#ctor(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,Ifs.Fnd.Explorer.Interfaces.IFndSearchExploreSource,Ifs.Fnd.Explorer.Interfaces.CountHitsDelegate,System.String,System.String,Ifs.Fnd.Explorer.Interfaces.FndSearchSource,System.Boolean,Ifs.Fnd.Explorer.Interfaces.PublishedConditionDelegate)">
            <summary>
            Constructor for FndSearchDialogSettings
            </summary>
            <param name="explorer">The explorer from which the search dialog is invoked from.</param>
            <param name="searchExplorerSource">Custom meta to build search dialog.</param>
            <param name="countDelegate"> A delegate to be called when the count hits button is pressed.</param>
            <param name="dataSourceName">Name of the data source.</param>
            <param name="dataSourceDisplayName">isplay name of the data source. Shown in the title of the Search Dialog.</param>
            <param name="searchSource">Type of search source. One area of use is to hide SavedSearches for child datasources as they can't be navigated to.</param>
            <param name="searchSourceChanged">Whether search source will be changed at runtime.</param>
            <param name="publishedConditionDelegate">A delegate that returns an object allowing Saved Searches to be saved and published for later invocation.</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings.Explorer">
            <summary>
            The explorer from which the search dialog is invoked from. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings.SearchExplorerSource">
            <summary>
            Custom meta to build search dialog.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings.CountHitsDelegate">
            <summary>
            A delegate to be called when the count hits button is pressed.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings.SearchSource">
            <summary>
            Type of search source.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings.DataSourceName">
            <summary>
            Name of the data source.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings.DataSourceDisplayName">
            <summary>
            Display name of the data source. Shown in the title of the Search Dialog.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings.SearchSourceChanged">
            <summary>
            gets or sets whether the search source is changed.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings.PublishedConditionInfo">
            <summary>
            Gets or sets an object that allows Saved Searches to be saved and published for later invocation.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings.PublishedConditionDelegate">
            <summary>
            Gets or sets the delegate that returns an PublishedConditionInfo object. <seealso cref="P:Ifs.Fnd.Explorer.Interfaces.FndSearchDialogSettings.PublishedConditionInfo"/>
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.SavedSearch">
            <summary>
            Holds attributes of a saved search
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SavedSearch.#ctor">
            <summary>
            Creates a SavedSearch.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SavedSearch.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a SavedSearch.
            </summary>
            <param name="name">Name</param>
            <param name="datasourceName">Name of the data source</param>
            <param name="entity">Entity</param>
            <param name="mode">Search mode this saved search was created</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SavedSearch.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a SavedSearch.
            </summary>
            <param name="name">Name</param>
            <param name="datasourceName">Name of the data source</param>
            <param name="entity">Entity</param>
            <param name="mode">Search mode</param>
            <param name="note">A note attached to this saved search</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SavedSearch.DeserializeFromString(System.String)">
            <summary>
             Deserializes the saved search from a string
            </summary>
            <param name="str">serialized string</param>
            <returns>SavedSearch</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SavedSearch.Deserialize(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Deserializes FndDataRow to class instance. Handles all simple attributes (string, int, doubles etc)
            Can deserialize collections if they implement IList and property getter returns
            a precreated collection (preferably empty). That collection class must have an Add(SomeClass value) method.
            The FndRecordSerializer also supports classes implementing ISupportInitialize, in that
            case BeginInit will be called before properties are loaded and EndInit will be called
            after the last property have been loaded that that class.
            </summary>
            <param name="data">FndDataRow to deserialize</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SavedSearch.Serialize">
             <summary>
             Serializes class to FndDataRow. Handles all simple attributes (string, int, doubles etc)
             </summary>
            <returns>FndDataRow</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SavedSearch.SerializeToString">
             <summary>
             Serializes the saved search to a string to be used in the url
             </summary>
            <returns>serialized string</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SavedSearch.ToString">
             <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
             </summary>
            
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SavedSearch.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj" />. Zero This instance is equal to <paramref name="obj" />. Greater than zero This instance is greater than <paramref name="obj" />. 
            </returns>
            
            <param name="obj">An object to compare with this instance. </param>
            <exception cref="T:System.ArgumentException"><paramref name="obj" /> is not the same type as this instance. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SavedSearch.Equals(System.Object)">
            <summary>
            Returns true if this object is equal to another.
            </summary>
            <param name="obj">The object to compare against.</param>
            <returns>True if obj is equal to this; false otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SavedSearch.op_Equality(Ifs.Fnd.Explorer.Interfaces.SavedSearch,Ifs.Fnd.Explorer.Interfaces.SavedSearch)">
            <summary>
            Equality operator for SavedSearch objects.
            </summary>
            <param name="left">SavedSearch object to check.</param>
            <param name="right">SavedSearch object to check.</param>
            <returns>True if left and right are equal; false otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SavedSearch.op_Inequality(Ifs.Fnd.Explorer.Interfaces.SavedSearch,Ifs.Fnd.Explorer.Interfaces.SavedSearch)">
            <summary>
            Inequality operator for SavedSearch objects.
            </summary>
            <param name="left">SavedSearch object to check.</param>
            <param name="right">SavedSearch object to check.</param>
            <returns>True if left and right are not equal; false otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SavedSearch.op_LessThan(Ifs.Fnd.Explorer.Interfaces.SavedSearch,Ifs.Fnd.Explorer.Interfaces.SavedSearch)">
            <summary>
            Less-than operator for SavedSearch objects.
            </summary>
            <param name="left">SavedSearch object to check.</param>
            <param name="right">SavedSearch object to check.</param>
            <returns>True if left is less than right; false otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SavedSearch.op_GreaterThan(Ifs.Fnd.Explorer.Interfaces.SavedSearch,Ifs.Fnd.Explorer.Interfaces.SavedSearch)">
            <summary>
            Greater-than operator for SavedSearch objects.
            </summary>
            <param name="left">SavedSearch object to check.</param>
            <param name="right">SavedSearch object to check.</param>
            <returns>True if left is greater than right; false otherwise</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.SavedSearch.GetHashCode">
            <summary>
            Override of GetHashCode()
            </summary>
            <returns>Hashcode for this SavedSearch</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SavedSearch.GlobalSavedSearchSuffix">
            <summary>
            Returns the suffix for global Saved Searches, a localized string similar to " (global)".
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SavedSearch.Name">
            <summary>
            Gets/Sets Name
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SavedSearch.Key">
            <summary>
            Gets/Sets key.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SavedSearch.Note">
            <summary>
            Gets/Sets Note
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SavedSearch.DataSourceName">
            <summary>
            Gets/Sets Datasource name.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SavedSearch.Process">
            <summary>
            Gets/Sets Process
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SavedSearch.Entity">
            <summary>
            Gets/Sets Entity
            In the case of application forms, instead of LU, View is used as Entity
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SavedSearch.SerializedCondition">
            <summary>
            Gets/Sets Condition
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SavedSearch.Mode">
            <summary>
            Gets/Sets Search mode
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SavedSearch.Global">
            <summary>
            Gets/Sets whether the serach is global
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SavedSearch.SearchSource">
            <summary>
            Gets/Sets the type of datasource 
            </summary>		
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SavedSearch.PublishedSavedSearch">
            <summary>
            Gets/sets the serialized string form of this.PublishedConditionInfo. Used for persisting the PublishedConditionInfo object.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SavedSearch.PublishedConditionInfo">
            <summary>
            Gets/sets the condition and source information about the Saved Search so that it can be invoked directly later.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.SavedSearch.Condition">
            <summary>
            Gets the search condition from the saved search
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.PublishedConditionInfo">
            <summary>
             Holds information about Saved Searches that can be saved or published for later invocation.
             For Application Forms, this is essentially the SQL WHERE clause and the view name, and for
             Features, this is the condition row and the activity handler to be called.
             </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.PublishedConditionInfo.Serialize">
            <summary>
             Serializes class to FndDataRow. Handles all simple attributes (string, int, doubles etc)
            </summary>
            <returns>FndDataRow</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.PublishedConditionInfo.Deserialize(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Deserializes FndDataRow to a class instance. Handles all simple attributes (string, int, doubles etc)
            </summary>
            <param name="data">FndDataRow to deserialize</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.PublishedConditionInfo.PublishedCondition">
            <summary>
            The SQL WHERE clause or serialized condition row - the actual condition that is saved or published.
            Note: For Feature Saved Searches, CSV values are NOT expanded, and must be expanded before the condition row is executed.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.PublishedConditionInfo.Source">
            <summary>
            The source to run the condition against - either the SQL view or the activity handler.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.PublishedConditionInfo.CountColumn">
            <summary>
            The index of the column to perform Count on.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.PublishedConditionInfo.PublishedConditionType">
            <summary>
            The type of condition this is - whether APF or Feature.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.PublishedConditionType">
            <summary>
            The type of the PublishedCondition - whether APF or Feature
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.PublishedConditionType.APF">
            <summary>
            Indicates a PublishedCondition created from an APF Saved Search
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.PublishedConditionType.Feature">
            <summary>
            Indicates a PublishedCondition created from a Feature Saved Search
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndSearchInfo">
            <summary>
             Encapsulates information about the show search dialog
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndSearchInfo.#ctor(System.String,System.Boolean)">
            <summary>
            </summary>
            <param name="lastSearchName">Name of the saved search selected</param>
            <param name="lastSearchNameIsGlobal">Whether the selected search is global</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchInfo.LastSearchName">
            <summary>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndSearchInfo.LastSearchNameIsGlobal">
            <summary>
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndTreeNodeEventArgs">
            <summary>
            Provides node data for the FndVirtualTreeView events
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndTreeNodeEventArgs.#ctor(Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem)">
            <summary>
            Initializes a new instance of the FndTreeNodeEventArgs class for the specified tree node.
            </summary>
            <param name="node">Node passed to event subscribers</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndTreeNodeEventArgs.Node">
            <summary>
            Gets the FndVirtualTreeItem node for the event
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndTreeNodeCancelEventArgs">
            <summary>
            Provides node data for the FndVirtualTreeView events with cancel support.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndTreeNodeCancelEventArgs.#ctor(Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem,System.ComponentModel.CancelEventArgs)">
            <summary>
            Initializes a new instance of the FndTreeNodeCancelEventArgs class for the specified tree node.
            </summary>
            <param name="node">Node passed to event subscribers</param>
            <param name="baseEventArgs">CancelEventArgs passed from the internal treeview</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndTreeNodeCancelEventArgs.Node">
            <summary>
            Gets the FndVirtualTreeItem node for the event
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndTreeNodeCancelEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the event should be canceled.  
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndTreeNodeLabelEditEventArgs">
            <summary>
             Provides data for the FndVirtualTree LabelEdit event
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndTreeNodeLabelEditEventArgs.#ctor(Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem,System.Windows.Forms.NodeLabelEditEventArgs)">
            <summary>
            Initializes a new instance of the FndTreeNodeLabelEditEventArgs class for the specified tree node.
            </summary>
            <param name="treeItem">VirtualTreeItem to be passed to event subscribers</param>
            <param name="baseEventArgs">NodeLabelEditEventArgs passed from the internal treeview</param>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndTreeNodeLabelEditEventArgs.TreeItem">
            <summary>
            Gets the FndVirtualTreeItem node for the event
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndTreeNodeLabelEditEventArgs.CancelEdit">
            <summary>
            Gets or sets a value indicating whether the edit has been canceled. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndTreeNodeLabelEditEventArgs.Label">
            <summary>
             Gets the new text to associate with the tree node.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndTreeNodeEventHandler">
            <summary>
            Represents the method that will handle the treenode events on from the VirtualTree
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndTreeNodeCancelEventHandler">
            <summary>
            Represents the method that will handle cancelable treenode events on from the VirtualTree
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndTreeNodeLabelEditEventHandler">
            <summary>
            Represents the method that will handle the BeforeLabelEdit and AfterLabelEdit
            on a VirtualTreeView
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndVirtualTreeHost">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndVirtualTreeHost.CreateNode(Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndVirtualTreeHost.SetImageResource(System.Windows.Forms.TreeNode,Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="item"></param>
            <param name="resoure"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndVirtualTreeHost.SetSelectedImageResource(System.Windows.Forms.TreeNode,Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem,System.String)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="item"></param>
            <param name="resource"></param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.IFndVirtualTreeDragDropHandler">
            <summary>
            Used by ExplorerUIProviders to implement drag and drop functionality for a virtual tree
            Use FndVirtualTree.RegisterDragDropHandler(...) to register handler for virtual trees.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndVirtualTreeDragDropHandler.DragDrop(Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem,Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem,System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Called by TreeViewNavigator on its dragDrop event if the dragged item and target belongs to a virtualtree.		
            </summary>
            <param name="dragItem"></param>
            <param name="targetItem"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.IFndVirtualTreeDragDropHandler.DragOver(Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem,Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem,System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Called by TreeViewNavigator on its dragOver event if the dragged item and target belongs to a virtualtree.
            </summary>
            <param name="dragItem"></param>
            <param name="targetItem"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree">
            <summary>
            The VirtualTree class provides with a safe access to a common tree for different
            tree data sources. Even though all nodes are displayed in the same System.Windows.Forms.TreeView
            there is no interaction or awareness of the different VirtualTree instances.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.#ctor(Ifs.Fnd.Explorer.Interfaces.IFndExplorer,System.Windows.Forms.TreeView,System.Windows.Forms.TreeNodeCollection,Ifs.Fnd.Explorer.Interfaces.FndNavigatorEntry,Ifs.Fnd.Explorer.Interfaces.IFndVirtualTreeHost)">
            <summary>
            Creates a new instance of the VirtualTree class, connecting it to
            a specified node in the container tree.
            </summary>
            <param name="explorer">The Explorer instance that </param>
            <param name="treeView">TreeView which this VirtualTree should be associated with</param>
            <param name="parentCollection">Node which will behave as root for the VirtualTree</param>
            <param name="treeHost">IFndVirtualTreeHost instance</param>
            <param name="entry">Navigator entry associated with this FndVirtualTree instance</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.  
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.CreateNode">
            <summary>
            Creates a new instance of VirtualTreeItem with default settings
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.CreateNode(System.String,System.Boolean)">
            <summary>
            Creates a new instance of VirtualTreeItem.
            </summary>
            <param name="text">Node text</param>
            <param name="initiallyExpandable">true means that node will have a "plus" initially</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.CreateNode(System.String,System.String,System.String,System.Object)">
            <summary>
            Creates a new instance of VirtualTreeItem.
            </summary>
            <param name="text">Node text</param>
            <param name="imageResource">Index in indexlist when unselected</param>
            <param name="selectedImageResource">Index in indexlist when selected</param>
            <param name="tag">Data about the tree node</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.CreateNode(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of VirtualTreeItem.
            </summary>
            <param name="text">Node text</param>
            <param name="imageResource">Index in indexlist when unselected</param>
            <param name="selectedImageResource">Index in indexlist when selected</param>
            <param name="initiallyExpandable">true means that node will have a "plus" initially</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.CreateNode(System.String,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Creates a new instance of VirtualTreeItem.
            </summary>
            <param name="text">Node text</param>
            <param name="imageResource">Index in indexlist when unselected</param>
            <param name="selectedImageResource">Index in indexlist when selected</param>
            <param name="tag">Data about the tree node</param>
            <param name="initiallyExpandable">true means that node will have a "plus" initially</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.Invalidate">
            <summary>
            Invalidates a specific region of the control and causes a paint message to be sent to the control.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.GetNodeAt(System.Int32,System.Int32)">
            <summary>
            Retrieves the virtual tree item that is at the specified coordinates.
            </summary>
            <param name="x">The X position to evaluate and retrieve the node from.</param>
            <param name="y">The Y position to evaluate and retrieve the node from.</param>
            <returns>The FndVirtualTreeItem at the specified location, in tree view coordinates.
            If the node does not belong to our virtual view null is returned.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.GetNodeAt(System.Drawing.Point)">
            <summary>
            Retrieves the virtual tree item that is at the specified point.
            </summary>
            <param name="pixelPoint">The Point to evaluate and retrieve the node from.</param>
            <returns>The FndVirtualTreeItem at the specified point, in tree view coordinates.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.PointToClient(System.Drawing.Point)">
            <summary>
            Computes the location of the specified screen point into client coordinates.
            </summary>
            <param name="p">The screen coordinate Point to convert.</param>
            <returns>A Point that represents the converted Point, p, in client coordinates.</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.RegisterDragDropHandler(Ifs.Fnd.Explorer.Interfaces.IFndVirtualTreeDragDropHandler)">
            <summary>
            Register a custom handler for drag and drop for this virtual tree.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.DragDrop(Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem,Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem,System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            This method is called by TreeViewNavigator on its dragDrop event if the dragged item and target is a virtualtree item
            </summary>
            <param name="dragItem"></param>
            <param name="targetItem"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.DragOver(Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem,Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem,System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            This method is called by TreeViewNavigator on it dragOver event if the dragged item and target is a virtualtree item
            </summary>
            <param name="dragItem"></param>
            <param name="targetItem"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.exceptionInBeforeExpand">
            <summary>
            This is an UGLY workaround due to the problem that a cancelled BeforeExpand
            event doesn't take effect (node is still expanded) if throwing an exception,
            when using the Microsoft TreeView. 
            Using our own FndTreeViewExt solves the problem.
            
            TODO: This code can be removed when we switch to FndTreeViewExt.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.SetTheme">
            <summary>
            Should invoke a reset of the control properties that have been themed.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.Explorer">
            <summary>
            Gets the Explorer owning the graphical component (System.Windows.Forms.TreeView class)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.NavigatorEntry">
            <summary>
            Returns the navigator entry for this virtual tree. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.Nodes">
            <summary>
            Gets the collection of tree nodes that are assigned to the VirtualTreeView.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.LockedImages">
            <summary>
            Gets or Sets whenever ImageResource/SelectedImageResource should 
            always should be overriden by DefaultImageResource/DefaultSelectedImageResource
            False = no override, DefaultImageResource is only used if ImageResource is not set
            True = override DefaultImageResource/DefaultSelectedImageResource are always used.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.DefaultImageResource">
            <summary>
            Gets or sets the image-list index value of the default image that is displayed by the tree nodes.  
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.DefaultSelectedImageResource">
            <summary>
             Gets or sets the image list index value of the image that is displayed when a tree node is selected.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.ContextMenu">
            <summary>
            Gets or sets the shortcut menu associated with the VirtualTreeView.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.NavigatorMenu">
            <summary>
            Gets the Context Menu for the hosting tree.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.Tag">
            <summary>
            Gets or sets the object that contains data about the tree.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.LabelEdit">
            <summary>
            Gets or sets a value indicating whether the label text of the tree nodes can be edited.
            Do not set this arbitrarily as it will not be set only on the virtual tree instance but
            the entire tree view behind it and hence will effect other plugins.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.SelectedNode">
            <summary>
            Gets or sets the tree node that is currently selected in the tree view control.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.HideSelection">
            <summary>
            Gets or sets a value indicating whether the selected tree node remains highlighted even when the tree view has lost the focus.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.FontFamily">
            <summary>
            Gets FontFamily used to render the nodes
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.FontSize">
            <summary>
            Gets Font size used to render the nodes.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.HighlightTreeOnEdit">
            <summary>
            Gets or sets whether the Tree becomes bold after a Label Edit is complete
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.NodeExpanding">
            <summary>
            Occurs before a node is expanded
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.NodeExpanded">
            <summary>
            Occurs after a node is expanded
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.NodeCollapsing">
            <summary>
            Occurs before a node is collapsed
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.NodeCollapsed">
            <summary>
            Occurs after a node is collapsed
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.NodeSelecting">
            <summary>
            Occurs before a node is selected
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.NodeSelected">
            <summary>
            Occurs after a nodes is selected
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.NodeSelectionChanged">
            <summary>
            Occurs when a different node than the previously selected node is selected
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.NodeLabelEditing">
            <summary>
            Occurs before label edit
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.NodeLabelEdited">
            <summary>
            Occurs after label edit
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Explorer.Interfaces.FndVirtualTree.NodeRightMouseDown">
            <summary>
            Occurs after right mouse button is pressed.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem">
            <summary>
            The VirtualTreeItem class represents one node in the VirtualTree
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.Expand">
            <summary>
            Expand the children under this node.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.Collapse">
            <summary>
            Collapse this node.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.Remove">
            <summary>
            Removes this node from the tree.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.BeginEdit">
            <summary>
            Initiates the editing of the tree node label.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.EndEdit(System.Boolean)">
            <summary>
            Ends the editing of the tree node label.
            </summary>
            <param name="cancel">true if the editing of the tree node label text was canceled without being saved; otherwise, false.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.HasDummy">
            <summary>
            Dummy node status indication
            </summary>
            <returns>true of this treenode has a dummy node. false otherwise.</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.Text">
            <summary>
            Gets or sets node text
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.ImageResource">
            <summary>
            Gets or sets the themeable resource string for the command. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.SelectedImageResource">
            <summary>
            Gets or sets the themeable resource string for the command. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.Tag">
            <summary>
            Gets or sets the object that contains data about the tree node.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.Nodes">
            <summary>
            Gets the collection of VirtualTreeItem objects assigned to the current tree node.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.ForeColor">
            <summary>
            Gets or sets the foreground color of the tree node.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.BackColor">
            <summary>
            Gets or sets the background color of the tree node.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.Root">
            <summary>
            Gets the FndVirtualTree in which this item resides.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.Parent">
            <summary>
            Gets the parent VirtualTreeItem of the current VirtualTreeItem
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.Index">
            <summary>
            Gets the position of the tree node in the tree node collection.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.IsEditing">
            <summary>
            Gets a value indicating whether the tree node is in an editable state. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.NodeFont">
            <summary>
            Gets or sets the font used to display the text on the tree node's label. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem.FullPath">
            <summary>
            Gets the full path to the current node. 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItemCollection">
            <summary>
            Represents a collection of VirtualTreeItem objects.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItemCollection.IndexOf(Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem)">
            <summary>
             Returns the index of the specified tree node in the collection
            </summary>
            <param name="item">VirtualTreeItem to get index of</param>
            <returns>The zero-based index of the item found in the tree node collection; otherwise, -1. </returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItemCollection.Add(Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem)">
            <summary>
            Add a previously created VirtualTreeItem to the collection
            </summary>
            <param name="newItem">Item to add</param>
            <returns>Index of item in collection</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItemCollection.Add(System.String,System.Boolean)">
            <summary>
            Create and add a VirtualTreeItem to the cllection
            </summary>
            <param name="name">Item text</param>
            <param name="initiallyExpandable">true means that node will have a "plus" initially</param>
            <returns>VirtualTreeItem that was created</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItemCollection.Add(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create and add a VirtualTreeItem to the cllection
            </summary>
            <param name="name">Item text</param>
            <param name="imageResource">Index in indexlist when unselected</param>
            <param name="selectedImageResource">Index in indexlist when selected</param>
            <param name="initiallyExpandable">true means that node will have a "plus" initially</param>
            <returns>VirtualTreeItem that was created</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItemCollection.Add(System.String)">
            <summary>
            Create and add a VirtualTreeItem to the cllection
            </summary>
            <param name="name">Item text</param>
            <returns>VirtualTreeItem that was created</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItemCollection.Add(System.String,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Create and add a VirtualTreeItem to the cllection
            </summary>
            <param name="name">Item text</param>
            <param name="imageResource">Index in indexlist when unselected</param>
            <param name="selectedImageResource">Index in indexlist when selected</param>
            <param name="tag">Item data</param>
            <param name="initiallyExpandable">true means that node will have a "plus" initially</param>
            <returns>VirtualTreeItem that was created</returns>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItemCollection.AddRange(Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem[])">
            <summary>
            Adds an array of previously created tree nodes to the collection.  
            </summary>
            <param name="items">An array of VirtualTreeItem objects representing the tree nodes to add to the collection.</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItemCollection.Remove(System.Int32)">
            <summary>
            Removes the specified tree node from the tree node collection.
            </summary>
            <param name="index">Zero based index of node to remove</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItemCollection.Remove(Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem)">
            <summary>
            Removed an FndVirtualTreeItem from the collection.
            </summary>
            <param name="item">FndVirtualTreeItem to remove</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItemCollection.Clear">
            <summary>
            Removes all tree nodes from the collection. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItemCollection.CopyTo(Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem[],System.Int32)">
            <summary>
            Copies the contens of the collection to an array of FndVirtualTreeItem
            </summary>
            <param name="array">Array of VirtualTreeItem as copy destination</param>
            <param name="index">Start Index in array where to copy</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItemCollection.Insert(System.Int32,Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem)">
            <summary>
            Insert a FndVirtualTreeItem at a certain position in the collection
            </summary>
            <param name="index">Zero based index of where to insert the item</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItemCollection.Contains(Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItem)">
            <summary>
            Determines if a specific FndVirtualTreeItem is contained in the collection
            </summary>
            <param name="item">Item to look for</param>
            <returns>true if item is in the collection</returns>
        </member>
        <member name="P:Ifs.Fnd.Explorer.Interfaces.FndVirtualTreeItemCollection.Item(System.Int32)">
            <summary>
            Collection Indexer
            </summary>
        </member>
    </members>
</doc>
