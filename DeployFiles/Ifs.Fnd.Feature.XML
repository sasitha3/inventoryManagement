<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ifs.Fnd.Feature</name>
    </assembly>
    <members>
        <member name="M:Ifs.Fnd.Feature.AddToSelectionTypeMissMatchDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.AddToSelectionTypeMissMatchDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndAsyncInvokeInfo">
            <summary>
            This class is used by the framework to keep information about an ongoing background worker <see cref="T:Ifs.Fnd.Feature.FndBackgroundWorker"/>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndAsyncInvokeInfo.Dispose">
            <summary>
            Dispose an instance of <see cref="T:Ifs.Fnd.Feature.FndAsyncInvokeInfo"/> 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndAsyncInvokeInfo.Dispose(System.Boolean)">
            <summary>
            Dispose an instance of <see cref="T:Ifs.Fnd.Feature.FndAsyncInvokeInfo"/> 
            </summary>
            <param name="disposing">true if called via Dispose(); false otherwise.</param>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndAsyncInvokeInfo.CancellationPending">
            <summary>
            True if a cancellation request has been sent to this background worker. Check this flag within your action in FndBackgroundWorker.InvokeActivity to 
            exit from the action on cancel.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndAsyncOption">
            <summary>
            Lifetime parameter for creating background jobs
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndAsyncOption.StayAlive">
            <summary>
            continue with the job even if user navigates away
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndAsyncOption.FeatureLifetime">
            <summary>
            If user navigates away, send cancel to the background worker, abort any db calls in progress and don't call the callback function (default)
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndBackgroundWorker">
            <summary>
            FndBackgroundWorker can be used for placing database calls in the background on separate threads. 
            An activity or an SQL-statement can be run this way. 
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndBackgroundWorker.registeredFeatures">
            <summary>
            Contains a list of the features who has called RegisterEvents. 
            We only want ONE handler for NavigationNotification_NavigateFeatureDeactivating 
            per feature. Per Explorer (UI) thread. Thus ThreadStatic.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndBackgroundWorker.InvokeSQLSelectCommand(System.String,System.Action{Ifs.Fnd.Data.FndDataTable},System.Collections.Generic.List{Ifs.Fnd.AccessProvider.PLSQL.FndBindVariable},System.Func{System.Exception,System.Boolean},Ifs.Fnd.Feature.FndAsyncOption,Ifs.Fnd.Data.FndQueryOptions,System.Action,System.Int32,System.String)">
            <summary>
            Used for placing an SQL-select statment on a background thread.
            The callback function is performed on the UI thread and can be used for updating UI.
            </summary>
            <param name="commandText">The select statement to be executed</param>
            <param name="callBack">Callback action that will process the resulting FndDataTable from the sql command</param>
            <param name="bindVariables">Optional collection of bind variables</param>
            <param name="exceptionCallback">Optional callback method that will execute if there are any exceptions. Return true to indicate that the exception
            has been handled, or false to propagate the exception to the framework.</param>
            <param name="options">Optional parameter to decide the lifespan of the background thread. See <see cref="T:Ifs.Fnd.Feature.FndAsyncOption"/></param>
            <param name="queryOptions">Additional Query Options (eg- SKIP_ROWS, MAX_ROWS)</param>
            <param name="cancelCallback">Optional callback method that will execute if the background task is cancelled.</param>
            <param name="timeout">The time-out value in milliseconds. The default is Infinite</param>
            <param name="callerInformation">Caller information added to the Url</param>
            <returns>The request ID (can be used for canceling)</returns>
            <example>Simple example:
            <code>
            FndBackgroundWorker.InvokeSQLSelectCommand("select count(*) from customer_info",
                (table) =&gt;
                {
                    FndMessageBox.Show(table.Rows[0].Columns[0].GetValue(table.Rows[0]).ToString());
                }
            );
            </code>
            Example with bind variables:
            <code>
            <![CDATA[
            List<FndBindVariable> bindVars = new List<FndBindVariable>();
            FndBindVariable bindV = new FndBindVariable(FndBindVariableDirection.In, "CUSTID", new FndTextAttribute("BP%"));
            bindVars.Add(bindV);
            FndBackgroundWorker.InvokeSQLSelectCommand("select count(*) from customer_info where customer_id like :CUSTID",
                (table) =>
                {
                    FndMessageBox.Show(table.Rows[0].Columns[0].GetValue(table.Rows[0]).ToString());        
                }
            );
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndBackgroundWorker.InvokeSQLSelectCommand(System.String,System.Func{Ifs.Fnd.Data.FndDataTable,System.Boolean},System.Collections.Generic.List{Ifs.Fnd.AccessProvider.PLSQL.FndBindVariable},System.Func{System.Exception,System.Boolean},Ifs.Fnd.Feature.FndAsyncOption,Ifs.Fnd.Data.FndQueryOptions,System.Action,System.Int32,System.String)">
            <summary>
            Used for placing an SQL-select statment on a background thread.
            The callback function is performed on the UI thread and can be used for updating UI.
            </summary>
            <param name="commandText">The select statement to be executed</param>
            <param name="callBack">Callback function that will process the resulting FndDataTable from the sql command</param>
            <param name="bindVariables">Optional collection of bind variables</param>
            <param name="exceptionCallback">Optional callback method that will execute if there are any exceptions. Return true to indicate that the exception
            has been handled, or false to propagate the exception to the framework.</param>
            <param name="asyncOption">Optional parameter to decide the lifespan of the background thread. See <see cref="T:Ifs.Fnd.Feature.FndAsyncOption"/></param>
            <param name="queryOptions">Additional Query Options (eg- SKIP_ROWS, MAX_ROWS)</param>
            <param name="cancelCallback">Optional callback method that will execute if the background task is cancelled.</param>
            <param name="timeout">The time-out value in milliseconds. The default is Infinite</param>
            <param name="callerInformation">Caller information added to the Url</param>
            <returns>The request ID (can be used for canceling)</returns>
            <example>Simple example:
            <code>
            FndBackgroundWorker.InvokeSQLSelectCommand("select count(*) from customer_info",
                (table) =&gt;
                {
                    FndMessageBox.Show(table.Rows[0].Columns[0].GetValue(table.Rows[0]).ToString());
                    return true;
                }
            );
            </code>
            Example with bind variables:
            <code>
            <![CDATA[
            List<FndBindVariable> bindVars = new List<FndBindVariable>();
            FndBindVariable bindV = new FndBindVariable(FndBindVariableDirection.In, "CUSTID", new FndTextAttribute("BP%"));
            bindVars.Add(bindV);
            FndBackgroundWorker.InvokeSQLSelectCommand("select count(*) from customer_info where customer_id like :CUSTID", 
                (table) =>
                {
                    FndMessageBox.Show(table.Rows[0].Columns[0].GetValue(table.Rows[0]).ToString());
                    return true;
                }
            );
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndBackgroundWorker.InvokeWebRequest(System.String,System.Func{System.IO.Stream,System.Boolean},System.Func{System.Exception,System.Boolean},Ifs.Fnd.Feature.FndAsyncOption,System.Action,System.Int32)">
            <summary>
            Used for placing a WebRequest on a background thread.
            The callback function is performed on the UI thread and can be used for updating UI.
            </summary>
            <param name="requestUriString">The URI to be requested</param>
            <param name="callBack">Callback function that will process the resulting Stream from the web request</param>
            <param name="exceptionCallback">Optional callback method that will execute if there are any exceptions. Return true to indicate that the exception
            has been handled, or false to propagate the exception to the framework.</param>
            <param name="asyncOption">Optional parameter to decide the lifespan of the background thread. See <see cref="T:Ifs.Fnd.Feature.FndAsyncOption"/></param>
            <param name="cancelCallback">Optional callback method that will execute if the background task is cancelled.</param>
            <param name="timeout">The time-out value in milliseconds. The default value is the default value of HttpWebRequest.Timeout, which is (in .Net 4.5) 100,000 milliseconds (100 seconds).</param>
            <returns>The request ID (can be used for canceling)</returns>
            <example>Simple example:
            <code>
            FndBackgroundWorker.InvokeWebRequest("http://rss.cnn.com/rss/edition.rss",
                (stream) =&gt;
                {
                    XDocument xDocument = XDocument.Load(stream);
                    ...
                    return true;
                }
            );
            </code>
            </example>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndBackgroundWorker.InvokeActivity``2(System.Func{``0,``1},System.Action{``1},System.Func{System.Exception,System.Boolean},Ifs.Fnd.Feature.FndAsyncOption,System.Action,System.Int32)">
            <summary>
            Invoke a simple activity on a background thread, given a ServerInterface.
            The callback function is performed on the UI thread and can be used for updating UI.
            </summary>
            <typeparam name="TActivityHandler">Type of server interface to use (typically "ServerInterface")</typeparam>
            <typeparam name="TResult">Type returned by the activity</typeparam>
            <param name="action">Function that given the server interface will perform the call</param>
            <param name="callBack">Callback action for processing the result (which is sent as parameter).</param>
            <param name="exceptionCallback">Optional callback method that will execute if there are any exceptions. Return true to indicate that the exception
            has been handled, or false to propagate the exception to the framework.</param>
            <param name="options">Optional parameter to decide the lifespan of the background thread. See <see cref="T:Ifs.Fnd.Feature.FndAsyncOption"/></param>
            <param name="cancelCallback">Optional callback method that will execute if the background task is cancelled.</param>
            <param name="timeout">The time-out value in milliseconds. The default is Infinite</param>
            <returns>The request ID (can be used for canceling)</returns>
            <example>
            <code> 
            FndBackgroundWorker.InvokeActivity{ServerInterface, CommonMessageTable}(
                (sint) =&gt;
                {
                    return sint.ManageBroadcastMessages.QueryCommonMessage(commonMessage, FndQueryOptions.AllRows);
                },
                (table) =&gt;
                {
                    //Callback
                    foreach (CommonMessage row in table.Rows)
                    {
                        // do something
                    }
                },
                (exception) =&gt;
                {
                    if (exception is FndSystemException)
                    {
                        FnddTrace.WriteLine("BroadcastMessages", "Silently ignored error.");
                        return true; // exception handled
                    }
                    return false; // exception not handled, will be handled by fw
                });
            </code>
            </example>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndBackgroundWorker.InvokeActivityByName(System.String,System.String,System.Action{Ifs.Fnd.Data.FndDataRow},System.Func{System.Exception,System.Boolean},Ifs.Fnd.Feature.FndAsyncOption,System.Action,System.Int32)">
            <summary>
            Invoke a simple activity on a background thread, given the name of the interface and operation.
            The callback function is performed on the UI thread and can be used for updating UI. 
            </summary>
            <param name="interfaceName">Name of the interface</param>
            <param name="operation">Name of the operation</param>
            <param name="callBack">Callback function for processing the result (which is sent as parameter).</param>
            <param name="exceptionCallback">Optional callback method that will execute if there are any exceptions. Return true to indicate that the exception
            has been handled, or false to propagate the exception to the framework.</param>
            <param name="options">Optional parameter to decide the lifespan of the background thread. See <see cref="T:Ifs.Fnd.Feature.FndAsyncOption"/></param>
            <param name="cancelCallback">Optional callback method that will execute if the background task is cancelled.</param>
            <param name="timeout">The time-out value in milliseconds. The default is Infinite</param>
            <returns>The request ID (can be used for canceling)</returns>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndBackgroundWorker.InvokeActivity``2(System.Func{``0,``1},System.Func{``1,System.Boolean},System.Func{System.Exception,System.Boolean},Ifs.Fnd.Feature.FndAsyncOption,System.Action,System.Int32)">
            <summary>
            Invoke a simple activity on a background thread, given a ServerInterface.
            The callback function is performed on the UI thread and can be used for updating UI.
            </summary>
            <typeparam name="TActivityHandler">Type of server interface to use (typically "ServerInterface")</typeparam>
            <typeparam name="TResult">Type returned by the activity</typeparam>
            <param name="action">Function that given the server interface will perform the call</param>
            <param name="callBack">Callback function for processing the result (which is sent as parameter).</param>
            <param name="exceptionCallback">Optional callback method that will execute if there are any exceptions. Return true to indicate that the exception
            has been handled, or false to propagate the exception to the framework.</param>
            <param name="options">Optional parameter to decide the lifespan of the background thread. See <see cref="T:Ifs.Fnd.Feature.FndAsyncOption"/></param>
            <param name="cancelCallback">Optional callback method that will execute if the background task is cancelled.</param>
            <param name="timeout">The time-out value in milliseconds. The default is Infinite</param>
            <returns>The request ID (can be used for canceling)</returns>
            <example>
            <code> 
            FndBackgroundWorker.InvokeActivity{ServerInterface, CommonMessageTable}(
                (sint) =&gt;
                {
                    return sint.ManageBroadcastMessages.QueryCommonMessage(commonMessage, FndQueryOptions.AllRows);
                },
                (table) =&gt;
                {
                    //Callback
                    foreach (CommonMessage row in table.Rows)
                    {
                        // do something
                    }
                    return true;
                },
                (exception) =&gt;
                {
                    if (exception is FndSystemException)
                    {
                        FnddTrace.WriteLine("BroadcastMessages", "Silently ignored error.");
                        return true; // exception handled
                    }
                    return false; // exception not handled, will be handled by fw
                });
            </code>
            </example>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndBackgroundWorker.InvokeActivity``2(System.Func{``0,Ifs.Fnd.Feature.FndAsyncInvokeInfo,``1},System.Func{``1,System.Boolean},System.Func{System.Exception,System.Boolean},Ifs.Fnd.Feature.FndAsyncOption,System.Action,System.Int32)">
            <summary>
            Invoke an activity on a background thread, given a ServerInterface. This version should be used if the action is more than just activity invoke and must be able to handle
            cancel requests during execution.
            The callback function is performed on the UI thread and can be used for updating UI.
            </summary>
            <typeparam name="TActivityHandler">Type of server interface to use (typically "ServerInterface")</typeparam>
            <typeparam name="TResult">Type returned by the activity</typeparam>
            <param name="action">Function that given the server interface will perform the call. It also takes <see cref="T:Ifs.Fnd.Feature.FndAsyncInvokeInfo"/> as parameter to be able to handle cancel requests.</param>
            <param name="callBack">Callback function for processing the result (which is sent as parameter).</param>
            <param name="exceptionCallback">Optional callback method that will execute if there are any exceptions. Return true to indicate that the exception
            has been handled, or false to propagate the exception to the framework.</param>
            <param name="options">Optional parameter to decide the lifespan of the background thread. See <see cref="T:Ifs.Fnd.Feature.FndAsyncOption"/></param>
            <param name="cancelCallback">Optional callback method that will execute if the background task is cancelled.</param>
            <param name="timeout">The time-out value in milliseconds. The default is Infinite</param>
            <returns>The request ID (can be used for canceling)</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndBackgroundWorker.InvokeActivity``1(System.String,System.Func{Ifs.Fnd.AccessProvider.Activity.FndActivityCommand,``0},System.Func{``0,System.Boolean},System.Func{System.Exception,System.Boolean},Ifs.Fnd.Feature.FndAsyncOption,System.Action,System.Int32)">
            <summary>
            Invoke an activity on a background thread, untyped, just using activity name.
            </summary>
            <typeparam name="TResult">Type returned by the activity</typeparam>
            <param name="activityName">Name of the activity</param>
            <param name="action">Fnction that given an FndActivityCommand will invoke the execution</param>
            <param name="callBack">Callback function for processing the result (which is sent as parameter)</param>
            <param name="exceptionCallback">Optional callback method that will execute if there are any exceptions. Return true to indicate that the exception
            has been handled, or false to propagate the exception to the framework.</param>
            <param name="options">Optional parameter to decide the lifespan of the background thread. See <see cref="T:Ifs.Fnd.Feature.FndAsyncOption"/></param>
            <param name="cancelCallback">Optional callback method that will execute if the background task is cancelled.</param>
            <param name="timeout">The time-out value in milliseconds. The default is Infinite</param>
            <returns>The request ID (can be used for canceling)</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndBackgroundWorker.CancelAsyncInvoke(System.String)">
            <summary>
            Cancel an ongoing background task, but does not call Abort on the server request
            Call AbortActiveThreads if you want to send Abort to the server.
            </summary>
            <param name="invokeId">ID created by one of the Invoke functions</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndBackgroundWorker.AbortActiveThreads(Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Cancel all requests belonging to an Explorer (called when the explorer is closing)
            </summary>
            <param name="explorer">Explorer</param>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndQueuedBackgroundWorkerCancellationPolicy">
            <summary>
            Different types of cancellation policies for the FndQueuedBackgroundWorker
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndQueuedBackgroundWorkerCancellationPolicy.AutomaticCancelOnNavigationDeactivating">
            <summary>
            If the FndQueuedBackgroundWorker is used from a Feature, it will will Cancel when the feature deactivates (FeatureDeactivating)
            This is the default behvaior. If you don't want this (not recommended) set CancellationPolicy to ManualCancellation 
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndQueuedBackgroundWorkerCancellationPolicy.ManualCancellation">
            <summary>
            If you set CancellationPolicy to ManualCancellation you as a feature programmer is responsible to call FndQueuedBackgroundWorker.Cancel when you want to queued background server calls to be cancelled, and the queue to empty.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndQueuedBackgroundWorker">
            <summary>
            This class uses FndBackgroundWorker(s) for placing database calls in the background on separate threads. 
            Only support for SQLSelect-statements. 
            Note: Users of this class is reponsible for calling Dispose on it.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndQueuedBackgroundWorker.#ctor(System.ComponentModel.ISynchronizeInvoke,System.Int32)">
            <summary>
            Creates an instance of the FndQueuedBackgroundWorker
            </summary>
            <param name="invoker">Typical an FndExplorer</param>
            <param name="maxThreads">The number of concurrent threads to spawn to run server calls (aka Throttling)</param>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndQueuedBackgroundWorker.registeredFeatures">
            <summary>
            Contains a list of the features who has called RegisterEvents. 
            We only want ONE handler for NavigationNotification_NavigateFeatureDeactivating 
            per feature. Member instance.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndQueuedBackgroundWorker.InvokeSQLSelectCommand(System.String,System.Action{Ifs.Fnd.Data.FndDataTable},System.Collections.Generic.List{Ifs.Fnd.AccessProvider.PLSQL.FndBindVariable},System.Func{System.Exception,System.Boolean},Ifs.Fnd.Feature.FndAsyncOption,Ifs.Fnd.Data.FndQueryOptions,System.Action,System.Int32,System.String)">
            <summary>
            Used for placing an SQL-select statment on a background thread.
            The callback function is performed on the UI thread and can be used for updating UI.
            </summary>
            <param name="commandText">The select statement to be executed</param>
            <param name="callBack">Callback action that will process the resulting FndDataTable from the sql command</param>
            <param name="bindVariables">Optional collection of bind variables</param>
            <param name="exceptionCallback">Optional callback method that will execute if there are any exceptions. Return true to indicate that the exception
            has been handled, or false to propagate the exception to the framework.</param>
            <param name="options">Optional parameter to decide the lifespan of the background thread. See <see cref="T:Ifs.Fnd.Feature.FndAsyncOption"/></param>
            <param name="queryOptions">Additional Query Options (eg- SKIP_ROWS, MAX_ROWS)</param>
            <param name="cancelCallback">Optional callback method that will execute if the background task is cancelled.</param>
            <param name="timeout">The time-out value in milliseconds. The default is Infinite</param>
            <param name="callerInformation">Caller information added to the Url</param>
            <returns>The request ID (can be used for canceling)</returns>
            <example>Simple example:
            <code>
            FndBackgroundWorker.InvokeSQLSelectCommand("select count(*) from customer_info",
                (table) =&gt;
                {
                    FndMessageBox.Show(table.Rows[0].Columns[0].GetValue(table.Rows[0]).ToString());
                }
            );
            </code>
            Example with bind variables:
            <code>
            <![CDATA[
            List<FndBindVariable> bindVars = new List<FndBindVariable>();
            FndBindVariable bindV = new FndBindVariable(FndBindVariableDirection.In, "CUSTID", new FndTextAttribute("BP%"));
            bindVars.Add(bindV);
            FndBackgroundWorker.InvokeSQLSelectCommand("select count(*) from customer_info where customer_id like :CUSTID",
                (table) =>
                {
                    FndMessageBox.Show(table.Rows[0].Columns[0].GetValue(table.Rows[0]).ToString());        
                }
            );
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndQueuedBackgroundWorker.InvokeSQLSelectCommand(System.String,System.Func{Ifs.Fnd.Data.FndDataTable,System.Boolean},System.Collections.Generic.List{Ifs.Fnd.AccessProvider.PLSQL.FndBindVariable},System.Func{System.Exception,System.Boolean},Ifs.Fnd.Feature.FndAsyncOption,Ifs.Fnd.Data.FndQueryOptions,System.Action,System.Int32,System.String)">
            <summary>
            Used for placing an SQL-select statment on a background thread.
            The callback function is performed on the UI thread and can be used for updating UI.
            </summary>
            <param name="commandText">The select statement to be executed</param>
            <param name="callBack">Callback function that will process the resulting FndDataTable from the sql command</param>
            <param name="bindVariables">Optional collection of bind variables</param>
            <param name="exceptionCallback">Optional callback method that will execute if there are any exceptions. Return true to indicate that the exception
            has been handled, or false to propagate the exception to the framework.</param>
            <param name="options">Optional parameter to decide the lifespan of the background thread. See <see cref="T:Ifs.Fnd.Feature.FndAsyncOption"/></param>
            <param name="queryOptions">Additional Query Options (eg- SKIP_ROWS, MAX_ROWS)</param>
            <param name="cancelCallback">Optional callback method that will execute if the background task is cancelled.</param>
            <param name="timeout">The time-out value in milliseconds. The default is Infinite</param>
            <param name="callerInformation">Caller information added to the Url</param>
            <returns>The request ID (can be used for canceling)</returns>
            <example>Simple example:
            <code>
            FndBackgroundWorker.InvokeSQLSelectCommand("select count(*) from customer_info",
                (table) =&gt;
                {
                    FndMessageBox.Show(table.Rows[0].Columns[0].GetValue(table.Rows[0]).ToString());
                    return true;
                }
            );
            </code>
            Example with bind variables:
            <code>
            <![CDATA[
            List<FndBindVariable> bindVars = new List<FndBindVariable>();
            FndBindVariable bindV = new FndBindVariable(FndBindVariableDirection.In, "CUSTID", new FndTextAttribute("BP%"));
            bindVars.Add(bindV);
            FndBackgroundWorker.InvokeSQLSelectCommand("select count(*) from customer_info where customer_id like :CUSTID", 
                (table) =>
                {
                    FndMessageBox.Show(table.Rows[0].Columns[0].GetValue(table.Rows[0]).ToString());
                    return true;
                }
            );
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndQueuedBackgroundWorker.InvokeActivity``2(System.Func{``0,``1},System.Action{``1},System.Func{System.Exception,System.Boolean},Ifs.Fnd.Feature.FndAsyncOption,System.Action,System.Int32)">
            <summary>
            Invoke a simple activity on a background thread, given a ServerInterface.
            The callback function is performed on the UI thread and can be used for updating UI.
            </summary>
            <typeparam name="TActivityHandler">Type of server interface to use (typically "ServerInterface")</typeparam>
            <typeparam name="TResult">Type returned by the activity</typeparam>
            <param name="action">Function that given the server interface will perform the call</param>
            <param name="callBack">Callback action for processing the result (which is sent as parameter).</param>
            <param name="exceptionCallback">Optional callback method that will execute if there are any exceptions. Return true to indicate that the exception
            has been handled, or false to propagate the exception to the framework.</param>
            <param name="options">Optional parameter to decide the lifespan of the background thread. See <see cref="T:Ifs.Fnd.Feature.FndAsyncOption"/></param>
            <param name="cancelCallback">Optional callback method that will execute if the background task is cancelled.</param>
            <param name="timeout">The time-out value in milliseconds. The default is Infinite</param>
            <returns>The request ID (can be used for canceling)</returns>
            <example>
            <code> 
            FndBackgroundWorker.InvokeActivity{ServerInterface, CommonMessageTable}(
                (sint) =&gt;
                {
                    return sint.ManageBroadcastMessages.QueryCommonMessage(commonMessage, FndQueryOptions.AllRows);
                },
                (table) =&gt;
                {
                    //Callback
                    foreach (CommonMessage row in table.Rows)
                    {
                        // do something
                    }
                },
                (exception) =&gt;
                {
                    if (exception is FndSystemException)
                    {
                        FnddTrace.WriteLine("BroadcastMessages", "Silently ignored error.");
                        return true; // exception handled
                    }
                    return false; // exception not handled, will be handled by fw
                });
            </code>
            </example>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndQueuedBackgroundWorker.Cancel">
            <summary>
            Cancels all queued background tasks  (but does not call Abort on the server requests)
            Abort is called anyway on any server requests in progress - IF they have FndAsyncOption.FeatureLifetime
            but this method actually empties the queue of not yet process background calls.
            
            Note: As a developer, you should call this Cancel method on FeatureDeactivating if you use the FndQueuedBackgroundWorker from a feature.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndQueuedBackgroundWorker.Dispose">
            <summary>
            Disposes the queue and also resets the reference to the Invoker.
            This must be called to properly clean up.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndQueuedBackgroundWorker.CancellationPolicy">
            <summary>
            Gets or sets the Cancellation Policy. See FndQueuedBackgroundWorkerCancellationPolicy for more information.
            Default is AutomaticCancelOnNavigationDeactivating
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndWebFeatureBaseCommands">
            <summary>
            FndWebFeatureBaseCommands is the equivalent of the RWC framework FndFeatureBaseCommands class
            where this class holds commands common for the web client features. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndWebFeatureBaseCommands.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndWebFeatureBaseCommands.Instance(Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            A method to get the one and only instance per Explorer (thread) of this object.
            The reason to not have a singleton of this, but instead a "ExplorerTon"
            is because of treading issues. The UI components of this class,
            such as MenuItems and ToolbarButtons must be instance per thread.
            Each Explorer window is running on it's own thread.
            </summary>
            <param name="explorer">The explorer requesting this instance</param>
            <returns>The instance of the object for that Explorer.</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndWebFeatureBaseCommands.AddPreDefinedLocationsForExplorerForm(Ifs.Fnd.Windows.Forms.FndCommandManager)">
            <summary>
            Add predefined locations for menus.
            </summary>
            <param name="commandManager"></param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndWebFeatureBaseCommands.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the FndWebFeatureBaseCommands.
            </summary>
            <param name="disposing">disposing: true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndWebFeatureBaseCommands.Dispose">
            <summary>
            Releases all resources used by the FndWebFeatureBaseCommands.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndWebFeatureBaseCommands.CommandManager">
            <summary>
            Get the CommandManager.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndWebFeatureBaseCommands.NavigateCommand">
            <summary>
            Gets or sets the NavigateCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndWebFeatureBaseCommands.DockOutCommand">
            <summary>
            Gets or sets the DockOutCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndWebFeatureBaseCommands.ManagePortalCommand">
            <summary>
            Gets or sets the ManagePortalCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndWebFeatureBaseCommands.RemoveViewCommand">
            <summary>
            Gets or sets the RemoveViewCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndWebFeatureBaseCommands.ConfigureViewCommand">
            <summary>
            Gets or sets the ConfigureViewCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndWebFeatureBaseCommands.CreateViewCommand">
            <summary>
            Gets or sets the CreateViewCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndWebFeatureBaseCommands.SaveCopyCommand">
            <summary>
            Gets or sets the SaveCopyCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndWebFeatureBaseCommands.RearrangeCommand">
            <summary>
            Gets or sets the RearrangeCommand for the feature.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Plugin.FndApplicationPluginBase">
            <summary>
            FndApplicationPluginBase is the topmost base class for implementing plugins on the Application level
            It provides a default implmentation of IFndApplicationPlugin and contains
            properties for easy access of the most common services within the "IFS Explorer" framework.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Plugin.FndApplicationPluginBase.activityContext">
            <summary>
            Component variable used in inherited controls (features)
            Must be a field, cannot be a property - this is due to
            how visual inheritance and components works in the 
            Visual Studio designer.
            
            Attention: The reason for having a field member with the
            name activityContext and a property with the name
            ActivityContext is that the propery is used in the code,
            and the field is used as a component in the inherited
            classes (features).
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndApplicationPluginBase.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of FndApplicationPluginBase and place it in the provided container.
            </summary>
            <param name="container">Container to host the FndApplicationPluginBase instance</param>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndApplicationPluginBase.#ctor">
            <summary>
            Creates a new instance of FndApplicationPluginBase
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndApplicationPluginBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndApplicationPluginBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndApplicationPluginBase.Initialize">
            <summary>
            Called when plugin is being initialized.
            All properties defined in this class are available for use
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndApplicationPluginBase.Terminate">
            <summary>
            Called when plugin is being terminated.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndApplicationPluginBase.Application">
            <summary>
            Gets the IFndApplication which hosts this plugin.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndApplicationPluginBase.ActivityContext">
            <summary>
            ActivityContext provides fuctionality for 
            server interaction within an activity. An object 
            of this instance can be activated with an URL 
            containing information for the generated RequestContext 
            that will be generated for the server invokes.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndCancelDiscardEventArgs">
            <summary>
            Provides data for a cancelable and discardable event.
            Used for feature deactiving. Save Changes 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndCancelDiscardEventArgs.#ctor">
            <summary>
            Initializes a new instance of the FndFeedbackMessageEventArgs class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndCancelDiscardEventArgs.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FndFeedbackMessageEventArgs class
            </summary>
            <param name="cancel">Cancel flag</param>
            <param name="discard">Discard flag</param>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCancelDiscardEventArgs.Discard">
            <summary>
            Set this flag to signal that the data in the feature should be discarded.
            Example: The Save Changes dialog has been answered with No, and the feature
            should always be repopulated upon next activation.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndCancelEventArgs">
            <summary>
            Cancel event arg to be used by events that needs an info text. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndCancelEventArgs.#ctor(System.String)">
            <summary>
            Initialize a new instance of FndCancelEventArgs class.
            </summary>
            <param name="cancelInfoText">Info text provided with the event that is fired.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndCancelEventArgs.#ctor">
            <summary>
            Initialize a new instance of FndCancelEventArgs class.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCancelEventArgs.CancelInfoText">
            <summary>
            An info text to be used by event handlers.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndDataTableCursorBase">
            <summary>
            Base class for FndDataSet client cursors. Provides the base functionality
            for a simple cursor to find current row in DataSets.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataTableCursorBase.SetBindingContext(System.Windows.Forms.BindingContext)">
            <summary>
            Set the BindingContext used to retrieve a CurrencyManager
            </summary>
            <param name="bc">BindingContext</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataTableCursorBase.RemoveAt(System.Int32)">
            <summary>
            Removes the row at the specified index. 
            </summary>
            <param name="index">Index of the row</param>
        </member>
        <member name="E:Ifs.Fnd.Feature.FndDataTableCursorBase.PositionChanged">
            <summary>
            Occurs when the position has changed.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataTableCursorBase.BindingList">
            <summary>
            Binding list
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataTableCursorBase.CurrencyManager">
            <summary>
            Returns the CurrencyManager for this cursor.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataTableCursorBase.Position">
            <summary>
            Gets or sets the position for the currencymanager
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataTableCursorBase.Count">
            <summary>
            Returns number of items in the underlying list
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands">
            <summary>
            CONVERSION: PostConversion
            FndCTDFeatureBaseCommands is the equivalent of the RWC framework FndFeatureBaseCommands class
            where this class holds commands common for the converted CTD framework. 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndCommonPageCommands">
            <summary>
            Interface for accessing common page commands
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndCommonPageCommands.NewCommand">
            <summary>
            The New Command
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndCommonPageCommands.PopulateCommand">
            <summary>
            The Populate Command
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndCommonPageCommands.SearchCommand">
            <summary>
            The Search Command
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndCommonPageCommands.SaveCommand">
            <summary>
            The Save Command
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndCommonPageCommands.DeleteCommand">
            <summary>
            The Delete Command
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.Finalize">
            <summary>
            Destructor for FndCTDFeatureBaseCommands
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.AddPreDefinedLocationsForExplorerForm(Ifs.Fnd.Windows.Forms.FndCommandManager)">
            <summary>
            Add predefined locations for menus.
            </summary>
            <param name="commandManager"></param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.Dispose">
            <summary>
            Implementation of IDisposable.Dispose() - clean up resources.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.Dispose(System.Boolean)">
            <summary>
            Implementation of IDisposable.Dispose() - clean up resources.
            </summary>
            <param name="disposing">True if called from IDisposable.Dispose(); false if called from the destructor.</param>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.CommandManager">
            <summary>
            Get the CommandManager.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.PopulateCommand">
            <summary>
            Gets or sets the PopulateCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.SearchCommand">
            <summary>
            Gets or sets the SearchCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.SearchCurrentCommand">
            <summary>
            Gets or sets the SearchCurrentCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.SaveCommand">
            <summary>
            Gets or sets the SaveCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.NewCommand">
            <summary>
            Gets or sets the NewCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.DuplicateCommand">
            <summary>
            Gets or sets the DuplicateCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.NewButtonMenu">
            <summary>
            Gets or sets the NewButtonMenu for the drop down menu at the new button.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.QueryButtonMenu">
            <summary>
            Gets or sets the QueryButtonMenu for the drop down menu at the query button.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.MainMenuTemplatesMenuItems">
            <summary>
            Gets the drop down items of the New From Template main menu item.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.SaveDraftCommand">
            <summary>
            Gets or sets the SaveTemplateCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.SaveTemplateCommand">
            <summary>
            Gets or sets the SaveTemplateCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.NewDraftCommand">
            <summary>
            Gets or sets the NewDraftCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.NewFromTemplateCommand">
            <summary>
            Gets or sets the NewFromTemplateCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.DeleteCommand">
            <summary>
            Gets or sets the DeleteCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.LOVCommand">
            <summary>
            Gets or sets the LOVCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.ZoomCommand">
            <summary>
            Gets or sets the ZoomCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.ChartCommand">
            <summary>
            Gets or sets the ChartCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.NewButton">
            <summary>
            Gets the newButton.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.NextBlockCommand">
            <summary>
            Gets or sets the NextBlockCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.HistoryLogCommand">
            <summary>
            Gets or sets the HistoryLogCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndCTDFeatureBaseCommands.DropDownCalendarCommand">
            <summary>
            Gets or sets the DropDownCalendarCommand
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndDataFeatureBase">
            <summary>
            Base class for all databound features. Provides common
            functionality required for server interaction.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndFeatureBase">
            <summary>
            Base class for all client features.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndFeature">
            <summary>
            IFndFeature is the core interface for all IFS Feature forms (UserControls).	
            </summary>
            <remarks> 
            Normal order of calls is as follows:
            
            First Startup:
              FeatureLoading()
              FeatureLoaded()
            
            Normal operations:
              FeatureActivating()
              FeatureActivated()
              
              FeaturePopulate()
              
              FeatureDeactivating()
              FeatureDeactivated()
            
            Final Shutdown:
              FeatureUnloading()
              FeatureUnloaded()
            </remarks>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeature.FeatureLoading(Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            This method is called once when the feature is loading
            </summary>
            <param name="explorer">Reference to the explorer which contains the feature being loaded</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeature.FeatureLoaded">
            <summary>
            This method is called once when the feature has loaded
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeature.FeatureActivating">
            <summary>
            This method is called every time a feature is being 
            activated (made visible to the end user) by the framework.
            The feature is actually made visible before FeatureActivating is called.
            Note: You should NOT do server calls during feature activation.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeature.FeatureActivated">
            <summary>
            This method is called every time a feature is activated 
            (made visible to the end user) by the framework
            The feature is actually made visible before FeatureActivating is called.
            Note: You should NOT do server calls during feature activation.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeature.FeaturePopulate">
            <summary>
            This method is called after a feature has been activated and
            is visible. It is only called on Navigation and only when needed.
            It is not called when you GoBack to a feature which is cached, then
            only FeatureActivat(ing/ed) is called.
            When a record is selected in the Document Selector, this is NOT called,
            only PopulateDocument (on FndSingleDocumentFeatureBase)
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeature.FeatureDeactivating(Ifs.Fnd.Feature.FndCancelDiscardEventArgs)">
            <summary>
            This method is called every time just before a feature is being
            deactivated (made invisible to the end user). The framework may cancel
            navigation if cancel parameter is set to true.
            </summary>
            <param name="e">e.Cancel = True will cancel navigation. e.Discard = True will mark feature for repopulate upon next activation.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeature.FeatureDeactivated">
            <summary>
            This method is called every time after a feature has been deactivated.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeature.FeatureUnloading">
            <summary>
            This method is called once when the feature is unloading
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeature.FeatureUnloaded">
            <summary>
            This method is called once when the feature has unloaded
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeature.OnTitleChanged">
            <summary>
            This method is called once the titles have changed
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeature.MainDataSourceChanged(System.Boolean)">
            <summary>
            This method is called when the feature maindatasource is changed to 
            inform ExplorerFeatureService that feature maindatasource is changed. 
            Framework inform ExplorerFeatureService that datasource is changed 
            during feature activation.
            </summary>
            <param name="featureIsActivating">Parameter indicates if feature is in activation state. </param>
        </member>
        <member name="E:Ifs.Fnd.Feature.IFndFeature.TitleChanged">
            <summary>
            This event is fired once the value of the title is changed from within the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndFeature.Title">
            <summary>
            Title is a short description of the feature, to be shown
            in the banner area. This title should not reflect the data that is shown.
            Example: View Customer Order
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndFeature.LongTitle">
            <summary>
            LongTitle is a long description of the feature, to be shown
            in the window title. This title should reflect the data that is shown.
            Example: View Customer Order 102 - Customer 101: Acme Inc
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndFeature.ActiveViewMode">
            <summary>
            ActiveViewMode returns the current view mode (List, Single, Dialog etc) of the active document type in active feature.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndFeatureInternal">
            <summary>
            DO NOT USE!
            Internal framework interface to support DataNotification events.
            Do not implement outside framework.
            Might be deprecated in the future.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeatureInternal.ActivationComplete">
            <summary>
            This method is called when after either 
            FeatureActivated  __OR__ 
            FeatureActivated and FeaturePopulate is called
            
            Use this to execute code which should only be called once, regardless of the 
            feature (page) is populated after activate or not.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndStandardContextMenu">
            <summary>
            Provide functionality for a features page standard context menu.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndStandardContextMenu.GetContextMenu(Ifs.Fnd.Feature.ContextMenuSource)">
            <summary>
            Returns an instance of the standard context menu for Features        
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndFeatureBase.contextMenuFeature">
            <summary>
            Context menu owned by the feature.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndFeatureBase.CommandManager">
            <summary>
            Command manager object owned by the feature.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.#ctor">
            <summary>
            Initializes a new Ifs.Fnd.Feature.FndFeatureBase object.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.OnLovLostFocus(System.Object)">
            <summary>
            This method is called when an LOV field on the current feature has lost focus.
            </summary>
            <param name="sender">Control that lost focus.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.OnLovGotFocus(System.Object)">
            <summary>
            This method is called when an LOV field on the current feature has received focus.
            </summary>
            <param name="sender">Control that received focus.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.GetServices(Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Initializes service references.
            </summary>
            <param name="explorer">IFndExplorer reference</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.OnReadOnlyChanged(System.EventArgs)">
            <summary>
            Fires the ReadOnlyChanged event
            </summary>
            <param name="e">Event Arguments</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.SetTheme">
            <summary>
            Should invoke a reset of the control properties that have been themed.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.ActiveProfileChanged">
            <summary>
            Called when the active profile has changed.
            Override this to handle actions like reset profile settings and apply the new settings.
            Profile settings stored and set using the UserProfilePersistent attribute are handled by the Framework.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.FeatureLoading(Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Default implementation of the feature loading.
            Will Initialize services such as NavigationService and 
            also load feature profile information.
            Override to provide custom behavior.
            </summary>
            <param name="explorer">Reference to the explorer interface.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.FeatureLoaded">
            <summary>
            Called when the feature gets loaded.
            Override to provide custom behavior.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.FeatureActivating">
            <summary>
            Called when the feature starts activation.
            Override to provide custom behavior.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.FeatureActivated">
            <summary>
            Called when the feature gets activated.
            Override to provide custom behavior.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.FeaturePopulate">
            <summary>
            This method is called when after a feature has been activated and
            is visible. Here are were the server calls on activation should be done.
            Override to provide custom behavior.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.FeatureDeactivating(Ifs.Fnd.Feature.FndCancelDiscardEventArgs)">
            <summary>
            Called when feature starts deactivation.
            </summary>
            <param name="e">Cancel flag carrier.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.FeatureDeactivated">
            <summary>
            Called when the feature gets deactivated.
            Override to provide custom behavior.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.FeatureUnloading">
            <summary>
            Called when the feature starts unloading.
            Override to provide custom behavior.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.FeatureUnloaded">
            <summary>
            Called when the feature gets unloaded.
            Override to provide custom behavior.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.OnTitleChanged">
            <summary>
            This method should be called if the title is changed after the initialization of the feature.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.MainDataSourceChanged(System.Boolean)">
            <summary>
            This method is called when the feature maindatasource is changed to 
            inform ExplorerFeatureService that feature maindatasource is changed. 
            Framework inform ExplorerFeatureService that datasource is changed 
            during feature activation.
            </summary>
            <param name="featureIsActivating">Parameter indicates if feature is in activation state. </param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.ActivationComplete">
            <summary>
            DO NOT USE!
            See IFndFeatureInternal
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureBase.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureBase.ContainerInfo">
            <summary>
            
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Feature.FndFeatureBase.TitleChanged">
            <summary>
            This event is fired once the value of the title is changed from within the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureBase.FullName">
            <summary>
            Equivalent of datasource name in APF. It is not really the name of a datasource, since datasource 
            as is doesn't exists in RWC (DocumentModel, one datasource only). It is rather used as a unique 
            identifier here. Will be for example: Ifs.Application.UserManagement.UserDetail
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureBase.Title">
            <summary>
            Gets the title of the feature.
            Override this property to provide custom title.		
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureBase.LongTitle">
            <summary>
            Gets the long title of the feature.
            Override this property to provide custom title.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureBase.ActiveViewMode">
            <summary>
            ActiveViewMode returns the current view mode of the active document type in active feature.
            This is List, Single, Dialog etc.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureBase.Explorer">
            <summary>
            Gets or sets the <see cref="T:Ifs.Fnd.Explorer.Interfaces.IFndExplorer"/>
            member variable.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureBase.NavigationService">
            <summary>
            Gets the standard navigation service
            </summary>
            <remarks>
            This is indented for coding convenience for feature developers.
            </remarks>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureBase.FeatureService">
            <summary>
            Gets the standard feature service
            </summary>
            <remarks>
            This is indented for coding convenience for feature developers.
            </remarks>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureBase.WhatsThisControlId">
            <summary>
            The ID for displaying What's This text - not actually used in FndFeatureBase.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureBase.DisplayText">
            <summary>
            The display text, unused in FndFeatureBase.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndDataFeature">
            <summary>
            IFndDataFeature is the core interface for all databound IFS Feature forms (UserControls).
            Provides common functionality required for server interaction.
            Extends the IFndFeature interface
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndDataFeature.ActivityContext">
            <summary>
            ActivityContext provides fuctionality for 
            server interaction within an activity. An object 
            of this instance can be activated with an URL 
            containing information for the generated RequestContext 
            that will be generated for the server invokes.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndDataFeature.DataSet">
            <summary>
            Gets the main data set of the main data adapter.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndDataFeature.Meta">
            <summary>
            The meta model (schema) for the main dataset
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndDataFeature.CurrentMeta">
            <summary>
            The meta model (schema) for the current datasource
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Feature.IFndDataFeature.ValidateBeforeSaveFailed">
            <summary>
            This event is raised from the base class when validate before save fails to be able to save as draft.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndCommonPageCommandsAccessor">
            <summary>
            Provide access to framework standard commands by object
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndCommonPageCommandsAccessor.CommonPageCommands">
            <summary>
            Get base predefined commands such as Save, Populate, Search etc
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndDataFeatureBase.mainBindingManager">
            <summary>
            Foundation Binding Manager that manages all IFS control bindings for
            a feature. This is an extender provider and should typically only be 
            accessed trough the extended property on a specific control.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndDataFeatureBase.fieldExtender">
            <summary>
            This is an extender provider and should typically only be 
            accessed trough the extended property on a specific control.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndDataFeatureBase.initialQueryChunkSizeVerificationEnabled">
            <summary>
            Indicates whether the verification of number of rows that is initially fetched from server 
            before the user is asked to contine is enabled or not. 
            The default is <b>true</b>.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.#ctor">
            <summary>
            Initializes a new Ifs.Fnd.Feature.FndDataFeatureBase object.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndDataFeatureBase.activityContext">
            <summary>
            Component variable used in inherited controls (features)
            Must be a field, cannot be a property - this is due to
            how visual inheritance and components works in the 
            Visual Studio designer.
            
            Attention: The reason for having a field member with the
            name activityContext and a property with the name
            ActivityContext is that the propery is used in the code,
            and the field is used as a component in the inherited
            classes (features).
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.FeatureLoading(Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Override of <code>FndFeatureBase.FeatureLoading</code>.
            Attention: Will Initialize services such as NavigationService and 
            also load feature profile information.
            if you override this method and still want that behavior
            you should call <code>base.FeatureLoading()</code>
            </summary>
            <param name="explorer">Reference to the explorer interface.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.FeatureLoaded">
            <summary>
            Override of <code>FndFeatureBase.FeatureLoaded</code>.
            Attention: Will setup event mechanisms for data binding,
            if you override this method and still want that behavior
            you should call <code>base.FeatureLoaded()</code>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.FeatureUnloaded">
            <summary>
            Override of <code>FndFeatureBase.FeatureUnLoaded</code>.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.FeaturePopulate">
            <summary>
            Override of <code>FndFeatureBase.FeaturePopulate</code>.
            Attention: Will fill any existing data adapters, 
            if you override this method and still want that behavior
            you should call <code>base.FeaturePopulate()</code>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.ActivationComplete">
            <summary>
            DO NOT USE!
            See IFndFeatureInternal
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.FeatureDeactivating(Ifs.Fnd.Feature.FndCancelDiscardEventArgs)">
            Override of <code>FndFeatureBase.FeatureDeactivating</code>.
            Will call AskForSaveIfDirty.
            If you override this method and still want that behavior
            you should call <code>base.FeatureDeactivating(e)</code>
            <param name="e">e.Cancel = True will cancel deactivation. e.Discard = True will mark feature for repopulate upon next activation.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.FeatureDeactivated">
            <summary>
            Override of <code>FndFeatureBase.FeatureDeactivated</code>.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.FeatureActivated">
            <summary>
            Override of <code>FndFeatureBase.FeatureActivated</code>.
            Will check URL for selection parameter and show/hide selection pane.
            If you override this method and still want that behavior
            you should call <code>base.FeatureActivated()</code>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.FeatureActivating">
            <summary>
            Called when the feature starts activation.
            Override to provide custom behavior.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.SetTheme">
            <summary>
            Should invoke a reset of the control properties that have been themed.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.OnLovGotFocus(System.Object)">
            <summary>
            Overridden.
            </summary>
            <param name="sender">Control that received focus.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.OnLovLostFocus(System.Object)">
            <summary>
            Overridden.
            </summary>
            <param name="sender">Control that lost focus.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.SetNavigateUrl(Ifs.Fnd.Core.FndUrlAddress,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Packaging the navigation URL with the key parameters
            from a data row object.
            </summary>
            <param name="urlAddress">Navigation URL to pack.</param>
            <param name="source">Data row object.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.SetNavigateUrl(Ifs.Fnd.Core.FndUrlAddress,Ifs.Fnd.Data.FndDataRow[])">
            <summary>
            Packaging the navigation URL with the key parameters
            from an array of data row objects.
            </summary>
            <param name="urlAddress">Navigation URL to pack.</param>
            <param name="sources">Array of data row objects.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.SetNavigateUrl(Ifs.Fnd.Core.FndUrlAddress,Ifs.Fnd.Data.FndDataRowCollection)">
            <summary>
            Packaging the navigation URL with the key parameters
            from an array of data row objects.
            </summary>
            <param name="urlAddress">Navigation URL to pack.</param>
            <param name="sources">FndDataRowCollection</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.EncodeAmpersand(Ifs.Fnd.Core.FndUrlAddress,System.String)">
            <summary>
            Encode "&amp;" as "&amp;&amp;" to skip the advanced query dialog
            </summary>
            <param name="urlAddress">Navigation URL</param>
            <param name="value">Param value</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.GetRowsFromNavigateUrl(Ifs.Fnd.Core.FndUrlAddress,Ifs.Fnd.Data.FndDataColumnCollection)">
            <summary>
            Parses the URL and returns an array of data row objects based
            on the number of key parameters. Key values are assigned to
            the primary key attributes of the data rows.
            </summary>
            <param name="urlAddress">URL to parse for keys.</param>
            <param name="columns">Collection of column metadata for the data row type.</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.GetRowCollectionFromNavigateUrl(Ifs.Fnd.Core.FndUrlAddress,Ifs.Fnd.Data.FndDataColumnCollection)">
            <summary>
            Gets the row collection from the url.
            </summary>
            <param name="urlAddress">Url adress containing the rows.</param>
            <param name="columns">FndDataColumnCollection for the included rows.</param>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.EndAllCurrentEdits">
            <summary>
            Ends All Current Edits.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.EnumerateDataAdapters">
            <summary>
            Base for data adapter enumeration.
            </summary>
            <returns>Array of FndActivityDataAdapter objects.</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.FillDataAdapter(Ifs.Fnd.AccessProvider.Activity.FndActivityDataAdapter)">
            <summary>
            Fills the data adaptor with deferred populate optimizations.
            </summary>
            <param name="adapter">The data adaptor to be filled</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.FillDataAdapter(Ifs.Fnd.AccessProvider.Activity.FndActivityDataAdapter,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Fills the data adaptor with deferred populate optimizations.
            </summary>
            <param name="adapter">The data adaptor to be filled</param>
            <param name="condition">User defined condition</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.PushBindingContext">
            <summary>
            This function pushes bindingcontext to all client cursors on feature 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.SetVisibilityForCommandSaveTemplate">
            <summary>
            Set the if the commandSaveTemplate should be visible in
            drop down menus.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.InquireCommands(System.Object,System.EventArgs)">
            <summary>
            Fired events on new, delete and save commands to check for enable/disable state
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.PrepareDraft">
            <summary>
            This method is invoked before the draft is saved. By overriding it the developer can perform some task 
            before the current record is saved as a draft. Useful on occassions where some values must be manually 
            inserted/modified before saving the current record as a draft.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.Save">
            <summary>
            Implements the features DataAdapter save method and apply changes
            Override this to change the complete save behavior. Only do this 
            if you really know what you're doing.
            This method calls the following methods:
            
                EndAllCurrentEdits,
                PrepareSave,
            	ValidateBeforeSave,
            	InvokeSaveMethods,
            	HandleResultAfterSave,
            	
            It is possible to override these methods individual to change their behavior.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.OnValidateBeforeSaveFailed">
            <summary>
            Raises the <see cref="E:Ifs.Fnd.Feature.FndDataFeatureBase.ValidateBeforeSaveFailed"/> event.
            </summary>
            <returns>true, if the partially complete record was saved as a draft. false, if no draft was saved.</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.PrepareSave">
            <summary>
            Empty implementation. Override this to implement any prepare of data before validate and save
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.ValidateBeforeSave">
            <summary>
            Calls validate for all controls on the feature. 
            </summary>
            <returns> true if validation is successful; otherwise, false.</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.InvokeSaveMethods">
            <summary>
            Calls the save command for all dirty rows
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.HandleResultAfterSave">
            <summary>
            Empty implementation. Override this to implement a behavior after the data is saved. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.HandleResultAfterSaveDraft">
            <summary>
            Empty implementation. Override this to implement a behavior after the data is saved as draft. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.AskForSaveIfDirty(Ifs.Fnd.Feature.FndCancelDiscardEventArgs)">
            <summary>
            Will check for DataAdaptersDirty or UIDirty
            and display a messagebox asking for save.
            If answer is Yes, will call Save. If Save method fails
            it will cancel FeatureDeactiving.
            If answer is No, feature will deactivate.
            If answer is Cancel, it will cancel FeatureDeactiving.
            </summary>
            <param name="e">e.Cancel = True will cancel deactivation. e.Discard = True will mark feature for repopulate upon next activation.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.New">
            <summary>
            Empty implementation. Override and implement action.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.Duplicate">
            <summary>
            Empty implementation. Override and implement action.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.Delete">
            <summary>
            Empty implementation. Override and implement action.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.PreProcessSearch(Ifs.Fnd.Data.FndDataRow,Ifs.Fnd.Data.FndQueryOptions)">
            <summary>
            Override this metod to change the query before the filling of the main data adapter.
            Together with DoSearch and AfterSearch it replaces the old PopulateDocument.
            </summary>
            <param name="row">Data row containing condition</param>
            <param name="options">Query options (containing sorting information)</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.DoSearch(Ifs.Fnd.Data.FndDataRow,Ifs.Fnd.Data.FndQueryOptions)">
            <summary>
            Fills the main data adapter. If the query is to be manipulated before filling, 
            override the PreProcessSearch instead. If somthing has to be done after the data
            is fetched, override AfterSearch instead. Together with those two
            it replaces the old PopulateDocument.
            </summary>
            <param name="row">Data row containing condition</param>
            <param name="options">Query options (containing sorting information)</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.AfterSearch(Ifs.Fnd.Data.FndDataRow,Ifs.Fnd.Data.FndQueryOptions)">
            <summary>
            override this to do any extra processing after the search fetched the data.
            </summary>
            <param name="row">Data row containing condition</param>
            <param name="options">Query options (containing sorting information)</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.notifyQueryChunk(System.Object,System.Boolean@,System.Int32@)">
            <summary>
            Delegate to notify/check whenever to continue fetching from server.
            </summary>
            <param name="tag">Custom data storage which is sent to the queryChunkNotify delegate.</param>
            <param name="cancel">Indicates if the user cancelled fetching of rows from server.</param>
            <param name="nextQueryChunkSize">The number of rows that is fetched from server before the user is asked to contine again.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.IncludeUsedAttributes(Ifs.Fnd.AccessProvider.Activity.FndActivityDataAdapter,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Sets include/exclude flags on row according to databinding and dataset populate configuration
            </summary>
            <param name="adapter">Adaptor under consideration</param>
            <param name="row">Row to set include/exclude on</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.SearchForAccessedBindingLists(Ifs.Fnd.AccessProvider.Activity.FndActivityDataAdapter,System.Collections.Hashtable)">
            <summary>
            Searches for all the binding lists in the feature and include / exclude them in the populate condition depending on the deferred status.
            </summary>
            <param name="adapter">Adaptor under consideration</param>
            <param name="hTableDataMembers">Hashtable used to construct the populate condition</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.GetListCommand(Ifs.Fnd.Data.FndDataColumn)">
            <summary>
            Get the list command for a column. Used when building a search source.
            </summary>
            <param name="col">Column to get list command for</param>
            <returns>the list command</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.SearchAllControlsForAccessedDataMembers(Ifs.Fnd.AccessProvider.Activity.FndActivityDataAdapter,System.Windows.Forms.Control.ControlCollection,System.Collections.Hashtable)">
            <summary>
            Searches all data bound controls implementing IFndDataSourceAccessor for accessed data members
            </summary>
            <param name="adapter">Adaptor under consideration</param>
            <param name="controls">Control collection of the feature</param>
            <param name="hTableDataMembers">Hashtable used to construct the populate condition</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.UpdateAllAccessedDataMembers(System.String[],Ifs.Fnd.Data.FndBindingListBase,System.Collections.Hashtable)">
            <summary>
            Updates the Hashtable used to construct the populate condition with a given set of data members pertaining to a specific binding list.
            </summary>
            <param name="dataMembersForBindingList">Data members of the BindingList</param>
            <param name="bindingList">The BindingList which owns data members</param>
            <param name="hTableDataMembers">Hashtable containing all the accessed data members</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.GetDataMemberPath(Ifs.Fnd.Data.FndBindingListBase)">
            <summary>
            Finds the fully qualified data member path of a given BindingList
            </summary>
            <param name="currentBindingList">Relevent BindingList</param>
            <returns>The fully qualified data member path</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.ApplyUISecurity">
            <summary>
            Apply UI Security settings here
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.CountHits(Ifs.Fnd.Explorer.Interfaces.FndClientSearch)">
            <summary>
            Method for counting hits of a search - used by the search dialog
            </summary>
            <param name="clientSearch">search to count hits on</param>
            <returns>number of hits</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBase.GetPublishedCondition(Ifs.Fnd.Explorer.Interfaces.FndClientSearch)">
            <summary>
            Returns the information needed to publish a Saved Search so that it can be directly invoked later.
            Note: CSV values must be expanded by the caller using FndApplication.ContextSubstitutionVariables.ReplaceCondition().
            </summary>
            <param name="clientSearch">The FndClientSearch for this Saved Search</param>
            <returns>The activity handler to invoke and the serialized condition row to send to the acivity handler.</returns>
        </member>
        <member name="E:Ifs.Fnd.Feature.FndDataFeatureBase.ValidateBeforeSaveFailed">
            <summary>
            Raised when the ValidateBeforeSave Fails
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.TemplateManagerService">
            <summary>
            Gets the template manager service.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.MainDataAdapter">
            <summary>
            Gets or sets feature's main data adapter.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.ActiveLov">
            <summary>
            Gets the active List of Values field on the current feature. If active control is not an LOV, returns null.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.StandardToolBarVisible">
            <summary>
            Gets or sets a boolean flag indicating whether the standard toolbar should be displayed for this feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.SearchSourceChanged">
            <summary>
            Override in the feature if the search source is changed at runtime
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.ActivityContext">
            <summary>
            ActivityContext provides fuctionality for 
            server interaction within an activity. An object 
            of this instance can be activated with an URL 
            containing information for the generated RequestContext 
            that will be generated for the server invokes.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.DataSet">
            <summary>
            Gets the main data set of the main data adapter.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.Meta">
            <summary>
            Gets the meta model (schema) for the main dataset
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.CurrentMeta">
            <summary>
            Gets the meta model (schema) for the current dataset
            for the feature, default is to return main dataset meta
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.Title">
            <summary>
            Public override of the <see cref="P:Ifs.Fnd.Feature.FndDataFeatureBase.Title"/>
            property
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.LongTitle">
            <summary>
            Public override of the <see cref="P:Ifs.Fnd.Feature.FndDataFeatureBase.LongTitle"/>
            property
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.UIHasBeenDirty">
            <summary>
            Gets or sets a value indicating whether the UI has been dirty after New().
            Used to avoid showing the Save Changes dialog upon feature deactivate
            if the UI was never made dirty (touched). Then we consider the data in 
            the feature to be discardable.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.DeferredPopulateStrategy">
            <summary>
            Gets a value indiciating what deferred populate is used by this feature
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.CommandPopulate">
            <summary>
            Get the populate command.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.CommandSave">
            <summary>
            Get the save command.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.CommandSaveTemplate">
            <summary>
            Get the save template command.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.CommandNew">
            <summary>
            Get the new command.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.CommandNewFromTemplate">
            <summary>
            Get the new from template command.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.CommandDuplicate">
            <summary>
            Get the duplicate command.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.CommandDelete">
            <summary>
            Get the delete command.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.CommandLOV">
            <summary>
            Get the LOV command.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.CommandSearch">
            <summary>
            Get the Search command.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.CommandQuery">
            <summary>
            OBSOLETE: Use CommandSearch instead.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.CommandNewFromDraft">
            <summary>
            Get the Drafts command.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.CommandSaveDraft">
            <summary>
            Get the Save as Draft command.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.DataAdaptersDirty">
            <summary>
            Gets a value indication if data is dirty.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.UIDirty">
            <summary>
            Indicates if the focused control has changes not pulled by databinding yet (data binding pulling occurs on Validate which occurs on LostFucus)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.InitialQueryChunkSize">
            <summary>
            Gets the number of rows that is initially fetched from server before the user is asked to contine.
            Default is 2500 rows.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.NextQueryChunkSize">
            <summary>
            Gets the number of rows that is fetched from server before the user is asked to contine.again
            Default is 10000 rows.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.FndBindingManager">
            <summary>
            Gets the FndBindingManager for this container
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Feature.FndDataFeatureBase.SearchEntityChanged">
            <summary>
            Raised when the search entity changed
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.SearchEntity">
            <summary>
            Gets the meta model used for searching when this feature is activated. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.IsSearchable">
            <summary>
            Gets whether this feature supports search.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBase.SavedSearchManager">
            <summary>
            Gets a refernce to the saved search manager
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndDataFeatureBase.QueryChunkData">
            <summary>
            Custom data storage which is sent to the queryChunkNotify delegate.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndDataFeatureBaseCommands">
            <summary>
            Summary description for FndDataFeatureBaseCommands.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.Finalize">
            <summary>
            Destructor for FndDataFeatureBaseCommands
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.SetNewButtonRootCommand">
            <summary>
            If at any given time the new functionality is disabled while the duplicate is enabled set the duplicate command as the  new button root command
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.Dispose">
            <summary>
            IDisposable.Dispose() implementation to release resources used by this class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.Dispose(System.Boolean)">
            <summary>
            IDisposable.Dispose() implementation to release resources used by this class.
            </summary>
            <param name="disposing">True if called from Dispose(); false otherwise.</param>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.CommandManager">
            <summary>
            Get the CommandManager.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.PopulateCommand">
            <summary>
            Gets or sets the PopulateCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.LOVCommand">
            <summary>
            Gets or sets the LOVCommand for the active LOV of current feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.SaveCommand">
            <summary>
            Gets or sets the SaveCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.SaveDraftCommand">
            <summary>
            Gets or sets the SaveDraftCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.SaveTemplateCommand">
            <summary>
            Gets or sets the SaveTemplateCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.NewCommand">
            <summary>
            Gets or sets the NewCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.NewFromTemplateCommand">
            <summary>
            Gets or sets the NewFromTemplateCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.NewDraftCommand">
            <summary>
            Gets or sets the NewDraftCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.NewButtonMenu">
            <summary>
            Gets or sets the NewButtonMenu
            Used to add items, such as MRU items
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.QueryButtonMenu">
            <summary>
            Gets or sets the QueryButtonMenu for the drop down menu at the query button.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.MainMenuTemplatesMenuItems">
            <summary>
            Gets the drop down items of the New From Template main menu item.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.DuplicateCommand">
            <summary>
            Gets or sets the DuplicateCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.DeleteCommand">
            <summary>
            Gets or sets the DeleteCommand for the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureBaseCommands.SearchCommand">
            <summary>
            Gets or sets the SearchCommand for the feature.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndDataFeatureFormBase">
            <summary>
            Base class for all databound form features. Provides common
            functionality required for server interaction.
            TODO: Is this class (and FndFeatureFormBase) really used somewhere today? Loading features in modal forms?
            And if so, how are the commands, like Save, New and Delete invoked? There is no toolbar is it?
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndFeatureFormBase">
            <summary>
            Summary description for FndFeatureFormBase.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.#ctor">
            <summary>
            Initializes a new Ifs.Fnd.Feature.FndFeatureFormBase object.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.#ctor(Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Creates a new instance of the <see cref="T:Ifs.Fnd.Feature.FndFeatureFormBase"/> class.
            </summary>
            <param name="explorer">An instance of the explorer.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.FeatureLoading(Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            This method is called once when the feature is loading
            </summary>
            <param name="explorer">Reference to the explorer which contains the feature being loaded</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.FeatureLoaded">
            <summary>
            This method is called once when the feature has loaded
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.FeatureActivating">
            <summary>
            This method is called every time a feature is being 
            activated (made visible to the end user) by the framework
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.FeatureActivated">
            <summary>
            This method is called every time a feature is activated 
            (made visible to the end user) by the framework
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.FeaturePopulate">
            <summary>
            This method is called when after a feature has been activated and
            is visible. Here are were the server calls on activation should be done.
            Override to provide custom behavior.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.FeatureDeactivating(Ifs.Fnd.Feature.FndCancelDiscardEventArgs)">
            <summary>
            This method is called every time just before a feature is being
            deactivated (made invisible to the end user). The framework may cancel
            navigation if cancel parameter is set to true.
            </summary>
            <param name="e">e.Cancel = True will cancel navigation. e.Discard = True will mark feature for repopulate upon next activation.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.FeatureDeactivated">
            <summary>
            This method is called every time after a feature has been deactivated.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.FeatureUnloading">
            <summary>
            This method is called once when the feature is unloading
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.FeatureUnloaded">
            <summary>
            This method is called once when the feature has unloaded
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.MainDataSourceChanged(System.Boolean)">
            <summary>
            This method is called when the feature maindatasource is changed to 
            inform ExplorerFeatureService that feature maindatasource is changed. 
            Framework inform ExplorerFeatureService that datasource is changed 
            during feature activation.
            </summary>
            <param name="featureIsActivating">Parameter indicates if feature is in activation state. </param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.OnTitleChanged">
            <summary>
            This method should be called if the title is changed after the initialization of the feature.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Override to do something before closing or/and abort the closing operation.
            </summary>
            <param name="e">A System.ComponentModel.CancelEventArgs that contains the event data.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.GetServices(Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Initializes service references.
            </summary>
            <param name="explorer">IFndExplorer reference</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureFormBase.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Catches any non-catched exceptions in a feature and shows the exception dialog
            </summary>
            <param name="m"></param>
        </member>
        <member name="E:Ifs.Fnd.Feature.FndFeatureFormBase.TitleChanged">
            <summary>
            This event is fired once the value of the title is changed from within the feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureFormBase.Title">
            <summary>
            Title is a short description of the feature, to be shown
            in the banner area. This title should not reflect the data that is shown.
            Example: View Customer Order
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureFormBase.LongTitle">
            <summary>
            LongTitle is a long description of the feature, to be shown
            in the window title. This title should reflect the data that is shown.
            Example: View Customer Order 102 - Customer 101: Acme Inc
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureFormBase.ActiveViewMode">
            <summary>
            ActiveViewMode returns the current view mode of the active document type in active feature.
            This is List, Single, Dialog etc.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndDataFeatureFormBase.mainBindingManager">
            <summary>
            Foundation Binding Manager that manages all IFS control bindings for
            a feature. This is an extender provider and should typically only be 
            accessed trough the extended property on a specific control.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.#ctor">
            <summary>
            Initializes a new Ifs.Fnd.Feature.FndDataFeatureFormBase object.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.#ctor(Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Initializes a new Ifs.Fnd.Feature.FndDataFeatureFormBase object.
            </summary>
            <param name="explorer">The explorer</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.#ctor(Ifs.Fnd.AccessProvider.Activity.FndActivityContext,Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Initializes a new Ifs.Fnd.Feature.FndDataFeatureFormBase object
            with an existing ActivtyContext object.
            </summary>
            <param name="activityContext">The ActivtyContext object to use for server interaction</param>
            <param name="explorer">The explorer</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.#ctor(Ifs.Fnd.AccessProvider.Activity.FndActivityContext,Ifs.Fnd.AccessProvider.Activity.FndActivityDataAdapter,Ifs.Fnd.Explorer.Interfaces.IFndExplorer)">
            <summary>
            Initializes a new <see cref="T:Ifs.Fnd.Feature.FndDataFeatureFormBase"/> object
            with existing <see cref="T:Ifs.Fnd.AccessProvider.Activity.FndActivityContext"/> and <see cref="T:Ifs.Fnd.AccessProvider.Activity.FndActivityDataAdapter"/> objects.
            </summary>
            <param name="activityContext">The ActivtyContext object to use for server interaction</param>
            <param name="mainDataAdapter">The DataAdapter object to use as main data adapter</param>
            <param name="explorer">The explorer</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.EnumerateDataAdapters">
            <summary>
            Base for data adapter enumeration.
            </summary>
            <returns>Array of FndActivityDataAdapter objects.</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            If the Save button is enabled (the dataset is dirty) a MessageBox 
            with YesNoCancel buttons will ask for a Save action. Selecting 
            Yes will call the Save method.
            Override to change this behavior.
            </summary>
            <param name="e">A System.ComponentModel.CancelEventArgs that contains the event data.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndDataFeatureFormBase.activityContext">
            <summary>
            Component variable used in inherited controls (features)
            Must be a field, cannot be a property - this is due to
            how visual inheritance and components works in the 
            Visual Studio designer.
            
            Attention: The reason for having a field member with the
            name activityContext and a property with the name
            ActivityContext is that the propery is used in the code,
            and the field is used as a component in the inherited
            classes (features).
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.FeatureLoaded">
            <summary>
            Override of <code>FndFeatureFormBase.Loaded</code>.
            Attention: Will setup event mechanisms for data binding,
            if you override this method and still want that behavior
            you should call <code>base.Loaded()</code>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.FeatureUnloaded">
            <summary>
            Override of <code>FndFeatureFormBase.FeatureUnloaded</code>.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.FeaturePopulate">
            <summary>
            Override of <code>FndFeatureFormBase.FeaturePopulate</code>.
            Attention: Will fill any existing data adapters, 
            if you override this method and still want that behavior
            you should call <code>base.FeaturePopulate()</code>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.InquireCommands(System.Object,System.EventArgs)">
            <summary>
            Fired events on new, delete and save commands to check for enable/disable state
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.Save">
            <summary>
            Implements the features DataAdapter save method and apply changes
            Override this to change the complete save behavior.
            This method calls the following methods
            	ValidateBeforeSave()
            	InvokeSaveMethods()
            	HandleResultAfterSave()
            	
            It is possible to override these methods individual to change their behavior.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.PrepareSave">
            <summary>
            Empty implementation. Override this to implement any prepare of data before validate and save
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.ValidateBeforeSave">
            <summary>
            Calls validate for all controls on the feature. 
            </summary>
            <returns> true if validation is successful; otherwise, false.</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.InvokeSaveMethods">
            <summary>
            Calls the save command for all dirty rows
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.HandleResultAfterSave">
            <summary>
            Empty implementation. Override this to implement a behavior after the data is saved. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.New">
            <summary>
            Empty implementation. Override and implement action.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataFeatureFormBase.Delete">
            <summary>
            Empty implementation. Override and implement action.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Feature.FndDataFeatureFormBase.ValidateBeforeSaveFailed">
            <summary>
            Raised when the ValidateBeforeSave Fails
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureFormBase.MainDataAdapter">
            <summary>
            Gets or sets feature's main data adapter.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureFormBase.ActivityContext">
            <summary>
            ActivityContext provides fuctionality for 
            server interaction within an activity. An object 
            of this instance can be activated with an URL 
            containing information for the generated RequestContext 
            that will be generated for the server invokes.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureFormBase.DataSet">
            <summary>
            Gets the main data set of the main data adapter.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureFormBase.Meta">
            <summary>
            Gets the meta model (schema) for the main dataset
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureFormBase.CurrentMeta">
            <summary>
            Gets the meta model (schema) for the current dataset
            For RWC, default is to return main dataset Meta
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureFormBase.CommandSave">
            <summary>
            Get the save command.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureFormBase.CommandNew">
            <summary>
            Get the new command.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureFormBase.CommandDelete">
            <summary>
            Get the delete command.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureFormBase.DataAdaptersDirty">
            <summary>
            Gets a value indication if data is dirty.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureFormBase.UIDirty">
            <summary>
            Indicates if the focused control has changes not pulled by databinding yet (data binding pulling occurs on Validate which occurs on LostFucus)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataFeatureFormBase.FndBindingManager">
            <summary>
            Gets the binding manager for the feature instance.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndDataNotFoundException">
            <summary>
            This exception is raised when no data is found when fetching values from the server.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ifs.Fnd.Feature.FndDataNotFoundException"/> class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ifs.Fnd.Feature.FndDataNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ifs.Fnd.Feature.FndDataNotFoundException"/> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This is the serialization constructor.
            </summary>
            <param name="info">Serialization Information</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDataNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataNotFoundException.Icon">
            <summary>
            Overridden. See <see cref="P:Ifs.Fnd.FndException.Icon"/>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDataNotFoundException.Caption">
            <summary>
            Overridden. See <see cref="P:Ifs.Fnd.FndException.Caption"/>
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase">
            <summary>
            Base class for all features interacting with a collection of data rows.
            Normally overview type of features.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndDocumentCollectionContainer">
            <summary>
            IFndDocumentCollectionContainer specifies the behavior of a feature 
            which shows a collection of document instances of the same type.
            (multi record feature/overview feature).
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndDocumentCollectionContainer.CurrentStateAllowsObjCon">
            <summary>
            Gets whether the current state of the document allows Object Connections 
            </summary>        
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndDocumentCollectionContainer.InitializeOutputChannels">
            <summary>
            Initializes output channels
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndDocumentCollectionContainer.QuickPrintExecute(System.Boolean,System.Boolean)">
            <summary>
            Execute Quick Print
            </summary>
            <param name="selectedRowsOnly"></param>
            <param name="includeConditionalFormatting"></param>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndDocumentCollectionContainer.QuickPrintInquire">
            <summary>
            Inquire Quick Print
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndDocumentCollectionContainer.ConditionalFormattingInquire">
            <summary>
            Inquire Conditional Formatting is Applied Currently
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndDocumentCollectionContainer.CurrentOutputChannel(System.Boolean,System.Collections.Hashtable@,System.Boolean)">
            <summary>
            Returns the data for the current output channel
            </summary>
            <param name="selectedRows">specifies whether to fetch only selected rows or not</param>
            <param name="format">hash table containing the formats(key is the column index, value is the format) - used only in converted features</param>
            <param name="includeSplitRows">indicates if rows after table split should be included</param>
            <returns>Returns the data row collection containing data to create the output file</returns>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndDocumentCollectionContainer.Documents">
            <summary>
            All documents shown
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndDocumentCollectionContainer.SelectedDocuments">
            <summary>
            Selected documents. Subset of Documents collection
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndDocumentCollectionContainer.FirstSelectedDocument">
            <summary>
            The first item of the SelectedDocuments collection
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndDocumentCollectionContainer.Document">
            <summary>
            Gets the current (from a data binding perspective) document.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Feature.IFndDocumentCollectionContainer.OutputChannelsStateChanged">
            <summary>
            Occurs when a table control suitable for a output channel is selected or deselected
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndDocumentCollectionContainer.StickyNotesEnabled">
            <summary>
            Gets whether sticky notes are allowed for the current document
            Default should be true
            </summary>        
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndDocumentCollectionContainer2">
            <summary>
            Extends IFndDocumentCollectionContainer with a needed property to improve performance. 
            TODO: Include in IFndDocumentCollectionContainer in next core
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndDocumentCollectionContainer2.SelectedDocumentsCount">
            <summary>
            Same as SelectedDocuments.Count with the difference being much more faster due to not
            having to create a collection of selected documents. Use this one when you only want
            to perform a quick count of the selected documents, without having any interest in
            the actual documents data itself.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndRecordKeyListProvider">
            <summary>
            Feature classes that can hold record key lists implement this interface trough which a record key list is provided.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndRecordKeyListProvider.RecordKeyList">
            <summary>
            Gets the record key list instance when available and null otherwise.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndAttachmentDocument">
            <summary>
            implemented by features which supports attachments
            </summary>;
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndAttachmentDocument.AttachmentsEnabledUser">
            <summary>
            Gets whether the current document shows attachments 
            </summary>        
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndAttachmentDocument.AttachmentLuName">
            <summary>
            Gets the LuName of the current document which will be used to fetch attachment servers
            </summary>        
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndAttachmentDocument.AttachmentKeys">
            <summary>
            Gets the Keys of the current document which will be used to fetch attachments 
            </summary>        
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndAttachmentDocument3">
            <summary>
            implemented by features which supports attachments
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndAttachmentDocument3.AttachmentKeyDescriptions">
            <summary>
            Gets the Keys of the current document which will be used to fetch attachments 
            </summary>        
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.#ctor">
            <summary>
            Creates a new instance of FndDocumentCollectionFeatureBase class
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.HandleResultAfterSave">
            <summary>
            Fires OnMainDataRecordChanged and OnDataRecordChanged after Save. 
            If overridden, make sure to call base.HandleResultAfterSave
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.ActivationComplete">
            <summary>
            DO NOT USE!
            See IFndFeatureInternal
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.DoSearch(Ifs.Fnd.Data.FndDataRow,Ifs.Fnd.Data.FndQueryOptions)">
            <summary>
            Override of <code>FndDataFeatureBase.DoSearch</code>. 
            Fills the main data adapter. Overriden to provide custom behavior.
            </summary>
            <param name="row">Data row containing condition</param>
            <param name="options">Query options (containing sorting information)</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.FeatureActivated">
            <summary>
            Called when the feature gets activated.
            Override to provide custom behavior.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.FeaturePopulate">
            <summary>
            Called after the feature has been activated and starts populating. 
            Default behaviour is to parse the URL after action=query and 
            condition and call PopulateDocument which will fill the dataset using
            the main FndDataAdapter.
            If you don't want this behaviour, you should override PopulateDocument.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.commandShowDetails_Execute(System.Object,Ifs.Fnd.Windows.Forms.FndCommandExecuteEventArgs)">
            <summary>
            Show detail will always create new selection if the number of selected documents
            is greater than 1. If it's only 1 document selected then that should not get added
            to the selection even if the selection pane is visible (i.e. there is an active
            selection).
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.ShowDetailsForSelectedDocuments">
            <summary>
            Navigates do detail feature with selected documents
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.ApplyTablePadding(System.Windows.Forms.ContainerControl)">
            <summary>
            Applies a padding to the whole control. The padding is read from the Theme and is applied to APF cTableManager as well
            </summary>
            <param name="container">The container control to apply the padding to, typically a FndFeature</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.CurrentStateAllowsObjCon">
            <summary>
            returns whether the current row state allowes for object connections
            </summary>
            <returns>true if current row state allows object connections</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.InitializeOutputChannels">
            <summary>
            Initializes output channels
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.QuickPrintExecute(System.Boolean,System.Boolean)">
            <summary>
            Execute Quick Print
            </summary>
            <param name="selectedRowsOnly"></param>
            <param name="includeConditionalFormatting"></param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.QuickPrintInquire">
            <summary>
            Inquire Quick Print
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.ConditionalFormattingInquire">
            <summary>
            Inquire Conditional Formatting is Applied Currently
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.CurrentOutputChannel(System.Boolean,System.Collections.Hashtable@,System.Boolean)">
            <summary>
            Returns the data for the current output channel
            </summary>
            <param name="selectedRows">specifies whether to fetch only selected rows or not</param>
            <param name="format">hash table containing the formats(key is the column index, value is the format) - used only in converted features</param>
            <param name="includeSplitRows">indicates if rows after table split should be included</param>
            <returns>Returns the data row collection containing data to create the output file</returns>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.InitialQueryChunkSizeVerificationEnabled">
            <summary>
            Gets or sets a value indicating whether the verification of number of rows that is 
            initially fetched from server before the user is asked to contine is enabled or not. 
            The default is <b>true</b>.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.MainBindingList">
            <summary>
            Gets or sets the main binding list used in this form. This is normally the
            binding list driven from the MainDataAdapter. This should be set by the feature developer.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.CommandShowDetails">
            <summary>
            Get the ShowDetails command.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.ActiveViewMode">
            <summary>
            ActiveViewMode returns the current view mode of the active document type in active feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.Documents">
            <summary>
            Returns all documents contained in this feature using the dataset from
            the main FndDataAdapter
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.SelectedDocuments">
            <summary>
            Gets all selected rows (if MainBindingList property is set), otherwise
            it returns an empty FndDataRowCollection.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.FirstSelectedDocument">
            <summary>
            Gets the first selected row if MainBindingList property is set, otherwise
            it returns null.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.Document">
            <summary>
            Gets the current (from a data binding perspective) document.
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.OutputChannelsStateChanged">
            <summary>
            Occurs when a table control suitable for a output channel is selected or deselected
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.StickyNotesEnabled">
            <summary>
            Gets whether sticky notes are allowed for the current document
            Default should be true
            </summary>  
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.SelectedDocumentsCount">
            <summary>
            Same as SelectedDocuments.Count with the difference being much more faster due to not
            having to create a collection of selected documents. Use this one when you only want
            to perform a quick count of the selected documents, without having any interest in
            the actual documents data itself.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.RecordKeyList">
            <summary>
            Implements <see cref="T:Ifs.Fnd.Feature.IFndRecordKeyListProvider"/>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.AttachmentsEnabledUser">
            <summary>
            Gets whether the current document shows attachments 
            </summary>        
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.AttachmentLuName">
            <summary>
            Gets the LuName of the current document which will be used to fetch attachment servers
            </summary>        
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.AttachmentKeys">
            <summary>
            Gets the Keys of the current document which will be used to fetch attachments 
            </summary>       
        </member>
        <member name="P:Ifs.Fnd.Feature.FndDocumentCollectionFeatureBase.AttachmentKeyDescriptions">
            <summary>
            Gets the KeyDescriptions of the current document which will be used to fetch attachments 
            </summary> 
        </member>
        <member name="T:Ifs.Fnd.Plugin.FndExplorerPluginBase">
            <summary>
            FndExplorerPluginBase is the topmost base class for implementing plugins in the
            Explorer. It provides a default implmentation of IFndExplorerPlugin and contains
            properties for easy access of the most common services within the Explorer framework.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Plugin.FndExplorerPluginBase.CommandManager">
            <summary>
            Command manager object owned by the plugin.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Plugin.FndExplorerPluginBase.activityContext">
            <summary>
            Component variable used in inherited controls (features)
            Must be a field, cannot be a property - this is due to
            how visual inheritance and components works in the 
            Visual Studio designer.
            
            Attention: The reason for having a field member with the
            name activityContext and a property with the name
            ActivityContext is that the propery is used in the code,
            and the field is used as a component in the inherited
            classes (features).
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndExplorerPluginBase.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of FndExplorerPluginBase and place it in the provided container.
            </summary>
            <param name="container">Container to host the FndExplorerPluginBase instance</param>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndExplorerPluginBase.#ctor">
            <summary>
            Creates a new instance of FndExplorerPluginBase
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndExplorerPluginBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndExplorerPluginBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndExplorerPluginBase.Initialize">
            <summary>
            Called when plugin is being initialized.
            All properties defined in this class are available for use
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndExplorerPluginBase.Terminate">
            <summary>
            Called when plugin is being terminated.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndExplorerPluginBase.SetTheme">
            <summary>
            Should invoke a reset of the control properties that have been themed.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndExplorerPluginBase.OnChartModeChanged(System.Object,Ifs.Fnd.Explorer.Interfaces.FndDataSourceNotificationEventArgs)">
            <summary>
            This should be overriden by plugin to alter behaviour when chart mode is changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndExplorerPluginBase.NavigationNotificationService">
            <summary>
            Gets the IFndExplorerNavigationNotificationService service.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndExplorerPluginBase.DataNotificationService">
            <summary>
            Gets the IFndExplorerDataNotificationService service.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndExplorerPluginBase.ContextPaneUIService">
            <summary>
            Gets the IFndExplorerStatusBarUIService service.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndExplorerPluginBase.NavigationService">
            <summary>
            Gets the IFndExplorerNavigationService service.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndExplorerPluginBase.Explorer">
            <summary>
            Gets the IFndExplorer which hosts this plugin.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndExplorerPluginBase.ActivityContext">
            <summary>
            ActivityContext provides fuctionality for 
            server interaction within an activity. An object 
            of this instance can be activated with an URL 
            containing information for the generated RequestContext 
            that will be generated for the server invokes.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndFeatureUrlAddress">
            <summary>
            A subclass of the <seealso cref="T:Ifs.Fnd.Core.FndUrlAddress"/> that 
            adds IFS specific parsing.
            </summary>
            <example>
            URL: ifswin:Ifs.Application.PlantPumpUI.DetailViewer
            Protocol=ifswin
            Address=Ifs.Application.PlantPumpUI.DetailViewer
            NameSpace=Ifs.Application.PlantPumpUI
            ControlName=DetailViewer
            AssemblyName=Ifs.Application.PlantPumpUI.dll
            FullTypeName=Ifs.Application.PlantPumpUI.DetailViewer
            </example>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndFeatureUrlAddress.#ctor(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Initializes a new instance of the Ifs.Fnd.Feature.FndFeatureUrlAddress class
            </summary>
            <param name="url">Initial URL</param>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureUrlAddress.ControlName">
            <summary>
            Gets the part of the URL that reflects the name of the feature control
            </summary>
            <example>
            URL: ifswin:Ifs.Application.PlantPumpUI.DetailViewer
            ControlName=DetailViewer
            </example>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureUrlAddress.FullTypeName">
            <summary>
            Gets the part of the URL that reflects the full type name of the feature control
            </summary>
            <example>
            URL: ifswin:Ifs.Application.PlantPumpUI.DetailViewer
            FullTypeName=Ifs.Application.PlantPumpUI.DetailViewer
            </example>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureUrlAddress.AssemblyName">
            <summary>
            Gets the name of the assembly that would be loaded if this 
            URL was used in the FndFeatureContainer.Navigate method.
            </summary>
            <example>
            URL: ifswin:Ifs.Application.PlantPumpUI.DetailViewer
            AssemblyName=Ifs.Application.PlantPumpUI.dll
            </example>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndFeatureUrlAddress.IsIfswinBlank">
            <summary>
            Determines whether the URL is a ifswin:blank page.  
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Windows.Forms.FndFieldExtender">
            <summary>
            Provides a FieldLabel property for Controls.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndFieldExtender.#ctor">
            <summary>
            Initializes a new instance of the FndFieldExtender class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndFieldExtender.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the FndFieldExtender class.
            </summary>
            <param name="container">component collection of parent</param>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndFieldExtender.CanExtend(System.Object)">
            <summary>
            Returns whether or not the Provider can provide an Extender for the given object 
            in the specified category.
            </summary>
            <param name="extendee">The name for the Extender being requested.</param>
            <returns>The implementer should return True if the Provider can provide an Extender for the given 
            object in the specified category and name.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndFieldExtender.GetFieldLabel(Ifs.Fnd.Windows.Forms.FndTextBox)">
            <summary>
            The public get method for the extended FndLabel propery.
            </summary>
            <param name="tb">FndTextBox</param>
            <returns>Returns the FndLabel associated with the provided FndTextBox.</returns>
        </member>
        <member name="M:Ifs.Fnd.Windows.Forms.FndFieldExtender.SetFieldLabel(Ifs.Fnd.Windows.Forms.FndTextBox,Ifs.Fnd.Windows.Forms.FndLabel)">
            <summary>
            The public set method for the extended FndLabel propery.
            </summary>
            <param name="c">FndTextBox</param>
            <param name="value">FndLabel</param>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndLOVProviderBase">
            <summary>
            Base class for LOV dialogs.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.columnConfiguration">
            <summary>
            LOV Column settings serialized.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.rows">
            <summary>
            Collection of all rows returned from server query
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.selectedRows">
            <summary>
            Collection of selected rows in LOV
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.allRows">
            <summary>
            Collection of all populated rows in LOV
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.activityHandler">
            <summary>
            Context for LOV dialog.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.dataColumn">
            <summary>
            Data column invoking LOV dialog.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.condition">
            <summary>
            The current row (for metadata).
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.initialCondition">
            <summary>
            The initial condition [to use when searching and pupulating]
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.clientSearch">
            <summary>
            The current search condition.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.explorer">
            <summary>
            Explorer instance using the LOV.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.caching">
            <summary>
            Caching type used in LOV dialog.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.listMethod">
            <summary>
            Caching type used in LOV dialog.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.panel1">
            <summary>
            The panel to place custom LOV UI on. Needs to be protected to 
            make visual inheritance to work.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.skipRows">
            <summary>
            Skip rows.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.searchPreSkipRows">
            <summary>
            Search previous skip rows.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndLOVProviderBase.totalCount">
            <summary>
            Total count.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.#ctor">
            <summary>
            Default constructor for FndLOVProviderBase.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.Initialize(System.Windows.Forms.Control,Ifs.Fnd.Explorer.Interfaces.IFndExplorer,Ifs.Fnd.AccessProvider.Activity.FndActivityHandlerBase,Ifs.Fnd.Data.FndDataColumn,Ifs.Fnd.Explorer.Interfaces.FndCacheType,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Initializes the LOV.
            </summary>
            <param name="invoker">Reference to the <see cref="T:System.Windows.Forms.Control"/> instance that invoked the LOV.</param>
            <param name="explorer">Explorer instance using the LOV.</param>
            <param name="handler">ActivityContext from the LOV user.</param>
            <param name="dataColumn">Referencefield for which the LOV is called upon.</param>
            <param name="caching">Caching type used for this LOV.</param>
            <param name="condition">Extra conditions passed from the LOV user.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.SetCondition">
            <summary>
            Sets clientsearch condition.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.SetClientSearch(Ifs.Fnd.Explorer.Interfaces.FndClientSearch)">
            <summary>
            Sets clientsearch.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.FindMatch(System.String)">
            <summary>
            Validates a value in order to find LOV entries matching condition passed in Initialize.
            </summary>
            <param name="matchPattern">String to match</param>
            <returns>Number of matching entries.</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.ClearCache">
            <summary>
            Removes all entries from the result cache.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.ConditionDialog">
            <summary>
            Displays a dialog to let user set search condition.
            </summary>
            <returns>True if user selects Ok, False otherwise.</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.Activating">
            <summary>
            Called by LOV Manager when LOV is being created.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.Deactivating">
            <summary>
            Called by LOV Manager when LOV is being closed.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.OptimizeColumnWidth(Ifs.Fnd.Windows.Forms.FndListView)">
            <summary>
            Optimizes the width of each column of the given <see cref="T:Ifs.Fnd.Windows.Forms.FndListView"/> to accommodate its widest item
            subject to the condition that maximum column width would be half the width of listview.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.SetResult">
            <summary>
            Called when OK button has been pressed - override in impl. classes.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.FetchNextRows(Ifs.Fnd.Data.FndDataRowCollection)">
            <summary>
            Called when Get button has been pressed - override in impl. classes.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.GetTotalCount">
            <summary>
            All item count.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.QueryServer(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.QueryServer(Ifs.Fnd.Explorer.Interfaces.FndClientSearch)">
            <summary>
            Execute server query using condition passed in initialize.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.RefreshFetchPanel(Ifs.Fnd.Data.FndDataRowCollection)">
            <summary>
            Execute server query using condition passed in search.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndLOVProviderBase.QuerySearch(Ifs.Fnd.Explorer.Interfaces.FndClientSearch)">
            <summary>
            Execute server query using condition passed in search.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndLOVProviderBase.MultiSelect">
            <summary>
            Sets or gets flag indicating if multiple rows can be selected in the LOV dialog.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndLOVProviderBase.ListCommand">
            <summary>
            Temp property to sets list command for the LOV dialog.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndLOVProviderBase.SelectedRows">
            <summary>
            Gets the selected rows. May contain 0 or more rows.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndLOVProviderBase.OKButtonEnabled">
            <summary>
            Sets or gets flag indicating if the OK button is be enabled.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndLOVProviderBase.maxRows">
            <summary>
            Max rows returned from server.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndLOVProviderBase.DataSourceName">
            <summary>
            Get ID to be used when accessing saved searches containing name of the feature and the control.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndLOVProviderBase.Title">
            <summary>
            Get or Set the title of the LOV dialog. Default value is IFS Applications.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndLOVProviderBase.ColumnConfiguration">
            <summary>
            Gets or sets the serialized string of LOV Column settings.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndLOVProviderBase.PreserveColumnWidth">
            <summary>
            Gets/sets a boolean value indicating if existing column widths should be changed or not.
            a value of <b>true</b> means that current column widths should be retained and not modified. 
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndLOVProviderBase.ActiveLov">
            <summary>
            Gets the ActiveLov 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndQueryChunkNotifyDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndQueryChunkNotifyDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase">
            <summary>
            Provides a base class for SearchExploreSource plugins. 
            Contains default implementations for ISearchExploreSource. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Default constructor.
            </summary>
            <param name="container">component collection of parent</param>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.Initialize">
            <summary>
            Initializes the plugin. By default it calls the virtual InitializeSearchExplore method.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.RegisterSearchExploreSource">
            <summary>
            Registers SearchExploreSource using the this.SearchExploreType.Entity as the registration key.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.InitializeSearchExplore">
            <summary>
            Initializes a SearchExplore plugin. 
            This method does by default call RegisterSearchExploreSource()
            If you don't call base.InitializeSearchExplore() you must either call
            the RegisterSearchExploreSource() yourself or perform the registration manually.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.MainDataAdapter">
            <summary>
            Gets or sets main data adapter for this SearchExploreSource.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.ExploreCategories">
            <summary>
            Gets Explore Categories. (Root nodes in the Explore Source tree branch)
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.MetaDictionary">
            <summary>
            Gets the FndSearchExploreMetaDictionary.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.SearchExploreResultFeatureUrl">
            <summary>
            Gets the url of the feature to display the results. Subclasses can override this method to return a different Url.
            </summary>
            <returns>A string representing the url.</returns>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.ExploreResultFeatureUrl">
            <summary>
            Gets the url of the feature to display the results when exploring. Subclasses can override this method to return a different Url.
            </summary>
            <returns>A string representing the url.</returns>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.SearchResultFeatureUrl">
            <summary>
            Gets the url of the feature to display the results when searching. Subclasses can override this method to return a different Url.
            </summary>
            <returns>A string representing the url.</returns>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.SearchExploreType">
            <summary>
            Gets the searchable/explorable view type. Subclasses must override this method.
            </summary>
            <returns>FndLUEntityView derived class.</returns>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.SearchSourceDisplayName">
            <summary>
            Gets the display string shown in the search in combobox.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.DefaultSearchColumns">
            <summary>
            Gets the search columns to show when no configuration data is present 
            in the profile. Subclasses must override this method.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.SearchFieldFactory">
            <summary>
            Search field factory for creating the search controls
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.Context">
            <summary>
            Return current context
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Plugin.FndSearchExploreSourcePluginBase.EnableGroupSum">
            <summary>
            Gets/Sets whether the group and sum column should be enabled in the advanced search dialog
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase">
            <summary>
            Base class for all features interacting with a single
            instance of a data row.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndDocumentContainer">
            <summary>
            IFndDocumentContainer specifies the behavior of a feature which shows
            one document instance (single record feature).
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndDocumentContainer.EndAllCurrentEdits">
            <summary>
            Ends all current edits.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndDocumentContainer.CurrentStateAllowsObjCon">
            <summary>
            Gets whether the current state of the document allows Object Connections 
            </summary>        
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndDocumentContainer.DocumentKey">
            <summary>
            The key which is shown/edited. May be null when entering a new record
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndDocumentContainer.Document">
            <summary>
            The document data which is being edited/shown.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndDocumentContainer.StickyNotesEnabled">
            <summary>
            Gets whether sticky notes are allowed for the current document
            Default should be true
            </summary>        
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndRecordKeyList">
            <summary>
            This interface should be implemented by a class that holds selected records for a feature. 
            Typically this is true for ApplicationForms single record features that can be filled with multipple records even though only one 
            is displayed at one time. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndRecordKeyList.SelectNextRecord">
            <summary>
            Selects the next document in the list if possible
            <remarks>This method does not guarantee that the requested action will be sucessfull. The user could cancel a save request 
            or the action can be interupted by a number of other reasons. If the result of the request should be followed up by some reason
            the caller should also listen to the <see>IFndExplorer.DataNotification.MainDataRecordChanged</see> event</remarks>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndRecordKeyList.SelectPreviousRecord">
            <summary>
            Selects the previous docuemnt in the list if possible
            <remarks>This method does not guarantee that the requested action will be sucessfull. The user could cancel a save request 
            or the action can be interupted by a number of other reasons. If the result of the request should be followed up by some reason
            the caller should also listen to the <see>IFndExplorer.DataNotification.MainDataRecordChanged</see> event</remarks>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndRecordKeyList.DisplayColumns">
            <summary>
            Gets a column collection containing a subset of columns that the implementer should provide
            as the information to be used by the Document Selector. I.e. the information set that should be displayed when selecting.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndRecordKeyList.Records">
            <summary>
            Get the collection of rows that are available to select from. 
            <remarks> These rows are built on the same meta that is retreived from <see>Ifs.Fnd.Feature.IFndRecordKeyList.DisplayColumns</see></remarks>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndRecordKeyList.SelectedRecord">
            <summary>
            Gets or sets the currently selected record in the record selection list. 
            <remarks>This method does not guarantee that the requested action will be sucessfull. The user could cancel a save request 
            or the action can be interupted by a number of other reasons. If the result of the request should be followed up by some reason
            the caller should also listen to <see>IFndExplorer.DataNotification.MainDataRecordChanged</see> event</remarks>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndRecordKeyList.SelectedRecordRowId">
            <summary>
            Gets the current working document <see>Ifs.Fnd.Data.FndDataRow.RowIdentity</see> or Sets the current working document from the given RowIdentity
            <remarks>This method does not guarantee that the requested action will be sucessfull. The user could cancel a save request 
            or the action can be interupted by a number of other reasons. If the result of the request should be followed up by some reason
            the caller should also listen to the <see>IFndExplorer.DataNotification.MainDataRecordChanged</see> event</remarks>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndRecordKeyList.CanSelectNextRecord">
            <summary>
            Gets a value indicating if there are more documents in the list that can be selected next to the currently selected.
            <remarks>This property answers the question if there are any document in the list of documents that could be selected. 
            It does not guarantee that a call to SelectNextRecord will actually succeed.</remarks>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndRecordKeyList.CanSelectPreviousRecord">
            <summary>
            Get a value indicating if there is a document in the list prior to the selected one that can be selected.
            <remarks>This property answers the question if there are any document in the list of documents that could be selected. 
            It does not guarantee that a call to SelectPreviousRecord will actually succeed.</remarks>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.#ctor">
            <summary>
            Initializes a new Ifs.Fnd.Feature.FndSingleDocumentFeatureBase object.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.CurrentStateAllowsObjCon">
            <summary>
            returns whether the current row state allowes for object connections
            </summary>
            <returns>true if current row state allows object connections</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.FeatureActivated">
            <summary>
            Called when the feature gets activated.
            Override to provide custom behavior.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.FeatureLoaded">
            <summary>
            Override of <code>FndDataFeatureBase.FeatureLoaded</code>.
            Enables to see your drafts that are possible to show in this feature,
            if you override this method and still want that behavior
            you should call <code>base.FeatureLoaded()</code>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.FeaturePopulate">
            <summary>
            Called after the feature has been activated and starts populating.
            Override to provide custom behavior.
            </summary>
            <remarks>
            Default implementaion expects the "action" parameter on the  
            activity context's URL address. Valid parameters are:
            <list type="bullet">
            <item>new</item>
            <description>If main data adapter's data set and its default
            table (MainDataAdapter.DataSet.Tables[0]) exist, the table
            will get cleared, the main data adapter's Prepare method
            will be called, and the table will get populated with the
            data rows from the result of that call.</description>
            <item>get</item>
            <description>If main data adapter's data set and its default
            table (MainDataAdapter.DataSet.Tables[0]) exist, the key
            parameters (i.e. key1=somevalue, key2=somevalue etc.) will 
            be extracted from the activity context's URL, the main data 
            adapter's Get method will be called with the keys as search 
            parameter, and the table will get populated with the data 
            rows from the result of that call. Moreover, the resulting 
            rows will be added to a selection.</description>
            </list>
            If no "action" parameter is provided, the feature will be 
            started with a populate.
            </remarks>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.Get">
            <summary>
            If main data adapter's data set and its default
            table (MainDataAdapter.DataSet.Tables[0]) exist, the key
            parameters (i.e. key1=somevalue, key2=somevalue etc.) will 
            be extracted from the activity context's URL, the main data 
            adapter's Get method will be called with the keys as search 
            parameter, and the table will get populated with the data 
            rows from the result of that call. Moreover, the resulting 
            rows will be added to a selection.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.PopulateDocument(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Fills the main data adapter.
            </summary>
            <param name="row">Condition data row.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.ActivationComplete">
            <summary>
            DO NOT USE!
            See IFndFeatureInternal
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.SetIncludedColumnsForGetMethod(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Includes all columns in formatstring and primary key columns
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.New">
            <summary>
            Implements the features MainDataAdapter new method. Clears any current
            data in the dataset.
            Override this to change the complete new behavior.
            This method calls the following methods
            	CreateRowFromMetaData()
            	InvokePrepareNew()
            	AddNewRowToDataset()
            	HandleResultAfterNew()
            	
            It is possible to override these methods individual to change their behavior.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.IsNewUrl(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Returns true if the supplied url has action=new
            </summary>
            <param name="url">The url address to check</param>
            <returns>True if the url includes action new</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.IsDraftUrl(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Returns true if the supplied url has action=draft
            </summary>
            <param name="url">The url address to check</param>
            <returns>True if the url includes action draft</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.IsDuplicateUrl(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Returns true if the supplied url has action=duplicate
            </summary>
            <param name="url">The url address to check</param>
            <returns>True if the url includes action duplicate</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.AskForSaveIfDirty(Ifs.Fnd.Feature.FndCancelDiscardEventArgs)">
            <summary>
            Override of <code>FndDataFeatureBase.AskForSaveIfDirty</code>.
            Checks if feature is in New-mode and if data is modified (UIDirty)
            after the PrepareNew call. If data is not modified,
            it will not display the MessageBox for Save changes.
            </summary>
            <param name="e">e.Cancel = True will cancel deactivation. e.Discard = True will mark feature for repopulate upon next activation.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.CreateRowFromMetaData">
            <summary>
            Creates a new row based on the meta data for the data set
            </summary>
            <returns>The new empty row</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.InvokePrepareNew(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Calls the prepare command for the new row
            </summary>
            <param name="newRow">The new data row</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.AddNewRowToDataset(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Adds the new row to the data set
            </summary>
            <param name="newRow">The new data row</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.HandleResultAfterNew(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Empty implementation. Override this to implement a behavior after the data is saved. 
            </summary>
            <param name="newRow">The new data row</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.Duplicate">
            <summary>
            Default implementation of duplicate functionality. It is similar to
            New, but a duplication source is used to set values for all non-default
            values. Clears any current data in the dataset.
            Override this to change the complete new behavior.
            This method calls the following methods
            	CreateRowFromMetaData()
            	InvokePrepareNew()
            	MergeDuplicate()
            	AddNewRowToDataset()
            	HandleResultAfterNew()
            	
            It is possible to override these methods individual to change their behavior.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.MergeRowAttributes(Ifs.Fnd.Data.FndDataRow,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Merges values from sourceRow to newRow without overwriting not null
            or primary key attributes.
            
            Note to overriders, you must call base.MergeRowAttributes() in order
            to merge, then process newRow instance for.
            </summary>
            <param name="newRow">New row to assign attributes to.</param>
            <param name="sourceRow">Source row to assign attributes from.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.DoMergeRowAttributes(Ifs.Fnd.Data.FndDataRow,Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Merges values from sourceRow to newRow without overwriting not null
            or primary key attributes.
            </summary>
            <param name="newRow">New row to assign attributes to.</param>
            <param name="sourceRow">Source row to assign attributes from.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.MergeDuplicateSource(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Duplicates a row from key1 parameter in URL.
            
            Gets key provided as URL parameter. Only one key is supported (key1).
            Invokes Get() command to get the duplication source attributes. 
            Calls MergeRows to merge the attributes.
            </summary>
            <param name="newRow">Duplicate destination row.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.Draft">
            <summary>
            Populates the table with the draft with draft id sent on the url.
            No data will be populated if the draft does not belong to the current user.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.IsTemplateUrl(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Returns true if the supplied url has action=template
            </summary>
            <param name="url">The url address to check</param>
            <returns>True if the url includes action new</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.Template">
            <summary>
            Populates the feature with data from the saved template.
            Data from PrepareNew will overwrite the keys and any not null
            value from PrepareNew will be used instead of data from the template.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.SetAttrToNonExistent(Ifs.Fnd.Data.FndDataRow)">
            <summary>
            Utility method that sets the Existent property in all non primary key attributes to false.
            </summary>
            <param name="dataRow">The datarow to process.</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.GetTemplateIdFromNavigateUrl(Ifs.Fnd.Core.FndUrlAddress)">
            <summary>
            Retrieves the template id from an url
            </summary>
            <param name="url">FndUrlAddress containing an id</param>
            <returns>string containing the id</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.GetDefaultTemplateId">
            <summary>
            Checks the profile if a default template exists and returns the id
            </summary>
            <returns>Id of template. Returns empty string if no default template is specified</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.Delete">
            <summary>
            Mark the last action as delete so that when the user saves it,
            current key can be removed from url and the document selector list
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.HandleResultAfterSave">
            <summary>
            If feature was in action-state "new", "draft" or "template" before this will update
            the current url to a "get" action with the DocumentKey as id.
            If overridden, make sure to call base.HandleResultAfterSave
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.HandleResultAfterSaveDraft">
            <summary>
            Override this to implement a behavior after the data is saved as draft. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.DoSearch(Ifs.Fnd.Data.FndDataRow,Ifs.Fnd.Data.FndQueryOptions)">
            <summary>
            Fills the main data adapter. If the query is to be manipulated before filling, 
            override the PreProcessSearch instead. If somthing has to be done after the data
            is fetched, override AfterSearch instead. Together with those two
            it replaces the old PopulateDocument.
            </summary>
            <param name="row">Data row containing condition</param>
            <param name="options">Query options (containing sorting information)</param>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.SelectNextRecord">
            <summary>
            Implements <see cref="M:Ifs.Fnd.Feature.IFndRecordKeyList.SelectNextRecord"/>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.SelectPreviousRecord">
            <summary>
            Implements <see cref="M:Ifs.Fnd.Feature.IFndRecordKeyList.SelectPreviousRecord"/>
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.GetSelectedRowIndex">
            <summary>
            Private utility method used by the implementation of IFndRecordKeyList to get hold of the 
            currently selected row index in the list.
            </summary>
            <returns>The list index of the currently selected row</returns>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.DocumentKey">
            <summary>
            Gets the string representation of the primary key 
            of the data row representing the feature's document.
            Override this property to provide custom behavior.
            </summary>
            <remarks>Multi-value keys will be separated
            by a semi-colon.</remarks>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.Document">
            <summary>
            Gets the data row representing feature's document.
            Override this property to provide custom behavior.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.StickyNotesEnabled">
            <summary>
            Gets whether sticky notes are allowed for the current document
            Default should be true
            </summary>  
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.Title">
            <summary>
            Gets the title of the feature.
            Override this property to provide custom title.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.LongTitle">
            <summary>
            Gets the long title of the feature.
            Override this property to provide custom title.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.ActiveViewMode">
            <summary>
            ActiveViewMode returns the current view mode of the active document type in active feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.IsNew">
            <summary>
            Returns true if the feature is in new mode
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.IsDraft">
            <summary>
            Returns true if the feature is in draft mode
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.IsDuplicate">
            <summary>
            Returns true if the feature is in duplicate mode
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.IsTemplate">
            <summary>
            Returns true if the feature is in new mode
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.RecordKeyList">
            <summary>
            Implements <see cref="P:Ifs.Fnd.Feature.IFndRecordKeyListProvider.RecordKeyList"/>
            <remarks>Feature developers implement a custom ReocrdKeyList by overiding this property
            and provides an alternetive IFndRecordKeyList instance.</remarks>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.DisplayColumns">
            <summary>
            Implements <see cref="P:Ifs.Fnd.Feature.IFndRecordKeyList.DisplayColumns"/>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.Records">
            <summary>
            Implements <see cref="P:Ifs.Fnd.Feature.IFndRecordKeyList.Records"/>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.SelectedRecord">
            <summary>
            Implements <see cref="P:Ifs.Fnd.Feature.IFndRecordKeyList.SelectedRecord"/>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.SelectedRecordRowId">
            <summary>
            Implements <see cref="P:Ifs.Fnd.Feature.IFndRecordKeyList.SelectedRecordRowId"/>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.CanSelectNextRecord">
            <summary>
            Implements <see cref="P:Ifs.Fnd.Feature.IFndRecordKeyList.CanSelectNextRecord"/>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.CanSelectPreviousRecord">
            <summary>
            Implements <see cref="P:Ifs.Fnd.Feature.IFndRecordKeyList.CanSelectPreviousRecord"/>
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.AttachmentsEnabledUser">
            <summary>
            Gets whether the current document shows attachments 
            </summary>        
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.AttachmentLuName">
            <summary>
            Gets the LuName of the current document which will be used to fetch attachment servers
            </summary>        
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.AttachmentKeys">
            <summary>
            Gets the Keys of the current document which will be used to fetch attachments 
            </summary>        
        </member>
        <member name="P:Ifs.Fnd.Feature.FndSingleDocumentFeatureBase.AttachmentKeyDescriptions">
            <summary>
            Gets the Key Descriptions of the current document which will be used to fetch attachments 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndStartPageFeatureBase">
            <summary>
            This is a base class to be extended when creating Start Pages.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndStartPage">
            <summary>
            This interface should be implemented by all features that function as start pages.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndStartPage.IsStartPage">
            <summary>
            returns a boolean value that indicates if the current feature is a start page or not.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndStartPageFeatureBase.fndActionPanelRelatedTasks">
            <summary>
            The <see cref="T:Ifs.Fnd.Windows.Forms.FndActionPanel"/> containing the related tasks
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndStartPageFeatureBase.fndActionPanelLearnAbout">
            <summary>
            The <see cref="T:Ifs.Fnd.Windows.Forms.FndActionPanel"/> containing the learn about tasks
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndStartPageFeatureBase.fndActionPanelStatistics">
            <summary>
            The <see cref="T:Ifs.Fnd.Windows.Forms.FndActionPanel"/> containing the statistics tasks
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndStartPageFeatureBase.fndLabelHeaderText">
            <summary>
            The <see cref="T:Ifs.Fnd.Windows.Forms.FndLabel"/> containing the header text.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndStartPageFeatureBase.fndLinkLabelMainTask1">
            <summary>
            The <see cref="T:Ifs.Fnd.Windows.Forms.FndLinkLabel"/> containing the text of the first main task.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndStartPageFeatureBase.fndLinkLabelMainTask2">
            <summary>
            The <see cref="T:Ifs.Fnd.Windows.Forms.FndLinkLabel"/> containing the text of the second main task.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndStartPageFeatureBase.fndLinkLabelRelatedTask1">
            <summary>
            A dummy task for the Related Tasks group.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndStartPageFeatureBase.fndLinkLabelRelatedTask2">
            <summary>
            A dummy task for the Related Tasks group.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndStartPageFeatureBase.pictureBoxFeatureImage">
            <summary>
            The <see cref="T:System.Windows.Forms.PictureBox"/> in the top right corner showing the feature image.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndStartPageFeatureBase.pictureBoxMainTask1">
            <summary>
            A <see cref="T:System.Windows.Forms.PictureBox"/> for bulletting.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndStartPageFeatureBase.pictureBoxMainTask2">
            <summary>
            A <see cref="T:System.Windows.Forms.PictureBox"/> for bulletting.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndStartPageFeatureBase.pictureBoxWatermark">
            <summary>
            The <see cref="T:System.Windows.Forms.PictureBox"/> in the lower left corner showing the watermark image.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndStartPageFeatureBase.richTextBoxStandardText">
            <summary>
            A <see cref="T:System.Windows.Forms.RichTextBox"/> to contain the standard feature description.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndStartPageFeatureBase.pictureBoxRelatedTask1">
            <summary>
            A dummy picture for the Related Tasks group.
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.FndStartPageFeatureBase.pictureBoxRelatedTask2">
            <summary>
            A dummy picture for the Related Tasks group.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndStartPageFeatureBase.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Ifs.Fnd.Feature.FndStartPageFeatureBase"/> class.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndStartPageFeatureBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndStartPageFeatureBase.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndStartPageFeatureBase.SetThemeVariables">
            <summary>
            Sets the theme variables of this feature.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndStartPageFeatureBase.OnCreateControl">
            <summary>
            Called after the control has been created.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndStartPageFeatureBase.SetTheme">
            <summary>
            Sets the themes of this feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.ActionPanelBodyBackColor">
            <summary>
            Gets or sets the Background Color of the body of the action panel.
            </summary>
            <value>
            The background color of the body of the action panel.
            </value>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.ActionPanelBodyForeColor">
            <summary>
            Gets or sets the foreground Color of the body of the action panel.
            </summary>
            <value>
            The foreground color of the body of the action panel.
            </value>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.ActionPanelHeaderBackColor">
            <summary>
            Gets or sets the Background Color of the header of the action panel.
            </summary>
            <value>
            The background color of the header of the action panel.
            </value>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.ActionPanelHeaderForeColor">
            <summary>
            Gets or sets the foreground Color of the header of the action panel.
            </summary>
            <value>
            The foreground color of the header of the action panel.
            </value>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.DescriptionColor">
            <summary>
            Gets or sets the Color of the description.
            </summary>
            <value>
            The color of the description.
            </value>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.LeftPaneBackColor">
            <summary>
            Gets or sets the Background Color of the body of the left panel.
            </summary>
            <value>
            The background color of the body of the left panel.
            </value>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.TitleColor">
            <summary>
            Gets or sets the Color of the Title.
            </summary>
            <value>
            The color of the title.
            </value>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.ActionPanelBodyFont">
            <summary>
            Gets or sets the font of the body of the action panel.
            </summary>
            <value>
            The font of the body of the action panel
            </value>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.ActionPanelHeaderFont">
            <summary>
            Gets or sets the font of the header of the action panel.
            </summary>
            <value>
            The font of the header of the action panel
            </value>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.DescriptionFont">
            <summary>
            Gets or sets the font of the Description.
            </summary>
            <value>
            The font of the Title
            </value>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.TitleFont">
            <summary>
            Gets or sets the font of the Title.
            </summary>
            <value>
            The font of the Title
            </value>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.BackColor">
            <summary>
            Gets or sets the Background Color.
            </summary>
            <value>
            The background color.
            </value>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.ForeColor">
            <summary>
            Gets or sets the Foreground Color.
            </summary>
            <value>
            The Foreground color.
            </value>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.Font">
            <summary>
            Gets or sets the font of the control.
            </summary>
            <value>
            The font of the control
            </value>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.ActiveViewMode">
            <summary>
            ActiveViewMode returns the current view mode of the active document type in active feature.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndStartPageFeatureBase.IsStartPage">
            <summary>
            returns a boolean value that indicates if the current feature is a start page or not.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndFeatureRefreshAware">
            <summary>
            Features that behave differently on populate and refresh
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeatureRefreshAware.FeatureRefresh">
            <summary>
            Called instead of FeaturePopulate
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndCancelEventHandler">
            <summary>
            Delegate to use in ValidateBeforeSaveFailed event
            </summary>
            <param name="sender">sender</param>
            <param name="e">FndCancelEventArgs</param>
        </member>
        <member name="T:Ifs.Fnd.Feature.OutputChannelStateChangedHandler">
            <summary>
            Delegate to use in OutputChannelsStateChanged event
            </summary>
            <param name="sender">sender</param>
            <param name="e">OutputChannelStateChangedEventArgs</param>
        </member>
        <member name="T:Ifs.Fnd.Feature.OutputChannelStateChangedEventArgs">
            <summary>
            EventArgs for OutputChannelStateChanged event
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.OutputChannelStateChangedEventArgs.#ctor">
            <summary>
            OutputChannelStateChangedEventArgs
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.OutputChannelStateChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            OutputChannelStateChangedEventArgs
            </summary>
            <param name="state">Output Channel State</param>
        </member>
        <member name="P:Ifs.Fnd.Feature.OutputChannelStateChangedEventArgs.ChannelState">
            <summary>
            State of Output Channels
            True if output channels can be invoked, false if not
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.ContextMenuSource">
            <summary>
            Source type from where to get the context menu
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.ContextMenuSource.Feature">
            <summary>
            Standard context menu for the feature is returned
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.ContextMenuSource.ActiveControl">
            <summary>
            Context menu for the active control in the feature is returned
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndStandardContextMenuCTD">
            <summary>
            Provide functionality for an Application Forms page standard context menu.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndStandardContextMenuCTD.GetContextMenu">
            <summary>
            Returns an instance of the standard context menu for APF forms
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndStandardContextMenuCTD.GetContextMenuForMainDataSource">
            <summary>
            Returns the main data source context menu for APF forms
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndStandardContextMenuCTD.CurrentContext">
            <summary>
            Returns the current SalContext to make sure Sys.hWndForm is set correct for APF
            Note: You are responsible to Dispose the returned object.
            </summary>
            <returns>An IDisposable context</returns>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndStandardContextMenuCTD2">
            <summary>
            Provide functionality for an Application Forms page standard context menu.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndStandardContextMenuCTD2.MainContext">
            <summary>
            Returns the main SalContext to make sure Sys.hWndForm is set correct for APF
            Note: You are responsible to Dispose the returned object.
            </summary>
            <returns>An IDisposable context</returns>
        </member>
        <member name="T:Ifs.Fnd.Feature.NavigationTargetType">
            <summary>
            Navigation target types
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.NavigationTargetType.Feature">
            <summary>
            Navigation target is a feature
            </summary>
        </member>
        <member name="F:Ifs.Fnd.Feature.NavigationTargetType.Dialog">
            <summary>
            Navigation target is a dialog
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndFeatureShimFactory">
            <summary>
            FeatureShim interface implemented by custom feature providers. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeatureShimFactory.GetInstanceKey(Ifs.Fnd.Feature.FndFeatureUrlAddress)">
            <summary>
            GetInstanceKey method is called by the FeatureContainer when a custom feature is to be navigated to. 
            custom feature providers that support feature caching need to implement this method and provide the 
            instance key that the feature container should use to cache a unique instance. 
            </summary>
            <param name="url">Active URL</param>
            <returns>The unique instance key given the active URL</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeatureShimFactory.GetTargetType(Ifs.Fnd.Feature.FndFeatureUrlAddress)">
            <summary>
            Returns the type of the navigation target. This method is used by the feature container logic to 
            determine wether a navigation should navigate to a feature or launch a dialog.
            </summary>
            <param name="url">URL</param>
            <returns>Target type</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeatureShimFactory.GetShimInstance">
            <summary>
            Get shim instance will return an instance of a feature provider shim that the FeatureContainer 
            will use to navigate trough.
            </summary>
            <returns>A feature shim instance downcasted to a container control</returns>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeatureShimFactory.LaunchDialog(Ifs.Fnd.Feature.FndFeatureUrlAddress,System.Windows.Forms.Control,Ifs.Fnd.AccessProvider.FndConnection)">
            <summary>
            The feature container will call this method when the navigation target is a dialog
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndFeatureShimFactory.UrlEnrichWithBaseParameters(Ifs.Fnd.Feature.FndFeatureUrlAddress)">
            <summary>
            The feature container calls this method to enrich the URL with mandatory parameters and default values for each one.
            If the URL already contains the mandatory parameter, its value is unchanged.
            </summary>
            <param name="url">The url that is used to navigate and that should,if neccessary, be enriched with mandatory parameters</param>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndBackAndForwardNavigation">
            <summary>
            Implemented by feature shims that handle navigation Back and Forward. 
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndBackAndForwardNavigation.GoForward">
            <summary>
            Go forward in history one step
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndBackAndForwardNavigation.GoBack">
            <summary>
            Go back in history one step
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndBackAndForwardNavigation.CanGoForward">
            <summary>
            Gets a value indicating whether the navigation history has an item to navigate forward to
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndBackAndForwardNavigation.CanGoBack">
            <summary>
            Gets a value indicating whether the navigation history has an item to navigate back to
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndFeatureLifeTime">
            <summary>
            Provides support for deactivating and unloading it self 
            </summary>
        </member>
        <member name="E:Ifs.Fnd.Feature.IFndFeatureLifeTime.UnloadFeature">
            <summary>
            This event is fired when the feature needs to be unloaded.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.FndUnloadFeatureEventArgs">
            <summary>
            Event args for UnloadFeature event.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndUnloadFeatureEventArgs.#ctor">
            <summary>
            Creates a new FndUnloadFeatureEventArgs.
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.FndUnloadFeatureEventArgs.#ctor(System.Boolean)">
            <summary>
            Creates a new FndUnloadFeatureEventArgs.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.FndUnloadFeatureEventArgs.NavigateToDefault">
            <summary>
            If true a navigate to default homepage is done otherwise not. 
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndAttachmentDocument2">
            <summary>
            implemented by features which supports attachments
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndAttachmentDocument2.MainDataSourceLuName">
            <summary>
            Gets the LuName of the MainDataSource 
            </summary>  
        </member>
        <member name="T:Ifs.Fnd.Feature.IFndChartContainer">
            <summary>
            Chart methods
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndChartContainer.ShowChart(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Show or hide chart
            </summary>
            <param name="show"></param>
            <param name="invokedFromToggleButton"></param>
            <param name="noRefresh"></param>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndChartContainer.RefreshChart">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ifs.Fnd.Feature.IFndChartContainer.GetCustomChartCommands">
            <summary>
            Return one or more <see cref="T:Ifs.Fnd.Windows.Forms.FndCommand"/> objects 
            that implement custom Chart Mode views. Typically delegates to <see cref="T:Ifs.Fnd.Windows.Forms.IFndCustomChartModeProvider"/>.
            </summary>
            <returns>List of <see cref="T:Ifs.Fnd.Windows.Forms.FndCommand"/> objects that can be executed for custom chart mode views; null otherwise.</returns>
        </member>
        <member name="P:Ifs.Fnd.Feature.IFndChartContainer.IsInChartMode">
            <summary>
            Returns true if the control is in chart mode or false otherwise.
            </summary>
        </member>
        <member name="T:Ifs.Fnd.Feature.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.Properties.Resources.AddtoSelectionHitCount">
            <summary>
              Looks up a localized string similar to Total {0} rows..
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.Properties.Resources.AddtoSelectionRowCount">
            <summary>
              Looks up a localized string similar to {0} rows are currently loaded.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.Properties.Resources.CommandNewCaption">
            <summary>
              Looks up a localized string similar to New.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.Properties.Resources.CommandSaveDraftCaption">
            <summary>
              Looks up a localized string similar to Save as draft....
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.Properties.Resources.CommandSaveDraftCaption2">
            <summary>
              Looks up a localized string similar to Save draft.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.Properties.Resources.CommandSearchCaption">
            <summary>
              Looks up a localized string similar to Search.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.Properties.Resources.CommandSearchToolTip">
            <summary>
              Looks up a localized string similar to Search.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.Properties.Resources.GetNextChunk">
            <summary>
              Looks up a localized string similar to &amp;Get Next {0}.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.Properties.Resources.LOVContainerTitle">
            <summary>
              Looks up a localized string similar to IFS Applications.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.Properties.Resources.MainDataAdapterNotSet">
            <summary>
              Looks up a localized string similar to MainDataAdapter for the Feature is not set. Count operation can not be performed..
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.Properties.Resources.NoDataFound">
            <summary>
              Looks up a localized string similar to No data found.
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.Properties.Resources.PreviousQuery">
            <summary>
              Looks up a localized string similar to [Previous Search].
            </summary>
        </member>
        <member name="P:Ifs.Fnd.Feature.Properties.Resources.SaveChanges">
            <summary>
              Looks up a localized string similar to Do you want to save the changes?.
            </summary>
        </member>
    </members>
</doc>
