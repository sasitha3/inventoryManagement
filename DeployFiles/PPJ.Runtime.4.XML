<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PPJ.Runtime.4</name>
    </assembly>
    <members>
        <member name="T:PPJ.Runtime.Com.SalCoClass">
            <summary>
            Summary description for SalCoClass.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalFunctionalClass">
            <summary>
            Summary description for SalFunctionalClass.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.SalFunctionalClass._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFunctionalClass.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFunctionalClass.op_Implicit(PPJ.Runtime.SalFunctionalClass)~System.Boolean">
            <summary>
            Automatic casting from SalFunctionalClass to boolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFunctionalClass.GetTypeName">
            <summary>
            Returns the name of the class.
            </summary>
            <returns>BOOL</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFunctionalClass.CreateFromString(System.String)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="sClassName">Class name</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFunctionalClass.CreateFromString(System.String,System.Reflection.Assembly)">
            <summary>
            Creates an instance of the class. The type name is resolved giving precedence
            to the specified assembly.
            </summary>
            <param name="className"></param>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFunctionalClass.IsDerivedFrom(System.String)">
            <summary>
            Returns true if the object is derived from the class specified.
            </summary>
            <param name="hUdv"></param>
            <param name="sClassName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFunctionalClass.IsDerivedFrom(System.Type)">
            <summary>
            Returns true if the object is derived from the class specified.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFunctionalClass.IsDerivedFrom(System.String,System.Reflection.Assembly)">
            <summary>
            Returns true if the object is derived from the class specified.
            The type name is resolved giving precedence to the specified assembly.
            </summary>
            <param name="className"></param>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFunctionalClass.IsValidClassName(System.String)">
            <summary>
            Determine whether the specified class name is a valid user-defined class name.
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFunctionalClass.IsValidClassName(System.String,System.Reflection.Assembly)">
            <summary>
            Determine whether the specified class name is a valid user-defined class name.
            The type name is resolved giving precedence to the specified assembly.
            </summary>
            <param name="className"></param>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.SalFunctionalClass.Array">
            <summary>
            Dynamic array class for the SalFunctionalClass type.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalArray`1">
            <summary>
            Dynamic array generic class.
            This class replicates SAL dynamic arrays. It can be used
            without being declared as an inner class by using the new 
            generics syntax.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PPJ.Runtime.SalArray">
            <summary>
            Dynamic array class.
            This class replicates SAL dynamic arrays. It must be declared as
            an inner class of the class that should be used as the type of the 
            elements of the dynamic array.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.ISalType">
            <summary>
            Common base interface for Sal types.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalType.DbType">
            <summary>
            Returns the corresponding DbType.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalType.Value">
            <summary>
            Returns the inner native value.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalType.IsNull">
            <summary>
            Tests if the value is null.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalArray.#ctor">
            <summary>
            Constructs a new dynamic array.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalArray.#ctor(System.Int32[])">
            <summary>
            Constructs a new array.
            </summary>
            <param name="lengths">Variable number of elements.</param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.#ctor(System.String[])">
            <summary>
            Constructs a new array.
            Example: new SalArray("2:3")
            </summary>
            <param name="bounds">String definition of the array dimensions. It can specify lower bounds as "2:3".</param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.#ctor(System.Type)">
            <summary>
            Constructs a new dynamic array.
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.#ctor(System.Type,System.Int32[])">
            <summary>
            Constructs a new array.
            </summary>
            <param name="T"></param>
            <param name="lengths">Variable number of elements.</param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.#ctor(System.Type,System.String[])">
            <summary>
            Constructs a new array.
            Example: new SalArray("2:3")
            </summary>
            <param name="T"></param>
            <param name="bounds">String definition of the array dimensions. It can specify lower bounds as "2:3".</param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.InitArrayType">
            <summary>
            Initialize the array type using the enclosing type as the elements type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.InitArrayType(System.Type)">
            <summary>
            Initialize the array type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.FillCreationArguments(System.Int32[],System.Int32[])">
            <summary>
            Fiils the lengths and lowerBounds arrays
            </summary>
            <param name="lengths"></param>
            <param name="lowerBounds"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.FillCreationArguments(System.String[])">
            <summary>
            Fiils the lengths and lowerBounds arrays
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.ParseLength(System.String)">
            <summary>
            Extracts the length from the dimension string
            </summary>
            <param name="bound"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.ParseLowerBound(System.String)">
            <summary>
            Extracts the lower bound from the dimension string
            </summary>
            <param name="bound"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.CreateArray">
            <summary>
            Creates the inner array object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalArray.GetValue(System.Int32[])">
            <summary>
            Returns an item in the array.
            If the array is dynamic it is extended.
            The item is always initialized to the return type.
            </summary>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.SetValue(System.Object,System.Int32[])">
            <summary>
            Stores the value into the array.
            If the array is dynamic it is extended.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the the first dimension of the array.
            </summary>
            <param name="length"></param>
            <param name="lowerBound"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.Resize(System.Int32[],System.Int32[])">
            <summary>
            Resizes a multidimensional array by copying the elements one by one.
            </summary>
            <param name="lengths"></param>
            <param name="lowerBounds"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.EnsureCapacity(System.Int32[])">
            <summary>
            Ensures that the array can hold the element at the specified index.
            </summary>
            <param name="indices"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.ValidateIndex(System.Int32[])">
            <summary>
            Validates the indices.
            </summary>
            <param name="indices"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.CreateArray(System.Type,System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Creates the inner array object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalArray.CalcArrayLength(System.Int32[])">
            <summary>
            Calculates the total length of the array.
            </summary>
            <param name="lengths"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.ToString">
            <summary>
            Returns a string represenation of this array object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.GetElementType">
            <summary>
            Returns the type of the array elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.Add(System.Object)">
            <summary>
            Appends one item to the array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.AddRange(System.Collections.ICollection)">
            <summary>
            Appends the collection of items to the array.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.Insert(System.Int32)">
            <summary>
            Inserts an item at the position.
            This is allowed only for single-dimension arrays.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.GetArray(System.Int32[])">
            <summary>
            Returns the wrapped native array and ensures that the
            requested element is created for dynamic arrays.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalArray.Remove(System.Int32)">
            <summary>
            Removes the item at the index.
            This is allowed only for single-dimension arrays.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.Find(System.Object)">
            <summary>
            Finds the value in the array.
            This is allowed only for single-dimension arrays.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.IndexOf(System.Object,System.Int32,System.Int32)">
            <summary>
            Finds the specified value in the array.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the items in the array.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray.CreateInstance">
            <summary>
            Creates one instance of the class handled by the array.
            It can be overridden in the inner .Array class to use the
            class' constructor instead of the generic Activator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.MakeDynamic">
            <summary>
            Makes the array dynamic.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalArray.Reset">
            <summary>
            Resets a dynamic array
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalArray.SetLength(System.Int32,System.Int32)">
            <summary>
            Changes the number of items in the array
            </summary>
            <param name="dim">dimension, first = 1</param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.GetLength(System.Int32)">
            <summary>
            Returns the number of items in the array
            </summary>
            <param name="dim">dimension, first = 1</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.ToNativeArray">
            <summary>
            Converts to an array of native types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.FromNativeArray(System.Array)">
            <summary>
            Creates a SalArray from a native array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.Fill(System.Object,System.Int32)">
            <summary>
            Fills an array with the specified value.
            </summary>
            <param name="value"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.SetBounds(System.Int32,System.Int32)">
            <summary>
            Sets the lower and upper bound of an array for the first dimension only.
            NOTE: In SAL this function was named SalSetArrayBounds().
            </summary>
            <param name="lower"></param>
            <param name="upper"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.SetUpperBound(System.Int32,System.Int32)">
            <summary>
            Sets the upper bound of an array.
            The first dimension is 1.
            </summary>
            <param name="dim"></param>
            <param name="bound"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.SetLowerBound(System.Int32,System.Int32)">
            <summary>
            Changes the lower bound of the array
            </summary>
            <param name="dim"></param>
            <param name="bound"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.QueryBounds(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Reurns the lower and upper bound of an array.
            If the array empty, it returns FALSE.
            NOTE: In SAL this function was named SalQueryArrayBounds().
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.GetUpperBound(System.Int32)">
            <summary>
            Returns the upper bound of an array.
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.GetUpperBound(System.Int32,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the upper bound of an array.
            </summary>
            <param name="dim"></param>
            <param name="ubound"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.GetLowerBound(System.Int32)">
            <summary>
            Returns the lower bound of the array.
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.GetLowerBound(System.Int32,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the lower bound of the array.
            </summary>
            <param name="dim"></param>
            <param name="lbound"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.DimCount">
            <summary>
            Returns the number of dimensions in an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.DimCount(PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the number of dimensions in an array.
            </summary>
            <param name="nDim"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.Avg">
            <summary>
            Returns the average value of all the numbers in an array.
            </summary>
            <returns>nAvg</returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.Max">
            <summary>
            Returns the maximum value in an array of numbers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.Min">
            <summary>
            Returns the minimum value in an array of numbers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.Sum">
            <summary>
            Returns the sum of the elements in an array of numbers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray.Clear">
            <summary>
            Clears a dynamic array
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalArray.GetEnumerator">
            <summary>
            IEnumerator implemenation to support the foreach statement.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.SalArray.Length">
            <summary>
            Returns the total number of items in the array.
            For MD arrays returns the number of items in the first dimension.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalArray.IsDynamic">
            <summary>
            Returns true if the array is dynamic.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalArray.IsMultidimensional">
            <summary>
            Returns true if the array is an MD array.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalArray.Dimensions">
            <summary>
            Returns the number of dimensions.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalArray.Item(System.Int32[])">
            <summary>
            Get/Set funtions used to access the array.
            The inmplemntation classes will call these mathods from
            their indexers.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalArray.IsEmpty">
            <summary>
            Returns true if the array is empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalArray`1.#ctor">
            <summary>
            Constructs a new dynamic array.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalArray`1.#ctor(System.Int32[])">
            <summary>
            Constructs a new array.
            </summary>
            <param name="lengths"></param>
        </member>
        <member name="M:PPJ.Runtime.SalArray`1.#ctor(System.String[])">
            <summary>
            Constructs a new array.
            Example: new SalArray("2:3")
            </summary>
            <param name="bounds">String definition of the array dimensions. It can specify lower bounds as "2:3".</param>
        </member>
        <member name="T:PPJ.Runtime.Com.SalCoClass.Array">
            <summary>
            Dynamic array class for the SalCoClass type.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.SalObject">
            <summary>
            Summary description for SalObject.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.#ctor">
            <summary>
            Construct a new null SalObject.
            This class cannot be used as second-base class.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.AddRef(System.Object)">
            <summary>
            Increases the reference counter for the COM object.
            </summary>
            <param name="com"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.Release(System.Object,System.Boolean)">
            <summary>
            Decreases the reference counter for the COM object and when it reaches zero
            calls Marsh.ReleaseComObject. otherwise .NET will not release the COM object until
            the GC kicks in.
            </summary>
            <param name="com"></param>
            <param name="autoRelease"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.#ctor(System.Object)">
            <summary>
            Constructs a new SalObject and wraps the specified com object instance.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.CreateObject">
            <summary>
            Inspects the current class for the _CoClass member
            and creates the inner COM object and assigns it to the
            inner _Interface member.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.CreateObject(System.String)">
            <summary>
            Creates the com object from the progid.
            </summary>
            <param name="progid"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.CreateObjectEx(System.String)">
            <summary>
            Creates the com object on a remote host.
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.CreateObjectEx(System.String,System.String)">
            <summary>
            Creates the com object on a remote host.
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.GetInterface(PPJ.Runtime.Com.SalObject,System.String)">
            <summary>
            Returns the requested com interface.
            </summary>
            <param name="iface"></param>
            <param name="iid"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.Attach(PPJ.Runtime.Com.SalObject)">
            <summary>
            Attaches the object to this IDispatch.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.Detach">
            <summary>
            Releases the attached COM object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.ReleaseComInterfaces(System.Object[])">
            <summary>
            Sets all the interface instances to null.
            </summary>
            <param name="interfaces"></param>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.IsDispatchValid">
            <summary>
            Checks whether the underlying COM object is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.GetLastError(PPJ.Runtime.Com.SalOleErrorInfo)">
            <summary>
            Returns the last COM exception into a OleErrorInfo object.
            </summary>
            <param name="err"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.MTSDisableCommit">
            <summary>
            Indicates that the object's transactional updates cannot be committed in the present
            time until SalMTSEnableCommit() or SalMTSSetComplete() is called. For non-MTS
            components the SalMTSDisableCommit() will fail (returns false).
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.MTSEnableCommit">
            <summary>
            Indicates that the object’s work is not necessarily done, but that its transactional
            updates can be committed in their current form (stateful object). EnableCommit
            is the default state when an object is activated. For non-MTS components the
            SalMTSEnableCommit() will fail (returns false).
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.MTSIsInTransaction">
            <summary>
            This method checks if the component is executing in the transaction context. For
            non-MTS components the SalMTSIsInTransaction() will fail (returns false).
            </summary>
            <param name="bIsInTransaction">TRUE if the component is executing in the transaction context.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.MTSIsCallerInRole(PPJ.Runtime.SalString)">
            <summary>
            Determines whether the caller is in the specified role.
            </summary>
            <param name="bInRole"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.MTSIsSecurityEnabled">
            <summary>
            This method checks for the security status. If the object is running in the client's
            process, there is no security checking and SalMTSIsSecurityEnabled will always
            return false. For non-MTS components the SalMTSIsSecurityEnabled() will fail
            (returnS false).
            </summary>
            <param name="bIsSecurityEnabled">TRUE if the security is enabled</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.MTSSetAbort">
            <summary>
            Indicates that the object’s work can never be committed. The entire transaction is
            aborted. The object is deactivated upon return from the method. For non-MTS components
            the SalMTSSetAbort() will fail (returnS false).
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.MTSSetComplete">
            <summary>
            Indicates that the object has successfully completed its work for the transaction.
            The object is deactivated upon return from the method that first entered the context
            (stateless object). For non-MTS components the SalMTSSetComplete() will fail
            (returns false).
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.GetTypeFromProgIDOrCLSID(System.String,System.String)">
            <summary>
            Returns the type associated with the specified ProgID or CLSID
            </summary>
            <param name="id"></param>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.GetEnumerator">
            <summary>
            Retrieves the enumerator from the current com object
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.AttachInterface(System.Object)">
            <summary>
            Attaches the internal COM interface members
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.GetCoClassField">
            <summary>
            Returns the FieldInfo for the wrapped _CoClass field.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.GetInterfaceField(System.Type)">
            <summary>
            Returns the FieldInfo for the wrapped _Interface field.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalObject.QueryInterface(System.Object,System.Guid@,System.Object@)">
            <summary>
            Querys for the specified interface and returns the
            retrieved COM instance.
            </summary>
            <param name="punk"></param>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Com.SalObject.Value">
            <summary>
            Returns/Sets the inner COM object instance
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Com.SalObject.AutoErrorMode">
            <summary>
            Turns on/off automatic COM error handling.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Com.SalObject.AutoRelease">
            <summary>
            Turns on/off auto-release mode. When true, the runtime will force the
            release of the underlying COM object.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Com.SalObject.Interfaces">
            <summary>
            Returns the collection of the inner _Interface fields.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.SalObject.Array">
            <summary>
            Dynamic array class for the SalObject type.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.SalObject.ComData">
            <summary>
            Custom data stored with the COM object.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.SalOleErrorInfo">
            <summary>
            OleErrorInfo implementation.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.SalOleErrorInfo.Array">
            <summary>
            Dynamic array declaration.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.SalSafeArray">
            <summary>
            SalSafeArray implementation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.#ctor">
            <summary>
            Constructs a new empty SalSafeArray
            This class cannot be used as second-base class.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.#ctor(System.Array)">
            <summary>
            Constructs a new SalSafeArray with the wrapped array.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.Create(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a new SafeArray.
            </summary>
            <param name="vt"></param>
            <param name="elements"></param>
            <param name="lowerBound"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetLowerBound">
            <summary>
            Returns the lower bound.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetUpperBound">
            <summary>
            Returns the upper bound.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetDate(PPJ.Runtime.SalDateTime@,PPJ.Runtime.SalNumber)">
            <summary>
            Returns a DateTime item from the SafeArray.
            </summary>
            <param name="date"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetNumber(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber)">
            <summary>
            Returns a numeric item from the safearray.
            </summary>
            <param name="num"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetBoolean(PPJ.Runtime.SalBoolean@,PPJ.Runtime.SalNumber)">
            <summary>
            Returns a boolean item from the safearray.
            </summary>
            <param name="bool"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetObject(PPJ.Runtime.Com.SalObject,PPJ.Runtime.SalNumber)">
            <summary>
            Returns a COM object item from the safearray.
            </summary>
            <param name="o"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetString(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Returns a string item from the safearray.
            </summary>
            <param name="str"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetVariant(PPJ.Runtime.Com.SalVariant@,PPJ.Runtime.SalNumber)">
            <summary>
            Returns a variant item from the safearray.
            </summary>
            <param name="v"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutDate(PPJ.Runtime.SalDateTime,PPJ.Runtime.SalNumber)">
            <summary>
            Stores a DateTime item in the safearray.
            </summary>
            <param name="date"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutNumber(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Stores a numeric item in the safearray.
            </summary>
            <param name="num"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutBoolean(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalNumber)">
            <summary>
            Stores a boolean item in the safearray.
            </summary>
            <param name="bool"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutObject(PPJ.Runtime.Com.SalObject,PPJ.Runtime.SalNumber)">
            <summary>
            Stores a com object item in the safearray.
            </summary>
            <param name="o"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutString(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Stores a string item in the safearray.
            </summary>
            <param name="str"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutVariant(PPJ.Runtime.Com.SalVariant,PPJ.Runtime.SalNumber)">
            <summary>
            Stores a variant object item in the safearray.
            </summary>
            <param name="v"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.Create2D(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a new safearray.
            </summary>
            <param name="vt"></param>
            <param name="elements1"></param>
            <param name="elements2"></param>
            <param name="lowerBound1"></param>
            <param name="lowerBound2"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetLowerBound2D(PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="nDim"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetUpperBound2D(PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="nDim"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetDate2D(PPJ.Runtime.SalDateTime@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="date"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetNumber2D(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="num"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetBoolean2D(PPJ.Runtime.SalBoolean@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="bool"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetObject2D(PPJ.Runtime.Com.SalObject,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="o"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetString2D(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="str"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetVariant2D(PPJ.Runtime.Com.SalVariant@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="v"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutDate2D(PPJ.Runtime.SalDateTime,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="date"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutNumber2D(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="num"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutBoolean2D(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="bool"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutObject2D(PPJ.Runtime.Com.SalObject,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="o"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutString2D(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="str"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutVariant2D(PPJ.Runtime.Com.SalVariant,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="v"></param>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.CreateMD(PPJ.Runtime.SalNumber,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber},PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Creates a new multidimensional safearray.
            </summary>
            <param name="vt"></param>
            <param name="elements"></param>
            <param name="lowerBounds"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetLowerBoundMD(PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="nDim"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetUpperBoundMD(PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="nDim"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetDateMD(PPJ.Runtime.SalDateTime@,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            </summary>
            <param name="date"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetNumberMD(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            </summary>
            <param name="num"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetBooleanMD(PPJ.Runtime.SalBoolean@,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            </summary>
            <param name="bool"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetObjectMD(PPJ.Runtime.Com.SalObject,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            </summary>
            <param name="o"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetStringMD(PPJ.Runtime.SalString@,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Multidimensional safe array
            </summary>
            <param name="str"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.GetVariantMD(PPJ.Runtime.Com.SalVariant@,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Multidimensional safe array
            </summary>
            <param name="v"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutDateMD(PPJ.Runtime.SalDateTime,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Multidimensional safe array
            </summary>
            <param name="date"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutNumberMD(PPJ.Runtime.SalNumber,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Multidimensional safe array
            </summary>
            <param name="num"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutBooleanMD(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Multidimensional safe array
            </summary>
            <param name="bool"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutObjectMD(PPJ.Runtime.Com.SalObject,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Multidimensional safe array
            </summary>
            <param name="o"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutStringMD(PPJ.Runtime.SalString,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Multidimensional safe array
            </summary>
            <param name="str"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.PutVariantMD(PPJ.Runtime.Com.SalVariant,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Multidimensional safe array
            </summary>
            <param name="v"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Com.SalSafeArray.MakeArray(System.Int32[])" -->
        <member name="M:PPJ.Runtime.Com.SalSafeArray.SetTypeCodes(System.Object)">
            <summary>
            Detects the SAL type and the VT type.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Com.SalSafeArray.ToIntArray(PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Converts the SalNumber array into an int array.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Com.SalSafeArray.Value">
            <summary>
            Returns/Sets the wrapped object.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.SalSafeArray.Array">
            <summary>
            Dynamic array declaration.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.SalVariant">
            <summary>
            Variant implementation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.#ctor">
            <summary>
            Constructs a new null SalVariant
            This class cannot be used as second-base class.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.#ctor(System.Object)">
            <summary>
            Constructs a new SalVariant with the wrapped value 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.SalType">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.ActiveXType">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.AsActiveX(PPJ.Runtime.SalNumber)">
            <summary>
            Changes the variant type.
            </summary>
            <param name="vt"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.GetBoolean(PPJ.Runtime.SalBoolean@)">
            <summary>
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.GetDate(PPJ.Runtime.SalDateTime@)">
            <summary>
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.GetNumber(PPJ.Runtime.SalNumber@)">
            <summary>
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.GetObject(PPJ.Runtime.Com.SalObject)">
            <summary>
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.GetSafeArray(PPJ.Runtime.Com.SalSafeArray@)">
            <summary>
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.GetBlob(PPJ.Runtime.SalString@)">
            <summary>
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.GetString(PPJ.Runtime.SalString@)">
            <summary>
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.SetBoolean(PPJ.Runtime.SalBoolean)">
            <summary>
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.SetDate(PPJ.Runtime.SalDateTime)">
            <summary>
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.SetNumber(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="num"></param>
            <param name="vt_type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.SetObject(PPJ.Runtime.Com.SalObject)">
            <summary>
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.SetSafeArray(PPJ.Runtime.Com.SalSafeArray)">
            <summary>
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.SetBlob(PPJ.Runtime.SalString)">
            <summary>
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.SetString(PPJ.Runtime.SalString)">
            <summary>
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.MakeOptional">
            <summary>
            Call this when using a Variant as an optional parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.VTFromType(System.Type)">
            <summary>
            Returns the VT code for the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.TypeFromVT(System.Runtime.InteropServices.VarEnum)">
            <summary>
            Returns the type fro the VT code.
            </summary>
            <param name="vt"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.SalTypeFromVT(System.Runtime.InteropServices.VarEnum)">
            <summary>
            Returns the SAL_* type code from the VT code.
            </summary>
            <param name="vt"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.SalVariant.SetTypeCodes(System.Object)">
            <summary>
            Detects the SAL type and the VT type.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Com.SalVariant.Value">
            <summary>
            Returns/Sets the wrapped object.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Com.SalVariant.Optional">
            <summary>
            Returns an empty SalVariant instance marked as optional.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.SalVariant.Array">
            <summary>
            Dynamic array declaration.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.stdole_Font">
            <summary>
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Com.stdole_Font._Interface">
            <summary>
            This is the real COM interface.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropSetName(PPJ.Runtime.SalString)">
            <summary>
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropGetName(PPJ.Runtime.SalString@)">
            <summary>
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropSetSize(PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="Size"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropGetSize(PPJ.Runtime.SalNumber@)">
            <summary>
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropSetBold(PPJ.Runtime.SalBoolean)">
            <summary>
            </summary>
            <param name="Bold"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropGetBold(PPJ.Runtime.SalBoolean@)">
            <summary>
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropSetItalic(PPJ.Runtime.SalBoolean)">
            <summary>
            </summary>
            <param name="Italic"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropGetItalic(PPJ.Runtime.SalBoolean@)">
            <summary>
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropSetUnderline(PPJ.Runtime.SalBoolean)">
            <summary>
            </summary>
            <param name="Underline"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropGetUnderline(PPJ.Runtime.SalBoolean@)">
            <summary>
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropSetStrikethrough(PPJ.Runtime.SalBoolean)">
            <summary>
            </summary>
            <param name="Strikethrough"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropGetStrikethrough(PPJ.Runtime.SalBoolean@)">
            <summary>
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropSetWeight(PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropGetWeight(PPJ.Runtime.SalNumber@)">
            <summary>
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropSetCharset(PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="Charset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Font.PropGetCharset(PPJ.Runtime.SalNumber@)">
            <summary>
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Com.stdole_Font.COMInterface">
            <summary>
            This is the real COM interface declaration.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.stdole_Font.Array">
            <summary>
            Dynamic array declaration.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.stdole_Picture">
            <summary>
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Com.stdole_Picture._Interface">
            <summary>
            This is the real COM interface.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Picture.Render(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="hdc"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="cx"></param>
            <param name="cy"></param>
            <param name="xSrc"></param>
            <param name="ySrc"></param>
            <param name="cxSrc"></param>
            <param name="cySrc"></param>
            <param name="prcWBounds"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Picture.PropSetHandle(PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="Handle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Picture.PropGetHandle(PPJ.Runtime.SalNumber@)">
            <summary>
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Picture.PropSethPal(PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="hPal"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Picture.PropGethPal(PPJ.Runtime.SalNumber@)">
            <summary>
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Picture.PropSetType(PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="Type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Picture.PropGetType(PPJ.Runtime.SalNumber@)">
            <summary>
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Picture.PropSetWidth(PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="Width"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Picture.PropGetWidth(PPJ.Runtime.SalNumber@)">
            <summary>
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Picture.PropSetHeight(PPJ.Runtime.SalNumber)">
            <summary>
            </summary>
            <param name="Height"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_Picture.PropGetHeight(PPJ.Runtime.SalNumber@)">
            <summary>
            </summary>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Com.stdole_Picture.COMInterface">
            <summary>
            This is the real COM interface declaration.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.stdole_Picture.Array">
            <summary>
            Dynamic array declaration.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.stdole_StdFont">
            <summary>
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Com.stdole_StdFont._CoClass">
            <summary>
            This is the real COM object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_StdFont.CreateEx(PPJ.Runtime.SalString)">
            <summary>
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_StdFont.Create">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_StdFont.GetInterface(PPJ.Runtime.Com.SalObject,PPJ.Runtime.SalString)">
            <summary>
            </summary>
            <param name="disp"></param>
            <param name="iid"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_StdFont.Release">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Com.stdole_StdFont.COMObject">
            <summary>
            This is the real COM object class.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.stdole_StdFont.Array">
            <summary>
            Dynamic array declaration.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.stdole_StdPicture">
            <summary>
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Com.stdole_StdPicture._CoClass">
            <summary>
            This is the real COM object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_StdPicture.CreateEx(PPJ.Runtime.SalString)">
            <summary>
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_StdPicture.Create">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_StdPicture.Init">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_StdPicture.GetInterface(PPJ.Runtime.Com.SalObject,PPJ.Runtime.SalString)">
            <summary>
            </summary>
            <param name="disp"></param>
            <param name="iid"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Com.stdole_StdPicture.Release">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Com.stdole_StdPicture.COMObject">
            <summary>
            This is the real COM object class.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Com.stdole_StdPicture.Array">
            <summary>
            Dynamic array declaration.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Rendering.IFndControlRendererManager">
            <summary>
            Contract for the Renderer Manager
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Rendering.IFndControlRendererManager.GetRenderer(System.Windows.Forms.Control)">
            <summary>
            Given the control to be rendered, get the appropriate renderer
            </summary>
            <param name="control">The control to render (e.g.: SalTabControl etc.)</param>
            <returns>A renderer capable of rendering the given control Type</returns>
        </member>
        <member name="M:PPJ.Runtime.Rendering.IFndControlRendererManager.SetRenderer(System.Type,PPJ.Runtime.Rendering.IFndControlRenderer)">
            <summary>
            For the specified type of control, give the Renderer implementation
            </summary>
            <param name="controlType">The Type of the control to provide a renderer for</param>
            <param name="renderer">The Renderer for the given control</param>
        </member>
        <member name="T:PPJ.Runtime.Rendering.IFndControlRenderer">
            <summary>
            Contract for the actual renderer
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Rendering.IFndControlRenderer.IsControlApplicableForThemeing(System.Windows.Forms.Control)">
            <summary>
            Used for checking if a control is applicable for themeing
            </summary>
            <param name="control">Control to be checked</param>
        </member>
        <member name="M:PPJ.Runtime.Rendering.IFndControlRenderer.RenderGroupBox(PPJ.Runtime.Rendering.FndSalControlRendererEventArgs)">
            <summary>
            Notify that the Group Box should be painted
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Rendering.IFndControlRenderer.RenderTabControl(PPJ.Runtime.Rendering.FndSalControlRendererEventArgs)">
            <summary>
            Notifiy that the TabControl should be painted
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Rendering.IFndControlRenderer.RenderTabControlBackground(PPJ.Runtime.Rendering.FndSalControlRendererEventArgs)">
            <summary>
            Notifiy that the TabControl's background should be painted
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Rendering.IFndControlRenderer.RenderTabControlSelectionChanged(PPJ.Runtime.Rendering.FndSalControlRendererEventArgs)">
            <summary>
            Notify that the TabControl's selection has changed and the relevant parts should be redrawn
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Rendering.IFndControlRenderer.RenderTabControlMouseMove(PPJ.Runtime.Rendering.FndSalControlRendererEventArgs)">
            <summary>
            Notify that the Mouse is moving over the TabControl
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Rendering.IFndControlRenderer.RenderTabControlMouseLeave(PPJ.Runtime.Rendering.FndSalControlRendererEventArgs)">
            <summary>
            Notify that the Mouse has left the TabControl
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Rendering.IFndControlRenderer.RenderTabControlFinalize(PPJ.Runtime.Rendering.FndSalControlRendererEventArgs)">
            <summary>
            Notifiy that the TabControl painting should be finalized, making the final rendering.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Rendering.IFndControlRenderer.InitializeSalControlRendering(PPJ.Runtime.Rendering.FndSalControlRendererEventArgs)">
            <summary>
            Notify that a new control is being created and will request rendering soon
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:PPJ.Runtime.Rendering.IFndControlRenderer.ThemeChanged">
            <summary>
            Notifies all listening controls that a themeing change has occured
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Rendering.IFndRenderableControl">
            <summary>
            Allow controls to specify whether they want to be custom rendered or not
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Rendering.IFndRenderableControl.CustomRender">
            <summary>
            Allow each control to say whether they want to enable custom rendering or not
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Rendering.FndSalControlRendererEventArgs">
            <summary>
            Provides additional information to the renderer for rendering
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Rendering.FndSalControlRendererEventArgs.#ctor">
            <summary>
            Create a new blank event args object
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Rendering.FndSalControlRendererEventArgs.#ctor(System.Windows.Forms.Control,System.Drawing.Graphics,System.Boolean)">
            <summary>
            Initialize this control with the given control and its Graphics object.
            </summary>
            <param name="control">The control that requested rendering</param>
            <param name="e">The controls Graphics object</param>
        </member>
        <member name="P:PPJ.Runtime.Rendering.FndSalControlRendererEventArgs.Control">
            <summary>
            The control that requested painting
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Rendering.FndSalControlRendererEventArgs.Graphics">
            <summary>
            The managed Graphics object that can be used for double buffering painting operations, before they are copied to the main Graphics object.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Rendering.FndSalControlRendererEventArgs.DesignMode">
            <summary>
            Get or set a value indicating if we this event is fired from a control in design mode
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Rendering.FndControlRendererManager">
            <summary>
            Provides a service where renderers can register that they provide rendering services for various controls.
            Also allows other classes to find an appropriate renderer for a given Control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Rendering.FndControlRendererManager.GetRenderer(System.Windows.Forms.Control)">
            <summary>
            For the given control type, find the appropriate renderer. 
            If none is found, it looks in the base classes to see if one is found.
            If no renderer is found in the entire inheritance hierarchy, it will return null.
            </summary>
            <param name="controlType">The type of the control for which a renderer is required</param>
            <returns>The appropriate renderer for the control, search up the inheritance chain</returns>
        </member>
        <member name="M:PPJ.Runtime.Rendering.FndControlRendererManager.SetRenderer(System.Type,PPJ.Runtime.Rendering.IFndControlRenderer)">
            <summary>
            Assign (or change) the renderer for the given control type
            </summary>
            <param name="controlType">The Type of the control for which a renderer is being assigned</param>
            <param name="renderer">The renderer for the control</param>
        </member>
        <member name="P:PPJ.Runtime.Rendering.FndControlRendererManager.ControlRendererManager">
            <summary>
            Returns the singleton instance of the <see cref="T:PPJ.Runtime.Rendering.FndControlRendererManager"/> class
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Reports.SalReportCreateField">
            <summary>
            Defines a field to be used in a dynamic report template
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SalSql">
            <summary>
            Summary description for SalSql.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.#ctor(PPJ.Runtime.Sql.SalSqlConnection)">
            <summary>
            Constructs a new SalSql objects.
            The construction is succesfull only if the connection
            succeeds.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.Finalize">
            <summary>
            Finalizer, frees the GCHandle associated with this object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.FromHandle(System.IntPtr)">
            <summary>
            Retrieves the instance of this class associated to the GC handle.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.ParseBindVariables(System.String@)">
            <summary>
            Parses all bind variables, including into variables and
            updates the sql statement.
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.ClearBindVariables">
            <summary>
            Resets the bind variables collection
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.ParseIntoVariables(System.String)">
            <summary>
            Parses the list of into variables.
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.CheckConnection">
            <summary>
            Verifies that we have a connection
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.CheckCommand">
            <summary>
            Verifies that we have a compiled command.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.CheckResultSet">
            <summary>
            Verifies that we have a result set
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.Read">
            <summary>
            Loads all the colums in the current row.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.Commit">
            <summary>
            Commit the transaction
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.Rollback">
            <summary>
            Rollback the transaction
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.ResetResultSet">
            <summary>
            Reset result set info
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.ResetStatement">
            <summary>
            Reset statement info
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.Prepare(System.String)">
            <summary>
            Prepares the sql statement.
            Extracts and compiles the bind variables expressions.
            </summary>
            <param name="statement"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.GetFirstWord(System.String)">
            <summary>
            Extracts the first word of the sql statement.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Sql.SalSql.PrepareSP(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Sql.SalSql.PrepareSP(System.String,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Sql.SalSql.PrepareSP(System.String,System.String,System.Boolean,System.Boolean)" -->
        <member name="M:PPJ.Runtime.Sql.SalSql.GetNextResultSet(System.String)">
            <summary>
            Retrieves the next result set generated by the last executed
            stored procedure. Returns false if there are no more result sets.
            </summary>
            <param name="intos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.ExecuteWithSchema">
            <summary>
            Executes the prepared sql statement and preloads the schema table when
            using result set mode (data set). The schema is not preloaded when using the data reader (result set = off).
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.Execute">
            <summary>
            Executes the prepared sql statement.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.Execute(PPJ.Runtime.Sql.SalSql.SqlStatementType,System.Boolean)">
            <summary>
            Executes the prepared sql statement.
            <param name="sqlType"></param>
            <param name="preloadSchema"></param>
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.FillParameters">
            <summary>
            Evaluates the parameters and compiled the statement.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.CreateParameters">
            <summary>
            Creates the parameters in the current command object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.FillSelectColumnMeta">
            <summary>
            Retrieves column binding metadata (type, maxlength) information and places this
            in the Ifs.Fnd.ADONet.FndAPCommand
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.CreateCommand(System.String)">
            <summary>
            Creates the statement object and initializes it with the specified
            sql string and the parsed parameters.
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.SetParametersValues">
            <summary>
            Sets the values from the bind variables into the command's parameters.
            </summary>
            <param name="stmt"></param>
            <param name="bindVars"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.SetParameter(System.Data.IDataParameter,System.Object,PPJ.Runtime.Sql.SqlProperties)">
            <summary>
            Prepares the Db parameter from the value.
            May change the type of the parameter according to the settings
            in the SqlProperties argument.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
            <param name="props"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.GetColumnCount">
            <summary>
            Returns the number of columns in the current result set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.MoveNext">
            <summary>
            Moves to the next row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.FetchNext">
            <summary>
            Fetches the next row into the bind variables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.MovePrev">
            <summary>
            Moves to the previous row,
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.FetchPrevious">
            <summary>
            Fetches the previous row into the bind variables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.FetchRow(System.Int32)">
            <summary>
            Fetches the specified row into the bind variables.
            </summary>
            <param name="rowNum"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.GetAffectedRows">
            <summary>
            Returns the number of rows affected by the last non-query sql statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.GetRowsCount">
            <summary>
            Returns the number of rows in the result set. If the ResultSet mode is off, returns 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.CloseResultSet">
            <summary>
            Closes the current result set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.GetSchemaTable">
            <summary>
            Returns the schema table for the current data set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSql.TraceBindValues">
            <summary>
            Traces SqlStatement with bind variables replaced
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.Handle">
            <summary>
            Returns the GC handle for this object.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.StatementType">
            <summary>
            Returns the type of the last prepared statement.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.DriverType">
            <summary>
            Returns the ADO.NET driver type used for the current connection.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.ResultSet">
            <summary>
            Sets/Returns the result set status.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.ResultSetMode">
            <summary>
            Sets/Returns the result set mode.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.DataReader">
            <summary>
            Returns the underlying IDataReader object.
            It's null if ResultSet is on, use DataSet instead.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.DataSet">
            <summary>
            Returns the underlying DataSet object.
            It's null if ResultSet is off, use DataReader instead.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.BindVars">
            <summary>
            Returns the bind variables manager
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.Command">
            <summary>
            Returns the command object
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.Connection">
            <summary>
            Returns the current connection.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.Transaction">
            <summary>
            Returns the current transaction.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.LastError">
            <summary>
            Returns/Sets the last SqlError on this handle
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.LastStatement">
            <summary>
            Returns the last prepared sql statement.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.Properties">
            <summary>
            Returns the set of properties defined in sql.config.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.Timeout">
            <summary>
            Returns/Sets the timeout value
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.Autocommit">
            <summary>
            Returns/Sets the autocommit flag
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.Isolation">
            <summary>
            Returns/Sets the isolation level.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.EOF">
            <summary>
            Returns true when the current row is the last row in the result set.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSql.BOF">
            <summary>
            Returns true when the current row is the first row in the result set.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SalSqlBindVariables">
            <summary>
            Manages bind variables.
            <remarks>This is an internal class and it's subject to change without notice.</remarks>
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlBindVariables.Clear">
            <summary>
            Resets the bind and into variables collection.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlBindVariables.NewScope">
            <summary>
            Enters a new interpreter scope. This must be called
            before starting to read or write bind/into variables
            to enable caching of the root reference.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlBindVariables.LeaveScope">
            <summary>
            Leaves the current interpreter scope.
            It must be called in the try/final section.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlBindVariables.WriteIntoValues(System.Object[],PPJ.Runtime.Sql.SqlProperties)">
            <summary>
            Saves the values into the INTO variables.
            </summary>
            <param name="values"></param>
            <returns>The number of intos read</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlBindVariables.ReadBindValues">
            <summary>
            Reads all the bind variables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlBindVariables.ReadOutputParameters(System.Data.IDbCommand)">
            <summary>
            Updates output parameters.
            </summary>
            <param name="salSql"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlBindVariables.ParseBinds(System.String)">
            <summary>
            Parses report bind variables.
            </summary>
            <param name="vars"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlBindVariables.ParseCommand(System.String@,System.Boolean,System.Boolean,System.String)">
            <summary>
            Parses a SQL command script by parsing bind expressions out of the
            sql text and replacing them with placeholders. The INTO clause is not
            removed and it's considered part of the sql command.
            </summary>
            <param name="command"></param>
            <param name="named"></param>
            <param name="positional"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlBindVariables.ParseSql(System.String@,System.Boolean,System.Boolean,System.String)">
            <summary>
            Parses a SQL statement by parsing bind variables pf of the sql text and replacing them
            with placeholders. The INTO clause is removed because it's considered to be the binding
            for the result set columns.
            </summary>
            <param name="sql"></param>
            <param name="named"></param>
            <param name="positional"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlBindVariables.ParseInternal(System.String@,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Parses bind variables (or expressions) and into variables out of the string.
            Bind vars/expressions are replaced with parameter placeholders, while into 
            variables (and INTO keyword) are removed.
            </summary>
            <param name="text"></param>
            <param name="named"></param>
            <param name="positional"></param>
            <param name="prefix"></param>
            <param name="removeInto"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlBindVariables.ParseInto(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Parses the list of into variables.
            </summary>
            <param name="intoList"></param>
            <param name="named"></param>
            <param name="positional"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlBindVariables.Context">
            <summary>
            Returns/Sets the context for resolving bind variables
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlBindVariables.ParsedVars">
            <summary>
            Returns the array of parsed bind variables
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlBindVariables.ParsedIntos">
            <summary>
            Returns the array of parsed bind variables
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SalSqlBindVariables.BindVar">
            <summary>
            Encapsulates a single bind variable.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlBindVariables.BindVar.Read">
            <summary>
            Evaluates the bind expression and return the value.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlBindVariables.BindVar.ReadObject">
            <summary>
            Evaluates the bind expression and return the object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlBindVariables.BindVar.Write(System.Object)">
            <summary>
            Writes the value of the bind variable.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlBindVariables.BindVar.CanWrite">
            <summary>
            Returns true if the bind variable can be written.
            NOTE: This property is updated only after the value of the expression has been read.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlBindVariables.BindVar.Direction">
            <summary>
            Returns the direction of the parameter.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlBindVariables.BindVar.Position">
            <summary>
            Returns the position of the bind variable in the sql statement.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlBindVariables.BindVar.ParameterName">
            <summary>
            Returns the parameter name for drivers that do not
            support the "?" marker.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlBindVariables.BindVar.Text">
            <summary>
            Returns the bind variable's text that was compiled.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlBindVariables.BindVar.IsDynamic">
            <summary>
            Returns true if the bind variable is a dynamic array.
            Used by the oracle array binder to preserve dynamic arrays.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlBindVariables.BindVar.IsArray">
            <summary>
            Returns true if the bind variable is an array.
            Used by the oracle array binder to preserve null values in output arrays.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlBindVariables.BindVar.Value">
            <summary>
            Returns the value of the bind variable.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.DriverType">
            <summary>
            Known ADO.NET drivers.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SalSqlConnection">
            <summary>
            Connection entry in the map of existing connections.
            Bundles together the connection, transaction and database properties
            read from the sql.config file.
            This class implementes a reference counter disposable mechanism.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.#ctor(PPJ.Runtime.Sql.SqlProperties,System.String)">
            <summary>
            Creates a new connection to the specified database.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.Finalize">
            <summary>
            Finalizer, frees the GCHandle associated with this object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.FromHandle(System.IntPtr)">
            <summary>
            Retrieves the instance of this class associated to the GC handle.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.Open">
            <summary>
            Open the connection.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.AddRef">
            <summary>
            Increases the reference count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.Release">
            <summary>
            Decreases the reference count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.SetIsolationLevel(System.String)">
            <summary>
            Sets the isolation level.
            </summary>
            <param name="isolation"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.GetIsolationLevel">
            <summary>
            Returns the isolation level.
            </summary>
            <param name="sIsolation">The isolation level to set. Specify one of these values: CS Cursor Stability RL Release Locks RO Read Only RR Read Repeatability</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.GetConnection(System.String,System.String,System.String)">
            <summary>
            Returns an instance of this class. It manages a hashmap of instances
            to reuse connections when the multiple_connection option is off.
            </summary>
            <param name="database"></param>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.GetConnection(System.String,System.String,System.String,System.String)">
            <summary>
            Returns a new instance of SalSqlConnection using the provided
            connection string. If there is a database configured in
            sql.config it will use the provider specified in the configurarion
            otherwise it uses the OLEDB.NET provider.
            </summary>
            <param name="database"></param>
            <param name="user"></param>
            <param name="password"></param>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.SetUserPassword(System.String,System.String,System.String)">
            <summary>
            Adds user and password settings in the connection string.
            If the connection string already contains user and password, it checks
            if the settings is "=?" in which case it substitues the ? with the user or password strings.
            
            This function recognizes "User ID", "UID", "Password", "PWD" and it's case insensitive.
            </summary>
            <param name="connectionString"></param>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.CreateConnection">
            <summary>
            Creates a new connection using the current driver.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.CreateCommand(System.String)">
            <summary>
            Creates an instance of the Command object on the current connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.Commit">
            <summary>
            Executes a COMMIT on the current transaction.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.Rollback">
            <summary>
            Executes a ROLLBACK on the current transaction.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlConnection.BeginTransaction(System.Data.IDbCommand)">
            <summary>
            Automatically creates a new transaction if Autocommit is off.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlConnection.Handle">
            <summary>
            Returns the GC handle for this object.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlConnection.Properties">
            <summary>
            Returns the connection properties read form the sql.config configuration file.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlConnection.DriverType">
            <summary>
            Returns the type of the connected driver.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlConnection.Connection">
            <summary>
            Returns the wrapped database connection object.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlConnection.Transaction">
            <summary>
            Returns the current tranaction.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlConnection.Timeout">
            <summary>
            Returns/Sets the timeout value.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlConnection.Autocommit">
            <summary>
            Returns/Sets the autocommit flag.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlConnection.LastError">
            <summary>
            Returns/Sets the last SqlError on this handle
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlConnection.Isolation">
            <summary>
            Returns/Sets the isolation level.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SqlProperties">
            <summary>
            Contains the connection properties for the database.
            It is loaded from sql.config.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlProperties.#ctor">
            <summary>
            Creates an instance. The provider is defaulted to OleDb.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlProperties.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new object reading from the xml node.
            </summary>
            <param name="DbInfo"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlProperties.#ctor(System.String)">
            <summary>
            Creates a new instance initialized to the default ADO.NET driver
            which is OLEDB.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlProperties.GetInstance(System.String)">
            <summary>
            Returns the connection properties for the database.
            </summary>
            <param name="Name">Database name in sql.config</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlProperties.Add(System.String)">
            <summary>
            Adds a new instance to the global list of database properties.
            </summary>
            <param name="props"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlProperties.LoadSqlConfig">
            <summary>
            Loads the sql.config file in memory
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlProperties.LoadSqlConfig(System.String)">
            <summary>
            Loads the sql.config file in memory from the specified file.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlProperties.GetSqlConfigResourceStream(System.Reflection.Assembly)">
            <summary>
            Loads the sql.config resource stream from the ambedded resources. 
            </summary>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlProperties.ResolveDbTypes">
            <summary>
            Finds and loads the data provider's types.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlProperties.Databases">
            <summary>
            Returns all the configured databases.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SalSqlDataAdapter">
            <summary>
            DataAdapter used to fill the DataSet when result set mode is on.
            This adapter is safe to use with Oracle numeric columns because it avoids the
            overflow exception problem when the precision is too big for .NET decimal type. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SalSqlDataReader">
            <summary>
            DataReader wrapper to safely extract Oracle numeric columns without getting the overflow exception
            when the precision returned by the OCI cannot be stored in .NET decimal type.
            
            Since some ADO.NET driver may pass a null DataReader when executing SQL code that doesn't create a result set
            we protect against NullObjectReferenceExceptions in our DataReader wrapper.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlDataReader.GetOracleOracleValue(System.Int32)">
            <summary>
            Reads the value from the data reader. Avoids the Overflow exception
            that is generated by Oracle OCI or ODP when the precision exceeds .NET precision.
            This is a problem in the Oracle drivers.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlDataReader.GetOracleManagedValue(System.Int32)">
            <summary>
            Reads the value from the data reader. Avoids the Overflow exception
            that is generated by Oracle OCI or ODP when the precision exceeds .NET precision.
            This is a problem in the Oracle drivers.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlDataReader.GetMicrosoftOracleValue(System.Int32)">
            <summary>
            Reads the value from the data reader. Avoids the Overflow exception
            that is generated by Oracle OCI when the precision exceeds .NET precision.
            This is a problem in the Oracle drivers.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlDataReader.GetSqlBaseFieldType(System.Int32)">
            <summary>
            Returns the data type of the indicated field.
            This fixes a bug in Unify/Gupta ADO.NET driver returning
            float for @IF expressions.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlDataReader.GetSqlBaseValue(System.Int32)">
            <summary>
            Reads the value from the data reader. Fixes a bug with the Gupta/Unify SqlBase ADO.NET
            driver when reading DateTime values. The driver doesn't return milliseconds.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Sql.SalSqlError">
            <summary>
            Summary description for SalSqlError.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlError.GetErrorText(System.Int32)">
            <summary>
            Returns the error text corresponding to the error code.
            Error texts are saved as errors are generated. If an error
            has never been generated, requesting the error text for the error
            code will return a null string.
            </summary>
            <param name="errorCode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlError.SetErrorText(System.Int32,System.String)">
            <summary>
            Saves the error code into the global cache of errors.
            </summary>
            <param name="err"></param>
            <param name="text"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlError.Initialize(System.Exception)">
            <summary>
            Initializes SalSqlError from the database exception
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlError.InitializeMSOException(System.Exception)">
            <summary>
            Initializes from Microsoft Oracle Client Exception
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlError.InitializeODPException(System.Exception)">
            <summary>
            Initializes from Oracle Client Exception
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlError.InitializeODPManagedException(System.Exception)">
            <summary>
            Initializes from Oracle Managed Client Exception
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlError.InitializeGuptaException(System.Exception)">
            <summary>
            Initializes from Gupta Exception
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlError.InitializeSqlException(System.Exception)">
            <summary>
            Loads the sql exception looking for the exception names configures in sql.config.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlError.Return">
            <summary>
            Return value. When set, the flag HasReturnValue is also
            flipped to true.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlError.HasReturnValue">
            <summary>
            Returns true if the return value was set.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlError.Number">
            <summary>
            Error number
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlError.Position">
            <summary>
            Error position
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SalSqlHandle">
            <summary>
            Summary description for SalSqlHandle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.#ctor(PPJ.Runtime.Sql.SalSqlSessionHandle)">
            <summary>
            Constructs a SalSqlHandle using a SalSqlSession.
            </summary>
            <param name="hSession"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.#ctor(System.IntPtr)">
            <summary>
            Private constructor to create a SalSqlHandle from the internal GC handle.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.op_Explicit(PPJ.Runtime.SalWindowHandle)~PPJ.Runtime.Sql.SalSqlHandle">
            <summary>
            Automatic casting from int to SalSqlHandle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.op_Explicit(PPJ.Runtime.Sql.SalSqlHandle)~PPJ.Runtime.SalWindowHandle">
            <summary>
            Automatic casting from SalSqlHandle to SalWindowHandle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.op_Implicit(PPJ.Runtime.Sql.SalSqlHandle)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from SalSqlHandle to SalBoolean
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.op_Equality(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            == operator for comparing two SalSqlHandle objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.op_Inequality(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            != operator for comparing two SalSqlHandle objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.op_Equality(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalWindowHandle)">
            <summary>
            == operator for comparing a SalSqlHandle to a SalWindowHandle
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.op_Inequality(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalWindowHandle)">
            <summary>
            != operator for comparing a SalSqlHandle to a SalWindowHandle
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.op_Equality(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            == operator for comparing a SalSqlHandle to a SalWindowHandle
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.op_Inequality(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            != operator for comparing a SalSqlHandle to a SalWindowHandle
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.op_Implicit(PPJ.Runtime.Sql.SalSqlHandle)~System.Boolean">
            <summary>
            Automatic casting from SalSqlHandle to boolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.op_LogicalNot(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            ! boolean NOT operator
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Equals(System.Object)">
            <summary>
            Overrides the Object.Equals() method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetHashCode">
            <summary>
            Overrides the Object.GetHashCode() method
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.FromHandle(System.IntPtr)">
            <summary>
            Returns the SalSqlHandle object from the handle
            </summary>
            <param name="num"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.MoveNext">
            <summary>
            Moves to the next row in the result set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.MovePrev">
            <summary>
            Moves to the previous row in the result set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Read">
            <summary>
            Returns an array with all the fields in the current row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetSchemaTable">
            <summary>
            Returns the schema table for the current dataset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.CloseAllSPResultSets">
            <summary>
            Closes any result sets generated by the execution of a stored procedure.
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.CloseResultSet">
            <summary>
            Closes the result set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Commit">
            <summary>
            Commits all of the SQL transaction's cursors that are connected to the same database.
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Commit(PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Commits all of the SQL transaction's cursors that are connected to the same database.
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Rollback">
            <summary>
            Executes a rollback on the current transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Rollback(PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Executes a rollback on the current transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Connect">
            <summary>
            Connects to a database.
            Uses Sql.Database, Sql.User and Sql.Password.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Connect(PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Connects to a database.
            Uses Sql.Database, Sql.User and Sql.Password.
            </summary>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Connect(System.String,System.String,System.String)">
            <summary>
            Connects to a database.
            </summary>
            <param name="database">Database to connect to</param>
            <param name="user">User name</param>
            <param name="password">Password</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.ReadConnectionStringFromUDL">
            <summary>
            Returns the connection string in SqlUDL or in the UDL file pointed to
            by the SqlUDL variable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.DirectoryByName(System.String)">
            <summary>
            Returns the database names on the specified server.
            </summary>
            <param name="serverName">The name of the server.</param>
            <returns>string[]</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Disconnect">
            <summary>
            Disconnects from a database.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Disconnect(PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Disconnects from a database.
            </summary>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.ExecuteWithSchema">
            <summary>
            Executes a SQL statement and preloads the schema table in order to retrieve it
            later with GetSchemaTable(). The schema is not preloaded when using the data reader (result set = off).
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Execute">
            <summary>
            Executes a SQL statement that was prepared with SqlPrepare or retrieved with SqlRetrieve.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Execute(PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Executes a SQL statement that was prepared with SqlPrepare or retrieved with SqlRetrieve.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.FetchNext(PPJ.Runtime.SalNumber@)">
            <summary>
            Fetches the next row in a result set.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.FetchNext(PPJ.Runtime.SalNumber@,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Fetches the next row in a result set.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.FetchNext">
            <summary>
            Fetches the next row in a result set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.FetchNext(PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Fetches the next row in a result set.
            </summary>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.FetchPrevious(PPJ.Runtime.SalNumber@)">
            <summary>
            Fetches the previous row in a result set.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.FetchPrevious(PPJ.Runtime.SalNumber@,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Fetches the previous row in a result set.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.FetchPrevious">
            <summary>
            Fetches the previous row in a result set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.FetchPrevious(PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Fetches the previous row in a result set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.FetchRow(System.Int32,PPJ.Runtime.SalNumber@)">
            <summary>
            Fetches a row according at the absolute row position.
            </summary>
            <param name="row"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.FetchRow(System.Int32,PPJ.Runtime.SalNumber@,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Fetches a row according at the absolute row position.
            </summary>
            <param name="row"></param>
            <param name="code"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.FetchRow(System.Int32)">
            <summary>
            Fetches a row according at the absolute row position.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.FetchRow(System.Int32,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Fetches a row according at the absolute row position.
            </summary>
            <param name="row"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetLastStatement">
            <summary>
            Returns the last SQL statement used on this connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetModifiedRows(PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the number of rows affected by the most recent INSERT, UPDATE, or DELETE
            statement.
            </summary>
            <param name="nRows"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetModifiedRows">
            <summary>
            Returns the number of rows affected by the most recent INSERT, UPDATE, or DELETE
            statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetNextSPResultSet(System.String,PPJ.Runtime.SalBoolean@)">
            <summary>
            Returns the next result set returned by a stored procedure.
            </summary>
            <param name="intoList"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetNextSPResultSet(System.String)">
            <summary>
            Returns the next result set returned by a stored procedure.
            </summary>
            <param name="intoList"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetParameter(System.Int32,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a database parameter.
            </summary>
            <param name="parameter"></param>
            <param name="nValue"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetResultSetCount(PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the number of rows in the result set.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetResultSetCount">
            <summary>
            Returns the number of rows in the result set.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetResultSetCount(PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Returns the number of rows in the result set.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetResultSetCount(PPJ.Runtime.SalNumber@,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Returns the number of rows in the result set.
            </summary>
            <param name="count"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Prepare(System.String)">
            <summary>
            Compiles a SQL statement for execution.
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Prepare(System.String,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Compiles a SQL statement for execution.
            </summary>
            <param name="statement"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.PrepareAndExecute(System.String)">
            <summary>
            Compiles and executes a SQL statement.
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.PrepareAndExecute(System.String,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Compiles and executes a SQL statement.
            </summary>
            <param name="statement"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.PrepareSP(System.String,System.String)">
            <summary>
            Prepares a stored procedure invokation statement.
            </summary>
            <param name="call"></param>
            <param name="intoList"></param>		
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.PrepareSP(System.String,System.String,System.Boolean)">
            <summary>
            Prepares a stored procedure invokation statement.
            </summary>
            <param name="call"></param>
            <param name="intoList"></param>
            <param name="nonQuery"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.PrepareSP(System.String,System.String,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Prepares a stored procedure invokation statement.
            </summary>
            <param name="call"></param>
            <param name="intoList"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.PrepareSP(System.String,System.String,PPJ.Runtime.Sql.WhenSqlErrorHandler,System.Boolean)">
            <summary>
            Prepares a stored procedure invokation statement.
            </summary>
            <param name="call"></param>
            <param name="intoList"></param>
            <param name="errorHandler"></param>
            <param name="nonQuery"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Retrieve(System.String,System.String,System.String)">
            <summary>
            Retrieves a SQLBase compiled command.
            <remarks>This method is supposed to be used only with SQLBase.
            However, the PPJ Framework adapts the calling syntax to other databases as well.</remarks>
            </summary>
            <param name="hSql"></param>
            <param name="name"></param>
            <param name="bindList"></param>
            <param name="intoList"></param>		
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Retrieve(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Retrieves a SQLBase compiled command.
            <remarks>This method is supposed to be used only with SQLBase.
            However, the PPJ Framework adapts the calling syntax to other databases as well.</remarks>
            </summary>
            <param name="hSql"></param>
            <param name="name"></param>
            <param name="bindList"></param>
            <param name="intoList"></param>
            <param name="nonQuery"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Retrieve(System.String,System.String,System.String,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Retrieves a SQLBase compiled command.
            </summary>
            <param name="name"></param>
            <param name="bindList"></param>
            <param name="intoList"></param>
            <param name="errorHandler"></param>
            <param name="nonQuery"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.Retrieve(System.String,System.String,System.String,PPJ.Runtime.Sql.WhenSqlErrorHandler,System.Boolean)">
            <summary>
            Retrieves a SQLBase compiled command.
            </summary>
            <param name="name"></param>
            <param name="bindList"></param>
            <param name="intoList"></param>
            <param name="errorHandler"></param>
            <param name="nonQuery"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.SetIsolationLevel(System.String)">
            <summary>
            Sets the isolation level.
            </summary>
            <param name="sIsolation">CS=Cursor Stability; RL=Release Locks; RO=Read Only; RR=Read Repeatability</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetIsolationLevel">
            <summary>
            Returns the isolation level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.SetTimeout(System.Int32)">
            <summary>
            Specifies the maximum time to wait before generating an error.
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.SetParameter(System.Int32,System.Int32,System.String)">
            <summary>
            Sets the value of a database parameter.
            </summary>
            <param name="parameter"></param>
            <param name="numberValue"></param>
            <param name="stringValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.SetResultSet(System.Boolean)">
            <summary>
            Enables result sets.
            </summary>
            <param name="enable"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.SetResultSetMode(PPJ.Runtime.Sql.ResultSetMode)">
            <summary>
            Defines the behvaior for the ResultSet mode.
            </summary>
            <param name="enable"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.ClearContext">
            <summary>
            Clears the sql context.
            </summary>
            <param name="Context"></param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.SetContext(System.Object)">
            <summary>
            Sets the context to be used to resolve bind expressions.
            </summary>
            <param name="Context"></param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.SetContextToForm(System.Windows.Forms.Control)">
            <summary>
            Sets the context to be used to resolve bind expressions.
            </summary>
            <param name="Context"></param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.SetContextToForm">
            <summary>
            Sets the context to be used to resolve bind expressions.
            </summary>
            <param name="Context"></param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetContext">
            <summary>
            Returns the previously saved context for the sql handle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.VarSetup(System.Object)">
            <summary>
            Saves the sql bind variables context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetError(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@)">
            <summary>
            Returns the last error information.
            </summary>
            <param name="nError"></param>
            <param name="sError"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetErrorPosition(PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the offset of the error position within the last SQL statement.
            </summary>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetErrorPosition">
            <summary>
            Returns the offset of the error position within the last SQL statement.
            </summary>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetStatementErrorInfo(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@,PPJ.Runtime.SalString@)">
            <summary>
            Returns the error information associated with the specified statement handle
            (command/cursor).
            </summary>
            <param name="nErrorNumber"></param>
            <param name="sErrorDescription"></param>
            <param name="sSqlState"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetSessionHandle(PPJ.Runtime.Sql.SalSqlSessionHandle@)">
            <summary>
            This call returns the session handle to which the specified statement handle belongs.
            The SqlHandle must have been created using SqlCreateStatement function and
            not by calling SqlConnect function.
            </summary>
            <param name="hSession"></param>
            <returns>SalBoolean</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.GetSessionHandle">
            <summary>
            This call returns the session handle to which the specified statement handle belongs.
            The SqlHandle must have been created using SqlCreateStatement function and
            not by calling SqlConnect function.
            </summary>
            <returns>SalSqlSessionHandle</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.CheckConnection">
            <summary>
            Verifies the status of the handle. If it's not valid
            throws an exception.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.HandleException(System.Exception)">
            <summary>
            Process Sql exceptions and convert them into calls to
            WhenSqlError handlers or to SalSqlExeption or to SAM_SqlError
            messages to the application.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.OraPLSQLExecute">
            <summary>
            Executes the anonymous PL/SQL block that was prepared
            using SqlOraPLSQLPrepare.
            </summary>
            <param name="hSql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.OraPLSQLExecute(PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Executes the anonymous PL/SQL block that was prepared
            using SqlOraPLSQLPrepare.
            </summary>
            <param name="hSql"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.OraPLSQLPrepare(PPJ.Runtime.SalString)">
            <summary>
            Compiles the anonymous PL/SQL block.
            </summary>
            <param name="hSql"></param>
            <param name="sAnonymousPLSQLBlock"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.OraPLSQLPrepare(PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Compiles the anonymous PL/SQL block.
            </summary>
            <param name="hSql"></param>
            <param name="sAnonymousPLSQLBlock"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.OraPLSQLCommand(PPJ.Runtime.SalString)">
            <summary>
            Executes an Oracle PL/SQL stored procedure. Supports dynamic arrays and recive
            array parameters.
            </summary>
            <param name="sCommand"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlHandle.OraPLSQLCommand(PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Executes an Oracle PL/SQL stored procedure. Supports dynamic arrays and recive
            array parameters.
            </summary>
            <param name="hSql"></param>
            <param name="sCommand"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlHandle.IsNull">
            <summary>
            Checks if this SalSqlHandle object contains a null db connection.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlHandle.Handle">
            <summary>
            Returns the handle for this SalSqlHandle object
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlHandle.SalSql">
            <summary>
            Returns the internal implementation instance of SqlSql
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlHandle.DataReader">
            <summary>
            Returns the underlying IDataReader object.
            It's null if ResultSet is on, use DataSet instead.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlHandle.DataSet">
            <summary>
            Returns the underlying DataSet object.
            It's null if ResultSet is off, use DataReader instead.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlHandle.Connection">
            <summary>
            Returns the inner connection object.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlHandle.Command">
            <summary>
            Returns the inner prepared command object.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlHandle.Transaction">
            <summary>
            Returns the current open transaction.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlHandle.Properties">
            <summary>
            Returns the properties associated with the connection.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlHandle.BindVars">
            <summary>
            Returns the collection of bind variables
            parsed from the last prepared statement.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlHandle.LastErrorCode">
            <summary>
            Returns the last error code.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlHandle.LastErrorMessage">
            <summary>
            Returns the last error message.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlHandle.LastErrorPosition">
            <summary>
            Returns the last error position.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlHandle.LastError">
            <summary>
            Returns the last error occurred.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlHandle.LastStatement">
            <summary>
            Returns the last sql statement executed on this handle.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SalSqlHandle.Array">
            <summary>
            Dynamic array class for the SalSqlHandle type.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SalSqlSessionHandle">
            <summary>
            Summary description for SalSqlSessionHandle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.#ctor(System.IntPtr)">
            <summary>
            Private constructor to create a null SalSqlSessionHandle
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.op_Explicit(PPJ.Runtime.SalWindowHandle)~PPJ.Runtime.Sql.SalSqlSessionHandle">
            <summary>
            Automatic casting from int to SalSqlSessionHandle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.op_Explicit(PPJ.Runtime.Sql.SalSqlSessionHandle)~PPJ.Runtime.SalWindowHandle">
            <summary>
            Automatic casting from SalSqlSessionHandle to SalWindowHandle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.op_Implicit(PPJ.Runtime.Sql.SalSqlSessionHandle)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from SalSqlSessionHandle to SalBoolean
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.op_Equality(PPJ.Runtime.Sql.SalSqlSessionHandle,PPJ.Runtime.Sql.SalSqlSessionHandle)">
            <summary>
            == operator for comparing two SalSqlSessionHandle objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.op_Inequality(PPJ.Runtime.Sql.SalSqlSessionHandle,PPJ.Runtime.Sql.SalSqlSessionHandle)">
            <summary>
            != operator for comparing two SalSqlSessionHandle objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.op_Equality(PPJ.Runtime.Sql.SalSqlSessionHandle,PPJ.Runtime.SalWindowHandle)">
            <summary>
            == operator for comparing a SalSqlSessionHandle to a SalWindowHandle
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.op_Inequality(PPJ.Runtime.Sql.SalSqlSessionHandle,PPJ.Runtime.SalWindowHandle)">
            <summary>
            != operator for comparing a SalSqlSessionHandle to a SalWindowHandle
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.op_Equality(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.Sql.SalSqlSessionHandle)">
            <summary>
            == operator for comparing a SalSqlSessionHandle to a SalWindowHandle
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.op_Inequality(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.Sql.SalSqlSessionHandle)">
            <summary>
            != operator for comparing a SalSqlSessionHandle to a SalWindowHandle
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.op_Implicit(PPJ.Runtime.Sql.SalSqlSessionHandle)~System.Boolean">
            <summary>
            Automatic casting from SalSqlSessionHandle to boolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.op_True(PPJ.Runtime.Sql.SalSqlSessionHandle)">
            <summary>
            logical TRUE operator for boolean expressions
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.op_False(PPJ.Runtime.Sql.SalSqlSessionHandle)">
            <summary>
            logical FALSE operator for boolean expressions
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.op_LogicalNot(PPJ.Runtime.Sql.SalSqlSessionHandle)">
            <summary>
            ! boolean NOT operator
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.Equals(System.Object)">
            <summary>
            Overrides the Object.Equals() method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.GetHashCode">
            <summary>
            Overrides the Object.GetHashCode() method
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.FromHandle(System.IntPtr)">
            <summary>
            Returns the SalSqlSessionHandle object from the handle
            </summary>
            <param name="num"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.Commit">
            <summary>
            Commits the current transaction associated with the specified session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.Commit(PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Commits the current transaction associated with the specified session.
            </summary>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.Create(System.String)">
            <summary>
            Creates a new session.
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.Create(System.String,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Creates a new session.
            </summary>
            <param name="connectionString"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.CreateStatement(PPJ.Runtime.Sql.SalSqlHandle@)">
            <summary>
            This call creates a new statement belonging to the specified session. The Sql Handle
            parameter specified here is the same as what the current SqlConnect call returns.
            There can be any number of statements within a session; there is no limit
            on this number. This call returns a statement handle if the call was successful.
            To free a statement, the existing SqlDisconnect call needs to be used.
            </summary>
            <param name="hSql">The Sql handle used to associate any number of statements to a session.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.Free">
            <summary>
            Frees the session.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.Free(PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Frees the session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.Rollback">
            <summary>
            Rolls back the current transaction associated with the specified session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.Rollback(PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Rolls back the current transaction associated with the specified session.
            </summary>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.GetErrorInfo(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@,PPJ.Runtime.SalString@)">
            <summary>
            Returns the error information associated with the specified session.
            </summary>
            <param name="nErrorNumber"></param>
            <param name="sErrorDescription"></param>
            <param name="sSqlState"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.SetParameter(System.Int32,System.Int32,System.String)">
            <summary>
            Sets the value of the specified session property. 
            </summary>
            <param name="parameter"></param>
            <param name="numberValue"></param>
            <param name="stringValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.GetParameter(System.Int32,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@)">
            <summary>
            Return the value of the specified session property. 
            </summary>
            <param name="parameter"></param>
            <param name="nValue"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.CheckSession">
            <summary>
            Verifies the status of the handle. If it's not valid
            throws an exception.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SalSqlSessionHandle.HandleException(System.Exception)">
            <summary>
            Process Sql exceptions and convert them into calls to
            WhenSqlError handlers or to SalSqlExeption or to SAM_SqlError
            messages to the application.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlSessionHandle.IsNull">
            <summary>
            Checks if this SalSqlSessionHandle object contains a null db connection.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlSessionHandle.Handle">
            <summary>
            Returns the handle for this SalSqlSessionHandle object
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlSessionHandle.Connection">
            <summary>
            Returns the connection object
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlSessionHandle.Properties">
            <summary>
            Returns the properties associated with the connection.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlSessionHandle.LastErrorCode">
            <summary>
            Returns the last error code.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlSessionHandle.LastErrorMessage">
            <summary>
            Returns the last error message.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlSessionHandle.LastErrorPosition">
            <summary>
            Returns the last error position.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlSessionHandle.LastError">
            <summary>
            Returns the last error occurred.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SalSqlSessionHandle.SalConnection">
            <summary>
            Returns the internal SalSqlConnection object.
            This is used by the constructor of SalSqlHandle to build
            a connection from a SalSqlSession instance.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SalSqlSessionHandle.Array">
            <summary>
            Dynamic array class for the SalSqlSessionHandle type.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.WhenSqlErrorHandler">
            <summary>
            WhenSqlError handler.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.WhenSqlSessionErrorHandler">
            <summary>
            WhenSqlSessionError handler.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.Sql">
            <summary>
            Summary description for Sql.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.Sql.User">
            <summary>
            This string variable contains a user name necessary to access a database.
            The default authorization name is SYSADM.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.Sql.Password">
            <summary>
            This string variable contains a password necessary to access a database.
            The default password is SYSADM.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.Sql.Database">
            <summary>
            This string variable contains the name of the database to which the application connects.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.Sql.ResultSet">
            <summary>
            Result set status flag.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.Sql.ResultSetMode">
            <summary>
            Behavior for when the ResultSet mode is on.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.Sql.IsolationLevel">
            <summary>
            This system variable sets the isolation level for the next connection to a database server.
            The isolation level controls the effect that changes made by one user have on another user accessing the same tables.
            Valid strings are:
            	- Read Repeatability (RR)
            	- Cursor Stability (CS)
            	- Release Locks (RL)
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.Sql.UniversalDataLink">
            <summary>
            SqlUDL is a system variable that can contain a provider name or the name of a UDL file 
            to use for OLE DB connection information.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.ClearImmediate">
            <summary>
            Disconnects the internal Sql Handle from a database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.ConnectImmediate">
            <summary>
            Connects the internal Sql Handle used for SqlImmediate calls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.CloseAllSPResultSets(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Closes any result sets generated by the execution of a stored procedure.
            </summary>
            <param name="hSql"></param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.CloseResultSet(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Close the current result set.
            </summary>
            <param name="hSql"></param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Commit(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Commits all of the SQL transaction's cursors that are connected to the same database.
            </summary>
            <param name="hSql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Commit(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Commits all of the SQL transaction's cursors that are connected to the same database.
            </summary>
            <param name="hSql"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Rollback(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Rolls back all of the SQL transaction's cursors that are connected to the same database.
            </summary>
            <param name="hSql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Rollback(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Rolls back all of the SQL transaction's cursors that are connected to the same database.
            </summary>
            <param name="hSql"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Connect(PPJ.Runtime.Sql.SalSqlHandle@)">
            <summary>
            Connects to a database.
            </summary>
            <param name="hSql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Connect(PPJ.Runtime.Sql.SalSqlHandle@,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Connects to a database.
            </summary>
            <param name="hSql"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.ContextClear(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Clears the sql context.
            </summary>
            <param name="hSql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.ContextSet(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Sets the sql context to the current form.
            </summary>
            <param name="hSql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.ContextSetToForm(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalWindowHandle)">
            <summary>
            Sets the contetx to the specified form.
            </summary>
            <param name="hSql"></param>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.DirectoryByName(PPJ.Runtime.SalString,PPJ.Runtime.SalArray{PPJ.Runtime.SalString})">
            <summary>
            Returns the database names on the specified server.
            </summary>
            <param name="sServerName">The name of a server.</param>
            <param name="sArrayNames">The name of an array of strings containing database names.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Disconnect(PPJ.Runtime.Sql.SalSqlHandle@)">
            <summary>
            Disconnects from a database.
            </summary>
            <param name="hSql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Disconnect(PPJ.Runtime.Sql.SalSqlHandle@,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Disconnects from a database.
            </summary>
            <param name="hSql"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Error(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Returns the most recent error code for the specified Sql Handle.
            </summary>
            <param name="hSql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Execute(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Executes a SQL statement that was previously prepared.
            </summary>
            <param name="hSql"></param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Execute(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Executes a SQL statement that was previously prepared.
            </summary>
            <param name="hSql"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Exists(PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean@)">
            <summary>
            Determines whether a row exists.
            </summary>
            <param name="sSelect"></param>
            <param name="bExists"></param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Exists(PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean@,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Determines whether a row exists.
            </summary>
            <param name="sSelect"></param>
            <param name="bExists"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Sql.Sql.ExtractArgs(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.Sql.SalSqlHandle@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)" -->
        <member name="M:PPJ.Runtime.Sql.Sql.FetchNext(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber@)">
            <summary>
            Fetches the next row in a result set.
            </summary>
            <param name="hSql"></param>
            <param name="nInd"></param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.FetchNext(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber@,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Fetches the next row in a result set.
            </summary>
            <param name="hSql"></param>
            <param name="nInd"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.FetchPrevious(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber@)">
            <summary>
            Fetches the previous row in a result set.
            </summary>
            <param name="hSql"></param>
            <param name="nInd"></param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.FetchPrevious(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber@,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Fetches the previous row in a result set.
            </summary>
            <param name="hSql"></param>
            <param name="nInd"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.FetchRow(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@)">
            <summary>
            Fetches a row according at the absolute row position.
            </summary>
            <param name="hSql"></param>
            <param name="nRow"></param>
            <param name="nInd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.FetchRow(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Fetches a row according at the absolute row position.
            </summary>
            <param name="hSql"></param>
            <param name="nRow"></param>
            <param name="nInd"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetError(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@)">
            <summary>
            Returns the last error information.
            </summary>
            <param name="hSql"></param>
            <param name="nError"></param>
            <param name="sError"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetErrorPosition(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the offset of the error position within the last SQL statement.
            </summary>
            <param name="hSql"></param>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetErrorText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Returns the error text corresponding to the error number.
            </summary>
            <param name="nError"></param>
            <param name="sError"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetErrorTextX(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the error text corresponding to the error number.
            </summary>
            <param name="Number"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.ErrorText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the error text corresponding to the error number.
            </summary>
            <param name="nError"></param>
            <param name="nType"></param>
            <param name="sError"></param>
            <param name="nLength"></param>
            <param name="nRealLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetLastStatement">
            <summary>
            Returns the last SQL statement.
            </summary>
            <returns>sSqlStatement</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetModifiedRows(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the number of rows affected by the most recent INSERT, UPDATE, or DELETE
            statement.
            </summary>
            <param name="hSql">The handle of a SQL statement.</param>
            <param name="nCount">The number of rows affected.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetNextSPResultSet(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean@)">
            <summary>
            Returns the next result set returned by a stored procedure.
            </summary>
            <param name="hSql"></param>
            <param name="sIntoList"></param>
            <param name="bEndOfRS"></param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetParameter(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a database parameter.
            </summary>
            <param name="hSql"></param>
            <param name="nParameter"></param>
            <param name="nNumber"></param>
            <param name="sString"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetResultSetCount(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the number of rows in the result set.
            </summary>
            <param name="hSql"></param>
            <param name="nCount"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetResultSetCount(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber@,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Returns the number of rows in the result set.
            </summary>
            <param name="hSql"></param>
            <param name="nCount"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Immediate(PPJ.Runtime.SalString)">
            <summary>
            Prepares and executes a SQL statement.
            </summary>
            <param name="sSqlCommand"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Immediate(PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Prepares and executes a SQL statement.
            </summary>
            <param name="sSqlCommand"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.ImmediateContext(PPJ.Runtime.SalString,System.Object)">
            <summary>
            Prepares and executes a SQL statement using a different sql context.
            </summary>
            <param name="sCommand"></param>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Prepare(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString)">
            <summary>
            Compiles a SQL statement for execution.
            </summary>
            <param name="hSql"></param>
            <param name="sSqlStatement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Prepare(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Compiles a SQL statement for execution.
            </summary>
            <param name="hSql"></param>
            <param name="sSqlStatement"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.PrepareAndExecute(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString)">
            <summary>
            Compiles and executes a SQL statement.
            </summary>
            <param name="hSql"></param>
            <param name="sSqlStatement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.PrepareAndExecute(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Compiles and executes a SQL statement.
            </summary>
            <param name="hSql"></param>
            <param name="sSqlStatement"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.PrepareSP(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Prepares a stored procedure invokation statement.
            </summary>
            <param name="hSql"></param>
            <param name="sStoredProc"></param>
            <param name="sIntoList"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.PrepareSP(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Prepares a stored procedure invokation statement.
            </summary>
            <param name="hSql"></param>
            <param name="sStoredProc"></param>
            <param name="sIntoList"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Retrieve(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Retrieves a SQLBase compiled command.
            </summary>
            <param name="hSql"></param>
            <param name="sName"></param>
            <param name="sBindList"></param>
            <param name="sIntoList"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Retrieve(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Retrieves a SQLBase compiled command.
            </summary>
            <param name="hSql"></param>
            <param name="sName"></param>
            <param name="sBindList"></param>
            <param name="sIntoList"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.SetIsolationLevel(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString)">
            <summary>
            Sets the isolation level.
            </summary>
            <param name="hSql"></param>
            <param name="sIsolation">CS=Cursor Stability; RL=Release Locks; RO=Read Only; RR=Read Repeatability</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.SetParameter(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Sets the value of a database parameter.
            </summary>
            <param name="hSql"></param>
            <param name="nParameter"></param>
            <param name="nNumber"></param>
            <param name="sString"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.SetResultSet(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean)">
            <summary>
            Turns result set mode on or off for all handles associated with the same connection.
            </summary>
            <param name="hSql"></param>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.VarSetup(PPJ.Runtime.Sql.SalSqlHandle,System.Object)">
            <summary>
            Saves the sql bind variables context.
            </summary>
            <param name="hSql"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.VarSetup(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Saves the sql bind variables context using the SalCompileAndEvaluate context.
            </summary>
            <param name="hSql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetStatementErrorInfo(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@,PPJ.Runtime.SalString@)">
            <summary>
            Returns the error information associated with the specified statement handle.
            </summary>
            <param name="hSql"></param>
            <param name="nErrorNumber"></param>
            <param name="sErrorDescription"></param>
            <param name="sSqlState"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.SetLockTimeout(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Specifies the maximum time to wait before generating an error.
            </summary>
            <param name="hSql"></param>
            <param name="nTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetSessionHandle(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.Sql.SalSqlSessionHandle@)">
            <summary>
            Returns the session handle to which the specified statement handle belongs.
            </summary>
            <param name="hSql"></param>
            <param name="hSession"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.CommitSession(PPJ.Runtime.Sql.SalSqlSessionHandle)">
            <summary>
            Commits the current transaction associated with the specified session.
            </summary>
            <param name="hSession"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.CommitSession(PPJ.Runtime.Sql.SalSqlSessionHandle,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Commits the current transaction associated with the specified session.
            </summary>
            <param name="hSession"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.CreateSession(PPJ.Runtime.Sql.SalSqlSessionHandle@,PPJ.Runtime.SalString)">
            <summary>
            Creates a new session.
            </summary>
            <param name="hSession"></param>
            <param name="sSessionProperties"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.CreateSession(PPJ.Runtime.Sql.SalSqlSessionHandle@,PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Creates a new session.
            </summary>
            <param name="hSession"></param>
            <param name="sSessionProperties"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.CreateStatement(PPJ.Runtime.Sql.SalSqlSessionHandle,PPJ.Runtime.Sql.SalSqlHandle@)">
            <summary>
            Creates a new statement belonging to the specified session.
            </summary>
            <param name="hSession"></param>
            <param name="hSql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.FreeSession(PPJ.Runtime.Sql.SalSqlSessionHandle@)">
            <summary>
            Frees the session.
            </summary>
            <param name="hSession"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.FreeSession(PPJ.Runtime.Sql.SalSqlSessionHandle@,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Frees the session.
            </summary>
            <param name="hSession"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.RollbackSession(PPJ.Runtime.Sql.SalSqlSessionHandle)">
            <summary>
            Rolls back the current transaction associated with the specified session.
            </summary>
            <param name="hSession"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.RollbackSession(PPJ.Runtime.Sql.SalSqlSessionHandle,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Rolls back the current transaction associated with the specified session.
            </summary>
            <param name="hSession"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetSessionErrorInfo(PPJ.Runtime.Sql.SalSqlSessionHandle,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@,PPJ.Runtime.SalString@)">
            <summary>
            Returns the error information associated with the specified session.
            </summary>
            <param name="hSession"></param>
            <param name="nErrorNumber"></param>
            <param name="sErrorDescription"></param>
            <param name="sSqlState"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.SetSessionParameter(PPJ.Runtime.Sql.SalSqlSessionHandle,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Sets the value of the specified session property. 
            </summary>
            <param name="hSession"></param>
            <param name="nParameter"></param>
            <param name="nValue"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetSessionParameter(PPJ.Runtime.Sql.SalSqlSessionHandle,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of the specified session property. 
            </summary>
            <param name="hSession"></param>
            <param name="nParameter"></param>
            <param name="nValue"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.OraPLSQLExecute(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Executes the anonymous PL/SQL block that was prepared
            using SqlOraPLSQLPrepare.
            </summary>
            <param name="hSql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.OraPLSQLExecute(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Executes the anonymous PL/SQL block that was prepared
            using SqlOraPLSQLPrepare.
            </summary>
            <param name="hSql"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.OraPLSQLPrepare(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString)">
            <summary>
            Compiles the anonymous PL/SQL block.
            </summary>
            <param name="hSql"></param>
            <param name="sAnonymousPLSQLBlock"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.OraPLSQLPrepare(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Compiles the anonymous PL/SQL block.
            </summary>
            <param name="hSql"></param>
            <param name="sAnonymousPLSQLBlock"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.OraPLSQLCommand(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString)">
            <summary>
            Executes an Oracle PL/SQL stored procedure. Supports dynamic arrays and recive
            array parameters.
            </summary>
            <param name="hSql"></param>
            <param name="sCommand"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.OraPLSQLCommand(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Executes an Oracle PL/SQL stored procedure. Supports dynamic arrays and recive
            array parameters.
            </summary>
            <param name="hSql"></param>
            <param name="sCommand"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.ToDbValue(System.Object,System.Object@)">
            <summary>
            Converts the value to the corresponding db value and returns the DbType code.
            </summary>
            <param name="value"></param>
            <param name="dbvalue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.ConnectTransaction(PPJ.Runtime.Sql.SalSqlHandle@,PPJ.Runtime.SalString)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.ConnectUsingCursor(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.DisconnectWithoutCursor(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.SetLongBindDatatype(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.ExecutionPlan(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetCursor(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetSqlHandle(PPJ.Runtime.SalNumber)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.SetInMessage(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.SetOutMessage(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.XDirectory(PPJ.Runtime.SalNumber,PPJ.Runtime.SalArray{PPJ.Runtime.SalString}@)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.OraPLSQLStringBindType(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetCmdOrRowsetPtr(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean,PPJ.Runtime.SalNumber@)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetDSOrSessionPtr(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean,PPJ.Runtime.SalNumber@)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Close(PPJ.Runtime.Sql.SalSqlHandle@)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.DropStoredCmd(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetRollbackFlag(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean@)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Open(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.Store(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.GetParameterAll(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@,PPJ.Runtime.SalBoolean)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.Sql.SetParameterAll(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.ResultSetMode">
            <summary>
            ResultSet behavior.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.ResultSetMode.Connected">
            <summary>
            Rows fetched from the connected DataReader are cached into a result set for backward scrolling.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.ResultSetMode.Disconnected">
            <summary>
            All rows are fetched at once and the DataReader is disconnected.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SqlContext">
            <summary>
            Defines a sql context block.
            This class is used in a using(new SqlContext()) code block to 
            delimit a local context.
            
            The constructor can take the reference to the local variables
            encapsulating class and to the current object. Both references
            are used by the interpreter to evaluate bind variables.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlContext.#ctor">
            <summary>
            Constructs a new empty SqlContext.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlContext.#ctor(PPJ.Runtime.Sql.SqlContext)">
            <summary>
            Duplicates a saved SqlContext and pushes it on the stack.
            </summary>
            <param name="cx"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlContext.#ctor(System.Object)">
            <summary>
            Creates a new SqlContext and pushes it on the stack.
            </summary>
            <param name="locals"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlContext.#ctor(System.Object,System.Object)">
            <summary>
            Creates a new SqlContext and pushes it on the stack.
            </summary>
            <param name="locals"></param>
            <param name="container"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlContext.Initialize(System.Object,System.Object)">
            <summary>
            Initializes the SqlContext instance.
            </summary>
            <param name="locals"></param>
            <param name="container"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlContext.EnsureStack">
            <summary>
            Ensures that the stack is created and has at least one
            element in it.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlContext.Push(PPJ.Runtime.Sql.SqlContext)">
            <summary>
            Pushes the current context to the stack.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlContext.Pop">
            <summary>
            Removes the last context from the stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlContext.CreateTempContext(System.Object)">
            <summary>
            Creates an temporary instance of SqlContext that keeps a reference
            to the current SqlContext and uses the specified container reference.
            When the saved SqlContext reference holding the locals goes out of scope
            also the locals in the temporary SqlContext created by this method are cleared.
            </summary>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlContext.Equals(System.Object)">
            <summary>
            Compares two SqlContext instances that may wrap the same
            lcoals and container references.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlContext.Clone">
            <summary>
            Clones the SalContext instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlContext.GetHashCode">
            <summary>
            Overrides GetHashCode() to suppress the warning.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlContext.Locals">
            <summary>
            Returns the local variables instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlContext.Container">
            <summary>
            Returns the container instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlContext.Disposed">
            <summary>
            Returns true if the SqlContext has been disposed of (out of scope).
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlContext.Current">
            <summary>
            Returns the current SqlContext instance or SqlContext.Empty
            if there is no current SqlContext on the stack.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SqlErrorContext">
            <summary>
            Encloses a code block that uses the specified WhenSqlErrorHandler
            delegate to process sql errors.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.SqlErrorContext.m_stack">
            <summary>
            Stack of Sql error contexts.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.SqlErrorContext.m_errorHandler">
            <summary>
            The error handler delegate.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SqlOra">
            <summary>
            Oracle specific functions implementation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlOra.PLSQLPrepare(PPJ.Runtime.Sql.SalSqlHandle,System.String)">
            <summary>
            This function compiles the anonymous PL/SQL block. This function looks very much
            like the regular SqlPrepare function, but the underlying code is meant specifically
            for handling Oracle PL/SQL blocks.
            </summary>
            <param name="hSql">A handle that identifies a database connection.</param>
            <param name="sAnonymousPLSQLBlock">The actual anonymous PL/SQL block that the user wants to prepare. That will also contain the input and output variables.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlOra.PLSQLExecute(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            This function executes the anonymous PL/SQL block that was prepared
            using SqlOraPLSQLPrepare. If the execution succeeds, then all output
            parameters from the PL/SQL block are updated by the time the control
            returns to the user.
            </summary>
            <param name="hSql">The sql handle associated with the prepared Anonymous PL/SQL block.</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlOra.PLSQLCommand(PPJ.Runtime.Sql.SalSqlHandle,System.String)">
            <summary>
            Executes an Oracle PL/SQL stored procedure. The first parameter identifies the SQL handle to the database.
            The second parameter is a command string used to invoke a PL/SQL stored procedure.
            For some strange reason, PLSQLCommand bind vars don't use the colon delimiter, so we need
            to parse the bind vars, add the delimiter and reassemble the string.
            </summary>
            <param name="hSql"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlOra.ReadOutputParameters(PPJ.Runtime.Sql.SalSql)">
            <summary>
            Retrieves the parameters changed by the oracle call and saves the value
            back into the bind variables.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlOra.PrepareParameters(PPJ.Runtime.Sql.SalSql)">
            <summary>
            Evaluates the bind variables and prepares the parameters.
            </summary>
            <param name="salSql"></param>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlOra.MaxStringSize">
            <summary>
            Returns/Sets the maximum size of return string parameters.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlOra.MaxNonStringSize">
            <summary>
            Returns/Sets the maximum size for non-string return parameters.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlOra.MaxArrayLength">
            <summary>
            Returns/Sets the maximum number of elements for return array parameters.
            The total maximum size in bytes is 16,777,216.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlOra.MaxStringElementSize">
            <summary>
            Returns/Sets the maximum size of return string elements in array parameters.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SqlOra.OD">
            <summary>
            Oracle Data Provider
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlOra.OD.PrepareParameters(PPJ.Runtime.Sql.SalSql,System.Object[],PPJ.Runtime.Sql.SqlProperties)">
            <summary>
            Evaluates the bind variables and prepares the parameters.
            </summary>
            <param name="salSql"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlOra.OD.PrepareParameter(Oracle.DataAccess.Client.OracleParameter,System.Object,PPJ.Runtime.Sql.SqlProperties)">
            <summary>
            Prepares the Db parameter from the value.
            </summary>
            <param name="op"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlOra.OD.PrepareParameter(Oracle.DataAccess.Client.OracleParameter,System.Collections.ICollection,PPJ.Runtime.Sql.SqlProperties)">
            <summary>
            Converts the parameter array to a native array and prepares the
            OracleParameter object to read/write the array parameer.
            </summary>
            <param name="op"></param>
            <param name="coll"></param>
        </member>
        <member name="T:PPJ.Runtime.Sql.SqlOra.OM">
            <summary>
            Oracle Managed Data Provider
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlOra.OM.PrepareParameters(PPJ.Runtime.Sql.SalSql,System.Object[],PPJ.Runtime.Sql.SqlProperties)">
            <summary>
            Evaluates the bind variables and prepares the parameters.
            </summary>
            <param name="salSql"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlOra.OM.PrepareParameter(Oracle.ManagedDataAccess.Client.OracleParameter,System.Object,PPJ.Runtime.Sql.SqlProperties)">
            <summary>
            Prepares the Db parameter from the value.
            </summary>
            <param name="op"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlOra.OM.PrepareParameter(Oracle.ManagedDataAccess.Client.OracleParameter,System.Collections.ICollection,PPJ.Runtime.Sql.SqlProperties)">
            <summary>
            Converts the parameter array to a native array and prepares the
            OracleParameter object to read/write the array parameer.
            </summary>
            <param name="op"></param>
            <param name="coll"></param>
        </member>
        <member name="T:PPJ.Runtime.Sql.SqlOra.MS">
            <summary>
            Microsoft Data Provider for Oracle
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlOra.MS.PrepareParameters(PPJ.Runtime.Sql.SalSql,System.Object[],PPJ.Runtime.Sql.SqlProperties)">
            <summary>
            Evaluates the bind variables and prepares the parameters.
            </summary>
            <param name="salSql"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlOra.MS.PrepareParameter(System.Data.Common.DbParameter,System.Object,PPJ.Runtime.Sql.SqlProperties)">
            <summary>
            Prepares the Db parameter from the value.
            </summary>
            <param name="op"></param>
            <param name="value"></param>
        </member>
        <member name="T:PPJ.Runtime.Sql.SqlOra.ADO">
            <summary>
            Generic ADO.NET Data Provider
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlOra.ADO.PrepareParameters(PPJ.Runtime.Sql.SalSql,System.Object[],PPJ.Runtime.Sql.SqlProperties)">
            <summary>
            Evaluates the bind variables and prepares the parameters.
            </summary>
            <param name="salSql"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlOra.ADO.PrepareParameter(System.Data.IDbDataParameter,System.Object,PPJ.Runtime.Sql.SqlProperties)">
            <summary>
            Prepares the Db parameter from the value.
            </summary>
            <param name="op"></param>
            <param name="value"></param>
        </member>
        <member name="T:PPJ.Runtime.Sql.SqlParser">
            <summary>
            Parser class, used to extract the into variables and the bind
            variables from sql statements.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.ParseSql(System.String)">
            <summary>
            Parses into and bind variables out of the sql statement.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Sql.SqlParser.ExtractFunctionName(System.String,System.Int32@)" -->
        <member name="M:PPJ.Runtime.Sql.SqlParser.HasParameter(System.String,System.Int32)">
            <summary>
            Has parameter answers the question wether a given function or procedure has any parameters. 
            The method skips all white space until first character found. If the first non white space character 
            is not the ending bracket there must be parameters.
            </summary>
            <param name="sql">sql statement to parse</param>
            <param name="pos">position in the statement where the opening paranthesis is located at</param>
            <returns>True or false if a parameter is found</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.PushFunction(System.String,System.Boolean@,System.Collections.Generic.Stack{PPJ.Runtime.Sql.SqlParser.ParsedFunction},System.Int32@)">
            <summary>
            This is a slave function for the ExtractBinds method. 
            PushFunction is called to investigate if current position in parsed statement is a function or procedure call. 
            If a function is found it is pushed on the functionStack stack so that we keep track of the fact that we are now parsing
            a function or a procedure. 
            
            NOTE: This function is here because of the SQL Hints concept where bind variables direction is hinted 
            trough function/procedure signatures. In that case we parse a complete function before the direction can be mapped. 
            The reason to this is that function calls can be nested. 
            </summary>
            <param name="sql"></param>
            <param name="isAssignmentVar"></param>
            <param name="functionStack"></param>
            <param name="pos"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.PopFunction(System.String,System.Collections.Generic.Stack{PPJ.Runtime.Sql.SqlParser.ParsedFunction},System.Int32)">
            <summary>
            This is a slave function for the ExtractBinds method. 
            Whenever the end of a function/procedure is found when parsing this PopFunction is called to 
            finish up the bind directions. 
            
            NOTE: This function is here because of the SQL Hints concept where bind variables direction is hinted 
            trough function/procedure signatures. In that case we parse a complete function before the direction can be mapped. 
            The reason to this is that function calls can be nested. 
            </summary>
            <param name="sql"></param>
            <param name="functionStack"></param>
            <param name="pos"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.ParseInto(System.String)">
            <summary>
            Parses into variables from the list.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.FixCommand(System.String)">
            <summary>
            Parses the comma separated list of bind variables in the command
            string and builds a new command where the binds list uses the 
            standard ':' marker for binds.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.FixList(System.String)">
            <summary>
            Parses the comma separated list of bind variables and
            builds a new list using the standard ':' marker for binds.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.ExtractIntos(System.String,System.Int32)">
            <summary>
            Extracts all into binds from the sql command.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.FindInto(System.String)">
            <summary>
            Finds the position of the INTO clause in the sql command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.TestInto(System.String,System.Int32)">
            <summary>
            Tests for the INTO clause at position.
            </summary>
            <param name="sql"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.ParseIntoVar(System.String,System.Int32)">
            <summary>
            Returns the next valid into bind.
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.ExtractBinds(System.String)">
            <summary>
            Extracts all into binds from the sql command.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.FindParameter(System.String,System.Int32)">
            <summary>
            Find an a previous parameter with the same bind text.
            </summary>
            <param name="text"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.ParseInlineDirectionHint(System.String,PPJ.Runtime.Sql.SqlParser.Parameter,System.Int32@)">
            <summary>
            Parse from the given position if the ParameterDirection is hinted
            Some_Procedure( hintedParameter IN );
            </summary>
            <param name="sql">Statement</param>
            <param name="var">Parameter</param>
            <param name="pos">Position to search from</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.FindNextToken(System.String,System.Int32,System.String)">
            <summary>
            Finds the next occurrence of the specifiec token after
            any number of whitespaces.
            </summary>
            <param name="sql"></param>
            <param name="pos"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.ParseBindVar(System.String,System.Int32)">
            <summary>
            Returns the next valid bind variable.
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.FixListInternal(System.String,System.Int32)">
            <summary>
            Parses the comma separated list of bind variables and builds
            a new list that uses the standard ':' marker for binds.
            If the encloseExpression parameter is true, all bind expressions
            are enclosed in parenthesis to ensure that the engine evaluates the
            full expression.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.FindNextQuote(System.String,System.Int32,System.Char)">
            <summary>
            Finds the next quote char.
            If the char is not found, returns the last position in the string.
            </summary>
            <param name="str"></param>
            <param name="start"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.ConvertStringLiterals(System.String)">
            <summary>
            Converts all char literals to string literals and prefixes them
            with the @ sign to prevent escape sequences parsing.
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.FindCommandParameters(System.String)">
            <summary>
            Returns the index of the beginning of the arguments list.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlParser.IntoList">
            <summary>
            Returns the list of parsed into variables.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlParser.BindList">
            <summary>
            Returns the list of parsed bind variables.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlParser.IsCommand">
            <summary>
            Returns/Sets the type of sql string to parse.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlParser.ParametersPrefix">
            <summary>
            Returns/Sets the prefix to use with named parameters.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlParser.NamedParameters">
            <summary>
            Enables/Disables named parameters substitution.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlParser.PositionalParameters">
            <summary>
            Enables/Disables positional parameters substitution.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlParser.OptimizeParameters">
            <summary>
            Enables/Disables parameters optimization.
            When enabled, identical parameters (bind expressions) are parsed
            into a single Parameter instance.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.SqlParser.SqlParsed">
            <summary>
            Set this property to tell the parser if it's a sql expression parsed or not. 
            I.e. should function bind variables be parsed or not.
            This property is used from the Application Forms framework and set when SQL 
            is executed rather than PL/SQL. We need this for optimizing parsing as we should not parse 
            function parameters for sql statements. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SqlParser.ParsedFunction">
            <summary>
            This class is used from the ExtractBindVar method 
            where we keep track of nested function calls.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.SqlParser.ParsedFunction.Name">
            <summary>
            Function name
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.SqlParser.ParsedFunction.IsFunction">
            <summary>
            Flag that indicates if this is a function or a procedure.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.SqlParser.ParsedFunction.Parameters">
            <summary>
            Count of parameters 
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.SqlParser.ParsedFunction.Binds">
            <summary>
            List of parameters <see cref="T:PPJ.Runtime.Sql.SqlParser.FunctionParameter"/>
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.SqlParser.ParsedFunction.NestedGroupCounter">
            <summary>
            Group counter, used to keep track of nested groups "( a + b - ( c - d))"
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SqlParser.ParsedFunction.#ctor(System.String)">
            <summary>
            Initiates an instance of ParsedFunction class
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:PPJ.Runtime.Sql.SqlParser.FunctionParameter">
            <summary>
            Extension of the PPJ parameter class.
            This struct is used in ExtractBindVars to hold extra information of function/procedure parameters.
            It is about SqlHints and Inline hints functionality.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.SqlParser.FunctionParameter.Pos">
            <summary>
            Parameter ordinal position in the signature.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.SqlParser.FunctionParameter.Bind">
            <summary>
            Bound parameter <see cref="T:PPJ.Runtime.Sql.SqlParser.Parameter"/>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Sql.SqlParser.FunctionParameter.#ctor(System.Int32,PPJ.Runtime.Sql.SqlParser.Parameter)" -->
        <member name="P:PPJ.Runtime.Sql.SqlParser.FunctionParameter.IsDirectionHinted">
            <summary>
            Returns true if the bind variable is hinted with an inline hint.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.FndSqlHintsEventArgs">
            <summary>
            Provides data to SqlHints events
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.FndSqlHintsEventArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initiates a new instance of FndSqlHintsEventArgs
            </summary>
            <param name="sql"></param>
            <param name="procedure"></param>
            <param name="pos"></param>
        </member>
        <member name="P:PPJ.Runtime.Sql.FndSqlHintsEventArgs.Sql">
            <summary>
            Gets the sql statement
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.FndSqlHintsEventArgs.Procedure">
            <summary>
            Gets the procedure is question
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sql.FndSqlHintsEventArgs.Pos">
            <summary>
            Gets the relevant position in the statement
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.SignatureHints">
            <summary>
            SignatureHints is used by the static Sql parameter that hols signature hints
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sql.SignatureHints.SignatureHintsInstance">
            <summary>
            This is the class instance that will be reused for all the hint context
            when running the application. We have designed it like this to prevent a vast amount of object instances
            to be created at runtime. The only real interest in this shell object is to support the dispose interface in order
            to make sure that the current hints are correctly cleaned out.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sql.SignatureHints.FindSignature(System.String,System.Int32)">
            <summary>
            Find a specific signature by name and parameter count
            </summary>
            <param name="name">Method name</param>
            <param name="parameters">Parameter count</param>
            <returns>MethodSignature if registered or null</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SignatureHints.OnSqlHintsNotFound(System.Object,PPJ.Runtime.Sql.FndSqlHintsEventArgs)">
            <summary>
            Throws SqlHintsNotFound event 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Sql.SignatureHints.NewContext">
            <summary>
            Creates a new Signature Hints context on the sql hints stack. 
            </summary>
            <returns>Returns a signature hints instance</returns>
        </member>
        <member name="M:PPJ.Runtime.Sql.SignatureHints.Add(System.String,System.Data.ParameterDirection[])">
            <summary>
            The application call the Add method to add a proceedure signature to the hints collection. 
            this hint will then be used by the framework when parsing annonomous PLSQL calls to be able
            to set the parameter direction property correctly.
            </summary>
            <param name="name"></param>
            <param name="paramDirections"></param>
        </member>
        <member name="P:PPJ.Runtime.Sql.SignatureHints.Signatures">
            <summary>
            The internal Signatures property is used only by the SqlParser logic
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Sql.SignatureHints.FndSqlHintsNotFound">
            <summary>
            PPJ sql parser will call this event when there procedures parsed that is not hinted.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.MethodSignature">
            <summary>
            Internal class that is/should only be used by the internal logic of SqlHints
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sql.WhenSqlError">
             <summary>
             This class is use to enclose a When SqlError block
             in a using(new WhenSqlError()) block. On entering the block
             a counter is increased, when exiting the block the counter is decreased.
            
             When the counter is zero and a sql error occurs, the Sql implementation
             will try to use the global error handler. If the counter is non-zero the
             implementation does not call the global handler.
             
             If this is block omitted, the implementation will alway try to call the global
             Sql Error handler. If the global handler is not defined, the behavior of the
             application is unaltered.
             </summary>
        </member>
        <member name="T:PPJ.Runtime.Xml.SalXML">
            <summary>
            Serializer for any object with PPJ native types.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.Serialize``1(System.Object)">
            <summary>
            Serializes the object of the specified type to XML.
            </summary>
            <param name="o"></param>
            <param name="type"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.WriteObject(System.Xml.XmlWriter,System.Object,System.Type)">
            <summary>
            Writes any object to XML.
            </summary>
            <param name="writer"></param>
            <param name="o"></param>
            <param name="type"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.WriteField(System.Xml.XmlWriter,System.Object,System.Reflection.FieldInfo)">
            <summary>
            Writes a field member.
            </summary>
            <param name="writer"></param>
            <param name="o"></param>
            <param name="fieldInfo"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.WriteProperty(System.Xml.XmlWriter,System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Writes a property member.
            </summary>
            <param name="writer"></param>
            <param name="o"></param>
            <param name="propertyInfo"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.WriteValue(System.Xml.XmlWriter,System.Object)">
            <summary>
            Writes any value.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.WritePrimitive(System.Xml.XmlWriter,System.Object)">
            <summary>
            Writes a primitive value.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.Write(System.Xml.XmlWriter,PPJ.Runtime.SalString)">
            <summary>
            Writes a SalString value.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.Write(System.Xml.XmlWriter,PPJ.Runtime.SalNumber)">
            <summary>
            Writes a SalNumber value.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.Write(System.Xml.XmlWriter,PPJ.Runtime.SalBoolean)">
            <summary>
            Writes a SalBoolean value.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.Write(System.Xml.XmlWriter,PPJ.Runtime.SalDateTime)">
            <summary>
            Writes a SalDateTime value using the ISO8601 standard format.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.Write(System.Xml.XmlWriter,PPJ.Runtime.SalWindowHandle)">
            <summary>
            Writes a SalWindowHandle value using the ISO8601 standard format.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.Write(System.Xml.XmlWriter,PPJ.Runtime.SalFileHandle)">
            <summary>
            Writes a SalFileHandle value using the ISO8601 standard format.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.Write(System.Xml.XmlWriter,PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Writes a SalSqlHandle value using the ISO8601 standard format.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.Write(System.Xml.XmlWriter,PPJ.Runtime.Sql.SalSqlSessionHandle)">
            <summary>
            Writes a SalSqlSessionHandle value using the ISO8601 standard format.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.Write(System.Xml.XmlWriter,System.Collections.ICollection)">
            <summary>
            Writes a ICollection value using the ISO8601 standard format.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.Write(System.Xml.XmlWriter,PPJ.Runtime.SalArray)">
            <summary>
            Writes a SalArray value using the ISO8601 standard format.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.WriteNull(System.Xml.XmlWriter)">
            <summary>
            Writes any null value using the standard W3 schema.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.TypeName(System.Type)">
            <summary>
            Returns the XML-friendly name of the type.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.Deserialize``1">
            <summary>
            Deseralizes the object of the specified type from XML.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.Deserialize">
            <summary>
            Deserializes any object from XML.
            The type name is resolved from the first node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadToElement(System.Xml.XmlReader)">
            <summary>
            Moves the reading stream to the next Element.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadObject(System.Xml.XmlReader,System.Object@,System.Type)">
            <summary>
            Read any object from the XML stream.
            </summary>
            <param name="reader"></param>
            <param name="o"></param>
            <param name="type"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadValue(System.Xml.XmlReader,System.Object@,System.Type)">
            <summary>
            Reads any value from the XML stream.
            </summary>
            <param name="reader"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadSalArray(System.Xml.XmlReader,System.Object@,System.Type)">
            <summary>
            Reads a SalArray.
            </summary>
            <param name="reader"></param>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadCollection(System.Xml.XmlReader,System.Object@,System.Type)">
            <summary>
            Reads a collection of the specified type.
            </summary>
            <param name="reader"></param>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadPrimitive(System.Xml.XmlReader,System.Object@,System.Type)">
            <summary>
            Reads any primitive value.
            </summary>
            <param name="reader"></param>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadField(System.Xml.XmlReader,System.Object,System.Reflection.FieldInfo)">
            <summary>
            Reads and assigns a field to the specified object.
            </summary>
            <param name="reader"></param>
            <param name="o"></param>
            <param name="fieldInfo"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadProperty(System.Xml.XmlReader,System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Reads and assigns a property to the specified object.
            </summary>
            <param name="reader"></param>
            <param name="o"></param>
            <param name="propertyInfo"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadSalString(System.Xml.XmlReader,System.Object@)">
            <summary>
            Reads a SalString.
            </summary>
            <param name="reader"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadSalNumber(System.Xml.XmlReader,System.Object@)">
            <summary>
            Reads a SalNumber.
            </summary>
            <param name="reader"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadSalBoolean(System.Xml.XmlReader,System.Object@)">
            <summary>
            Reads a SalBoolean.
            </summary>
            <param name="reader"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadSalDateTime(System.Xml.XmlReader,System.Object@)">
            <summary>
            Reads a SalDateTime.
            </summary>
            <param name="reader"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadSalWindowHandle(System.Xml.XmlReader,System.Object@)">
            <summary>
            Reads a SalWindowHandle.
            </summary>
            <param name="reader"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadSalFileHandle(System.Xml.XmlReader,System.Object@)">
            <summary>
            Reads a SalFileHandle.
            </summary>
            <param name="reader"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadSalSqlHandle(System.Xml.XmlReader,System.Object@)">
            <summary>
            Reads a SalSqlHandle.
            </summary>
            <param name="reader"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.ReadSalSqlSessionHandle(System.Xml.XmlReader,System.Object@)">
            <summary>
            Reads a SalSqlSessionHandle.
            </summary>
            <param name="reader"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Xml.SalXML.IsNull(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Returns true if the element is defined as null using the W3 standard.
            </summary>
            <param name="reader"></param>
            <param name="emptyAsNull"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Xml.SalXML.WriteNullAsEmpty">
            <summary>
            When set to true, the serializer writes empty nodes for null values instead of the
            XML standard writer.WriteAttributeString("xsi", "nil", "http://www.w3.org/2001/XMLSchema-instance", "true");
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalBinary">
            <summary>
            SAL Binary type (TD6).
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBinary.#ctor">
            <summary>
            Constructs a new SalString object containing an empty string.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBinary.#ctor(System.Byte[])">
            <summary>
            Constructs a new SalString object.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:PPJ.Runtime.SalBinary.GetBufferLength">
            <summary>
            Returns the current buffer length of the string.
            </summary>
            <returns>nLength</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.SalBinary.SetBufferLength(PPJ.Runtime.SalBinary@,System.Int32)" -->
        <member name="P:PPJ.Runtime.SalBinary.Length">
            <summary>
            Returns the buffer's length.
            </summary>
            <returns>nLength</returns>
        </member>
        <member name="P:PPJ.Runtime.SalBinary.IsNull">
            <summary>
            Checks if this SalBinary object contains a null value.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:PPJ.Runtime.SalBinary.Value">
            <summary>
            Returns the inner byte[] value
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalNavigationBar">
            <summary>
            Navigation Bar control (TD 6)
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.NaviControl">
            <summary>
            Represents a control with customizable drawing and layout styles
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviControl.#ctor">
            <summary>
            Initializes a new instance of the NaviControl
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviControl.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the NaviControl
            </summary>
            <param name="container">The parent container</param>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.Common.IObservable">
            <summary>
            Represents an object which can be observed by <see cref="T:PPJ.Runtime.Windows.NavBar.Common.IObserver"/> objects. 
            </summary>
            <remarks>
            The IObservable object is responsible for notifying the objects that observes 
            the object by calling the Notify method 
            </remarks>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.IObservable.NotifyObservers(PPJ.Runtime.Windows.NavBar.Common.IObservable,System.String,System.Object)">
            <summary>
            Notifies the observer in the available in the list <see cref="P:PPJ.Runtime.Windows.NavBar.Common.IObservable.Observers"/>
            </summary>
            <param name="obj">The observable object</param>
            <param name="id">An identification which caused this notification</param>
            <param name="arguments">Additional arguments</param>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.Common.IObservable.Observers">
            <summary>
            Contains the observers currently observing this object
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.#ctor">
            <summary>
            Initializes a new instance of the NaviBar class
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Iniializes a new instance of the NaviBar class
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.Initialize">
            <summary>
            Initializes the Control for the first time
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.InitializeLayout">
            <summary>
            Creates the 2007 office layout objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnActiveBandChanging(PPJ.Runtime.Windows.NavBar.NaviBandEventArgs)">
            <summary>
            Raises the ActiveBandChanging event
            </summary>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnActiveBandChanged(System.EventArgs)">
            <summary>
            Raises the ActiveBandChanged event
            </summary>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnLayoutChanged(System.EventArgs)">
            <summary>
            Raises the LayoutChanged event
            </summary>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnBandAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Raises the BandAdded event
            </summary>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnGroupExpanded(PPJ.Runtime.Windows.NavBar.NaviBandEventArgs)">
            <summary>
            Raises the GroupExpanded event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnGroupCollapsed(PPJ.Runtime.Windows.NavBar.NaviBandEventArgs)">
            <summary>
            Raises the GroupCollapsed event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnBandResized(PPJ.Runtime.Windows.NavBar.NaviBandEventArgs)">
            <summary>
            Raises the BandResized event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.AddBand(PPJ.Runtime.Windows.NavBar.NaviBand)">
            <summary>
            Adds a new band to the collection of bands
            </summary>
            <param name="band">The new band</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.SetActiveBand(PPJ.Runtime.Windows.NavBar.NaviBand)">
            <summary>
            Changes the currently active band to a new band
            </summary>
            <param name="band">The band to change to</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.AddButton(PPJ.Runtime.Windows.NavBar.NaviBand)">
            <summary>
            Adds the band button to the collection of controls
            </summary>
            <param name="band">The band</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.RemoveBand(PPJ.Runtime.Windows.NavBar.NaviBand)">
            <summary>
            Removes a band from te collection of bands
            </summary>
            <param name="band">The band to remove</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.ApplySettings">
            <summary>
            Applies the settings currently loaded in the Settings property
            </summary>
            <remarks>
            It's possible that no setting exist for this particular band. For example a new
            version has been released. Then this band is added at the end of the collection 
            and visible is set to true
            </remarks>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overriden. Raises the ControlAdded event
            </summary>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overriden. Raises the ControlRemoved event
            </summary>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Raises the Paint event
            </summary>
            <param name="e">Additional paint info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Raises the PaintBackground
            </summary>
            <param name="pevent">Additional paint info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raises the MouseDown event
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raises the MouseDown event.
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnMouseLeave(System.EventArgs)">
            <summary>
            Overriden. Raises the MouseLeave event and changes the cursor back to default
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raises the MouseUp event
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnResize(System.EventArgs)">
            <summary>
            Overriden. Raises the Resize event
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Overriden. Raises the RightToLeftChanged event
            </summary>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Overriden. Raises the OnLayout event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.button_Click(System.Object,System.EventArgs)">
            <summary>
            Changes the active button to the button on which this event occured
            </summary>
            <param name="sender">The button on which this event occured</param>
            <param name="e">Additional info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.band_VisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Relayouts the control
            </summary>
            <param name="sender">The band which triggered this event</param>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBar.NotifyObservers(PPJ.Runtime.Windows.NavBar.Common.IObservable,System.String,System.Object)">
            <summary>
            Notifies the Observers
            </summary>
            <param name="obj">The observable object</param>
            <param name="id">An identification which caused this notification</param>
            <param name="arguments">Additional arguments</param>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBar.Bands">
            <summary>
            Gets or sets the collection of Bands
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBar.ActiveBand">
            <summary>
            Gets or sets the active band
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBar.NaviLayout">
            <summary>
            Gets or sets the layout
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBar.Buttons">
            <summary>
            Gets or sets the collection of buttons
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBar.Settings">
            <summary>
            Gets or sets the settings file
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBar.HeaderHeight">
            <summary>
            Gets or sets the height of the header containing the title
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBar.MinimizedPanelHeight">
            <summary>
            Gets or sets the height of the minimized buttons panel
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBar.ButtonHeight">
            <summary>
            Gets or sets the default height of the buttons
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBar.ShowMoreOptionsButton">
            <summary>
            Gets or sets whether to show the more options button or not
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBar.Collapsed">
            <summary>
            Gets or sets whether the pane is minimized or not
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBar.ShowCollapseButton">
            <summary>
            Gets or sets whether the pane is minimized or not
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBar.ShowMinimizeButton">
            <summary>
            Gets or sets whether the minimize button should be visible
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBar.MinimizedButtonWidth">
            <summary>
            Gets or sets the width of the minimized buttons
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBar.VisibleLargeButtons">
            <summary>
            Gets or sets the amount of visible buttons
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.NaviBar.ActiveBandChanging">
            <summary>
            Occurs before the active band is changed
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.NaviBar.ActiveBandChanged">
            <summary>
            Occurs after the active band has been changed
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.NaviBar.LayoutChanged">
            <summary>
            Occurs when the layout has been changed
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.NaviBar.BandAdded">
            <summary>
            Occurs after a new band has been added to the collection of bands
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.NaviBar.GroupExpanded">
            <summary>
            Occurs when the group is expanded.
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.NaviBar.GroupCollapsed">
            <summary>
            Occurs when the group is collapsed.
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.NaviBar.BandResized">
            <summary>
            Occurs when the active band is resized.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBar.Observers">
            <summary>
            Gets the list of observers
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.ISalWindow">
            <summary>
            All Sal windows (Child windows, Forms, Dialogs and MDIs) implement 
            this interface.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.ISalWindow.AttachMessageActions(PPJ.Runtime.Windows.ISalWindow)">
            <summary>
            Attaches all the handlers attached to the MessageActions event to the target's
            MessageActions event.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ISalWindow.DefaultWndProc(System.Windows.Forms.Message@)">
            <summary>
            Dispatches the message to the base class.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ISalWindow.GetSalWindowImpl">
            <summary>
            Returns the implementation object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.ISalWindow.GetWindowType">
            <summary>
            Returns the windows' type.
            </summary>
            <returns>One of the TYPE_* constants.</returns>
        </member>
        <member name="E:PPJ.Runtime.Windows.ISalWindow.WindowActions">
            <summary>
            Fired for all SAM and custom events coming from the original application.
            Replaces the MessageActions event.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.ISalWindow.NamedProperties">
            <summary>
            Returns the NamedProperties collection.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.ISalWindow.Derived">
            <summary>
            Returns the instance that inherits this object as a second base class.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalNavigationBar._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalNavigationBar.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.#ctor">
            <summary>
            Constructs a SalNavigationBar object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.FromControl(System.Windows.Forms.Control)">
            <summary>
            Casts the control to a SalNavigationBar.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.AddPane(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Inserts a pane into the navigation bar control.
            </summary>
            <param name="paneIndex">Indicates a zero-based pane index.  The new pane will be inserted after the pane indicated by nPaneIndex. Use -1 to append as the last pane.</param>
            <param name="name">Name of the new pane (object title)</param>
            <param name="expandedImage">File name of the image to display for the new pane when it is expanded.</param>
            <param name="collapsedImage">File name of the image to display for the new pane when it is collapsed.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.RemovePane(PPJ.Runtime.SalNumber)">
            <summary>
            Removes a pane from the navigation bar control.
            </summary>
            <param name="paneIndex">Zero-based index of the pane to be removed.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.AddGroup(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Adds a new group to the specified pane of a navigation bar.
            </summary>
            <param name="paneIndex">Zero-based index of the pane to which you want to add a group.</param>
            <param name="groupIndex">Zero-based index that the new group will occupy.</param>
            <param name="groupTitle">The title of the new group.</param>
            <param name="height">The height of the new group in form units.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.RemoveGroup(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Removes a group from the navigation bar control.
            </summary>
            <param name="paneIndex">Zero-based index of the pane to be removed.</param>
            <param name="groupIndex">Zero-based index of the group to remove.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetActivePane">
            <summary>
            Returns the index of the currently selected pane.
            </summary>
            <returns>The zero-based index of the currently selected pane.</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetActivePane(PPJ.Runtime.SalNumber)">
            <summary>
            Activates the indicated pane.
            </summary>
            <param name="paneIndex">The zero-based index of the pane to activate.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetPaneIndex(PPJ.Runtime.SalString)">
            <summary>
            Finds the pane by its name and returns a zero-based index of the pane if successful or -1 if the pane is not found.
            </summary>
            <param name="name">The name of the pane (object title)</param>
            <returns>the zero-based index of the pane.  If the pane is not found, nIndex is -1.</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetPaneTitle(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Returns the title of a pane.
            </summary>
            <param name="paneIndex">Index for the pane whose title you want to get (start at 0)</param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetPaneTitle(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the title of a pane.
            </summary>
            <param name="paneIndex">Index for the pane whose title you want to get (start at 0)</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetPaneTitle(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Sets the title of a pane.
            </summary>
            <param name="paneIndex">Index for the pane whose title you want to get (start at 0).</param>
            <param name="title">The new title for the pane.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetPaneIcon(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBinary,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Sets the title of a pane.
            </summary>
            <param name="paneIndex">Index for the pane.</param>
            <param name="binary">Buffer that stores the image (bmp or icon).</param>
            <param name="format">Indicates the image format. Use PIC_FormatIcon or PIC_FormatBitmap.</param>
            <param name="expanded">TRUE for "expanded" image, FALSE for "collapsed" image</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetPaneIcon(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBinary@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Retrieves the icon for the specified navigation pane.
            </summary>
            <param name="paneIndex">Index for the pane.</param>
            <param name="binary">Buffer that stores the image (bmp or icon)</param>
            <param name="format">Indicates the image format. Use PIC_FormatIcon or PIC_FormatBitmap.</param>
            <param name="expanded">TRUE for "expanded" image, FALSE for "collapsed" image</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.EnablePane(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Enables or diables a pane on the navigation bar.
            </summary>
            <param name="paneIndex">Index for the pane to enable (start at 0).</param>
            <param name="enable">Set TRUE to enable pane, FALSE to disable.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.PaneIsEnabled(PPJ.Runtime.SalNumber)">
            <summary>
            Returns true if the pane is enabled (visible in the pane navigator); false if disabled (not visible).
            </summary>
            <param name="paneIndex">Index of pane (start at 0).</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.AssociateChild(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Associates a control to a pane.
            </summary>
            <param name="paneIndex">Zero-based index of the pane.</param>
            <param name="groupIndex">Zero-based index of the group.  If the pane has no groups, use zero.</param>
            <param name="control">the control you're associating to the pane.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.DisassociateChild(PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Disassociates a control from a pane.
            </summary>
            <param name="paneIndex">Zero-based index of the pane</param>
            <param name="control">The control you're disassociating</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GroupIsExpanded(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the group status. The function returns true if the group is expanded; false if collapsed.
            </summary>
            <param name="paneIndex">Zero-based index of the pane</param>
            <param name="groupIndex">Zero-based index of the group</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.ExpandGroup(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Expands or collapses a group.
            </summary>
            <param name="paneIndex">Zero-based index of the pane</param>
            <param name="groupIndex">Zero-based index of the group</param>
            <param name="expand">Set to TRUE to expand, FALSE to collapse</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SaveState(PPJ.Runtime.SalString@)">
            <summary>
            Saves the settings of a navigation bar to an XML string.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.LoadState(PPJ.Runtime.SalString)">
            <summary>
            Restore the settings of a navigation bar from an XML string.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNavigationBar.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalNavigationBar.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.FndDesignEditorHiddenAttribute">
            <summary>
            Add this attribute to classes in the framework that should not be 
            possible to add from design time editors.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.MessageForm">
            <summary>
            Summary description for MessageForm.
            This is a clone of the ErrorMessageForm class, used by the IEE framework.
            The purpose is to view the serialization result of a nested child table class.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.MessageForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.MessageForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Design.NaviBarDesigner.SetValue(System.String,System.Object)">
            <summary>
            Sets the value for a given property
            </summary>
            <param name="propName">The name of the property</param>
            <param name="value">The new value of the property</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Design.NaviBarDesigner.GetValue(System.String)">
            <summary>
            Gets the value of a given property
            </summary>
            <param name="propName">The name of the property</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Design.NaviBarDesigner.InitializeLayout">
            <summary>
            Initializes the layout engine of the Navigation pane
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.RuntimeContextSwitch.SetLicenseContext(System.ComponentModel.LicenseContext)">
            <summary>
            Switches the LicenseContext to runtime mode. This is necessary
            to preload the flexgrid and ribbonbar embedded license in the PPJ Framework.
            This seems to be a bug in the licensing system in C1 when a class is extended.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.AliasAttribute">
            <summary>
            Alias attribute for changing member names during translation
            </summary>
        </member>
        <member name="T:PPJ.Runtime.CodeVersionAttribute">
            <summary>
            Detects classes and methods in the framework that need to be implemented.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.NewSyntaxAttribute">
            <summary>
            Attribute used to described the new OO syntax.
            It's used by Ice Porter to translate Sal calls to OO calls.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.NotImplementedAttribute">
            <summary>
            Detects classes and methods in the framework that need to be implemented.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sal">
            <summary>
            Contains all Sal.* static functions.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.Abort(PPJ.Runtime.SalNumber)">
            <summary>
            Halts processing of the current menu action, message action, or application action.
            </summary>
            <param name="exitCode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.AppDisable">
            <summary>
            Disables input to all open forms.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.AppEnable">
            <summary>
            Enables input to all open forms that were disabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.AppFind(PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean)">
            <summary>
            Finds a visible top-level window.
            </summary>
            <param name="name"></param>
            <param name="activate"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetProfileInt(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Retrieves the integer value of an entry in the specified section of an initialization
            file or registry.
            </summary>
            <param name="section"></param>
            <param name="entry"></param>
            <param name="defaultValue"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetProfileString(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString@,PPJ.Runtime.SalString)">
            <summary>
            Retrieves the string value of an entry in the specified section of an initialization
            file or registry.
            </summary>
            <param name="section"></param>
            <param name="entry"></param>
            <param name="defaultValue"></param>
            <param name="value"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.LoadApp(PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Starts an application.
            </summary>
            <param name="name"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Sal.LoadAppAndWait(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@)" -->
        <member name="M:PPJ.Runtime.Sal.LoadAppAndProcessMsgs(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@)">
            <summary>
            Starts an application, then waits for it to exit before returning control to the original application.
            However, the original application can continue to process messages.
            </summary>
            <param name="name"></param>
            <param name="mode"></param>
            <param name="retCode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetVersion">
            <summary>
            Returns the version of the library.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.Quit">
            <summary>
            Exits an application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SetProfileString(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Set the value of an entry in the specified section of an initialization file or registry.
            </summary>
            <param name="section"></param>
            <param name="entry"></param>
            <param name="value"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.UseRegistry(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalString)">
            <summary>
            Redirects all SalProfile* functions to use the Registry.
            </summary>
            <param name="useRegistry"></param>
            <param name="companyName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ArrayAvg(PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Returns the average value of all the numbers in an array.
            </summary>
            <param name="array">The name of an array of numbers.</param>
            <returns>nAvg</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ArrayDimCount(PPJ.Runtime.SalArray,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the number of dimensions in an array.
            </summary>
            <param name="array"></param>
            <param name="dim"></param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ArrayGetLowerBound(PPJ.Runtime.SalArray,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the lower bound of the array.
            </summary>
            <param name="array"></param>
            <param name="dim"></param>
            <param name="bound"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ArrayGetUpperBound(PPJ.Runtime.SalArray,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the upper bound of an array.
            </summary>
            <param name="array"></param>
            <param name="dim"></param>
            <param name="bound"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ArrayQueryBounds(PPJ.Runtime.SalArray,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Reurns the lower and upper bound of an array.
            If the array empty, it returns FALSE.
            NOTE: In SAL this function was named SalQueryArrayBounds().
            </summary>
            <param name="array"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ArrayIsEmpty(PPJ.Runtime.SalArray)">
            <summary>
            Determines if a dynamic array contains data.
            </summary>
            <param name="array">The name of the array to query.</param>
            <returns>bData</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ArrayMax(PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Returns the maximum value in an array of numbers.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ArrayMin(PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Returns the minimum value in an array of numbers.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ArraySetUpperBound(PPJ.Runtime.SalArray,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the upper bound of an array.
            The first dimension is 1.
            </summary>
            <param name="array"></param>
            <param name="dim"></param>
            <param name="bound"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ArraySetBounds(PPJ.Runtime.SalArray,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the lower and upper bound of an array for the first dimension only.
            NOTE: In SAL this function was named SalSetArrayBounds().
            </summary>
            <param name="array">The name of the array to query.</param>
            <param name="lower">The new lower bound.</param>
            <param name="upper">The new upper bound or AC_Dynamic.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ArraySum(PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Returns the sum of the elements in an array of numbers.
            </summary>
            <param name="array">The name of an array of numbers.</param>
            <returns>nSum</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ColorFromRGB(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Composes a color from red, green, and blue values.
            </summary>
            <param name="red">A number from 0 to 255.</param>
            <param name="green">A number from 0 to 255.</param>
            <param name="blue">A number from 0 to 255.</param>
            <returns>colorValue</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ColorGet(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="ctrl"></param>
            <param name="colorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ColorGetSysColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a system color.
            </summary>
            <param name="colorIndex">The color of a part of the window, represented by one of these constants: COLOR_SysWindow COLOR_SysWindowFrame COLOR_SysWindowText</param>
            <returns>colorValue</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ColorSet(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="ctrl"></param>
            <param name="colorIndex"></param>
            <param name="colorValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ColorToRGB(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Decomposes a color into red, green, and blue values.
            </summary>
            <param name="colorValue">A user-defined value or any of the predefined window colors (excluding COLOR_Default, COLOR_None, and the three COLOR_Sys* constants).</param>
            <param name="red">A number from 0 to 255 that represents the red value.</param>
            <param name="green">A number from 0 to 255 that represents the green value.</param>
            <param name="blue">A number from 0 to 255 that represents the blue value.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ColorToRGB(System.Drawing.Color,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Decomposes a color into red, green, and blue values.
            </summary>
            <param name="color"></param>
            <param name="red">Red value.</param>
            <param name="green">Green value.</param>
            <param name="blue">Blue value.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DlgChooseFont(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Displays the Windows Font dialog box.
            </summary>
            <param name="ctrl"></param>
            <param name="fontName"></param>
            <param name="size"></param>
            <param name="enhancements"></param>
            <param name="colorValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DlgChooseColor(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@)">
            <summary>
            Displays the Windows Color dialog box where the user can either select an existing
            color or create a new one. See the Control Panel chapter in the Microsoft Windows'
            User's Guide for a detailed description of the Color dialog box.
            </summary>
            <param name="ctrl"></param>
            <param name="colorValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DlgOpenFile(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalArray{PPJ.Runtime.SalString},PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@,PPJ.Runtime.SalString@)">
            <summary>
            Displays a Windows dialog box where the user can select a file to open.
            </summary>
            <param name="ctrl"></param>
            <param name="dialogTitle"></param>
            <param name="filtersPatterns"></param>
            <param name="filtersCount"></param>
            <param name="filterIndex"></param>
            <param name="fileName"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DlgSaveFile(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalArray{PPJ.Runtime.SalString},PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@,PPJ.Runtime.SalString@)">
            <summary>
            Displays a Windows dialog box where the user can save a file.
            </summary>
            <param name="ctrl"></param>
            <param name="dialogTitle"></param>
            <param name="filtersPatterns"></param>
            <param name="filtersCount"></param>
            <param name="filterIndex"></param>
            <param name="fileName"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DropFilesAcceptFiles(System.Windows.Forms.Control,PPJ.Runtime.SalBoolean)">
            <summary>
            Indicates whether a window can accept a file from Windows' File Manager.
            </summary>
            <param name="ctrl"></param>
            <param name="bAccept"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DropFilesQueryFiles(System.Windows.Forms.Control,PPJ.Runtime.SalArray{PPJ.Runtime.SalString})">
            <summary>
            Retrieves the names of the files dropped on a window. Receipt of the SAM_DropFiles
            message indicates that the user dropped files onto the window.
            </summary>
            <param name="ctrl"></param>
            <param name="sArrayFiles"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DropFilesQueryPoint(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Finds the location of the mouse in a window at the time that the user dropped files
            onto the window. Receipt of the SAM_DropFiles message indicates that the user
            dropped files onto the window.
            </summary>
            <param name="ctrl"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EditCanCut">
            <summary>
            Indicates whether you can cut from the currently selected control on the clipboard.
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EditCanCopy">
            <summary>
            Indicates whether you can copy from the currently selected control on the clipboard.
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EditCanPaste">
            <summary>
            Returns TRUE if there is data on the Clipboard that can be pasted into
            the currently selected control		
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EditCanUndo">
            <summary>
            Returns TRUE if the if there is any editing of the currently selected control
            that can be undone.
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EditClear">
            <summary>
            Deletes selected data from the currently selected control
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EditCopy">
            <summary>
            Copies selected data from the currently selected control
            and puts it on the Clipboard. 
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EditCopyString(PPJ.Runtime.SalString)">
            <summary>
            Copies a string to the Clipboard as text.
            </summary>
            <param name="str">The string to copy to the Clipboard.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EditCut">
            <summary>
            Cuts selected data from the currently selected control
            and puts it on the Clipboard. 
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EditPaste">
            <summary>
            Pastes data from the Clipboard into the currently selected control
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EditPasteString(PPJ.Runtime.SalString@)">
            <summary>
            Pastes the contents of the Clipboard into the specified string in text format.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EditUndo">
            <summary>
            Undoes the last edit to the currently selected control
            Editing that you can undo includes inserting text, cutting text, clearing 
            text, and pasting text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EditCanCopyTo">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.EditCanPasteFrom">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.EditCopyTo">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.EditPasteFrom">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileClose(PPJ.Runtime.SalFileHandle@)">
            <summary>
            Closes a file.
            </summary>
            <param name="file">The handle of the file to close. When the function returns, the value of this parameter becomes null.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileCopy(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean)">
            <summary>
            Copies the contents of one file (source) to another file (destination).
            </summary>
            <param name="sourcePath">The full path name of the source file.</param>
            <param name="destPath">The full path name of the destination file.</param>
            <param name="overwrite">Specifies whether (TRUE) or not (FALSE) to overwrite the destination file. If the destination file already exists and overwrite is FALSE, then SalFileCopy fails, and returns FILE_CopyExist. If the destination file already exists and overwrite is TRUE, then SalFileCopy succeeds and the destination file is overwritten.</param>
            <returns>nStatus</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileCreateDirectory(PPJ.Runtime.SalString)">
            <summary>
            Creates a directory.
            </summary>
            <param name="directory">The full path name of the new directory.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileGetChar(PPJ.Runtime.SalFileHandle,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the next character in an open file. You must use this function in place of
            the SalFileGetChar function if the file contains non- ASCII (ANSI) or 16-bit characters.
            If the character returned is a 16-bit character, the lead byte of the
            character is in the high-order byte, and the trail byte is in the low- order byte.
            To get the lead byte, use SalNumberHigh. To get the trail byte, use SalNumberLow.
            </summary>
            <param name="file">The handle of the open file.</param>
            <param name="charValue">The next character in file.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileGetChar(PPJ.Runtime.SalFileHandle)">
            <summary>
            Returns the next character in an open file.
            </summary>
            <param name="file">The handle of the open file.</param>
            <returns>charValue</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileGetCurrentDirectory(PPJ.Runtime.SalString@)">
            <summary>
            Gets the full path name of the current working directory.
            </summary>
            <param name="path">The full path name, including the drive letter, of the current working directory.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileGetDateTime(PPJ.Runtime.SalString,PPJ.Runtime.SalDateTime@)">
            <summary>
            Gets the modification date and time of the specified file.
            </summary>
            <param name="fileName">The name of the file whose modification date you want.</param>
            <param name="dateTime">The modification date and time of fileName.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileGetDrive">
            <summary>
            Gets the letter of the default (current) disk drive.
            </summary>
            <returns>sDriveLetter</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileGetStr(PPJ.Runtime.SalFileHandle,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Returns the next line from an open file and strips off the trailing carriage
            return/line feed of the returned string.
            </summary>
            <param name="file">The handle of the open file.</param>
            <param name="buffer">The returned string.</param>
            <param name="bufferSize">The maximum number of bytes to read.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileOpen(PPJ.Runtime.SalFileHandle@,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Opens, re-opens, creates, or deletes a file.
            </summary>
            <param name="file">The handle of the open file.</param>
            <param name="fileName">The name of the file to open, create, delete, or test.</param>
            <param name="style">A constant that specifies the style in which to open the file. style can be one or more styles combined using the bitwise OR (|) operator.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileOpen(PPJ.Runtime.SalFileHandle@,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,System.Text.Encoding)">
            <summary>
            Opens, re-opens, creates, or deletes a file using the specified encoder.
            </summary>
            <param name="file">The handle of the open file.</param>
            <param name="fileName">The name of the file to open, create, delete, or test.</param>
            <param name="style">A constant that specifies the style in which to open the file. style can be one or more styles combined using the bitwise OR (|) operator.</param>
            <param name="encoding">Encoding used to read/write characters.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FilePutChar(PPJ.Runtime.SalFileHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Writes a character to an open file.
            </summary>
            <param name="file"></param>
            <param name="charValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FilePutStr(PPJ.Runtime.SalFileHandle,PPJ.Runtime.SalString)">
            <summary>
            Writes a string to an open file and appends a carriage return/line feed character
            to the string.
            </summary>
            <param name="file"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileRead(PPJ.Runtime.SalFileHandle,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Reads a buffer of characters from an open file to a string .
            </summary>
            <param name="file"></param>
            <param name="buffer"></param>
            <param name="bufferLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileRead(PPJ.Runtime.SalFileHandle,PPJ.Runtime.SalBinary@,PPJ.Runtime.SalNumber)">
            <summary>
            Reads a buffer of characters from an open file to a binary buffer .
            </summary>
            <param name="file"></param>
            <param name="buffer"></param>
            <param name="bufferLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileRemoveDirectory(PPJ.Runtime.SalString)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileSeek(PPJ.Runtime.SalFileHandle,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Positions the file pointer in an open file.
            </summary>
            <param name="file"></param>
            <param name="bytes"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileSetCurrentDirectory(PPJ.Runtime.SalString)">
            <summary>
            Changes the current working directory. If the specified path does not contain a drive
            letter, the default drive's current directory is changed. Otherwise, the specified
            drive's current directory is changed and the specified drive is made the
            current drive.
            </summary>
            <param name="path">The path name of the new current working directory.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileSetDateTime(PPJ.Runtime.SalString,PPJ.Runtime.SalDateTime)">
            <summary>
            Sets the modification date and time of the specified file.
            </summary>
            <param name="fileName">The name of the file whose modification date you want to set.</param>
            <param name="dateTime">The modification date and time.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileSetDrive(PPJ.Runtime.SalString)">
            <summary>
            Sets the current disk drive to the specified drive letter.
            </summary>
            <param name="sDriveLetter">The new disk drive letter. The length of this parameter's value is one character. If you specify a value larger than this, reads only the first character.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileTell(PPJ.Runtime.SalFileHandle)">
            <summary>
            Returns the current position in an open file.
            </summary>
            <param name="file">The handle of an open file.</param>
            <returns>nPos</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileWrite(PPJ.Runtime.SalFileHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Writes a string to an open file.
            </summary>
            <param name="file">The handle of an open file. fileFile Handle. The handle of an open file.</param>
            <param name="buffer">The string to write to file.</param>
            <param name="bufferLength">The number of bytes to write.</param>
            <returns>nResult</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileWrite(PPJ.Runtime.SalFileHandle,PPJ.Runtime.SalBinary,PPJ.Runtime.SalNumber)">
            <summary>
            Writes a binary buffer to an open file.
            </summary>
            <param name="file">The handle of an open file. fileFile Handle. The handle of an open file.</param>
            <param name="buffer">The string to write to file.</param>
            <param name="bufferLength">The number of bytes to write.</param>
            <returns>nResult</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtFieldToStr(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalBoolean)">
            <summary>
            Copies the contents of a data field or table window column to a string. This function
            also lets you copy the format of the data.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtFormatDateTime(PPJ.Runtime.SalDateTime,PPJ.Runtime.SalString)">
            <summary>
            Formats a date/time value using a given date/time picture format. If you do not specify
            a picture format or the one you specify is invalid, the default local settings are used
            </summary>
            <param name="dateTime">The date/time value to format.</param>
            <param name="sPicture">The date/time picture format.</param>
            <returns>sDateTime</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtFormatNumber(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Formats a number value using a number picture format. If you do not specify a picture
            format or the one you specify is invalid, the default local settings are used		
            </summary>
            <param name="num">The number value to format.</param>
            <param name="sPicture">The number picture format.</param>
            <returns>sNumber</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtGetFormat(System.Windows.Forms.Control)">
            <summary>
            Returns the current format of a data field or table window column.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtSetFormat(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a data field's or table window column's format.
            </summary>
            <param name="ctrl"></param>
            <param name="nFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtGetInputMask(System.Windows.Forms.Control,PPJ.Runtime.SalString@)">
            <summary>
            Gets the input mask of a data field or table window column.
            </summary>
            <param name="ctrl"></param>
            <param name="sMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtGetPicture(System.Windows.Forms.Control,PPJ.Runtime.SalString@)">
            <summary>
            Gets the format of a data field or table window column.
            </summary>
            <param name="ctrl"></param>
            <param name="sFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtIsValidField(System.Windows.Forms.Control)">
            <summary>
            Validates the contents of a data field or table window column using the current profile.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtIsValidInputMask(PPJ.Runtime.SalString)">
            <summary>
            Validates the input mask of a data field or table window column.
            </summary>
            <param name="sMask">An input mask.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtIsValidPicture(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Validates a numeric or date/time picture format.
            </summary>
            <param name="sFormat"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtKeepMask(PPJ.Runtime.SalBoolean)">
            <summary>
            Turns on/off the flag that indicates whether to keep the
            mask when reading the text from masked edit controls.
            </summary>
            <param name="bKeep"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtSetInputMask(System.Windows.Forms.Control,PPJ.Runtime.SalString)">
            <summary>
            Sets the input mask of a data field or table window column.
            </summary>
            <param name="ctrl"></param>
            <param name="sMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtSetPicture(System.Windows.Forms.Control,PPJ.Runtime.SalString)">
            <summary>
            Sets the picture format of a data field or table window column.
            </summary>
            <param name="ctrl"></param>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtStrToField(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean)">
            <summary>
            Copies a string to a data field or table window column. After copying the string
            to the field, formats the string.
            </summary>
            <param name="ctrl"></param>
            <param name="value"></param>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtUnmaskInput(System.Windows.Forms.Control,PPJ.Runtime.SalString@)">
            <summary>
            Unmasks the text from a masked edit control.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtValidateField(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Validates and formats a data field's or table window column's contents.
            </summary>
            <param name="ctrl"></param>
            <param name="nValidate"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtGetParmNum(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the requested format information.
            </summary>
            <param name="ctrl"></param>
            <param name="nParm"></param>
            <param name="nValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtSetParmNum(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Modifies the specified formatting rule on the control.
            The control must use the customized profile set using FMT_Profile_Program.
            </summary>
            <param name="ctrl"></param>
            <param name="nParm"></param>
            <param name="nValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtGetParmStr(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Returns the requested format information.
            </summary>
            <param name="ctrl"></param>
            <param name="nParm"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtSetParmStr(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Modifies the specified formatting rule on the control.
            The control must use the customized profile set using FMT_Profile_Program.
            </summary>
            <param name="ctrl"></param>
            <param name="nParm"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtGetProfile(System.Windows.Forms.Control)">
            <summary>
            Returns the culture profile for the specified field.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtSetProfile(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Changes the culture profile for the specified field.
            </summary>
            <param name="ctrl"></param>
            <param name="nProfile"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FmtCopyProfile(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Copies the specified profile to the custom profile for the specified field.
            The control must use the customized profile set using FMT_Profile_Program.
            </summary>
            <param name="ctrl"></param>
            <param name="nProfile"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FontGet(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <param name="size"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FontGetNames(PPJ.Runtime.SalNumber,PPJ.Runtime.SalArray{PPJ.Runtime.SalString})">
            <summary>
            Gets the names of the screen or printer fonts.
            </summary>
            <param name="nType">A constant that specifies whether to get the screen or printer fonts: FONT_GetPrinter FONT_GetScreen</param>
            <param name="sFonts">The name of an array of strings that contains the font names returned.</param>
            <returns>nNames</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FontSet(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <param name="size"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.BringWindowToTop(System.Windows.Forms.Control)">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.CenterWindow(System.Windows.Forms.Control)">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ClearField(System.Windows.Forms.Control)">
            <summary>
            Clears the value from a data field, multiline field, or table window column.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ContextMenuSetPopup(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="ctrl"></param>
            <param name="menuName"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ContextMenuSetPopup(System.Windows.Forms.Control,System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="ctrl"></param>
            <param name="menuType"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.CreateWindow(System.Type,System.Windows.Forms.Control,System.Object[])">
            <summary>
            Creates modeless dialog boxes, MDI windows, form windows, and top-level table windows
            at runtime.
            </summary>
            <param name="tWndToCreate"></param>
            <param name="parent"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.CreateWindow(PPJ.Runtime.SalString,System.Windows.Forms.Control,System.Object[])">
            <summary>
            Creates modeless dialog boxes, MDI windows, form windows, and top-level table windows
            at runtime.
            </summary>
            <param name="formName"></param>
            <param name="parent"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.CreateWindow(PPJ.Runtime.SalString,System.Windows.Forms.Control)">
            <summary>
            Creates modeless dialog boxes, MDI windows, form windows, and top-level table windows
            at runtime.
            </summary>
            <param name="formName"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.CreateWindowFromStr(PPJ.Runtime.SalString,System.Windows.Forms.Control)">
            <summary>
            Creates modeless dialog boxes, MDI windows, form windows, and top-level table windows
            at runtime.
            </summary>
            <param name="formName"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.CreateWindowEx(System.Type,System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,System.Object[])">
            <summary>
            Creates a form window, dialog box, or table window as a child of another form window,
            </summary>
            <param name="tWndToCreate"></param>
            <param name="parent"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="flags"></param>
            <param name="Parameters"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.CreateWindowEx(PPJ.Runtime.SalString,System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a form window, dialog box, or table window as a child of another form window,
            dialog box, or toolbar at runtime.
            </summary>
            <param name="formName"></param>
            <param name="window"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.CreateWindowExFromStr(PPJ.Runtime.SalString,System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a form window, dialog box, or table window as a child of another form window,
            dialog box, or toolbar at runtime.
            </summary>
            <param name="formName"></param>
            <param name="parent"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DestroyWindow(System.Windows.Forms.Control)">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DisableWindow(System.Windows.Forms.Control)">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DisableWindowAndLabel(System.Windows.Forms.Control)">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            A label is the label control that immediately precedes the window.
            The label control must have a mnemonic. If the window contains text (for
            example, a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DrawMenuBar(System.Windows.Forms.Control)">
            <summary>
            Redraws the menu bar for a given form window or top-level table window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EnableWindow(System.Windows.Forms.Control)">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EnableWindowAndLabel(System.Windows.Forms.Control)">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EndDialog(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Destroys a modal dialog box and returns control to the caller of SalModalDialog.
            </summary>
            <param name="ctrl"></param>
            <param name="returnValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FindWindow(System.Windows.Forms.Control,PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="ctrl"></param>
            <param name="windowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FormUnitsToPixels(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="ctrl"></param>
            <param name="formUnits"></param>
            <param name="vertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetDataType(System.Windows.Forms.Control)">
            <summary>
            Returns a data field's or table window column's data type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetDefButton(System.Windows.Forms.Control)">
            <summary>
            Returns the handle of the default push button on a form window or dialog box. The
            default push button is the one that has the focus by default.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetFirstChild(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="ctrl"></param>
            <param name="typeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetFocus">
            <summary>
            Returns the handle of the window with the focus.
            </summary>
            <returns>windowFocus</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetItemName(System.Windows.Forms.Control,PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetMaxDataLength(System.Windows.Forms.Control)">
            <summary>
            Returns the maximum length of a data field, multiline text field, or table window
            column.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetNextChild(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="ctrl"></param>
            <param name="typeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetType(System.Windows.Forms.Control)">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetWindowLabel(System.Windows.Forms.Control)">
            <summary>
            Retrieves the window handle of the label (label control) that is associated with the windowTarget parameter.
            There must be a mnemonic in that label, and it must immediately precede windowTarget, or this function will fail.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetWindowLabelText(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetWindowLoc(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="ctrl"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetWindowSize(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="ctrl"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetWindowState(System.Windows.Forms.Control)">
            <summary>
            Returns a window's current state.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetWindowText(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <param name="maxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.HideWindow(System.Windows.Forms.Control)">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.HideWindowAndLabel(System.Windows.Forms.Control)">
            <summary>
            Hides a window and its associated label.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.IdleKick">
            <summary>
            Simulates an idle state.
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.IdleRegisterWindow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to a specified window whenever an idle state is detected.
            An idle state is detected when a window has processed all the messages in its input queue.
            </summary>
            <param name="ctrl"></param>
            <param name="message"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.IdleUnregisterWindow(System.Windows.Forms.Control)">
            <summary>
            Stops sending idle messages to a control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.InvalidateWindow(System.Windows.Forms.Control)">
            <summary>
            Causes a window to be repainted.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.IsButtonChecked(System.Windows.Forms.Control)">
            <summary>
            Determines whether a radio button is set or a check box is checked.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.IsNull(System.Windows.Forms.Control)">
            <summary>
            Verifies whether a data field, multiline text field, or table window column is null
            or empty.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.IsValidDateTime(System.Windows.Forms.Control)">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid date/time value. For multiline text fields, the date/time value must
            be the only item in the field.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.IsValidDecimal(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid decimal value. For multiline text fields, the decimal value must be
            the only item in the field.
            </summary>
            <param name="ctrl"></param>
            <param name="precision"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.IsValidInteger(System.Windows.Forms.Control)">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid integer value. For multiline text fields, the integer value must be
            the only item in the field.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.IsValidNumber(System.Windows.Forms.Control)">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid numeric value. Valid numbers are integers or floating point numbers,
            negative and positive. For multiline text fields, the numeric value must be the
            only item in the field.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.IsWindowEnabled(System.Windows.Forms.Control)">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.IsWindowVisible(System.Windows.Forms.Control)">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MapEnterToTab(PPJ.Runtime.SalBoolean)">
            <summary>
            Changes the behavior of the Enter key from executing the default button
            on a window to moving the focus to the next field.
            </summary>
            <param name="bState"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MDIArrangeIcons(System.Windows.Forms.Control)">
            <summary>
            Arranges minimized child window icons in an MDI window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MDICascade(System.Windows.Forms.Control)">
            <summary>
            Cascades all non-iconized child windows of an MDI window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MDITile(System.Windows.Forms.Control,PPJ.Runtime.SalBoolean)">
            <summary>
            Tiles all non-iconized child windows of an MDI window. Windows that are not sizable
            will not be tiled.
            </summary>
            <param name="ctrl"></param>
            <param name="bPosition"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MessageBeep(PPJ.Runtime.SalNumber)">
            <summary>
            Plays a waveform sound that corresponds to a given system alert level. A user can
            set the sound for each alert level with the sounds application in the Control Panel.
            </summary>
            <param name="alertLevel">The alert level: Use 0 or -1 for the standard beep using the computer speaker, or any of the MB_* constants.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MessageBox(PPJ.Runtime.SalString)">
            <summary>
            Displays a message box and returns a number that indicates the user's response. You
            can customize the message box push buttons and icons. The active parent window,
            whose value is hWndForm, creates the message box.
            </summary>
            <param name="text">The message text.</param>
            <returns>nResult</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MessageBox(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Displays a message box and returns a number that indicates the user's response. You
            can customize the message box push buttons and icons. The active parent window,
            whose value is hWndForm, creates the message box.
            </summary>
            <param name="text">The message text.</param>
            <param name="title">The message box title.</param>
            <param name="flags">The message box style. Combine the MB_* options using the OR (|) operator.</param>
            <returns>nResult</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MessageBox(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Displays a message box and returns a number that indicates the user's response. You
            can customize the message box push buttons and icons.
            </summary>
            <param name="owner">The owner of the message box.</param>
            <param name="text">The message text.</param>
            <param name="title">The message box title.</param>
            <param name="flags">The message box style. Combine the MB_* options using the OR (|) operator.</param>
            <returns>nResult</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ModalDialog(System.Type,System.Windows.Forms.Control,System.Object[])">
            <summary>
            Creates a modal dialog box.
            </summary>
            <param name="dialogType"></param>
            <param name="owner"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ModalDialog(PPJ.Runtime.SalString,System.Windows.Forms.Control,System.Object[])">
            <summary>
            Creates a modal dialog box.
            </summary>
            <param name="dialogName"></param>
            <param name="owner"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ModalDialog(PPJ.Runtime.SalString,System.Windows.Forms.Control)">
            <summary>
            Creates a modal dialog box.
            </summary>
            <param name="dialogName"></param>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ModalDialogFromStr(PPJ.Runtime.SalString,System.Windows.Forms.Control)">
            <summary>
            Creates a modal dialog box.
            </summary>
            <param name="dialogName"></param>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MoveWindow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="xOffset"></param>
            <param name="yOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ParentWindow(System.Windows.Forms.Control)">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.Pause(PPJ.Runtime.SalNumber)">
            <summary>
            Pauses the application for the specified number of milliseconds.
            It keeps dispatching messages.
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PixelsToFormUnits(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="ctrl"></param>
            <param name="nNumPixels"></param>
            <param name="vertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PostMsg(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to windowReceiver's message
            queue.
            </summary>
            <param name="ctrl"></param>
            <param name="nMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SendClassMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Invokes the message actions implemented or inherited by an object's class when called
            from either a derived class or from an object that is an instance of a class.
            </summary>
            <param name="message"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns>nMsgReturn</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SendClassMessageNamed(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Invokes the message actions implemented or inherited by an object's class when called
            from either a derived class or from an object that is an instance of a class.
            Use this function instead of SalSendClassMessage with a class that is the result
            of multiple inheritance. It lets you specify which base class message action
            you want to execute.
            </summary>
            <param name="tClasname">The ancestor's class name.</param>
            <param name="nMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns>nMsgReturn</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SendMsg(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="ctrl"></param>
            <param name="nMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FireWindowActions(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>
            <param name="ctrl"></param>
            <param name="nMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.FireWindowActionsToChildren(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the children's
            WindowActions event handlers, without going through Windows message loop.
            </summary>
            <param name="ctrl"></param>
            <param name="nMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SendMsgToChildren(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="ctrl"></param>
            <param name="nMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SendValidateMsg">
            <summary>
            Sends a SAM_Validate message to the object with the focus data field, multiline field,
            or table window column if it was edited and sets the wParam and LParam message
            variables to zero (0).
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SetDefButton(System.Windows.Forms.Control)">
            <summary>
            Sets the default push button of a form window or dialog box.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SetFieldEdit(System.Windows.Forms.Control,PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears the field edit flag for an editable data field, combo box, multiline
            text field, table window column, or picture.
            </summary>
            <param name="ctrl"></param>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SetFocus(System.Windows.Forms.Control)">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SetMaxDataLength(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a limit on the number of characters that a user can enter into a data field,
            multiline text field, or table window column.
            </summary>
            <param name="ctrl"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.QueryFieldEdit(System.Windows.Forms.Control)">
            <summary>
            Returns the setting of the Field Edit Flag for a data field, multiline field, combo
            box, table window's context row cell, or picture.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SetWindowLabelText(System.Windows.Forms.Control,PPJ.Runtime.SalString)">
            <summary>
            Sets the text of the label associated to a control. To be associated with a specific window, background
            text must immediately precede the window in the Outliner. Important: The
            label control does not require a mnemonic for the function to operate.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SetWindowLoc(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="ctrl"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SetWindowSize(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="ctrl"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SetWindowText(System.Windows.Forms.Control,PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ShowWindow(System.Windows.Forms.Control)">
            <summary>
            Makes a window visible.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ShowWindowAndLabel(System.Windows.Forms.Control)">
            <summary>
            Makes a window and its associated label visible. A label is the label control that
            immediately precedes the window in the outline.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TBarSetVisible(System.Windows.Forms.Control,PPJ.Runtime.SalBoolean)">
            <summary>
            Shows or hides the tool bar on a top-level or MDI window.
            </summary>
            <param name="ctrl"></param>
            <param name="show"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TimerKill(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="ctrl"></param>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TimerSet(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="ctrl"></param>
            <param name="eventId"></param>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TrackPopupMenu(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="ctrl"></param>
            <param name="menuName"></param>
            <param name="flags"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TrackPopupMenu(System.Windows.Forms.Control,System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.UpdateWindow(System.Windows.Forms.Control)">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.WaitCursor(PPJ.Runtime.SalBoolean)">
            <summary>
            Displays or removes the hourglass cursor.
            </summary>
            <param name="bOn"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.WindowClassName(System.Windows.Forms.Control)">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.WindowGetProperty(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.WindowSetProperty(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.WindowHandleToNumber(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Converts a SalWindowHandle to a number.
            </summary>
            <param name="window">The handle to convert.</param>
            <returns>nWnd</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.WindowHandleToNumber(PPJ.Runtime.SalFileHandle)">
            <summary>
            Converts a SalFileHandle to a number.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.WindowHandleToNumber(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Converts a SalSqlHandle to a number.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.WindowHandleToNumber(PPJ.Runtime.Sql.SalSqlSessionHandle)">
            <summary>
            Converts a SalSqlSessionHandle to a number.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.WindowIsDerivedFromClass(System.Windows.Forms.Control,System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="ctrl"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.WinHelp(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system. Sends a SAM_Help message to the top-level
            object when the user presses the F1 key. Process this message by calling SalWinHelp.
            </summary>
            <param name="ctrl"></param>
            <param name="fileName"></param>
            <param name="command"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.Yield(System.Windows.Forms.Control)">
            <summary>
            Processes messages in the message loop.
            This function replaces all SalYield* functions.
            It must be placed in the loop that block execution.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Sal.StatusGetText(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Gets the text displayed in the status bar of a top-level or MDI window.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <param name="maxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StatusSetText(System.Windows.Forms.Control,PPJ.Runtime.SalString)">
            <summary>
            Displays specified text in the status bar of a top-level or MDI window.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StatusSetVisible(System.Windows.Forms.Control,PPJ.Runtime.SalBoolean)">
            <summary>
            Shows or hides the status bar on a top-level or MDI window.
            </summary>
            <param name="ctrl"></param>
            <param name="show"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DlgSetDockStatus(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Causes a dialog box to dock or undock with a parent window. 
            </summary>
            <param name="windowDlg"></param>
            <param name="orientation"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DlgGetDockStatus(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalNumber@)">
            <summary>
            Retrieves docking information for a dialog box. 
            </summary>
            <param name="windowDlg"></param>
            <param name="orientation"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.WindowGetDockSetting(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalNumber@)">
            <summary>
            Retrieves information about the docking capabilities of a top-level window. 
            </summary>
            <param name="window"></param>
            <param name="orientation"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListAdd(System.Windows.Forms.Control,PPJ.Runtime.SalString)">
            <summary>
            Adds a string to a list box or combo box.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListClear(System.Windows.Forms.Control)">
            <summary>
            Deletes all entries from a list box or combo box.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListDelete(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Deletes a list box or combo box entry.
            </summary>
            <param name="ctrl"></param>
            <param name="filterIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListGetMultiSelect(System.Windows.Forms.Control,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Returns an array of index numbers of selected list box entries.
            </summary>
            <param name="ctrl"></param>
            <param name="nSelectedArray"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListInsert(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Inserts an entry into a list box or combo box at a specified position.
            </summary>
            <param name="ctrl"></param>
            <param name="filterIndex"></param>
            <param name="add"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListPopulate(System.Windows.Forms.Control,PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString)">
            <summary>
            Populates a list box or combo box with a result set. SalListPopulate overrides any
            settings made with SalListSetTabs. If the SELECT statement returns data from multiple
            columns, each column's data displayed in a list box is separated by tabs.
            </summary>
            <param name="ctrl"></param>
            <param name="sql"></param>
            <param name="select"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListPopulate(System.Windows.Forms.Control,PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Populates a list box or combo box with a result set.
            If the SELECT statement returns data from multiple columns, each column's data 
            displayed in the list box is separated by tabs.
            </summary>
            <param name="ctrl"></param>
            <param name="sql"></param>
            <param name="select"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListQueryCount(System.Windows.Forms.Control)">
            <summary>
            Returns the number of list box or combo box entries.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListQueryMultiCount(System.Windows.Forms.Control)">
            <summary>
            Returns the number of selected entries in a multiple-selection list box. Specify
            single-selection or multiple-selection in the list box's customizer.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListQuerySelection(System.Windows.Forms.Control)">
            <summary>
            Returns the index of the selected entry in a combo box or single-selection list box.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListQueryState(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Determines whether the specified list box or combo box entry is selected.
            </summary>
            <param name="ctrl"></param>
            <param name="filterIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListQueryText(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Returns the text of the specified item.
            </summary>
            <param name="ctrl"></param>
            <param name="filterIndex"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListQueryTextLength(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Returns the length of a list box or combo box entry.
            </summary>
            <param name="ctrl"></param>
            <param name="filterIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListQueryTextX(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Returns the text of the specified item.
            </summary>
            <param name="ctrl"></param>
            <param name="filterIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListRedraw(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Redraws entries in a list box or combo box, or prevents them from being redrawn.
            </summary>
            <param name="ctrl"></param>
            <param name="bRedraw"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListSelectString(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Finds and selects a combo box or single-selection list box entry.
            </summary>
            <param name="ctrl"></param>
            <param name="filterIndexStart"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListSetMultiSelect(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Selects or deselects a combo box or multiple-selection list box entry.
            </summary>
            <param name="ctrl"></param>
            <param name="filterIndex"></param>
            <param name="select"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListSetSelect(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Selects or deselects a combo box or single-selection list box entry.
            </summary>
            <param name="ctrl"></param>
            <param name="filterIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListSetTabs(System.Windows.Forms.Control,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Sets tabs in a list box.
            </summary>
            <param name="ctrl"></param>
            <param name="tabStops"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListFiles(System.Windows.Forms.Control,System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Populates a list box or combo box with a directory of files.
            </summary>
            <param name="ctrl"></param>
            <param name="ctrlPath"></param>
            <param name="pathName"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ListQueryFile(System.Windows.Forms.Control,PPJ.Runtime.SalString@)">
            <summary>
            Fetches the selected directory or file name from a list box or combo box.
            </summary>
            <param name="ctrl"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ScrollGetPos(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the current scroll bar value.
            </summary>
            <param name="ctrl"></param>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ScrollGetRange(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a scroll bar's scroll range, line increment, and page increment.
            </summary>
            <param name="ctrl"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="line"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ScrollSetPos(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the scrollbar's value.
            </summary>
            <param name="ctrl"></param>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ScrollSetRange(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a scroll bar's range, line increment, and page increment. 
            </summary>
            <param name="ctrl"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="line"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavAddPane(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Inserts a pane into the navigation bar control.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">Indicates a zero-based pane index.  The new pane will be inserted after the pane indicated by nPaneIndex. Use -1 to append as the last pane.</param>
            <param name="name">Name of the new pane (object title)</param>
            <param name="expandedImage">File name of the image to display for the new pane when it is expanded.</param>
            <param name="collapsedImage">File name of the image to display for the new pane when it is collapsed.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavRemovePane(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Removes a pane from the navigation bar control.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">Zero-based index of the pane to be removed.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavAddGroup(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Adds a new group to the specified pane of a navigation bar.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">Zero-based index of the pane to which you want to add a group.</param>
            <param name="groupIndex">Zero-based index that the new group will occupy.</param>
            <param name="groupTitle">The title of the new group.</param>
            <param name="height">The height of the new group in form units.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavRemoveGroup(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Removes a group from the navigation bar control.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">Zero-based index of the pane to be removed.</param>
            <param name="groupIndex">Zero-based index of the group to remove.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavGetActivePane(System.Windows.Forms.Control)">
            <summary>
            Returns the index of the currently selected pane.
            </summary>
            <param name="control">The NavBar control.</param>
            <returns>The zero-based index of the currently selected pane.</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavSetActivePane(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Activates the indicated pane.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">The zero-based index of the pane to activate.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavGetPaneIndex(System.Windows.Forms.Control,PPJ.Runtime.SalString)">
            <summary>
            Finds the pane by its name and returns a zero-based index of the pane if successful or -1 if the pane is not found.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="name">The name of the pane (object title)</param>
            <returns>the zero-based index of the pane.  If the pane is not found, filterIndex is -1.</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavGetPaneTitle(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Returns the title of a pane.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">Index for the pane whose title you want to get (start at 0)</param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavGetPaneTitle(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Returns the title of a pane.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">Index for the pane whose title you want to get (start at 0)</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavSetPaneTitle(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Sets the title of a pane.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">Index for the pane whose title you want to get (start at 0).</param>
            <param name="title">The new title for the pane.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavSetPaneIcon(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBinary,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Sets the title of a pane.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">Index for the pane.</param>
            <param name="binary">Buffer that stores the image (bmp or icon).</param>
            <param name="format">Indicates the image format. Use PIC_FormatIcon or PIC_FormatBitmap.</param>
            <param name="expanded">TRUE for "expanded" image, FALSE for "collapsed" image</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavGetPaneIcon(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBinary@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Retrieves the icon for the specified navigation pane.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">Index for the pane.</param>
            <param name="binary">Buffer that stores the image (bmp or icon)</param>
            <param name="format">Indicates the image format. Use PIC_FormatIcon or PIC_FormatBitmap.</param>
            <param name="expanded">TRUE for "expanded" image, FALSE for "collapsed" image</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavEnablePane(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Enables or diables a pane on the navigation bar.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">Index for the pane to enable (start at 0).</param>
            <param name="enable">Set TRUE to enable pane, FALSE to disable.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavPaneIsEnabled(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Returns true if the pane is enabled (visible in the pane navigator); false if disabled (not visible).
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">Index of pane (start at 0).</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavAssociateChild(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Associates a control to a pane.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">Zero-based index of the pane.</param>
            <param name="groupIndex">Zero-based index of the group.  If the pane has no groups, use zero.</param>
            <param name="child">the control you're associating to the pane.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavDisassociateChild(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Disassociates a control from a pane.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">Zero-based index of the pane</param>
            <param name="child">The control you're disassociating</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavGroupIsExpanded(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the group status. The function returns true if the group is expanded; false if collapsed.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">Zero-based index of the pane</param>
            <param name="groupIndex">Zero-based index of the group</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavExpandGroup(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Expands or collapses a group.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="paneIndex">Zero-based index of the pane</param>
            <param name="groupIndex">Zero-based index of the group</param>
            <param name="expand">Set to TRUE to expand, FALSE to collapse</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavSaveState(System.Windows.Forms.Control,PPJ.Runtime.SalString@)">
            <summary>
            Saves the settings of a navigation bar to an XML string.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NavLoadState(System.Windows.Forms.Control,PPJ.Runtime.SalString)">
            <summary>
            Restore the settings of a navigation bar from an XML string.
            </summary>
            <param name="control">The NavBar control.</param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabAddPage(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Adds a tab page at a valid tabset index position.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <param name="pageName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabAddPageEx(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Adds a tab page at a valid tabset index position. You can include an image and a tooltip.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <param name="pageName"></param>
            <param name="imageFile"></param>
            <param name="tooltip"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabAssociateChild(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Associates a child to a tab page.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabAttachWindow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Assigns a child window created at runtime to the specified tab page as its container window. 
            You can programmatically create a Form Window or Dialog Box as child and assign it to a tab page by using this function.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabDetachWindow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Detaches a child window from the specified tab control.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabDisassociateChild(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Disassociates a child with a tab page.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabSetActivePage(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Activates a tab specified by a particular tab index.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabGetActivePage(System.Windows.Forms.Control)">
            <summary>
            Gets the current active tab page. 
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabGetTooltip(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Gets the tooltip text from the specified indexed tab page on the specified tab control.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <param name="tooltip"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabSetTooltip(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Sets the tooltip text on the specified tab page. Tooltip text appears only on tab selector, not on a tab container window.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <param name="tooltip"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabEnablePage(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Enables a tab page
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabDisablePage(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Disables a tab page.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabGetPageIndex(System.Windows.Forms.Control,PPJ.Runtime.SalString)">
            <summary>
            Gets the tab page index as specified by the tab name.
            </summary>
            <param name="control"></param>
            <param name="pageName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabRemovePage(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Removes a tab page.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabRenamePage(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Renames a tab page.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <param name="pageName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabSetPageTitle(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Sets the title of the specified tab page.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <param name="pageTitle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabGetPageName(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            ets the name of the tab page (not the title that appears on the tab page at runtime).
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabGetPageTitle(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Gets the tab page title as specified by the tab index.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabGetPageWindow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Gets the window handle of the specified tab page.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabShowPage(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Shows a tab page
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabHidePage(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Hides a tab page.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabPageCount(System.Windows.Forms.Control)">
            <summary>
            Returns the number of tab pages.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabShowStrip(System.Windows.Forms.Control)">
            <summary>
            Shows the tab page selector inside the specified tab control.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabHideStrip(System.Windows.Forms.Control)">
            <summary>
            Hides the tab page selector inside the specified tab control. While the tab selector strop is hidden, you can change the active tab page by using SalTabSetActivePage.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TabUpdate(System.Windows.Forms.Control)">
            <summary>
            Updates the Tab bar after a SalTabAssociateChild or SalTabDisassociateChild is called. 
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SetErrorInfo(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets COM error information.
            </summary>
            <param name="nCode"></param>
            <param name="sDesc"></param>
            <param name="sHelpfileName"></param>
            <param name="nHelpContext"></param>
        </member>
        <member name="M:PPJ.Runtime.Sal.MTSCreateInstance(System.Object@)">
            <summary>
            Creates a new component. Depending on the Transaction settings this component will
            continue the current transaction, will start a new transaction, or will under
            non-transactional state. For non-MTS components the SalMTSCreateInstance() will
            work as Create().
            </summary>
            <param name="oObj">The requested interface/object to be instantiated.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MTSDisableCommit">
            <summary>
            Indicates that the object's transactional updates cannot be committed in the present
            time until SalMTSEnableCommit() or SalMTSSetComplete() is called. For non-MTS
            components the SalMTSDisableCommit() will fail (returns FALSE).
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MTSEnableCommit">
            <summary>
            Indicates that the object’s work is not necessarily done, but that its transactional
            updates can be committed in their current form (stateful object). EnableCommit
            is the default state when an object is activated. For non-MTS components the
            SalMTSEnableCommit() will fail (returns FALSE).
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MTSIsInTransaction(PPJ.Runtime.SalBoolean@)">
            <summary>
            This method checks if the component is executing in the transaction context. For
            non-MTS components the SalMTSIsInTransaction() will fail (returns FALSE).
            </summary>
            <param name="bIsInTransaction"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MTSIsCallerInRole(PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean@)">
            <summary>
            Determines whether the caller is in the specified role.
            </summary>
            <param name="strRole"></param>
            <param name="bInRole"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MTSIsSecurityEnabled(PPJ.Runtime.SalBoolean@)">
            <summary>
            This method checks for the security status. If the object is running in the client's
            process, there is no security checking and SalMTSIsSecurityEnabled will always
            return FALSE. For non-MTS components the SalMTSIsSecurityEnabled() will fail
            (returns FALSE).
            </summary>
            <param name="bIsSecurityEnabled">TRUE if the security is enabled</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MTSSetAbort">
            <summary>
            Indicates that the object’s work can never be committed. The entire transaction is
            aborted. The object is deactivated upon return from the method. For non-MTS components
            the SalMTSSetAbort() will fail (returnS FALSE).
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MTSSetComplete">
            <summary>
            Indicates that the object has successfully completed its work for the transaction.
            The object is deactivated upon return from the method that first entered the context
            (stateless object). For non-MTS components the SalMTSSetComplete() will fail
            (returns FALSE).
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberAbs(PPJ.Runtime.SalNumber)">
            <summary>
            Computes the absolute num.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberArcCos(PPJ.Runtime.SalNumber)">
            <summary>
            Computes the arc cosine of a num in the range 0 to 1.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberArcSin(PPJ.Runtime.SalNumber)">
            <summary>
            Computes a num's arc sine.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberArcTan(PPJ.Runtime.SalNumber)">
            <summary>
            Computes a num's arc tangent.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberArcTan2(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Computes the arc tangent of two nums. This function uses the signs of both parameters
            to determine the quadrant of the return num.
            </summary>
            <param name="numY"></param>
            <param name="numX"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberCos(PPJ.Runtime.SalNumber)">
            <summary>
            Computes an angle's cosine.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberCosH(PPJ.Runtime.SalNumber)">
            <summary>
            Computes an angle's hyperbolic cosine.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberExponent(PPJ.Runtime.SalNumber)">
            <summary>
            Computes a num's exponential function.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberHigh(PPJ.Runtime.SalNumber)">
            <summary>
            Returns a number's high-order word num (most significant 16 bits).
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberHypot(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Computes the length of the hypotenuse of a right triangle, given the lengths of the
            other two sides.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberLog(PPJ.Runtime.SalNumber)">
            <summary>
            Computes a number's natural logarithm.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberLogBase10(PPJ.Runtime.SalNumber)">
            <summary>
            Computes a number's base -10 logarithm.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberLow(PPJ.Runtime.SalNumber)">
            <summary>
            Returns a number's low-order word num (least significant 16 bits).
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberMax(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Returns the greater of two numbers.
            </summary>
            <param name="num1"></param>
            <param name="num2"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberMin(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Returns the lesser of two numbers.
            </summary>
            <param name="num1"></param>
            <param name="num2"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Sal.NumberMod(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)" -->
        <member name="M:PPJ.Runtime.Sal.NumberPi(PPJ.Runtime.SalNumber)">
            <summary>
            Multiples a number by Pi.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberPower(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Computes x raised to the power of y.
            </summary>
            <param name="num"></param>
            <param name="exponent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberRandInit(PPJ.Runtime.SalNumber)">
            <summary>
            Sets the starting point for generating a series of pseudo-random numbers using SalNumberRandom.
            </summary>
            <param name="nSeed"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberRandom">
            <summary>
            Generates a pseudo-random number. The numbers generated by this function are integers
            in the range 0 to 32767.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberRound(PPJ.Runtime.SalNumber)">
            <summary>
            Returns a rounded number. If the fractional part of a number is greater than or equal
            to .5, rounds the number up. For example, the number 1.4 returns
            1; the number 1.5 returns 2.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberSin(PPJ.Runtime.SalNumber)">
            <summary>
            Computes an angle's sine.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberSinH(PPJ.Runtime.SalNumber)">
            <summary>
            Computes an angle's hyperbolic sine.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberSqrt(PPJ.Runtime.SalNumber)">
            <summary>
            Computes a number's square root.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberTan(PPJ.Runtime.SalNumber)">
            <summary>
            Computes an angle's tangent.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberTanH(PPJ.Runtime.SalNumber)">
            <summary>
            Computes an angle's hyperbolic tangent.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberToChar(PPJ.Runtime.SalNumber)">
            <summary>
            Converts a decimal num to a UNICODE character.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberToHString(PPJ.Runtime.SalNumber)">
            <summary>
            Converts a string handle to the corresponding string instance.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.HStringToNumber(PPJ.Runtime.SalString)">
            <summary>
            Converts a string to a number so you can pass it as a message parameter.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberToStr(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Converts a number to a string.
            </summary>
            <param name="num"></param>
            <param name="nDecimalPlaces"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberToStrX(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Converts a number to a string.
            </summary>
            <param name="num"></param>
            <param name="nDecimalPlaces"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberToWindowHandle(PPJ.Runtime.SalNumber)">
            <summary>
            Converts a number to a window handle.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.NumberTruncate(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Truncates a number.
            </summary>
            <param name="num"></param>
            <param name="precision"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ObjIsNull(PPJ.Runtime.SalFunctionalClass)">
            <summary>
            This function checks to see if the variable of a functional, coclass, or interface
            class is null.
            </summary>
            <param name="userObject"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ObjGetType(PPJ.Runtime.SalFunctionalClass)">
            <summary>
            This function returns the name of the class for the object.
            </summary>
            <param name="userObject"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ObjCreateFromString(PPJ.Runtime.SalString)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="className">Class name</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ObjIsDerived(PPJ.Runtime.SalFunctionalClass,PPJ.Runtime.SalString)">
            <summary>
            Returns true if the object is derived from the class specified.
            </summary>
            <param name="userObject"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ObjIsValidClasname(PPJ.Runtime.SalString)">
            <summary>
            Determine whether className holds a valid user-defined class name.
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.XMLSerialize``1(``0,PPJ.Runtime.SalString)">
            <summary>
            Serializes the object to a XML file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.XMLDeserialize``1(``0@,PPJ.Runtime.SalString)">
            <summary>
            Deserializes an object from a XML file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.XMLGetLastError(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@)">
            <summary>
            Returns the last error that occurred during XML serialization or deserialization.
            </summary>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PicClear(System.Windows.Forms.Control)">
            <summary>
            Deletes the contents of a picture.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PicGetDescription(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves a description of a picture's contents.
            </summary>
            <param name="ctrl"></param>
            <param name="description"></param>
            <param name="maxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PicGetImage(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@)">
            <summary>
            Copies the contents of a picture to a string.
            </summary>
            <param name="ctrl"></param>
            <param name="imageBytes"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PicGetImage(System.Windows.Forms.Control,PPJ.Runtime.SalBinary@,PPJ.Runtime.SalNumber@)">
            <summary>
            Copies the contents of a picture to a binary buffer.
            </summary>
            <param name="ctrl"></param>
            <param name="imageBytes"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PicGetString(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Copies the contents of a picture to a string.
            </summary>
            <param name="ctrl"></param>
            <param name="format"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PicGetString(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBinary@)">
            <summary>
            Copies the contents of a picture to a string.
            </summary>
            <param name="ctrl"></param>
            <param name="format"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PicSet(System.Windows.Forms.Control,PPJ.Runtime.SalResource,PPJ.Runtime.SalNumber)">
            <summary>
            Inserts a resource into a picture.
            </summary>
            <param name="ctrl"></param>
            <param name="resourceType"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PicSetFile(System.Windows.Forms.Control,PPJ.Runtime.SalString)">
            <summary>
            Inserts a file's contents into a picture.
            </summary>
            <param name="ctrl"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PicSetFit(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the fit for a picture.
            </summary>
            <param name="ctrl"></param>
            <param name="fit"></param>
            <param name="scaleWidth"></param>
            <param name="scaleHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PicSetHandle(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the picture image of a picture window with the handle of a bitmap (HBITMAP)
            or icon (HICON). Usually, HBITMAPs and HICONs are loaded from DLLs.
            </summary>
            <param name="ctrl"></param>
            <param name="type"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PicSetImage(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Inserts the contents of a picture to an image without the image header.
            </summary>
            <param name="ctrl"></param>
            <param name="buffer"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PicSetString(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Inserts the contents of a string into a picture.
            </summary>
            <param name="ctrl"></param>
            <param name="format"></param>
            <param name="picture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PicSetString(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBinary)">
            <summary>
            Inserts the contents of a binary buffer into a picture.
            </summary>
            <param name="ctrl"></param>
            <param name="format"></param>
            <param name="picture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PrtExtractRect(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Extracts the currently printing rectangle from the SAM_Print message's lParam parameter.
            </summary>
            <param name="lParam">The SAM_Print message's lParam parameter.</param>
            <param name="left">The position on the X axis of the rectangle's left side.</param>
            <param name="top">The position on the Y axis of the top of the rectangle.</param>
            <param name="right">The position on the X axis of the rectangle's right side.</param>
            <param name="bottom">The position on the Y axis of the bottom of the rectangle.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PrtPrintForm(System.Windows.Forms.Control)">
            <summary>
            Prints a form window, table window, or dialog box, including its contents and row
            header flags.
            </summary>
            <param name="ctrl"></param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PrtPreviewForm(System.Windows.Forms.Control)">
            <summary>
            Prints a form window, table window, or dialog box, including its contents and row
            header flags.
            </summary>
            <param name="ctrl"></param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PrtGetDefault(PPJ.Runtime.SalString@,PPJ.Runtime.SalString@,PPJ.Runtime.SalString@)">
            <summary>
            Returns the default device (printer), the default driver, and the default port.
            </summary>
            <param name="sDevice">The default device.</param>
            <param name="sDriver">The default driver.</param>
            <param name="sPort">The default port.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PrtGetParmNum(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets the value of a print parameter.
            </summary>
            <param name="nParm">The print parameter whose value you want; one of the PRT_* constants.</param>
            <param name="value">The print parameter's value. For boolean parameters, value is TRUE or FALSE.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PrtSetDefault(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Sets the default device (printer), driver, and port.
            </summary>
            <param name="sDevice">The default device.</param>
            <param name="sDriver">The default driver.</param>
            <param name="sPort">The default port.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PrtSetParmDefaults">
            <summary>
            Resets print parameters back to their default values.
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PrtSetParmNum(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a print parameter. The print parameters are a set of global variables
            which are initialized to default values and can be set using SalPrtSetParmNum,
            retrieved using SalPrtGetParmNum or reinitialized using SalPrtSetParmDefaults.
            </summary>
            <param name="nParm">A constant that represents the parameter to set; one of the PRT_* constants.</param>
            <param name="nValue">The parameter value.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.PrtSetup(PPJ.Runtime.SalString@,PPJ.Runtime.SalString@,PPJ.Runtime.SalString@,PPJ.Runtime.SalBoolean)">
            <summary>
            Displays the Printer Setup dialog box that lets the user alter the printer setup.
            Initially, the current default printer is displayed and the user may change the
            printer. SalPrtSetup returns the user's selections in the Receive Strings.
            </summary>
            <param name="sDevice">The device (printer).</param>
            <param name="sDriver">The driver.</param>
            <param name="sPort">The port.</param>
            <param name="bActiveOnly">Whether to display active and/or inactive printers: if TRUE, all printers display and if FALSE, only active printers display.</param>
            <returns>bOk</returns>
        </member>
        <member name="F:PPJ.Runtime.Sal.m_salReportType">
            <summary>
            The type used to create an instance of ISalReport.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.CreateReportObject(System.String,PPJ.Runtime.SalNumber@)">
            <summary>
            Creates an instance of ISalReport.
            <remarks>Uses the file extension to determine which reporting engine to use.</remarks>
            </summary>
            <param name="reportFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetReportObject(System.IntPtr)">
            <summary>
            Returns the instance of ISalReport that is identified by the handle.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportCreate(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean,PPJ.Runtime.SalNumber@)">
            <summary>
            Creates a new report from the specified fields.
            </summary>
            <param name="fileName"></param>
            <param name="variableNames"></param>
            <param name="inputs"></param>
            <param name="defaultReport"></param>
            <param name="Error"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportCreate(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString)">
            <summary>
            Creates a new report from the specified fields.
            </summary>
            <param name="fileName"></param>
            <param name="variableNames"></param>
            <param name="inputs"></param>
            <param name="defaultReport"></param>
            <param name="error"></param>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportClose(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Closes a report window.
            </summary>
            <param name="windowReport"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportCmd(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a command to an open report window.
            </summary>
            <param name="windowReport"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportDlgOptions(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Sets the options for the report printing dialog box.
            </summary>
            <param name="windowReport"></param>
            <param name="caption"></param>
            <param name="line1"></param>
            <param name="line2"></param>
            <param name="docName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportGetDateTimeVar(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalDateTime@)">
            <summary>
            Returns the value of a date/time report variable.
            </summary>
            <param name="windowReport"></param>
            <param name="variableName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportGetNumberVar(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the value of a number report variable.
            </summary>
            <param name="windowReport"></param>
            <param name="variableName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportGetObjectVar(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Returns the value of an object report variable.
            </summary>
            <param name="windowReport"></param>
            <param name="variableName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportGetStringVar(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Returns the value of a string report variable.
            </summary>
            <param name="windowReport"></param>
            <param name="variableName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportPrint(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@)">
            <summary>
            Prints a report.
            </summary>
            <param name="owner"></param>
            <param name="template"></param>
            <param name="variableNames"></param>
            <param name="inputs"></param>
            <param name="copies"></param>
            <param name="options"></param>
            <param name="firstPage"></param>
            <param name="lastPage"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportPrintToFile(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean,PPJ.Runtime.SalNumber@)">
            <summary>
            Prints a report to a file.
            </summary>
            <param name="owner"></param>
            <param name="template"></param>
            <param name="destFile"></param>
            <param name="variableNames"></param>
            <param name="inputs"></param>
            <param name="copies">Not used.</param>
            <param name="options"></param>
            <param name="firstPage"></param>
            <param name="lastPage"></param>
            <param name="rtfFormat">Not used.</param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportPrintToFile(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@)">
            <summary>
            Prints a report to a file.
            </summary>
            <param name="owner"></param>
            <param name="template"></param>
            <param name="destFile"></param>
            <param name="variableNames"></param>
            <param name="inputs"></param>
            <param name="options"></param>
            <param name="firstPage"></param>
            <param name="lastPage"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportReset(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Re-populates the report window.
            </summary>
            <param name="windowReport"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportSetPrinterSettings(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the printer properties at runtime.
            This function should be called wile processing the SAM_ReportStart event.
            </summary>
            <param name="windowReport"></param>
            <param name="printerName">Friendly name of the printer. Pass STRING_Null or an empty string if you do not want to switch the printer.</param>
            <param name="orientation">Paper Orientation. Use one of the following constants: <list><item>RPT_Portrait for portrait mode.</item><item>RPT_Landscape for landscape mode.</item><item>Use  -1 if you do not want to change the orientation.</item></list></param>
            <param name="paperType">Paper type. Use one of the RPT_Paper* constants or the PaperKind enum.</param>
            <param name="width">Paper width in milli-inches. This value is ignored for all paper types except for RPT_PaperCustom.</param>
            <param name="height">Paper height in milli-inches. This value is ignored for all paper types except for RPT_PaperCustom.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportGetPrinterSettings(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Sets the printer properties at runtime.
            This function should be called wile processing the SAM_ReportStart event.
            </summary>
            <param name="windowReport"></param>
            <param name="printerName">Friendly name of the printer.</param>
            <param name="orientation">Paper Orientation.</param>
            <param name="paperType">Paper type.</param>
            <param name="width">Paper width in milli-inches. This value is ignored for all paper types except for RPT_PaperCustom.</param>
            <param name="height">Paper height in milli-inches. This value is ignored for all paper types except for RPT_PaperCustom.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportSetDateTimeVar(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalDateTime)">
            <summary>
            Sets the value of a date/time report variable.
            </summary>
            <param name="windowReport"></param>
            <param name="variableName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportSetNumberVar(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a numeric report variable.
            </summary>
            <param name="windowReport"></param>
            <param name="variableName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportSetObjectVar(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Sets the value of an object report variable.
            </summary>
            <param name="windowReport">The window handle of the report window.</param>
            <param name="variableName">The name of the variable whose value you want to set.</param>
            <param name="value">The value of variableName.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportSetStringVar(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Sets the value of a string report variable.
            </summary>
            <param name="windowReport"></param>
            <param name="variableName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportView(System.Windows.Forms.Control,System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber@)">
            <summary>
            Displays a report in preview mode.
            </summary>
            <param name="owner"></param>
            <param name="parent"></param>
            <param name="template"></param>
            <param name="variableNames"></param>
            <param name="inputs"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportTableCreate(PPJ.Runtime.SalString,System.Windows.Forms.Control,PPJ.Runtime.SalNumber@)">
            <summary>
            Creates a report template from the specified table window.
            </summary>
            <param name="fileName"></param>
            <param name="table"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportTableCreate(PPJ.Runtime.SalString,System.Windows.Forms.Control,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString)">
            <summary>
            Creates a report template from the specified table window.
            </summary>
            <param name="fileName"></param>
            <param name="table"></param>
            <param name="error"></param>
            <param name="template"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportTablePrint(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber},PPJ.Runtime.SalNumber@)">
            <summary>
            Prints a report created from the specified table window.
            </summary>
            <param name="table"></param>
            <param name="sTemplate"></param>
            <param name="nParamArray"></param>
            <param name="nError"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ReportTableView(System.Windows.Forms.Control,System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber@)">
            <summary>
            Previews a report created from the specified table window.
            </summary>
            <param name="table"></param>
            <param name="parent"></param>
            <param name="sTemplate"></param>
            <param name="nError"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StaticFirst(System.Windows.Forms.Control)">
            <summary>
            Returns a "handle" to the first static on a window
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StaticGetLabel(System.Windows.Forms.Control)">
            <summary>
            Gets the static "handle" if the lable for a specified control
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StaticGetLoc(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets the location coordinates of a static
            </summary>
            <param name="form"></param>
            <param name="handle"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StaticGetSize(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets the size of a static
            </summary>
            <param name="form"></param>
            <param name="handle"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StaticHide(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Hides a static
            </summary>
            <param name="form"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StaticIsVisible(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Determines whether a static is visible.
            </summary>
            <param name="form"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StaticNext(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Returns a "handle" to the last static on a window
            </summary>
            <param name="form"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StaticSetLoc(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the location coordinates of a static
            </summary>
            <param name="form"></param>
            <param name="handle"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StaticSetSize(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the size of a static
            </summary>
            <param name="form"></param>
            <param name="handle"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StaticShow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Shows a static
            </summary>
            <param name="form"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrCompress(PPJ.Runtime.SalString@)">
            <summary>
            Compresses the specified string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrFirstChar(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@)">
            <summary>
            Extracts the first character of a string and returns its decimal value.
            </summary>
            <param name="str"></param>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrGetBufferLength(PPJ.Runtime.SalString)">
            <summary>
            Returns the current buffer length of a string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetBufferLength(PPJ.Runtime.SalBinary)">
            <summary>
            Returns the current buffer length of a binary variable.
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.GetBufferLength(PPJ.Runtime.SalString)">
            <summary>
            Returns the current buffer length of a string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrIsValidCurrency(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Verifies that a string represents a valid currency value.
            </summary>
            <param name="money"></param>
            <param name="precision"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrIsValidDecimal(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Verifies that an entire character string represents a valid decimal value.
            </summary>
            <param name="str"></param>
            <param name="precision"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrIsValidDateTime(PPJ.Runtime.SalString)">
            <summary>
            Verifies that string represents a valid date/time value.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrIsValidNumber(PPJ.Runtime.SalString)">
            <summary>
            Verifies that a string represents a valid number value.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrIsValidIdentifierName(PPJ.Runtime.SalString)">
            <summary>
            Returns TRUE if the string is a valid identifier.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrLeft(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Returns a substring of a specified length starting at position zero.
            </summary>
            <param name="source"></param>
            <param name="length"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrLeftX(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Returns a substring of a specified length starting at position zero.
            </summary>
            <param name="source"></param>
            <param name="nExtract"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrLength(PPJ.Runtime.SalString)">
            <summary>
            Returns a string's length.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrLop(PPJ.Runtime.SalString@)">
            <summary>
            Returns the UNICODE numeric value of the first character of a string in decimal format
            and removes the first character of the string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrLower(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Converts a string to lowercase.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrLowerX(PPJ.Runtime.SalString)">
            <summary>
            Converts a string to lowercase.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrMid(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Returns a substring starting at a specified position and containing a specified number of characters.
            </summary>
            <param name="source"></param>
            <param name="startPos"></param>
            <param name="length"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrMidX(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Returns a substring, starting at a specified position and containing a specified number of characters.
            </summary>
            <param name="source"></param>
            <param name="startPos"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrProper(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Converts a string to a proper name.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrProperX(PPJ.Runtime.SalString)">
            <summary>
            Converts a string to a proper name.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrRepeat(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Concatenates a string with itself a specified number of times.
            </summary>
            <param name="source"></param>
            <param name="times"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrRepeatX(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Concatenates a string with itself a specified number of times.
            </summary>
            <param name="source"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrReplace(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Replaces characters in one string with characters from another string.
            </summary>
            <param name="source"></param>
            <param name="startPos"></param>
            <param name="length"></param>
            <param name="replace"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrReplaceX(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Replaces characters in one string with characters from another string.
            </summary>
            <param name="source"></param>
            <param name="startPos"></param>
            <param name="length"></param>
            <param name="sReplace"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrRight(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Returns a string of specified length, starting with the last character in the string.
            </summary>
            <param name="source"></param>
            <param name="length"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrRightX(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Returns a string of specified length, starting with the last character in the string.
            </summary>
            <param name="source"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrScan(PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Returns the offset of a specified substring.
            </summary>
            <param name="str1"></param>
            <param name="str2"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrSetBufferLength(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the buffer length of the string to the length plus 1 for the terminator.
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SetBufferLength(PPJ.Runtime.SalBinary@,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the buffer length.
            </summary>
            <param name="buffer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.SetBufferLength(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the buffer length of the string to the length plus 1 for the terminator.
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrToDate(PPJ.Runtime.SalString)">
            <summary>
            Converts a string to a date/time value.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrTokenize(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalArray{PPJ.Runtime.SalString})">
            <summary>
            Parses a string into substrings (tokens) based on specified start and end delimiters.
            </summary>
            <param name="source"></param>
            <param name="startDel"></param>
            <param name="endDel"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrToNumber(PPJ.Runtime.SalString)">
            <summary>
            Converts a string to a number.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrTrim(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Strips leading and trailing blanks and compresses multiple spaces and tabs within a string to single spaces.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrTrimX(PPJ.Runtime.SalString)">
            <summary>
            Strips leading and trailing blanks and compresses multiple spaces and tabs within a string to single spaces.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrUncompress(PPJ.Runtime.SalString@)">
            <summary>
            Decompresses the specified string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrUpper(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Converts a string to uppercase.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StrUpperX(PPJ.Runtime.SalString)">
            <summary>
            Converts a string to uppercase.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblAnyRows(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Determines whether any rows in the specified table window match certain flags.
            </summary>
            <param name="table"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblClearSelection(System.Windows.Forms.Control)">
            <summary>
            Deselects all rows of a table window.
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblCopyRows(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Copies the contents of the specified table window rows to the Clipboard in text format.
            </summary>
            <param name="table"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblColumnAverage(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Computes the average of all column values or only specified column values in a table
            window.
            </summary>
            <param name="table"></param>
            <param name="columnId"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblColumnSum(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Computes the sum of all column values or only specified column values in a table
            window.
            </summary>
            <param name="table"></param>
            <param name="columnId"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblCreateColumn(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Creates a table window column of string data type at runtime.
            </summary>
            <param name="table"></param>
            <param name="columnPos"></param>
            <param name="displayWidth"></param>
            <param name="maxChars"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblCreateColumnEx(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a table window column using a given data type at runtime.
            Allowed types are DT_String, DT_Number and DT_DateTime
            </summary>
            <param name="table"></param>
            <param name="columnPos"></param>
            <param name="displayWidth"></param>
            <param name="title"></param>
            <param name="maxChars"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblDefineRowHeader(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Defines the appearance and behavior of a table window's row header.
            </summary>
            <param name="table"></param>
            <param name="title"></param>
            <param name="width"></param>
            <param name="flags"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblDefineSplitWindow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Splits a table window horizontally.
            </summary>
            <param name="table"></param>
            <param name="rowsLowerHalf"></param>
            <param name="dragAdjust"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQuerySplitWindow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalBoolean@)">
            <summary>
            Specifies how a table window is split horizontally.
            </summary>
            <param name="table"></param>
            <param name="rowsLowerHalf"></param>
            <param name="dragAdjust"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblDeleteRow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Deletes a row from a table window but not from the database.
            </summary>
            <param name="ctrl"></param>
            <param name="nRow"></param>
            <param name="nFlag"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblDeleteSelected(System.Windows.Forms.Control,PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Applies a SQL DELETE statement to all table window rows with the ROW Selected flag.
            </summary>
            <param name="ctrl"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblDeleteSelected(System.Windows.Forms.Control,PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL DELETE statement to all table window rows with the ROW Selected flag.
            </summary>
            <param name="ctrl"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblDestroyColumns(System.Windows.Forms.Control)">
            <summary>
            Destroys all automatic columns created by SalTblCreateColumn or SalTblPopulate at
            runtime. This function only works on table windows that contain only automatic
            columns.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblDoDeletes(System.Windows.Forms.Control,PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Applies a SQL DELETE statement to all table window rows that have flagsOn flags.
            </summary>
            <param name="ctrl"></param>
            <param name="sql"></param>
            <param name="flagsOn"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblDoDeletes(System.Windows.Forms.Control,PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL DELETE statement to all table window rows that have flagsOn flags.
            </summary>
            <param name="ctrl"></param>
            <param name="sql"></param>
            <param name="flagsOn"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblDoInserts(System.Windows.Forms.Control,PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean)">
            <summary>
            Applies a SQL INSERT statement to all the rows in a table window that have the ROW New flag.
            </summary>
            <param name="ctrl"></param>
            <param name="sql"></param>
            <param name="clearFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblDoInserts(System.Windows.Forms.Control,PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL INSERT statement to all the rows in a table window that have the ROW New flag.
            </summary>
            <param name="ctrl"></param>
            <param name="sql"></param>
            <param name="clearFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblDoUpdates(System.Windows.Forms.Control,PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean)">
            <summary>
            Applies a SQL UPDATE statement to all table window rows with the Row Edited flag.
            </summary>
            <param name="ctrl"></param>
            <param name="sql"></param>
            <param name="clearFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblDoUpdates(System.Windows.Forms.Control,PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL UPDATE statement to all table window rows with the Row Edited flag.
            </summary>
            <param name="table"></param>
            <param name="sql"></param>
            <param name="clearFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblFetchRow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a SAM_FetchRow message to a table window if the row you specify is not currently
            in the table window cache.
            </summary>
            <param name="ctrl"></param>
            <param name="nRow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblFindNextRow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Scans forward in a table looking for a row whose flags match those specified.
            </summary>
            <param name="ctrl"></param>
            <param name="row"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblFindPrevRow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Scans backward in a table looking for a row whose flags match those specified.
            </summary>
            <param name="ctrl"></param>
            <param name="row"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblGetColumnText(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Gets data from a column of a table window's context row.
            </summary>
            <param name="ctrl"></param>
            <param name="columnId"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblGetColumnWindow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Gets the handle of a table window column.
            </summary>
            <param name="ctrl"></param>
            <param name="col"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblInsertRow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Inserts a new blank row into a table window.
            </summary>
            <param name="table"></param>
            <param name="nRow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblKillEdit(System.Windows.Forms.Control)">
            <summary>
            Takes a row out of edit mode and selects the row. This causes the row to receive
            both SAM_Validate and SAM_KillFocus messages.
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Sal.TblKillFocus(System.Windows.Forms.Control)" -->
        <member name="M:PPJ.Runtime.Sal.TblObjectsFromPoint(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalWindowHandle@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the part of the table window located at a given coordinate.
            </summary>
            <param name="table"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="row"></param>
            <param name="column"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblPasteRows(System.Windows.Forms.Control)">
            <summary>
            Pastes the contents of the Clipboard to the specified table window. Assumes
            the Clipboard data is in text format with cells delimited by tab characters and
            rows delimited by end-of-line characters. Inserts the new rows into the
            table window without overwriting existing rows, and converts the data to the
            data types of the corresponding table window columns.
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblPopulate(System.Windows.Forms.Control,PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Compiles, binds, and executes a SQL SELECT statement, then fetches the rows of the
            result set and populates a table window with them.
            </summary>
            <param name="table"></param>
            <param name="sql"></param>
            <param name="select"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblPopulate(System.Windows.Forms.Control,PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Compiles, binds, and executes a SQL SELECT statement, then fetches the rows of the
            result set and populates a table window with them.
            </summary>
            <param name="table"></param>
            <param name="sql"></param>
            <param name="select"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryContext(System.Windows.Forms.Control)">
            <summary>
            Returns a table window's current context row. Before sending a SAM_FetchRow message,
            automatically sets the context row so that assignments made while processing
            the message reference the correct row.
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryFocus(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalWindowHandle@)">
            <summary>
            Identifies the cell in a table window with the focus.
            </summary>
            <param name="table"></param>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryLinesPerRow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@)">
            <summary>
            Retrieves the height of a row in lines.
            </summary>
            <param name="table"></param>
            <param name="nLines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryLockedColumns(System.Windows.Forms.Control)">
            <summary>
            Retrieves the number of locked table window columns.
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryRowFlags(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Queries a row's flags.
            </summary>
            <param name="table"></param>
            <param name="row"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryRowHeader(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalWindowHandle@)">
            <summary>
            Gets a table window's row header definition.
            </summary>
            <param name="table"></param>
            <param name="title"></param>
            <param name="maxTitle"></param>
            <param name="width"></param>
            <param name="flags"></param>
            <param name="windowCol"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryScroll(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a table window's current scroll position and range. The scroll position is
            the row number of the row that is currently at the top of the window. You set
            the table window range with SalTblSetRange and change it when you insert
            or delete rows from the table window.
            </summary>
            <param name="table"></param>
            <param name="position"></param>
            <param name="minRange"></param>
            <param name="maxRange"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryTableFlags(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Tests the state of a table window's flags.
            </summary>
            <param name="table"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryVisibleRange(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the current range of visible rows in a table window.
            </summary>
            <param name="table"></param>
            <param name="minRange"></param>
            <param name="maxRange"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblReset(System.Windows.Forms.Control)">
            <summary>
            Clears a table window by discarding all rows from the table window cache and setting
            the table range to 0, -1.
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblScroll(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Scrolls a table window to the specified row and column.
            </summary>
            <param name="table"></param>
            <param name="row"></param>
            <param name="column"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblScroll(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Scrolls a table window to the specified row and column.
            </summary>
            <param name="table"></param>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetColumnText(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Assigns data to a column of a table window's context row.
            </summary>
            <param name="table"></param>
            <param name="columndId"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetContext(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a table window's context row. Setting the context row does not send a SAM_FetchRow
            message. If the row is not currently in memory, creates a new row
            in memory and sets its cell values to null.
            </summary>
            <param name="table"></param>
            <param name="nRow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetFlagsAnyRows(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets or clears row flags.
            </summary>
            <param name="table"></param>
            <param name="flags"></param>
            <param name="set"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetFocusCell(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the focus to the specified table window cell (row and column). Puts
            the table window into edit mode and lets the user select a portion of the data in
            the cell.
            </summary>
            <param name="table"></param>
            <param name="row"></param>
            <param name="column"></param>
            <param name="editMin"></param>
            <param name="editMax"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetFocusRow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a table window's focus frame row.
            </summary>
            <param name="table"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetLinesPerRow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the height of a row in lines.
            </summary>
            <param name="table"></param>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetLockedColumns(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the number of locked table window columns.
            </summary>
            <param name="table"></param>
            <param name="lockedColumns"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetRange(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Defines the minimum and maximum rows (range) of a table.
            </summary>
            <param name="table"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetRow(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the focus to the first, last, next, or previous row in a table window.
            </summary>
            <param name="table"></param>
            <param name="rowPosition"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetRowFlags(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears a table window row's flags.
            </summary>
            <param name="table"></param>
            <param name="row"></param>
            <param name="flags"></param>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetTableFlags(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears a table window's flags.
            </summary>
            <param name="table"></param>
            <param name="flags"></param>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSortRows(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sorts the rows of a table window based on the values in one of the
            table window's columns.
            </summary>
            <param name="table"></param>
            <param name="columnId"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblGetColumnTitle(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Gets the title of a table window column.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <param name="maxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblDefineCheckBoxColumn(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Define a column as a check box.
            </summary>
            <param name="column"></param>
            <param name="flags"></param>
            <param name="checkedValue"></param>
            <param name="uncheckedValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblDefineDropDownListColumn(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Define a column as a drop down list.
            </summary>
            <param name="column"></param>
            <param name="flags"></param>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblDefinePopupEditColumn(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Define a column as a popup edit window.
            </summary>
            <param name="column"></param>
            <param name="flags"></param>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryCheckBoxColumn(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@,PPJ.Runtime.SalString@)">
            <summary>
            If the column is defined as a check box, this function retrieves information about
            the check box and returns TRUE. If it is not a check box, this function returns
            FALSE.
            </summary>
            <param name="column"></param>
            <param name="flags"></param>
            <param name="checkedValue"></param>
            <param name="uncheckedValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryColumnCellType(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@)">
            <summary>
            Indicates whether a column is a checkbox, drop down list, popup edit, or standard
            column.
            </summary>
            <param name="column"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryColumnFlags(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Tests the state of a table window column's flags.
            </summary>
            <param name="column"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryColumnID(System.Windows.Forms.Control)">
            <summary>
            Gets a table window column's identifier.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryColumnPos(System.Windows.Forms.Control)">
            <summary>
            Gets a table window column's relative position.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryColumnWidth(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the width (in form units) of a table window column.
            </summary>
            <param name="column"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryDropDownListColumn(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            If the column is defined as a drop down list, this function retrieves information
            about the list and returns TRUE. If it is not a drop down list, this function returns
            FALSE.
            </summary>
            <param name="column"></param>
            <param name="flags"></param>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblQueryPopupEditColumn(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            If the column is defined as a popup edit, this function retrieves information about
            the popup edit and returns TRUE. If it is not a popup edit, this function returns
            FALSE.
            </summary>
            <param name="table"></param>
            <param name="column"></param>
            <param name="flags"></param>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetCellTextColor(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Changes a table window cell's text color.
            </summary>
            <param name="column"></param>
            <param name="colorValue"></param>
            <param name="discardable"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetCellTextColor(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Changes a table window cell's text color.
            </summary>
            <param name="column"></param>
            <param name="colorValue"></param>
            <param name="discardable"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetColumnFlags(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears a table window column's flags.
            </summary>
            <param name="column"></param>
            <param name="flags"></param>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetColumnPos(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a table window column to a new position.
            </summary>
            <param name="column"></param>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetColumnTitle(System.Windows.Forms.Control,PPJ.Runtime.SalString)">
            <summary>
            Sets the title of a table window column.
            </summary>
            <param name="column"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.TblSetColumnWidth(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a table window column's display width.
            </summary>
            <param name="column"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.Log(PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Appends the string to the file.
            </summary>
            <param name="fileName"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.LogLine(PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Appends the string and a new line to the file.
            </summary>
            <param name="fileName"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="F:PPJ.Runtime.Sal.m_interpreter">
            <summary>
            The single instance of the interpreter used for SalCompileAndEvaluate.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.ContextCurrent(System.Object)">
            <summary>
            Returns an instance of SalStringContext wrapping the current context reference.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.CompileAndEvaluate(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@,PPJ.Runtime.SalDateTime@,PPJ.Runtime.SalWindowHandle@,PPJ.Runtime.SalBoolean,System.Object)">
            <summary>
            Evaluates an expression and returns the expression's value in the receive parameter
            appropriate to its data type.
            </summary>
            <param name="sExpression"></param>
            <param name="nError"></param>
            <param name="nErrorPos"></param>
            <param name="returnValue"></param>
            <param name="sReturn"></param>
            <param name="dtReturn"></param>
            <param name="windowReturn"></param>
            <param name="bInhibitErrors"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.CursorClear(System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.CursorSet(System.Windows.Forms.Control,PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="resource"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.CursorSet(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="resourceId"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.CursorSetFile(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="ctrl"></param>
            <param name="fileName"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.CursorSetString(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="ctrl"></param>
            <param name="blob"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DateConstruct(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Returns the date/time constructed from the parameters year, nMonth, nDay, nHour,
            minute, and nSecond.
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DateCurrent">
            <summary>
            Returns the PC's current date/time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DateDay(PPJ.Runtime.SalDateTime)">
            <summary>
            Returns the day portion (1 to 31) of a date/time value or returns -1 if you specify
            DATETIME_Null as a parameter.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DateHour(PPJ.Runtime.SalDateTime)">
            <summary>
            Returns the hour portion (0 to 23) of a date/time value or returns -1 if you specify
            DATETIME_Null as a parameter.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DateMinute(PPJ.Runtime.SalDateTime)">
            <summary>
            Returns the minute portion (0 to 59) of a date/time value or returns -1 if you specify
            DATETIME_Null as a parameter.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DateMonth(PPJ.Runtime.SalDateTime)">
            <summary>
            Returns the month portion (1 to 12) of a date/time value or returns -1 if you specify
            DATETIME_Null as a parameter.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DateMonthBegin(PPJ.Runtime.SalDateTime)">
            <summary>
            Returns the date of the first day of the month or it returns DATETIME_Null if the
            value you specify is null. For example, if dateTime is December 25, 1992, SalDateMonthBegin
            returns December 1, 1992.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DateQuarter(PPJ.Runtime.SalDateTime)">
            <summary>
            Returns the quarter of the year (1 to 4) of a date/time value or returns -1 if you
            specify DATETIME_Null as a parameter.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DateQuarterBegin(PPJ.Runtime.SalDateTime)">
            <summary>
            Returns the date of the first day of the quarter of a date/time value or it returns
            DATETIME_Null if the value you specify is null.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DateSecond(PPJ.Runtime.SalDateTime)">
            <summary>
            Returns the seconds portion (0 to 59) of a date/time value or returns -1 if you specify
            DATETIME_Null as a parameter.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DateToStr(PPJ.Runtime.SalDateTime,PPJ.Runtime.SalString@)">
            <summary>
            Converts a date/time value to a string value.
            Returns -1 if you specify DATETIME_Null as a parameter.
            </summary>
            <param name="date"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DateWeekBegin(PPJ.Runtime.SalDateTime)">
            <summary>
            Returns the date of the previous Monday or the current day if it is a Monday or it
            returns DATETIME_Null if the value you specify is null.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DateWeekday(PPJ.Runtime.SalDateTime)">
            <summary>
            Returns the day of the week as a number between 0 and 6 or returns -1 if you specify
            DATETIME_Null as a parameter. 0 represents Saturday, 1 represents Sunday, and
            so on.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DateYear(PPJ.Runtime.SalDateTime)">
            <summary>
            Returns the year portion of a date or returns -1 if you specify DATETIME_Null as
            a parameter.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DateYearBegin(PPJ.Runtime.SalDateTime)">
            <summary>
            Returns the date of the first day of the year or it returns DATETIME_Null if the
            value you specify is null.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.StartTrace(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean)">
            <summary>
            Begins tracing.
            </summary>
            <param name="outputType"></param>
            <param name="traceFile"></param>
            <param name="clearExisting"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.EndTrace">
            <summary>
            Stops tracing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.Trace(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Outputs a string to the trace output target.
            </summary>
            <param name="severity"></param>
            <param name="textToWrite"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.UseEventLog(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalBoolean)">
            <summary>
            Enables logging of unhandled exceptions in the event log.
            </summary>
            <param name="useLog"></param>
            <param name="resume"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DragDropDisableDrop">
            <summary>
            Disables dropping while in drag mode.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.DragDropEnableDrop">
            <summary>
            Enables dropping while in drag mode.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Sal.DragDropGetSource(PPJ.Runtime.SalWindowHandle@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)" -->
        <member name="M:PPJ.Runtime.Sal.DragDropGetTarget(PPJ.Runtime.SalWindowHandle@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Retrieves the handle of the target window and the location 
            of the mouse in that window.
            </summary>
            <param name="windowTarget"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DragDropStart(System.Windows.Forms.Control)">
            <summary>
            Initiates drag mode.
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.DragDropStop">
            <summary>
            Ends drag mode.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.ActiveXAutoErrorMode(PPJ.Runtime.SalBoolean)">
            <summary>
            Turns on/off automatic COM error handling.
            </summary>
            <param name="on"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ActiveXDoVerb(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Perform one of the object's enumerated actions.
            </summary>
            <param name="verb"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.ActiveXGetObject(System.Windows.Forms.Control,PPJ.Runtime.Com.SalObject)">
            <summary>
            Returns the COM object for the specified AX control.
            </summary>
            <param name="ctrl"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Sal.MTSGetObjectContext(System.Object,PPJ.Runtime.SalNumber@)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.ValidateSet(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalBoolean,PPJ.Runtime.SalNumber)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.ContextBreak">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.FileOpenExt(PPJ.Runtime.SalFileHandle@,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.LogResource(PPJ.Runtime.SalString)">
            <summary>
            Logs the available resources to the file.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.YieldEnable(PPJ.Runtime.SalBoolean)">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.YieldQueryState">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.YieldStartMessages(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.YieldStopMessages">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.FontGetSizes(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber}@)">
            <summary>
            Not Supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sal.ResolveType(System.Reflection.Assembly,System.String)">
            <summary>
            Finds the type in any loaded assembly.
            The first specified assembly argument has the precedence.
            </summary>
            <param name="asm"></param>
            <param name="typeName"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Sal.SalReportType">
            <summary>
            Returns/Sets the type of the ISalReport implementation.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sal.Interpreter">
            <summary>
            Returns the instance of the interpreter used by SalCompileAndEvaluate.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sal.QuitException">
            <summary>
            Used to terminate the application when calling SalQuit().
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sal.AbortException">
            <summary>
            Used to exit the current call stack without terminating the application
            when calling SalAbort().
            </summary>
        </member>
        <member name="T:PPJ.Runtime.TransactionLocker">
            <summary>
            Transaction class used to lock and unlock logic
            The idea behind the locker is to remove the use of try..catch..finalize constructions in favor
            of using(new SuspendXX()) {} where suspendXX creates and returns an intance of a locker.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.DynamicBinder">
            <summary>
            This class is a fast replacement for reflection.
            
            Instead of using reflection to read/write fields and properties
            or to invoke methods, it dynamically creates IL code to
            directly access members.
            
            NOTE: Methods invocation is not yet implemented.
            
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.DynamicBinder.#ctor(System.Reflection.Emit.DynamicMethod,System.Reflection.Emit.DynamicMethod)">
            <summary>
            Cannot be instantiated directly.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.DynamicBinder.#cctor">
            <summary>
            Static constructor, creates the dynamic asembly and module once.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.DynamicBinder.Create(System.Reflection.MemberInfo)">
            <summary>
            Returns the binder for the specified FieldInfo
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.DynamicBinder.CreateBinder(System.Reflection.MemberInfo)">
            <summary>
            Creates the dynamic binder.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.DynamicBinder.BuildConst(System.Reflection.Emit.DynamicMethod,System.Reflection.FieldInfo)">
            <summary>
            Builds the method to return constants.
            </summary>
            <param name="method"></param>
            <param name="info"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.DynamicBinder.BuildGetter(System.Reflection.Emit.DynamicMethod,System.Reflection.FieldInfo)">
            <summary>
            Builds the method to read fields.
            </summary>
            <param name="method"></param>
            <param name="info"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.DynamicBinder.BuildSetter(System.Reflection.Emit.DynamicMethod,System.Reflection.FieldInfo)">
            <summary>
            Builds the mthod to write fields.
            </summary>
            <param name="method"></param>
            <param name="info"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.DynamicBinder.BuildGetter(System.Reflection.Emit.DynamicMethod,System.Reflection.PropertyInfo)">
            <summary>
            Builds the method to read the value of a property.
            It works with indexer properties too.
            </summary>
            <param name="method"></param>
            <param name="info"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.DynamicBinder.BuildSetter(System.Reflection.Emit.DynamicMethod,System.Reflection.PropertyInfo)">
            <summary>
            Builds the method to write the value of a property.
            It works for indexer properties as well.
            </summary>
            <param name="method"></param>
            <param name="info"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.DynamicBinder.BuildGetter(System.Reflection.Emit.DynamicMethod,System.Reflection.MethodInfo)">
            <summary>
            Builds the method to invoke a function and returns the value.
            It works with byref arguments as well.
            </summary>
            <param name="method"></param>
            <param name="info"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.DynamicBinder.BuildInvalidSetter(System.Reflection.Emit.DynamicMethod)">
            <summary>
            Builds an empty setter method.
            </summary>
            <param name="method"></param>
            <param name="info"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.DynamicBinder.PushArgs(System.Reflection.Emit.ILGenerator,System.Reflection.ParameterInfo[],System.Int32)">
            <summary>
            Generates code to push the object[] args parameters
            on the stack. We handle all kinds of parameters, including
            byref references and value types!
            </summary>
            <param name="il"></param>
        </member>
        <member name="T:PPJ.Runtime.Scripting.BreakException">
            <summary>
            Exception thrown to exit the parent block.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.InterpreterException">
            <summary>
            Exception thrown by the interpreter.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.ContinueException">
            <summary>
            Exception thrown to interrupt the execution flow and jump to the
            next iteration.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Env">
            <summary>
            Contains the context in which a script is running.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.#ctor">
            <summary>
            Creates and initialize a new environment
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.Reset">
            <summary>
            Cleans up everything and re-initializes the context.
            This is like calling the constructor again.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.Init">
            <summary>
            Initializes the environment
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.AddVariable(System.String,System.Type)">
            <summary>
            Adds a new null local variable to the current scope.
            </summary>
            <param name="n"></param>
            <param name="t"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.AddVariable(System.String,System.Type,System.Object)">
            <summary>
            Adds a new local variable to the current scope.
            </summary>
            <param name="n"></param>
            <param name="val"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.SetVariable(System.String,System.Type,System.Object)">
            <summary>
            Adds/Sets a local variable in the current scope.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.SaveLocalSymbol(System.String,PPJ.Runtime.Scripting.Info)">
            <summary>
            Adds/Sets a local variable in the current scope.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.DelVariable(System.String)">
            <summary>
            Removes the local variable from the current scope.
            </summary>
            <param name="n"></param>
            <param name="t"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.NewScope">
            <summary>
            Enters a new scope
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.LeaveScope">
            <summary>
            Leaves the current scope
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.AddLabeledStatement(System.String,PPJ.Runtime.Scripting.Statement)">
            <summary>
            Saves a labeled statement
            </summary>
            <param name="label"></param>
            <param name="stmt"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.GetLabeledStatement(System.String)">
            <summary>
            Retrieves a given labeled statement if it exists in the environment
            </summary>
            <param name="label">the label of the statement</param>
            <returns>a Statement</returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.AddUsingAlias(System.String,System.String)">
            <summary>
            Adds a type alias.
            </summary>
            <param name="alias"></param>
            <param name="name"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.GetUsingAlias(System.String)">
            <summary>
            Returns the alias info
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.LookupVariable(System.String)">
            <summary>
            Returns a local variable
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.LookupSymbol(System.String)">
            <summary>
            Returns the access info for a sumbol
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Env.LookupThis">
            <summary>
            Returns the access info for the keyword this.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Info">
            <summary>
            Defines the elements being interpreter
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.Call(System.Object[])">
            <summary>
            Invokes the method.
            Doesn't support byref arguments.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.Invoke(System.Object[],System.Boolean[]@)">
            <summary>
            Executes the method
            </summary>
            <param name="args"></param>
            <param name="byref"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.GetValue(System.Object[])">
            <summary>
            Reads the field or property values.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.SetValue(System.Object,System.Object[])">
            <summary>
            Saves the field or property values.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.ReadField">
            <summary>
            Reads the field value
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.ReadProperty(System.Object[])">
            <summary>
            Reads the property value
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.InvokeMethod(System.Object[],System.Boolean[]@)">
            <summary>
            Calls the method
            </summary>
            <param name="args"></param>
            <param name="byref"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.InvokeDelegate(System.Object[],System.Boolean[]@)">
            <summary>
            Calls the delegate
            </summary>
            <param name="args"></param>
            <param name="byref"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.InvokeConstructor(System.Object[],System.Boolean[]@)">
            <summary>
            Calls the constructor
            </summary>
            <param name="args"></param>
            <param name="byref"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.WriteField(System.Object)">
            <summary>
            Writes the field value
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.WriteProperty(System.Object,System.Object[])">
            <summary>
            Writes the property value
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.SelectMethod(System.Object[]@,System.Reflection.MethodInfo@)">
            <summary>
            Selects the method that best fits the arguments.
            The arguments are changed to match the selected method.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.SelectConstructor(System.Object[]@)">
            <summary>
            Selects the constructor that best fits the arguments.
            The arguments are changed to match the selected method.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.SelectProperty(System.Object[]@,System.Reflection.PropertyInfo@)">
            <summary>
            Selects the property that best fits the arguments.
            The arguments are changed to match the selected method.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.Match(System.Reflection.ParameterInfo[],System.Object[])">
            <summary>
            Returns true if the parameters match the arguments
            </summary>
            <param name="mi"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.CoerceArgs(System.Reflection.ParameterInfo[],System.Object[])">
            <summary>
            Converts the arguments to match the parameters.
            </summary>
            <param name="parameters"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.CreateDynamicBinders(System.Reflection.MemberInfo[])">
            <summary>
            Creates the JIT dynamic binder. If the member is not public, return null.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Info.IsTypeArg(System.Int32)">
            <summary>
            Returns true if the argument at the index is a Type.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Scripting.Info.Name">
            <summary>
            Returns the name of the element.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Scripting.Info.Value">
            <summary>
            Returns/Sets the value of the element
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Scripting.Info.Type">
            <summary>
            Returns the type of the value
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Scripting.Info.InfoType">
            <summary>
            Returns the type of the element.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Scripting.Info.Target">
            <summary>
            Returns/Sets the container instance.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Scripting.Info.Context">
            <summary>
            Returns/Sets the visual context that contains the element.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Scripting.Info.ReadOnly">
            <summary>
            Returns/Sets the read only flag
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.InterpretationVisitor">
            <summary>
            Main interpreter
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.InterpreterBase">
            <summary>
            Base class for the AST visitors.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.InterpretationVisitor.forBinary(PPJ.Runtime.Scripting.Binary)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <param name="inp"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.InterpretationVisitor.forSimpleName(PPJ.Runtime.Scripting.SimpleName)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="inp"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.InterpretationVisitor.ProcessCType(PPJ.Runtime.Scripting.CType)">
            <summary>
            Returns a Type from the interpreted Type string
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.InterpretationVisitor.GetIndexerName(System.Type)">
            <summary>
            Retrieves the name of the indexer property.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.InterpretationVisitor.TryCastToISalControl(System.Type)">
            <summary>
            Returns true if the type may be implementing ISalControl.
            We first eliminate all known types and return  true for everything else.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Scripting.UndefinedSymbolException">
            <summary>
            Undefined symbol exception, thrown by the interpreter when it cannot
            resolve a symbol.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.AssignmentOfDifferentTypesException">
            <summary>
            Assignment of different types exception, thrown when a value is
            assigned to an incompatible type.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.LoopVisitor">
            <summary>
            Interpterer for loop statements.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.LValueVisitor">
            <summary>
            Interpreter for left-side expressions.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.ReturnException">
            <summary>
            Used to break the current execution tree when a return statement is executed.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.SwitchVisitor">
            <summary>
            Interpreter for switch blocks.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.TryVisitor">
            <summary>
            Interpreter for try/catch blocks.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.ASTNode">
            <summary>
            Base class for all Abstract Statement Tree nodes.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Scripting.ASTNode.Loc">
            <summary>
            Returns the location of the statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.ArgumentType">
            <summary>
            Type of argument.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Argument">
            <summary>
            Argument.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.ArrayCreation">
            <summary>
            Array creation expression.
            It can also contain the array initialization.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Expression">
            <summary>
            Base class for all expression nodes.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.As">
            <summary>
            As cast expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Binary">
            <summary>
            Binary expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Assignment">
            <summary>
            Assignment expression.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Scripting.Assignment.Allowed">
            <summary>
            Allows the assignment expression to be executed inline (embedded in 
            another expression).
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.BaseAccess">
            <summary>
            Base expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.BaseIndexerAccess">
            <summary>
            Summary description for BaseIndexerAcccess.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.ClassCast">
            <summary>
            Cast expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.ComposedCast">
            <summary>
            Summary description for ComposedCast.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.CheckedExpression">
            <summary>
            Checked expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.CompoundAssignment">
            <summary>
            Compound assignment expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Conditional">
            <summary>
            Conditional expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.CType">
            <summary>
            CType expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.ElementAccess">
            <summary>
            Array element access.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.ValueExpression">
            <summary>
            Evaluated expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Invocation">
            <summary>
            Method invokation.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Is">
            <summary>
            Is expression
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.MemberAccess">
            <summary>
            Member access expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.New">
            <summary>
            New expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.ParenthesisExpr">
            <summary>
            Parenthesis expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.SimpleName">
            <summary>
            Variable reference expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.SizeOf">
            <summary>
            SizeOf expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.This">
            <summary>
            This expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.TypeOf">
            <summary>
            TypeOf expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.UnaryOperator">
            <summary>
            Unary operators.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Unary">
            <summary>
              Unary expressions.  
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.UnaryMutatorOperator">
            <summary>
            Unary operators.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.UnaryMutator">
            <summary>
            Unary operator (++, --) expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.UncheckedExpression">
            <summary>
            Unchecked expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Block">
            <summary>
            Code block.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Statement">
            <summary>
            Base class for all Statement nodes.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Break">
            <summary>
            Break statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Catch">
            <summary>
            Catch statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.CatchArgs">
            <summary>
            Arguments for the Catch statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.CheckedStatement">
            <summary>
            Checked statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Continue">
            <summary>
            Continue statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Do">
            <summary>
            Do statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.EmptyStatement">
            <summary>
            Empty statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.ExpressionStatement">
            <summary>
            Expression statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.For">
            <summary>
            For statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Foreach">
            <summary>
            ForEach statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.GotoType">
            <summary>
            Types of goto statements.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Goto">
            <summary>
            Summary description for Goto.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.If">
            <summary>
            If statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.LabeledStatement">
            <summary>
            Label statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.LocalConstDecl">
            <summary>
            Constant declaration.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.LocalVarDecl">
            <summary>
            Local variable declaration.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Lock">
            <summary>
            Lock statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Return">
            <summary>
            Return statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Switch">
            <summary>
            Switch statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.SwitchCase">
            <summary>
            Case/Default statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.SwitchSection">
            <summary>
            Statements related to one or more case statement inside a switch block.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Throw">
            <summary>
            Throw statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Try">
            <summary>
            Try statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.UncheckedStatement">
            <summary>
            Summary description for Unchecked.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Unsafe">
            <summary>
            Unsafe statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.UsingAlias">
            <summary>
            Using alias statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.UsingNamespace">
            <summary>
            Using namespace statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.UsingStatement">
            <summary>
            Using expression statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.VariableDeclaration">
            <summary>
            Variable declaration.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.While">
            <summary>
            While statement.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.CSharpParser">
            <summary>
            The C# Parser
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.IScriptParser">
            <summary>
            Parser default interface.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.IScriptParser.Parse(System.String)">
            <summary>
            Compiles the specified script source and returns the root statement node.
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.CSharpParser.#ctor">
            <summary>
            Constructs a new parser object.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.CSharpParser.yyname(System.Int32)">
            <summary>
            Index-checked interface to yyName[].
            </summary>
            <param name="token">single character or %token value.</param>
            <returns>token name or [illegal] or [unknown].</returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.CSharpParser.yyExpecting(System.Int32)">
            <summary>
            Computes list of expected tokens on error by tracing the tables.
            </summary>
            <param name="state">state for which to compute the list.</param>
            <returns>list of token names.</returns>
        </member>
        <member name="F:PPJ.Runtime.Scripting.CSharpParser.yyMax">
            <summary>
            Initial size and increment of the state/value stack [default 256].
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.CSharpParser.yyDefault(System.Object)">
            <summary>
            Executed at the beginning of a reduce action.
            Used as $$ = yyDefault($1), prior to the user-specified action, if any.
            </summary>
            <param name="first">value for $1, or null.</param>
            <returns>first</returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.CSharpParser.yyparse(PPJ.Runtime.Scripting.yyInput)">
            <summary>
            Parser function.
            Maintains a state and a value stack, currently with fixed maximum size.
            </summary>
            <param name="yyLex"></param>
            <returns>result of the last reduction, if any.</returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.CSharpParser.GetQualifiedIdentifier(PPJ.Runtime.Scripting.Expression)">
            <summary>
            Returns the complete string representation of a fully-qualified type name, hiding inside a MemberAccess.
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Scripting.CSharpParser.RootNode">
            <summary>
            Returns the root node of the parsed expression.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.yyInput">
            <summary>
            Implemented by a scanner object to supply input to the parser.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.yyInput.advance">
            <summary>
            Move on to next token.
            </summary>
            <returns>false if positioned beyond tokens.</returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.yyInput.token">
            <summary>
            Classifies the current token.
            Should not be called if advance() returned false.
            </summary>
            <returns>current %token or single character.</returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.yyInput.value">
            <summary>
            Value associated with current token.
            Should not be called if advance() returned false.
            </summary>
            <returns>value for token().</returns>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Tokenizer">
            <summary>
            Tokenizer for C# source code. 
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.Tokenizer.#cctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.Location">
            <summary>
            Location in the source code.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.ParserException">
            <summary>
            Exception thrown by the parser.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.ScriptEngine">
            <summary>
            Script interpreter.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEngine.Compile(System.String)">
            <summary>
            Compiles the script into an AST tree.
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEngine.ExecuteObject(PPJ.Runtime.Scripting.ASTNode)">
            <summary>
            Interprets the AST tree and returns the resulting object. 
            Transport Datafield metadata to ADO.Net Provider (if running IFS ADO.NET)
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEngine.Execute(PPJ.Runtime.Scripting.ASTNode)">
            <summary>
            Interprets the AST tree and returns the result value.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEngine.Execute(PPJ.Runtime.Scripting.ASTNode,System.Object)">
            <summary>
            Interprets the AST tree and returns the result value.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Scripting.ScriptEngine.Parser">
            <summary>
            Returns/Sets the parser used by the interpreter to compile the scripts.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Scripting.ScriptEngine.DefaultParserType">
            <summary>
            Returns/Sets the type for the default parser.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Scripting.ScriptEngine.AllowInlineAssignments">
            <summary>
            Returns/Sets whether inline assignments are allowed.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Scripting.ScriptEngine.Context">
            <summary>
            Returns/Sets the execution context.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Scripting.ScriptEngine.Environment">
            <summary>
            Returns the environment object bound to the interpreter.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Scripting.ScriptEnvironment">
            <summary>
            Environment manager.
            This class is in charge of resolving symbols for the interpreter.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEnvironment.#cctor">
            <summary>
            Static constructor.
            Initializes the lists of all global contexts.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEnvironment.OnAssemblyLoad(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            Loads the global symbols from assemblies as they are loaded in memory.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEnvironment.LoadApplicationGlobals(System.Reflection.Assembly)">
            <summary>
            Loads the global scopes from the assembly.
            </summary>
            <param name="asm"></param>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEnvironment.LoadSystemGlobals(System.Reflection.Assembly)">
            <summary>
            Ensures that all the systems' global containers are loaded.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEnvironment.LookupThis">
            <summary>
            Returns the access info for "this"
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEnvironment.LookupSymbol(System.String)">
            <summary>
            Searches the symbol in all the valid contexts.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEnvironment.LookupInGlobals(System.String)">
            <summary>
            Searches the symbol in all global contexts.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEnvironment.LookupInContext(System.String)">
            <summary>
            Searches the member in the current context in the following orders:
            
            	1. Saved Context
            	2. Current SqlContext
            </summary>
            <param name="context"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEnvironment.LookupInSqlContext(PPJ.Runtime.Sql.SqlContext,System.String)">
            <summary>
            Searches the member in the specified SqlContext.
            </summary>
            <param name="context"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEnvironment.LookupInContainer(System.Object,System.String)">
            <summary>
            Searches the member in the specified container object.
            </summary>
            <param name="container"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEnvironment.LookupInControl(System.Windows.Forms.Control,System.String)">
            <summary>
            Searches the member in the specified control.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Scripting.ScriptEnvironment.LookupMemberInternal(System.Object,System.String,System.Reflection.MemberTypes)">
            <summary>
            Searches the member in the given context object.
            </summary>
            <param name="context"></param>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Scripting.ScriptEnvironment.Context">
            <summary>
            Returns/Sets the primary context to be used when resolving root-level
            bind variables.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Sys">
            <summary>
            Global class containing all the system variables and constants required by
            the migrated SAL application.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.AC_Dynamic">
            <summary>
            Specify this constant with Sal.ArraySetUpperBound to change a const array to a dynamic array. Value = 2147483648
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CF_Text">
            <summary>
            This constant represents the format value returned by a call to Sal.DDEExtractOptions. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CM_TableCell">
            <summary>
            Specify this in Sal.ContextMenuSetPopup to replace the default menu that Windows displays when the mouse pointer is in an editable table window cell. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_CheckBox_IgnoreCase">
            <summary>
            Used on check box columns to indicate that it should ignore the case of the checked and unchecked strings.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_DropDownList_Sorted">
            <summary>
            Column flags used to define drop down columns.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_CellType_Standard">
            <summary>
            TableWindow cell types.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_GetID">
            <summary>
            This table column flag indicates that you want to get a column based on its identifier.
            Use this constant with the Sal.TblGetColumnWindow function. 1 is the first column in the application outline. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_GetPos">
            <summary>
            This table column flag indicates that you want to get a column based on its position in the table window.
            Use this constant with the Sal.TblGetColumnWindow function. 1 is the first (left-most) column in the table window. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_Editable">
            <summary>
            This table column flag lets users edit the text of a table window column.
            Use this constant with the Sal.TblSetColumnFlags and Sal.TblQueryColumnFlags functions. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_IndicateOverflow">
            <summary>
            This table column flag fills a table window cell with the overflow character ("#") when the text does not fit in the cell.
            Use this constant with the Sal.TblSetColumnFlags and Sal.TblQueryColumnFlags functions. Value = 0x1000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_RightJustify">
            <summary>
            This table column flag right-justifies text in a column. If this flag is set, you cannot also set the COL_CenterJustify flag at the same time. 
            If you set neither COL_RightJustify nor COL_CenterJustify, then left-justifies the column text by default. 
            Use this constant with the Sal.TblSetColumnFlags and Sal.TblQueryColumnFlags functions. Value = 0x80
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_CenterJustify">
            <summary>
            This table column flag indicates that you want to center text in a table window column. 
            If this flag is set, you cannot also set the COL_CenterJustify flag at the same time. 
            If you set neither COL_RightJustify nor COL_CenterJustify, then it left-justifies the column text by default. 
            Use this constant with the Sal.TblSetColumnFlags and Sal.TblQueryColumnFlags functions. Value = 0x100
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_Selected">
            <summary>
            This table column flag indicates that a column is selected. 
            Use this constant with the Sal.TblSetColumnFlags and Sal.TblQueryColumnFlags functions. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_Visible">
            <summary>
            This table column flag indicates that a column is visible. 
            Use this constant with the Sal.TblSetColumnFlags and Sal.TblQueryColumnFlags functions. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_Invisible">
            <summary>
            This table column flag indicates that a column is used to edit a password. 
            Use this constant with the Sal.TblSetColumnFlags and Sal.TblQueryColumnFlags functions. Value = 16
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_DimTitle">
            <summary>
            This table column flag indicates that a column title is show as disabled text. 
            Use this constant with the Sal.TblSetColumnFlags and Sal.TblQueryColumnFlags functions. Value = 32
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_ReadOnly">
            <summary>
            This table column flag indicates that the column cell is read only. 
            Use this constant with the Sal.TblSetColumnFlags and Sal.TblQueryColumnFlags functions. Value = 0x0200
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_UpperCase">
            <summary>
            This table column flag indicates that the cell format is uppercase. 
            Use this constant with the Sal.TblSetColumnFlags and Sal.TblQueryColumnFlags functions. Value = 0x0400
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_LowerCase">
            <summary>
            This table column flag indicates that the cell format is lowercase. 
            Use this constant with the Sal.TblSetColumnFlags and Sal.TblQueryColumnFlags functions. Value = 0x0800
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COL_MultilineCell">
            <summary>
            This constant is used to define a column as a multiline column.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COLOR_3DFace">
            <summary>
            The color of the window background (sometimes called the "button face" color). The default is light gray. 
            However, a user can change the color of the window background by selecting a different color scheme. 
            Specify this to make the color of the window background consistent with the color scheme set by the user. 
            Use this constant with Sal.ColorGet and Sal.ColorSet. Value = 0x70000000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COLOR_3DHighlight">
            <summary>
            The color of highlighted areas. The default is white. 
            However, the user can change the color of highlighted areas by selecting a different color scheme. 
            Specify this to make the color of highlighted areas consistent with the color scheme set by the user. 
            Use this constant with Sal.ColorGet and Sal.ColorSet. Value = 0x90000000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COLOR_3DShadow">
            <summary>
            The color of shadow areas. The default is dark gray. 
            However, a user can change the color of shadow areas by selecting a different color scheme. 
            Specify this to make the color of shadow areas consistent with the color scheme set by the user. 
            Use this constant with Sal.ColorGet and Sal.ColorSet. Value = 0x80000000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COLOR_IndexCell">
            <summary>
            This constant refers to the cell background color of the context row in a table window column. 
            (You cannot set the color of the cell text in the Property window). 
            Use this constant with the Sal.ColorGet and Sal.ColorSet functions. Value = 108
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COLOR_IndexCellText">
            <summary>
            This constant refers to the cell text color of the context row in a table window column. 
            (You cannot set the color of the cell text in the Property window). 
            Use this constant with the Sal.ColorGet and Sal.ColorSet functions. Value = 100
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COLOR_IndexTransparent">
            <summary>
            This constant refers to the transparent color in a picture or push button bitmap. 
            For example, assume you have a push button that contains a bitmap that is blue, red, and green. 
            If you set COLOR_IndexTransparent to COLOR_Blue, the blue portions of the bitmap become transparent; 
            this allows the color of the form window underneath the push button to show through. 
            Use this constant with the Sal.ColorGet and Sal.ColorSet functions. Value = 101
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COLOR_IndexWindow">
            <summary>
            This constant refers to the window's background color. 
            Use this constant with the Sal.ColorGet, Sal.ColorGetSysColor, and Sal.ColorSet functions. Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COLOR_IndexWindowText">
            <summary>
            This constant refers to the window's text color. 
            Use this constant with the Sal.ColorGet, Sal.ColorGetSysColor, and Sal.ColorSet functions. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COLOR_Black">
            <summary>
            Known colors
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COLOR_None">
            <summary>
            This constant means that the transparent color has not been set. 
            Sal.ColorGet can return this constant, and you can specify this constant in Sal.ColorSet. Value = 0x60000000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COLOR_SysWindow">
            <summary>
            This constant refers to the window's background color. 
            Use this constant with the Sal.ColorGetSysColor function. Value = 0x10000000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COLOR_SysWindowFrame">
            <summary>
            This constant refers to the color of the window's frame. 
            Use this constant with the Sal.ColorGetSysColor function. Value = 0x50000000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.COLOR_SysWindowText">
            <summary>
            This constant refers to the color of the window's text. 
            Use this constant with the Sal.ColorGetSysColor function. Value = 0x20000000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CURSOR_Arrow">
            <summary>
            The standard arrow cursor. Use this constant with the Sal.CursorSet function.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CURSOR_Cross">
            <summary>
            A crosshair cursor. Use this constant with the Sal.CursorSet function.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CURSOR_DisableDrop">
            <summary>
            The cursor that displays when in drag mode and drop is disabled. 
            Use this constant with the Sal.CursorSet and Sal.CursorSetFile functions. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CURSOR_DragDrop">
            <summary>
            The cursor that displays when in drag mode and drop is enabled. 
            Use this constant with the Sal.CursorSet and Sal.CursorSetFile functions. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CURSOR_IBeam">
            <summary>
            A text (I-beam) cursor. Use this constant with the Sal.CursorSet function.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CURSOR_Icon">
            <summary>
            An empty icon. Use this constant with the Sal.CursorSet function.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CURSOR_Size">
            <summary>
            A cursor that looks like a square with a smaller square in its lower right corner. 
            Use this constant with the Sal.CursorSet function.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CURSOR_SizeNESW">
            <summary>
            A double-pointed cursor with arrows pointing northeast and southwest. 
            Use this constant with the Sal.CursorSet function.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CURSOR_SizeNS">
            <summary>
            A double-pointed cursor with arrows pointing north and south. 
            Use this constant with the Sal.CursorSet function.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CURSOR_SizeNWSE">
            <summary>
            A double-pointed cursor with arrows pointing northwest and southeast. 
            Use this constant with the Sal.CursorSet function.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CURSOR_SizeWE">
            <summary>
            A double-pointed cursor with arrows pointing west and east. 
            Use this constant with the Sal.CursorSet function.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CURSOR_UpArrow">
            <summary>
            A vertical arrow cursor. Use this constant with the Sal.CursorSet function.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CURSOR_Wait">
            <summary>
            An hourglass cursor. Use this constant with the Sal.CursorSet function.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CURSOR_Window">
            <summary>
            The cursor that displays when positioned over a window and drag mode is not enabled. 
            Use this constant with the Sal.CursorSet and Sal.CursorSetFile functions. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBP_AUTOCOMMIT">
            <summary>
            Use this constant to either get or set the value of a database parameter indicating the current autocommit status of the database. 
            If autocommit is on (TRUE), the database commits changes automatically after each SQL command. 
            If autocommit is off (FALSE), then the database commits changes only when you issue a COMMIT command. 
            Use this constant with the Sql.GetParameter, and Sql.SetParameter functions. 
            You can only use DBP_AUTOCOMMIT with databases which support this feature. Please refer to the appropriate database manuals for more information. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBP_BRAND">
            <summary>
            Use this constant to obtain the brand of the database engine. 
            Brand is represented by the numeric value of one of these constants: DBV_BRAND_ALLBASE 10 DBV_BRAND_AS400 7 DBV_BRAND_CINCOMSUPRA 20 DBV_BRAND_DB2 2
            DBV_BRAND_INFORMIX 5 DBV_BRAND_INFORMIXONLINE 24 DBV_BRAND_NETWARE 6 DBV_BRAND_ORACLE 4 DBV_BRAND_ORACLE7 28 DBV_BRAND_OS2EE 3 DBV_BRAND_SQL 1
            DBV_BRAND_SYBASE 8 Use this constant with the Sql.GetParameter. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBP_FETCHTHROUGH">
            <summary>
            Use this constant to either get or set the status of a database parameter indicating the current status of the FETCHTHROUGH feature. 
            FETCHTHROUGH enables you to retrieve rows directly from the database server instead of from the client's input message buffer,
            thereby ensuring that you get the most up-to-date data. If FETCHTHROUGH is on (TRUE), the application fetches data one row at a time from the backend. 
            Using this feature increases response time, so you should only use this feature when you need to get the most up-to-date information.
            If FETCHTHROUGH is off (FALSE), the application fetches data from the client's input message buffer whenever possible. 
            This is the default. Use this constant with the Sql.GetParameter, and Sql.SetParameter, functions. 
            You can only use this feature against SQLBase. Value = 7
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBP_LOCKWAITTIMEOUT">
            <summary>
            Use this constant to either get or set the value of a database parameter which specifies the number of seconds 
            an application should wait for a database lock to be acquired before timing out. After the specified time has elapsed, 
            SQLBase rolls back the transaction. The default timeout value is 300 seconds. 
            Valid time out values are: 1-1800 Wait 1 second to 30 minutes -1 Wait forever 0 Never wait; immediately return a time out error.
            Use this constant with the Sql.GetParameter and Sql.SetParameter functions. 
            You can only use this constant against databases which support the setting of lock wait timeout values. 
            Please refer to the appropriate database manuals for more information. Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBP_NOPREBUILD">
            <summary>
            Use this constant to either get or set the value of a database parameter which specifies whether result sets should be pre-built
            on remote databases when the application is in result set mode and is using the Release Locks isolation level. 
            Pre-building a result set provides the advantages of being able to release shared locks and returning control to the client. 
            The disadvantage of pre-building a result set is that the application must wait while the result set is being built. 
            If NOPREBUILD is on (TRUE), result sets are not pre-built. A shared lock remains on the current page. This is the default setting. 
            If NOPREBUILD is off (FALSE), result sets are pre-built on the remote database.
            Use this constant with the Sql.GetParameter and Sql.SetParameter functions. You can only use this feature against SQLBase. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBP_ISOLEVEL">
            <summary>
            Isolation level: RR,RL,CS,RO,SE
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBP_PRESERVE">
            <summary>
            Use this constant to get or set the value of the database parameter that specifies whether cursor context preservation is on or off.
            If cursor-context preservation is on (TRUE), a COMMIT does not destroy an active result set (cursor context). 
            This enables an application to maintain its position after a COMMIT, INSERT, or UPDATE. The cursor context is not preserved after an isolation level change. 
            The context is preserved after a ROLLBACK if both of the following are true: The application is in the Release Locks (RL) isolation level. 
            A DDL operation was not performed. If cursor-context preservation is off (FALSE), a COMMIT does destroy an active result set. 
            Cursor context preservation is lost. Use this constant with the Sql.GetParameter, and Sql.SetParameter functions. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBP_ROLLBACKONTIMEOUT">
            <summary>
            Use this constant to either get or set the value of a database parameter which specifies the rollback status when a lock timeout occurs. 
            If the parameter is TRUE, the entire transaction rolls back when a lock timeout occurs. 
            If it is FALSE, only the current command rolls back on a lock timeout. Use this constant with the Sql.GetParameter, and Sql.SetParameter. 
            The rollbackontimeout feature can only be used against some databases. Please see the appropriate database manuals for more information. Value = 6
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBP_VERSION">
            <summary>
            Use this constant to get the version number of the server software. Use this constant with the Sql.GetParameter function. Value = 4
            </summary>		
        </member>
        <member name="F:PPJ.Runtime.Sys.SQLERROR_Reason">
            <summary>
            When calling Sql.ErrorText, set the nType parameter to this constant to retrieve the error reason.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SQLERROR_Remedy">
            <summary>
            When calling Sql.ErrorText, set the nType parameter to this constant to retrieve the error remedy.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_ALLBASE">
            <summary>
            DBV_BRAND_ALLBASE means that the application is accessing an ALLBASE database. Value = 10
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_APPLEDAL">
            <summary>
            DBV_BRAND_APPLEDAL means that the application is using an Apple DAL Interface. Value = 22
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_AS400">
            <summary>
            DBV_BRAND_AS400 means that the application is accessing an AS/400 database. Value = 7
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_CCAMODEL20">
            <summary>
            DBV_BRAND_CCAMODEL20 means that the application is accessing a CCA Model 204 database. Value = 21
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_CINCOMSUPRA">
            <summary>
            DBV_BRAND_CINCOMSUPRA means that the application is accessing a Cincom Supra database. Value = 20
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_DB2">
            <summary>
            DBV_BRAND_DB2 means that the application is accessing a DB2 database. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_DBASE">
            <summary>
            DBV_BRAND_DBASE means that the application is accessing a DBASE database. Value = 17
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_EDASQL">
            <summary>
            DBV_BRAND_EDASQL means that the application is accessing a Sybase database. Value = 25
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_IMBSQLDS">
            <summary>
            DBV_BRAND_IMBSQLDS means that the application is accessing a IBM SQL/DS database. Value = 13
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_INFORMIX">
            <summary>
            DBV_BRAND_INFORMIX means that the application is accessing an Informix database. Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_INFORMIXONLINE">
            <summary>
            DBV_BRAND_INFORMIXONLINE means that the application is accessing an Informix Online database. Value = 24
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_INGRES">
            <summary>
            DBV_BRAND_INGRES means that the application is accessing a INGRES database. Value = 15
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_INGRESSOPENSQL">
            <summary>
            DBV_BRAND_INGRESSOPENSQL means that the application is accessing a Ingres OpenSQL database. Value = 29
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_INGRESSOPENSQLD">
            <summary>
            DBV_BRAND_INGRESSOPENSQLD means that the application is accessing a Ingres OpenSQL database with date support. Value = 30
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_NETWARE">
            <summary>
            DBV_BRAND_NETWARE means that the application is accessing a Novell NetWare database. Value = 6
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_NOCOMMIMER">
            <summary>
            DBV_BRAND_NOCOMMIMER means that the application is accessing a Nocom Mimer database. Value = 27
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_MSSQL">
            <summary>
            DBV_BRAND_NOCOMMIMER means that the application is accessing a Nocom Mimer database. Value = 102
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_NONSTOPSQL">
            <summary>
            This constant is returned by Sql.GetParameter when you specify DBP_BRAND means that the application is accessing a Tandem Nonstop SQL database. Value = 12
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_ODBC">
            <summary>
            DBV_BRAND_ODBC means that the application is accessing a database using an ODBC Router. Value = 31
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_ORACLE7">
            <summary>
            DBV_BRAND_ORACLE7 means that the application is accessing an Oracle v. 7 database. Value = 28
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_ORACLE8">
            <summary>
            DBV_BRAND_ORACLE8 means that the application is accessing an Oracle v. 8 database.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_ORACLE">
            <summary>
            DBV_BRAND_ORACLE means that the application is accessing an Oracle database. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_OS2EE">
            <summary>
            DBV_BRAND_OS2EE means that the application is accessing an IBM Database Manager database. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_RDB">
            <summary>
            This constant is returned by Sql.GetParameter when you specify DBP_BRAND CST_DBV_BRAND_RDB means that the application is accessing a DEC RDB database. Value = 11
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_RDBII">
            <summary>
            DBV_BRAND_RDBII means that the application is accessing a Fujitsu RDBII database. Value = 19
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_SHAREBASE">
            <summary>
            DBV_BRAND_SHAREBASE means that the application is accessing a Teradata Sharebase database. Value = 23
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_SNIDDB4">
            <summary>
            DBV_BRAND_SNIDDB4 means that the application is accessing a SNI DDB4 database. Value = 18
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_SNISESAM">
            <summary>
            DBV_BRAND_SNISESAM means that the application is accessing a SNI SESAM database. Value = 14
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_SNIUDS">
            <summary>
            DBV_BRAND_SNIUDS means that the application is accessing a SNI UDS database. Value = 26
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_SQLACCESS">
            <summary>
            DBV_BRAND_SQLACCESS means that the application is accessing a SQL Access database. Value = 16
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_SQL">
            <summary>
            DBV_BRAND_SQL means that the application is accessing a SQLBase database. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_SQLHOSTAPP">
            <summary>
            DBV_BRAND_SQLHOSTAPP means that the application using SQLHOST App Services. Value = 99
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_SYBASE">
            <summary>
            DBV_BRAND_SYBASE means that the application is accessing a Sybase database. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_SYSTEM10">
            <summary>
            Sql.GetParameter returns this constant when you specify DBP_BRAND and are accessing a Sybase System 10 database. Value = 32
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DBV_BRAND_TERADATA">
            <summary>
            DBV_BRAND_TERADATA means that the application is accessing a Teradata dbc database. Value = 9
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DRIVE_Floppy">
            <summary>
            DRIVE_* constants
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DDE_fAck">
            <summary>
            DDE status bits
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DT_Boolean">
            <summary>
            This constant is returned by the Sal.GetDataType function. It indicates that the field or table window column is of type Boolean. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DT_DateTime">
            <summary>
            This constant is returned by the Sal.GetDataType function. It indicates that the field or table window column is of type Date/Time. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DT_LongString">
            <summary>
            This constant is returned by the Sal.GetDataType function. It indicates that the field or table window column is of type Long String. Value = 7
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DT_Number">
            <summary>
            This constant is returned by the Sal.GetDataType function. It indicates that the field or table window column is of type Number. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DT_String">
            <summary>
            This constant is returned by the Sal.GetDataType function. It indicates that the field or table window column is of type String. Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DW_Default">
            <summary>
            This constant is returned by the Sal.GetMaxDataLength function when a data field, multiline text field, or table window column
            is declared with a length of "Default". Value = -1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.EVAL_Date">
            <summary>
            This constant is returned by the Sal.CompileAndEvaluate function when the data type of an expression evaluates to Date/Time. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.EVAL_Handle">
            <summary>
            This constant is returned by the Sal.CompileAndEvaluate function when the data type of an expression evaluates to Window Handle. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.EVAL_If">
            <summary>
            This constant is returned by the Sal.CompileAndEvaluate function when the data type of an expression evaluates to an If statement. Value = 100
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.EVAL_Number">
            <summary>
            This constant is returned by the Sal.CompileAndEvaluate function when the data type of an expression evaluates to Number. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.EVAL_Set">
            <summary>
            This constant is returned by the Sal.CompileAndEvaluate function when the data type of an expression evaluates to a SET expression. Value = 99
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.EVAL_String">
            <summary>
            This constant is returned by the Sal.CompileAndEvaluate function when the data type of an expression evaluates to String. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.EVAL_Template">
            <summary>
            This constant is returned by the Sal.CompileAndEvaluate function when the data type of an expression evaluates to Template. Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.EVAL_Object">
            <summary>
            One of the File Access constants used by the Sal.ListFiles function to define the type of files to retrieve and place in a list box.
            FA_Archive specifies that should retrieve only archived files. 
            This constant can be OR'd together with any of the other File Access (FA_*) constants to retrieve a variety of file types at the same time. Value = 32
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FA_Archive">
            <summary>
            This constant is returned by the SAl.CompileAndEvaluate function when the data type of an expression evaluates to an object. Value = 7
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FA_Directory">
            <summary>
            One of the File Access constants used by the Sal.ListFiles function to define the type of files to retrieve and place in a list box. 
            FA_Directory specifies that should retrieve only sub-directories within the specified directory. 
            This constant can be OR'd together with any of the other File Access (FA_*) constants to retrieve a variety of file types at the same time. Value = 16
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FA_Drive">
            <summary>
            One of the File Access constants used by the Sal.ListFiles function to define the type of files to retrieve and place in a list box. 
            FA_Drive specifies that should retrieve a list of drives to which the machine is currently connected. 
            This constant can be OR'd together with any of the other File Access (FA_*) constants to retrieve a variety of file types at the same time. Value = 0x4000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FA_Exclusive">
            <summary>
            One of the File Access constants used by the Sal.ListFiles function to define the type of files to retrieve and place in a list box. 
            FA_Exclusive specifies that should retrieve only files of the specified type. 
            If you do not specify FA_Exclusive, files of the specified type and FA_Standard files are listed with normal files. 
            This constant can be OR'd together with any of the other File Access (FA_*) constants to retrieve a variety of file types at the same time. Value = 0x8000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FA_Hidden">
            <summary>
            One of the File Access constants used by the Sal.ListFiles function to define the type of files to retrieve and place in a list box. 
            FA_Hidden specifies that should retrieve all hidden files in the specified directory. 
            This constant can be OR'd together with any of the other File Access (FA_*) constants to retrieve a variety of file types at the same time. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FA_Queued">
            <summary>
            One of the File Access constants used by the Sal.ListFiles function to define the type of files to retrieve and place in a list box. 
            FA_Queued specifies that should retrieve queued files (such as those to be printed) in the specified directory. 
            This constant can be OR'd together with any of the other File Access (FA_*) constants to retrieve a variety of file types at the same time. Value = 0x2000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FA_ReadOnly">
            <summary>
            One of the File Access constants used by the Sal.ListFiles function to define the type of files to retrieve and place in a list box. 
            FA_ReadOnly specifies that should retrieve only read-only files in the specified directory. 
            This constant can be OR'd together with any of the other File Access (FA_*) constants to retrieve a variety of file types at the same time. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FA_Standard">
            <summary>
            One of the File Access constants used by the Sal.ListFiles function to define the type of files to retrieve and place in a list box. 
            FA_Standard specifies that should retrieve all read/write files in the specified directory. 
            This constant can be OR'd together with any of the other File Access (FA_*) constants to retrieve a variety of file types at the same time. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FA_System">
            <summary>
            One of the File Access constants used by the Sal.ListFiles function to define the type of files to retrieve and place in a list box. 
            FA_System specifies that should retrieve all system files in the specified directory. 
            This constant can be OR'd together with any of the other File Access (FA_*) constants to retrieve a variety of file types at the same time. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FETCH_Delete">
            <summary>
            This constant is returned to one of the SqlFetch* functions to indicate a failure in fetching the requested row. 
            Could not fetch the row because it had been deleted from the query set since it was last fetched. 
            Use this constant with the Sql.FetchNext, Sql.FetchPrevious, and Sql.FetchRow functions. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FETCH_EOF">
            <summary>
            This constant is returned to one of the SqlFetch* functions to indicate a failure in fetching the requested row. 
            Could not fetch the row because it reached the end of the query set. 
            Use this constant with the Sql.FetchNext, Sql.FetchPrevious, and Sql.FetchRow functions. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FETCH_Ok">
            <summary>
            This constant is returned to one of the SqlFetch* functions to indicate that the requested row was successfully fetched from the query set. 
            Use this constant with the Sql.FetchNext, Sql.FetchPrevious, and Sql.FetchRow functions. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FETCH_Update">
            <summary>
            This constant is returned to one of the SqlFetch* functions to indicate a failure in fetching the requested row. 
            Could not fetch the row because it had been updated since it was last fetched. 
            Use this constant with the Sql.FetchNext, Sql.FetchPrevious, and Sql.FetchRow functions. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FILE_CopyDest">
            <summary>
            This constant is returned when the Sal.FileCopy function fails because it can not open the destination file. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FILE_CopyExist">
            <summary>
            This constant is returned when the Sal.FileCopy function fails because the destination file already exists and the bOverWrite parameter is FALSE. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FILE_CopyOK">
            <summary>
            This constant is returned when the Sal.FileCopy function successfully copies the contents of the source file to the destination file. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FILE_CopyRead">
            <summary>
            This constant is returned when the Sal.FileCopy function fails while reading the source file. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FILE_CopySrc">
            <summary>
            This constant is returned when the Sal.FileCopy function fails because the source file can not be opened. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FILE_CopyWrite">
            <summary>
            This constant is returned when the Sal.FileCopy function fails while writing to the destination file. Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FILE_SeekBegin">
            <summary>
            Use this constant with the Sal.FileSeek function to position the file pointer at the beginning of a file. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FILE_SeekCurrent">
            <summary>
            Use this constant with the Sal.FileSeek function to position the file pointer at its current location in the file. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FILE_SeekEnd">
            <summary>
            Use this constant with the Sal.FileSeek function to position the file pointer at the end of the file. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Date_JapanEmperor">
            <summary>
            This constant is one of four possible integer format parameter values for a field. 
            When the constant specifying which integer format parameter to get or set is FMT_Parm_iDateType, the integer format parameter value of a field can be
            FMT_Date_JapanEmperor. To use the JapanEmperor format, add a [GTITOOLS] section to WIN.INI, and set sDateType to JapanEmperor. 
            In addition, set the sCountry parameter in the [INTL] section of WIN.INI to "Japan". Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Date_JapanGregorian">
            <summary>
            This constant is one of four possible integer format parameter values for a field. When the constant specifying which integer format parameter to get
            or set is FMT_Parm_iDateType, the integer format parameter value of a field can be FMT_Date_JapanGregorian. 
            To use the JapanGregorian format, add a [GTITOOLS] section to WIN.INI, and set sDateType to JapanGregorian. 
            In addition, set the sCountry parameter in the [INTL] section of WIN.INI to "Japan". Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Date_LongGregorian">
            <summary>
            This constant is one of four possible integer format parameter values for a field. 
            When the constant specifying which integer format parameter to get or set is FMT_Parm_iDateType, the integer format parameter value of a field can be
            FMT_Date_LongGregorian. To use the LongGregorian format, add a [GTITOOLS] section to WIN.INI, and set sDateType to LongGregorian. 
            This defaults to the format set by FMT_Parm_sLongDate. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Date_ShortGregorian">
            <summary>
            This constant is one of four possible integer format parameter values for a field. 
            When the constant specifying which integer format parameter to get or set is FMT_Parm_iDateType, the integer format parameter value of a field can be
            FMT_Date_ShortGregorian. To use the ShortGregorian format, add a [GTITOOLS] section to WIN.INI, and set sDateType to ShortGregorian. 
            This defaults to the format set by FMT_Parm_sShortDate. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Format_Currency">
            <summary>
            This constant is used to get or set the format of a data field or table window column. 
            The format of a field or column must agree with its data type, so this constant can only be returned by or applied to a number field. 
            This constant is returned by the function Sal.FmtGetFormat when the format of a field or column is set to currency, 
            and it is used by the function Sal.FmtSetFormat to set a field or column's format to currency. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Format_Date">
            <summary>
            Use this constant to get or set the format of a data field or table window column. 
            The format of a field or column must agree with its data type, so this constant can only be returned by or applied to a date field. 
            This constant is returned by the function Sal.FmtGetFormat when the format of a field or column is set to date, 
            and it is used by the function Sal.FmtSetFormat to set a field or column's format to date. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Format_DateTime">
            <summary>
            Use this constant to get or set the format of a data field or table window column. 
            The format of a field or column must agree with its data type, so this constant can only be returned by or applied to a date/time field. 
            This constant is returned by the function Sal.FmtGetFormat when the format of a field or column is set to date/time, and it is used by the function
            Sal.FmtSetFormat to set a field or column's format to date/time. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Format_Decimal">
            <summary>
            Use this constant to get or set the format of a data field or table window column. 
            The format of a field or column must agree with its data type, so this constant can only be returned by or applied to a number field. 
            This constant is returned by the function Sal.FmtGetFormat when the format of a field or column is set to decimal, and it is used by the function
            Sal.FmtSetFormat to set a field or column's format to decimal. Value = 4		
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Format_Invisible">
            <summary>
            Use this constant to get or set the format of a data field or table window column. 
            The format of a field or column must agree with its data type, so this constant can only be returned by or applied to a string field. 
            This constant is returned by the function Sal.FmtGetFormat when the format of a field or column is set to invisible, and it is used by the function
            Sal.FmtSetFormat to set a field or column's format to invisible. Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Format_LowerCase">
            <summary>
            Use this constant to get or set the format of a data field or table window column. 
            The format of a field or column must agree with its data type, so this constant can only be returned by or applied to a string field. 
            This constant is returned by the function Sal.FmtGetFormat when the format of a field or column is set to lowercase,
            and it is used by the function Sal.FmtSetFormat to set a field or column's format to lowercase. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Format_Percentage">
            <summary>
            Use this constant to get or set the format of a data field or table window column. 
            The format of a field or column must agree with its data type, so this constant can only be returned by or applied to a number field. 
            This constant is returned by the function Sal.FmtGetFormat when the format of a field or column is set to percentage,
            and it is used by the function Sal.FmtSetFormat to set a field or column's format to percentage. Value = 6
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Format_Picture">
            <summary>
            Use this constant to get or set the format of a data field or table window column. 
            The format of a field or column must agree with its data type, so this constant can only be returned by or applied to a field or column
            of number or date/time data type. 
            This constant is returned by the function Sal.FmtGetFormat when a field or column has been picture-formatted, 
            and it is used by the function Sal.FmtSetFormat to set a field or column to be picture-formatted. Value = -1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Format_Time">
            <summary>
            Use this constant to get or set the format of a data field or table window column. The format of a field or column must agree with its data type, 
            so this constant can only be returned by or applied to a time field. 
            This constant is returned by the function Sal.FmtGetFormat when the format of a field or column is set to time, 
            and it is used by the function Sal.FmtSetFormat to set a field or column's format to time. Value = 7
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Format_Unformatted">
            <summary>
            Use this constant to get or set the format of a data field or table window column of any data type. 
            This constant is returned by the function Sal.FmtGetFormat when the format of a field or column is set to unformatted, 
            and it is used by the function Sal.FmtSetFormat to set a field or column's format to unformatted. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Format_UpperCase">
            <summary>
            Use this constant to get or set the format of a data field or table window column. 
            The format of a field or column must agree with its data type, so this constant can only be returned by or applied to a string field. 
            This constant is returned by the function Sal.FmtGetFormat when the format of the field or column is set to uppercase, 
            and it is used by the function Sal.FmtSetFormat to set a field or column's format to uppercase. Value = 9
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_iCurrDigits">
            <summary>
            Use this constant to obtain and define a field's profile-driven format. 
            It represents the number of digits in the fractional part of a currency amount. Value = 17
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_iCurrency">
            <summary>
            Use this constant to obtain and define a field's profile-driven format. When you specify FMT_Parm_iCurrency, 
            the integer format parameter value of a field can be one of the following: 
            FMT_Prefix_NoSeparation FMT_Suffix_NoSeparation FMT_Prefix_Separation FMT_Suffix_Separation Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_iDateType">
            <summary>
            Use this constant to obtain and define a field's profile-driven format. 
            When you specify FMT_Parm_iDateType, the integer format parameter value of a field can be one of the following: 
            FMT_Date_LongGregorian FMT_Date_ShortGregorian FMT_Date_JapanGregorian FMT_Date_JapanEmperor Value = 13
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_iDigits">
            <summary>
            Use this constant to obtain and define a field's profile-driven format. 
            It represents the number of significant digits to the right of a number's decimal point. 
            When you specify FMT_Parm_iDigits, the integer format parameter value of a field is the number of digits. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_iLzero">
            <summary>
            Use this constant to obtain and define a field's profile-driven format. 
            It indicates whether or not to use a leading zero with decimal values less than 1.0 and greater than -1.0. 
            When you specify FMT_Parm_iLzero, the integer format parameter value of a field can be one of the following: 
            0 indicates no leading zero (.7) 1 indicates a leading zero (0.7) Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_iNegCurr">
            <summary>
            Use this constant to obtain and define a field's profile-driven format. It represents the negative currency format. 
            When you specify FMT_Parm_iNegCurr, the integer format parameter value of a field can be one of the following: 
            0 for ($1) 1 for -$1 2 for $-1 3 for $1- 4 for (1$) 5 for -1$ 6 for 1-$ 7 for 1$- Value = 18
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_iTime">
            <summary>
            Use this constant to obtain and define a field's profile-driven format. 
            It represents the time format. When you specify FMT_Parm_iTime, the integer format parameter value of a field can be one of the following:
            FMT_Time_12Hour FMT_Time_24Hour Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_iTLZero">
            <summary>
            Use this constant to obtain and define a field's profile driven format. 
            It indicates whether or not hours have a leading zero. 
            When you specify FMT_Parm_iTLZero, the integer format parameter value of a field can be 0, meaning that there is no leading zero. Value = 16
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_s1159">
            <summary>
            Use this constant to obtain and define a field's profile-driven format. 
            It represents the trailing string for times between 0:00 and 11:59 A.M. 
            When you specify FMT_Parm_s1159, the string format parameter value can have a length of up to 3 characters. Value = 6
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_s2359">
            <summary>
            Use this constant to obtain and define a field's profile-driven format. 
            It represents the trailing string for times between 12:00 and 23:59 P.M. 
            When you specify FMT_Parm_s2359, the string format parameter value can have a length of up to 3 characters. Value = 7
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_sCurrency">
            <summary>
            Use this constant to obtain and define a field's profile-driven format. 
            It represents the currency symbol for a given country. 
            When you specify FMT_Parm_sCurrency, the string format parameter value can have a length of up to 40 characters. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_sDecimal">
            <summary>
            Use this constant to obtain and define a field's profile-driven format. 
            It represents the symbol that separates the integer and fractional parts of a number. Value = 10
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_sLongDate">
            <summary>
            Use this constant to obtain and define a field's profile-driven format. 
            It represents a long date picture format such as d MMM, yyyy. Value = 15
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_sShortDate">
            <summary>
            Use this constant to obtain and define a field's profile-driven format. 
            It represents a short date picture format such as M/d/yy. Value = 14
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_sThousand">
            <summary>
            Use this constant to obtain and define a field's profile-driven format. 
            It represents the thousands separator character. Value = 11
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Parm_sTime">
            <summary>
            Use this constant to obtain and define a field's profile-driven format. 
            It represents the time separator character. For instance, (:) is the separator in (9:25). Value = 12
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Pic_DateTime">
            <summary>
            This constant specifies that the picture format to validate is a date/time picture format. 
            Use FMT_Pic_DateTime with the Sal.FmtIsValidPicture function. Value = 1 
            Valid date/time picture format values: Value Item Appearance M month 1-12 MM month 01-12 MMM month Jan-Dec MMMM month January-December d day 1-31
            dd day 01-31 ddd day Mon-Sun dddd day Monday-Sunday yy year 00-99 yyyy year 0000-9999 hh hour 1-12 hhhh hour 0-24 mm minutes 0-59 ss seconds 0-59 mmmmmm
            microseconds 000000-999999 AMPM AM/PM The AM/PM indicator
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Pic_Number">
            <summary>
            This constant specifies that the picture format to validate is a number picture format. 
            Use FMT_Pic_Number with the Sal.FmtIsValidPicture function. Value = 2 
            Valid number formats are: # Specifies the number of optional digits on both sides of the decimal point. 
            0 Specifies the number of decimal places to the right of the decimal point, and the minimum digits to the left of the decimal point. 
            . Indicates the position of the decimal point. , Specifies the thousands separator when nested between 0's or #'s. 
            ; Specifies that there are two picture formats. 
            The picture format to the left of the (;) is used to format positive values, and the picture format to the right of the (;) is used to format negative values.
            % Specifies percentage format. E+ e+ E- e- Specifies scientific notation format. By specifying a (-), only negative numbers are displayed with a sign.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Prefix_NoSeparation">
            <summary>
            This constant is one of four possible integer format parameter values for a field whose integer format parameter
            is specified by the constant FMT_Parm_iCurrency. It defines the way in which formats a currency value. 
            If you specify this constant, a number (for example: 1) to be formatted as currency appears as: $1. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Prefix_Separation">
            <summary>
            This constant is one of four possible integer format parameter values for a field whose integer format parameter 
            is specified by the constant FMT_Parm_iCurrency. It defines the way in which formats a currency value. 
            If you specify this constant, a number (for example: 1) to be formatted as currency appears as: $ 1. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Profile_Program">
            <summary>
            This constant represents a special profile whose settings determine a field's format. 
            It allows an application to individually specify each field's format. Value = -1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Profile_Default">
            <summary>
            This constant represents the system default profile maintained in the WIN.INI file. 
            The settings associated with the system default profile determine a field's format. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Suffix_NoSeparation">
            <summary>
            This constant is one of four possible integer format parameter values for a field whose integer format parameter
            is specified by the constant FMT_iCurrency. It defines the way in which formats a currency value. 
            If you specify this constant, a number (for example: 1) to be formatted as currency appears as: 1$. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Suffix_Separation">
            <summary>
            This constant is one of four possible integer format parameter values for a field whose integer format parameter
            is specified by the constant FMT_iCurrency. It defines the way in which formats a currency value. 
            If you specify this constant, a number (for example: 1) to be formatted as currency appears as: 1 $. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Time_12Hour">
            <summary>
            This constant is one of two possible integer format parameter values for a field whose integer format parameter
            is specified by the constant FMT_Parm_iTime. It defines a time value to display in the format of a 12 hour clock. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Time_24Hour">
            <summary>
            This constant is one of two possible integer format parameter values for a field whose integer format parameter
            is specified by the constant FMT_Parm_iTime. It defines a time value to display in the format of a 24 hour clock. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Validate_Dialog">
            <summary>
            This constant directs to display a dialog box if a format error occurs during a call to Sal.FmtValidateField. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FMT_Validate_None">
            <summary>
            This constant directs not to display a dialog box if a format error occurs during a call to Sal.FmtValidateField.
            Instead, the application handles the error. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FONT_EnhBold">
            <summary>
            This is a font enhancement constant which instructs to bold the specified window's text. 
            You can combine FONT_EnhBold with other font enhancement constants using the OR (|) operator. 
            Use this constant with the Sal.FontGet and Sal.FontSet functions. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FONT_EnhDefault">
            <summary>
            This is a font enhancement constant which indicates that the specified window's text should conform to the current default settings. 
            You can combine FONT_EnhDefault with other font enhancement constants using the OR (|) operator. 
            Use this constant with the Sal.FontGet and Sal.FontSet functions. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FONT_EnhItalic">
            <summary>
            This is a font enhancement constant which instructs to italicize the specified window's text. 
            You can combine FONT_EnhItalic with other font enhancement constants using the OR (|) operator. 
            Use this constant with the Sal.FontGet and Sal.FontSet functions. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FONT_EnhNormal">
            <summary>
            This is a font enhancement constant which indicates that there are no enhancements to add to the text in the specified window. 
            Use this constant with the Sal.FontGet and Sal.FontSet functions. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FONT_EnhStrikeOut">
            <summary>
            This is a font enhancement constant which instructs to strike out the specified window's text. 
            You can combine FONT_EnhStrikeOut with other font enhancement constants using the OR (|) operator. 
            Use this constant with the Sal.FontGet and Sal.FontSet functions. Value = 16
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FONT_EnhUnderline">
            <summary>
            This is a font enhancement constant which instructs to underline the specified window's text. 
            You can combine FONT_EnhUnderline with other font enhancement constants using the OR (|) operator. 
            Use this constant with the Sal.FontGet and Sal.FontSet functions. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FONT_GetPrinter">
            <summary>
            Use this constant to obtain either a list of available printer fonts or a list of available printer font sizes for a given font. 
            Use this constant with the Sal.FontGetNames and Sal.FontGetSizes functions. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FONT_GetScreen">
            <summary>
            Use this constant to obtain either a list of available screen font names or a list of available screen font sizes. 
            Use this constant with the Sal.FontGetNames and Sal.FontGetSizes functions. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FORM_nFormHeight">
            <summary>
            This constant represents the integer form parameter for the height of a given form window. 
            It is used by the function Sal.FormGetParmNum. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FORM_nFormPages">
            <summary>
            This constant represents the integer form parameter for the number of pages in a given form window. 
            It is used by the function Sal.FormGetParmNum. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.FORM_nFormWidth">
            <summary>
            This constant represents the integer form parameter for the width of a given form window. 
            It is used by the function Sal.FormGetParmNum. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.HELP_Context">
            <summary>
            The Sal.WinHelp function uses this constant to display context sensitive help on the topic 
            associated with the context identifier number in the nData parameter. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.HELP_Finder">
            <summary>
            The Sal.WinHelp function uses this constant to bring up the help Find Dialog. Value = 0x000B
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.HELP_HelpOnHelp">
            <summary>
            The Sal.WinHelp function uses this constant to display information on the Windows Help System itself. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.HELP_Index">
            <summary>
            The Sal.WinHelp function uses this constant to display the index of available Help topics. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.HELP_Key">
            <summary>
            The Sal.WinHelp function uses this constant to display a list of available Help topics for the keywords
            specified in the parameter sData. Value = 0x101
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.HELP_Quit">
            <summary>
            The Sal.WinHelp function uses this constant to quit the Windows Help System that is currently open and in use. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.HELP_SetIndex">
            <summary>
            The Sal.WinHelp function uses this constant to set the current index for a multi-index help system. Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.IDABORT">
            <summary>
            This constant is returned by the Sal.MessageBox function when you click on the Abort push button
            in an Abort/Retry/Ignore message box (MB_AbortRetryIgnore). Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.IDCANCEL">
            <summary>
            This constant is returned by the Sal.MessageBox function when you click on the Cancel push button
            in an OK/Cancel message box (MB_OkCancel), a Retry/Cancel message box (MB_RetryCancel) or a Yes/No/Cancel message box (MB_YesNoCancel). Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.IDIGNORE">
            <summary>
            This constant is returned by the Sal.MessageBox function when you click on the Ignore push button
            of an Abort/Retry/Ignore message box (MB_AbortRetryIgnore). Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.IDNO">
            <summary>
            This constant is returned by the Sal.MessageBox function when you click on the No push button
            of a Yes/No message box (MB_YesNo) or a Yes/No/Cancel message box (MB_YesNoCancel). Value = 7
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.IDOK">
            <summary>
            This constant is returned by the Sal.MessageBox function when you click on the Ok push button
            of an Ok message box (MB_Ok) or an Ok/Cancel message box (MB_OkCancel). Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.IDRETRY">
            <summary>
            This constant is returned by the Sal.MessageBox function when you click on the Retry push button
            of a Retry/Cancel message box (MB_RetryCancel) or an Abort/Retry/Ignore message box (MB_AbortRetryIgnore). Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.IDYES">
            <summary>
            This constant is returned by the Sal.MessageBox function when you click on the Yes push button 
            of a Yes/No message box (MB_YesNo) or a Yes/No/Cancel message box (MB_YesNoCancel). Value = 6
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.LB_Err">
            <summary>
            This constant is returned by a Sal.List* function call when a user error occurs. 
            It is used by the functions: Sal.ListAdd, Sal.ListDelete, Sal.ListInsert, Sal.ListQueryCount, Sal.ListQueryMultiCount, 
            Sal.ListQuerySelection, Sal.ListQueryText, Sal.ListQueryTextLength, Sal.ListSelectString. Value = -1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.LB_ErrSpace">
            <summary>
            This constant is returned when insufficient memory is available to store a new string in a list box. 
            Use this constant with the Sal.ListAdd and Sal.ListInsert functions. Value = -2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.LB_Ok">
            <summary>
            LB_Ok is returned by a Sal.List* function that completes successfully. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MAX_DefaultDataField">
            <summary>
            This constant represents the default length of a data field (100 characters). Value = 100
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MAX_DefaultMultiline">
            <summary>
            This constant represents the default length of a multiline text field (1000 characters). Value = 1000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_AbortRetryIgnore">
            <summary>
            This is a Push Button style constant used by the Sal.MessageBox function to define the type of push buttons to display in the message box. 
            Specifying MB_AbortRetryIgnore causes the message box to display three push buttons: Abort, Retry, and Ignore. 
            You can combine a Push Button style constant with a constant from the Icon style, Response Button Handling style, 
            and System style constant groups (all of which are also named MB_*) using the OR (|) operator. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_ApplModal">
            <summary>
            This is a System style constant used by the Sal.MessageBox function to display a dialog box that suspends the application's windows
            until you respond appropriately. You can combine a System style constant with a constant from the Icon style, 
            Response Button Handling style, and Push Button style constant groups (all of which are also named MB_*) using the OR (|) operator. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_DefButton1">
            <summary>
            This is a Response Button Handling style constant used by the Sal.MessageBox function to specify that the first button
            (usually Ok) has the focus when the dialog box displays. You can combine a Response Button Handling style constant with a constant from the Icon style, 
            System Options style, and Push Button style constant groups (all of which are also named MB_*) using the OR (|) operator. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_DefButton2">
            <summary>
            This is a Response Button Handling style constant used by the Sal.MessageBox function to specify that the second button
            has the focus when the dialog box displays. You can combine a Response Button Handling style constant with a constant from the Icon style,
            System Options style, and Push Button style constant groups (all of which are also named MB_*) using the OR (|) operator. Value = 0x100
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_DefButton3">
            <summary>
            This is a Response Button Handling style constant used by the Sal.MessageBox function to specify
            that the third button has the focus when the dialog box displays. You can combine a Response Button Handling style constant with a constant
            from the Icon style, System Options style, and Push Button style constant groups (all of which are also named MB_*) using the OR (|) operator. Value = 0x200
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_IconAsterisk">
            <summary>
            This is an icon style constant used by the Sal.MessageBox function to display an "i" (for information) icon in the message box. 
            You can combine an icon style constant with a constant from the push button style, default button style, 
            and modal style constant groups (all of which are also named MB_*) using the OR (|) operator. Value = 64
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_IconInformation">
            <summary>
            This is an icon style constant used by the Sal.MessageBox function to display an "i" (for information) icon in the message box. 
            You can combine an icon style constant with a constant from the push button style, default button style, 
            and modal style constant groups (all of which are also named MB_*) using the OR (|) operator. Value = 64
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_IconExclamation">
            <summary>
            This is an icon style constant used by the Sal.MessageBox function to display an exclamation point icon in the message box. 
            You can combine an icon style constant with a constant from the push button style, default button style, 
            and modal style constant groups (all of which are also named MB_*) using the OR (|) operator. Value = 48
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_IconHand">
            <summary>
            Supports MB_IconHand for backward compatibility; use MB_IconStop instead.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_IconQuestion">
            <summary>
            This is an icon style constant used by the Sal.MessageBox function to display a question mark icon in the message box. 
            You can combine an icon style constant with a constant from the push button style, default button style, 
            and modal style constant groups (all of which are also named MB_*) using the OR (|) operator. Value = 32
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_IconStop">
            <summary>
            This is an icon style constant used by the Sal.MessageBox function to display a stop sign icon in the message box. 
            You can combine an icon style constant with a constant from the push button style, default button style, 
            and modal style constant groups (all of which are also named MB_*) using the OR (|) operator. Value = 16
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_NoFocus">
            <summary>
            The underlying Windows feature for this style is no longer supported by Microsoft. 
            This style does nothing and is provided for backward compatibility only. Value = 0x8000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_Ok">
            <summary>
            This is a push button style constant used by the Sal.MessageBox function to display an Ok push button in the message box. 
            This is the default assignment. You can combine a push button style constant with a constant from the icon style, default button style, 
            and modal style constant groups (all of which are also named MB_*) using the OR (|) operator. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_OkCancel">
            <summary>
            This is a Push Button style constant used by the Sal.MessageBox function to specify that both an Ok and a Cancel push button display in the message box. 
            You can combine a Push Button style constant with a constant from the Icon style, Response Button Handling style, 
            and System style constant groups (all of which are also named MB_*) using the OR (|) operator. 
            See Sal.MessageBox Options and Sal.MessageBox Returns for more information. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_RetryCancel">
            <summary>
            This is a Push Button style constant used by the Sal.MessageBox function to specify that both a Retry and a Cancel push button display in the message box. 
            You can combine a Push Button style constant with a constant from the Icon style, Response Button Handling style, 
            and System style constant groups (all of which are also named MB_*) using the OR (|) operator. Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_SystemModal">
            <summary>
            This is a System style constant used by the Sal.MessageBox function to display a dialog box that suspends 
            ALL application windows until you respond appropriately. You can combine a System style constant with a constant from the Icon style, 
            Response Button Handling style, and Push Button style constant groups (all of which are also named MB_*) using the OR (|) operator. Value = 0x1000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_YesNo">
            <summary>
            This is a Push Button style constant used by the Sal.MessageBox function to specify that both a Yes and a No push button display in the message box. 
            You can combine a Push Button style constant with a constant from the Icon style, 
            Response Button Handling style, and System style constant groups (all of which are also named MB_*) using the OR (|) operator. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.MB_YesNoCancel">
            <summary>
            This is a Push Button style constant used by the Sal.MessageBox function to define the type of push buttons to display in the message box. 
            Specifying MB_YesNoCancel causes the message box to display three push buttons: Yes, No, and Cancel. 
            You can combine a Push Button style constant with a constant from the Icon style, Response Button Handling style, 
            and System style constant groups (all of which are also named MB_*) using the OR (|) operator. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Text">
            <summary>
            This constant instructs to open a file in text mode. Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Binary">
            <summary>
            This constant instructs to open a file in binary mode. 
            Default translations of carriage return/line feed combinations are suppressed. 
            Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 0x10000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Unicode">
            <summary>
            This constant instructs to open a file in unicode mode. 
            Default translations of carriage return/line feed combinations are suppressed. Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_UTF7">
            <summary>
            This constant instructs to open a file in UTF7 mode. 
            Default translations of carriage return/line feed combinations are suppressed. Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_UTF8">
            <summary>
            This constant instructs to open a file in UTF8 mode. 
            Default translations of carriage return/line feed combinations are suppressed. Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_UTF16">
            <summary>
            This constant instructs to open a file in UTF16 mode. 		
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Create">
            <summary>
            This constant instructs to create a new file. 
            If one already exists, it is truncated to zero length. Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 0x1000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Exist">
            <summary>
            This constant instructs to open and then close a file. 
            Use it to test if a file exists. Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 0x4000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Parse">
            <summary>
            This constant prepares to open a file by parsing the file specifications, but carries out no action. 
            Use it if you need to verify a file specification without actually opening the file. Use this constant
            with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 0x100
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Delete">
            <summary>
            This constant instructs to delete a file. Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 0x200
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Read">
            <summary>
            This constant instructs to open a file for reading only. Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Write">
            <summary>
            This constant instructs to open a file for writing only. Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_ReadWrite">
            <summary>
            This constant instructs to open a file for reading and writing. Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Append">
            <summary>
            This constant instructs to open a file for appending. The file pointer is positioned at the end of the file. 
            You can combine File Open style constants using the bitwise OR (|) operator. Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_ReadAppend">
            <summary>
            This constant instructs to open a file for reading and appending of new data. 
            The file pointer is positioned at the end of the file so that you can read/write the opened file. 
            Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Reopen">
            <summary>
            Use this constant only with the Sal.FileOpenExt function to instruct to open a file using the name specified in a previous Sal.FileOpen call. 
            You must have previously opened the file with a legitimate file name and used the same file handle. 
            When first opens the file, it stores the full path name internally. 
            The purpose of the OF_Reopen constant is to guarantee that subsequent opens of the file use this fully qualified name, 
            regardless of whether directories and drives have changed since the original Sal.FileOpen. Value = 0x8000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Share_Compat">
            <summary>
            This constant instructs to open a file in compatibility mode. This lets any computer open a file any number of times. 
            Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Share_Deny_None">
            <summary>
            This constant instructs to open a file without denying other applications read and write access to it. 
            Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 64
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Share_Deny_Read">
            <summary>
            This constant instructs to open a file and deny other applications read access to it. 
            Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 48
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Share_Deny_Write">
            <summary>
            This constant instructs to open a file, denying other applications write access to it. 
            Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 32
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.OF_Share_Exclusive">
            <summary>
            This constant instructs to open a file, denying other applications read and write access to it. 
            Use this constant with the Sal.FileOpen and Sal.FileOpenExt functions. Value = 16
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PIC_FitBestFit">
            <summary>
            Use this constant with the Sal.PicSetFit function to set the fit for a picture. 
            PIC_FitBestFit causes the image to fit either the width or height of the window. 
            Scaling is proportional and the image is not distorted. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PIC_FitScale">
            <summary>
            Use this constant with the Sal.PicSetFit function to set the fit for a picture. 
            PIC_FitScale scales the image by the percentages specified in nScaleWidth and nScaleHeight. 
            Scaling may not be proportional and the image might be distorted. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PIC_FitSizeToFit">
            <summary>
            Use this constant with the Sal.PicSetFit function to set the fit for a picture. 
            PIC_FitSizeToFit stretches or shrinks the image to fit within the picture frame. 
            This is not proportional scaling and might distort the image. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PIC_FormatBitmap">
            <summary>
            Use this constant with the Sal.PicSetString, Sal.PicGetString, and Sal.PicSet functions to set the contents of a picture from a string. 
            PIC_FormatBitmap means that the picture is a bitmap. 
            You can also use this constant with Sal.PicSetHandle to set the image in a picture window with the handle of a bitmap. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PIC_FormatIcon">
            <summary>
            Use this constant with the Sal.PicSetString and Sal.PicSet functions to set the contents of a picture from a string. 
            PIC_FormatIcon means that the picture is an icon. 
            You can also use this constant with Sal.PicSetHandle to set the image in a picture window with the handle of an icon. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PIC_FormatObject">
            <summary>
            Use this constant with the Sal.PicSetString and Sal.PicGetString functions to set the contents of a picture from a string. 
            PIC_FormatObject means that the picture is an OLE object. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PIC_ImageTypeNone">
            <summary>
            Use this constant with the Sal.PicSetImage and Sal.PicGetImage functions to set the contents of a picture without the CTD image header. 
            PIC_ImageTypeNone means that the picture has no type. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PIC_ImageTypeBMP">
            <summary>
            Use this constant with the Sal.PicSetImage and Sal.PicGetImage functions to set the contents of a picture without the CTD image header. 
            PIC_ImageTypeBMP means that the picture is a .BMP. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PIC_ImageTypeICON">
            <summary>
            Use this constant with the Sal.PicSetImage function to set the contents of a picture without the CTD image header. 
            PIC_ImageTypeICON means that the picture type is .ICON. Note: This constant is not supported for Sal.PicGetImage. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PIC_ImageTypeWMF">
            <summary>
            Use this constant with the Sal.PicSetImage and Sal.PicGetImage functions to set the contents of a picture without the CTD image header. 
            PIC_ImageTypeWMF means that the picture type is .WMF. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PIC_ImageTypeTIFF">
            <summary>
            Use this constant with the Sal.PicSetImage and Sal.PicGetImage functions to set the contents of a picture without the CTD image header. 
            PIC_ImageTypeTIFF means that the picture type is .TIFF. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PIC_ImageTypePCX">
            <summary>
            Use this constant with the Sal.PicSetImage and Sal.PicGetImage functions to set the contents of a picture without the CTD image header. 
            PIC_ImageTypePCX means that the picture type is .PCX. Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PIC_ImageTypeGIF">
            <summary>
            Use this constant with the Sal.PicSetImage and Sal.PicGetImage functions to set the contents of a picture without the CTD image header. 
            PIC_ImageTypeGIF means that the picture type is .GIF. Value = 6
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PIC_ImageTypeJPEG">
            <summary>
            Use this constant with the Sal.PicSetImage and Sal.PicGetImage functions to set the contents of a picture without the CTD image header. 
            PIC_ImageTypeJPEG means that the picture type is JPEG. Value = 7
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PIC_ImageTypeNuVEQ">
            <summary>
            Use this constant with the Sal.PicSetImage and Sal.PicGetImage functions to set the contents of a picture without the CTD image header. 
            PIC_ImageTypeNuVEQ means that the picture type is NuVEQ. Note: This type is supported in Japan. 
            It is also supported if you have an ImageMan license. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PLATFORM_Current">
            <summary>
            An  application interrogates its runtime environment to determine whether it is running on Microsoft Windows. 
            An application may want to check the value of PLATFORM_Current if it has code paths
            that it will or will not execute depending on the operating system it is running on. 
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PLATFORM_Solaris">
            <summary>
            This constant identifies the operating system on which an application is running as SunSoft's Solaris. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PLATFORM_Windows">
            <summary>
            This constant identifies the operating system on which an application is running as Microsoft Windows. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PRT_nCopyCount">
            <summary>
            Use this constant to get and set the number of copies to print. The default setting is 1. 
            Use this constant with the Sal.PrtGetParmNum, Sal.PrtSetParmNum, and Sal.PrtSetParmDefaults functions. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PRT_nDraftMode">
            <summary>
            Use this constant to get and set the print mode to either Draft or Proof. 
            Draft mode prints faster than Proof mode, but with lower resolution. The default setting is Draft. 
            Use this constant with the Sal.PrtGetParmNum, Sal.PrtSetParmNum, and Sal.PrtSetParmDefaults functions. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PRT_nFromPage">
            <summary>
            This constant gets and sets the first page to print. The default starting page number is 1. 
            Use this constant with the Sal.PrtGetParmNum, Sal.PrtSetParmNum, and Sal.PrtSetParmDefaults functions. Value = 7
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PRT_nMarginLeft">
            <summary>
            This constant gets and sets the left margin. The default left margin is 0. 
            Use this constant with the Sal.PrtGetParmNum, Sal.PrtSetParmNum, and Sal.PrtSetParmDefaults functions. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PRT_nMarginTop">
            <summary>
            This constant gets and sets the top margin. The default left margin is 0. 
            Use this constant with the Sal.PrtGetParmNum, Sal.PrtSetParmNum, and Sal.PrtSetParmDefaults functions. Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PRT_nPrintAll">
            <summary>
            Use this constant to determine or specify whether all pages of a form are to print. 
            It overrides PRT_nFromPage and PRT_nToPage settings. 
            Use this constant with the Sal.PrtGetParmNum, Sal.PrtSetParmNum, and Sal.PrtSetParmDefaults functions. Value = 6
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PRT_nShowFormPageRect">
            <summary>
            Use this constant to determine or specify whether a rectangle is drawn around the printed form using the form size. 
            The default setting for this constant is FALSE. 
            Use this constant with the Sal.PrtGetParmNum, Sal.PrtSetParmNum, and Sal.PrtSetParmDefaults functions. Value = 9
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.PRT_nToPage">
            <summary>
            This constant gets and sets the last page to print. The default ending page number is 1. 
            Use this constant with the Sal.PrtGetParmNum, Sal.PrtSetParmNum, and Sal.PrtSetParmDefaults functions. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.ROW_Edited">
            <summary>
            This flag indicates that a row was edited. 
            ROW_Edited is returned or used by a number of table window row functions to set or determine the current status of a row. 
            You can combine ROW_* flags using the OR (|) operator. Use with the functions: 
            Sal.TblAnyRows, Sal.TblCopyRows, Sal.TblFindNextRow, Sal.TblFindPrevRow, SalTblQueryRowFlags, Sal.TblSetFlagsAnyRows, Sal.TblSetRowFlags. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.ROW_Hidden">
            <summary>
            This flag indicates that a row is hidden from view. 
            ROW_Hidden is returned or used by a number of table window row functions to set or determine the current status of a row. 
            You can combine ROW_* flags using the OR (|) operator. Use with the functions: 
            Sal.TblAnyRows, Sal.TblCopyRows, Sal.TblFindNextRow, Sal.TblFindPrevRow, Sal.TblQueryRowFlags, Sal.TblSetFlagsAnyRows, Sal.TblSetRowFlags. Value = 0x2000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.ROW_HideMarks">
            <summary>
            This flag indicates that the row's editing marks (in the row header) are hidden from view. 
            ROW_HideMarks is returned or used by a number of table window row functions to set or determine the current status of a row.
            You can combine ROW_* flags using the OR (|) operator. Use with the functions: 
            Sal.TblAnyRows, Sal.TblCopyRows, Sal.TblFindNextRow, Sal.TblFindPrevRow, Sal.TblQueryRowFlags, Sal.TblSetFlagsAnyRows, Sal.TblSetRowFlags. Value = 64
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.ROW_MarkDeleted">
            <summary>
            This flag indicates that the row is marked for deletion. 
            ROW_MarkDeleted is returned or used by a number of table window row functions to set or determine the current status of a row.
            You can combine ROW_* flags using the OR (|) operator. Use with the functions: 
            Sal.TblAnyRows, Sal.TblCopyRows, Sal.TblFindNextRow, Sal.TblFindPrevRow, Sal.TblQueryRowFlags, Sal.TblSetFlagsAnyRows, Sal.TblSetRowFlags. Value = 32
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.ROW_New">
            <summary>
            This flag indicates that the row has been newly inserted. 
            ROW_New is returned or used by a number of table window row functions to set or determine the current status of a row. 
            You can combine ROW_* flags using the OR (|) operator. Use with the functions: 
            Sal.TblAnyRows, Sal.TblCopyRows, Sal.TblFindNextRow, Sal.TblFindPrevRow, Sal.TblQueryRowFlags, Sal.TblSetFlagsAnyRows, Sal.TblSetRowFlags. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.ROW_Selected">
            <summary>
            This flag indicates that the row is selected. 
            ROW_Selected is returned or used by a number of table window row functions to set or determine the current status of a row. 
            You can combine ROW_* flags using the OR (|) operator. Use with the functions: 
            Sal.TblAnyRows, Sal.TblCopyRows, Sal.TblFindNextRow, Sal.TblFindPrevRow, Sal.TblQueryRowFlags, Sal.TblSetFlagsAnyRows, Sal.TblSetRowFlags. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.ROW_UnusedFlag1">
            <summary>
            This flag is available for your application to use. 
            ROW_UnusedFlag1 can be returned or used by a number of table window row functions to set or determine the current status of a row.
            You can combine ROW_* flags using the OR (|) operator. Use with the functions: 
            Sal.TblAnyRows, Sal.TblCopyRows, Sal.TblFindNextRow, Sal.TblFindPrevRow, Sal.TblQueryRowFlags, Sal.TblSetFlagsAnyRows, Sal.TblSetRowFlags. Value = 0x80
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.ROW_UnusedFlag2">
            <summary>
            This flag is available for your application to use. 
            ROW_UnusedFlag2 can be returned or used by a number of table window row functions to set or determine the current status of a row. 
            You can combine ROW_* flags using the OR (|) operator. Use with the functions: 
            Sal.TblAnyRows, Sal.TblCopyRows, Sal.TblFindNextRow, Sal.TblFindPrevRow, Sal.TblQueryRowFlags, Sal.TblSetFlagsAnyRows, Sal.TblSetRowFlags. Value = 0x100
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakFooter1">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. 
            The SAM_ReportNotify message is send when a part of a report is ready to be formated. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakFooter1 through RPT_BeforeBreakFooter8 are after a report's detail block. Value = 14
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakFooter2">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. 
            The SAM_ReportNotify message is send when a part of a report is ready to be formated. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakFooter1 through RPT_BeforeBreakFooter8 are after a report's detail block. Value = 15
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakFooter3">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when a part of a report is ready to be formatted. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakFooter1 through RPT_BeforeBreakFooter8 are after a report's detail block. Value = 16
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakFooter4">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when a part of a report is ready to be formatted. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakFooter1 through RPT_BeforeBreakFooter8 are after a report's detail block. Value = 17
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakFooter5">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when a part of a report is ready to be formatted. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakFooter1 through RPT_BeforeBreakFooter8 are after a report's detail block. Value = 18
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakFooter6">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when a part of a report is ready to be formatted. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakFooter1 through RPT_BeforeBreakFooter8 are after a report's detail block. Value = 19
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakFooter7">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when a part of a report is ready to be formatted. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakFooter1 through RPT_BeforeBreakFooter8 are after a report's detail block. Value = 20
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakFooter8">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when a part of a report is ready to be formatted. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakFooter1 through RPT_BeforeBreakFooter8 are after a report's detail block. Value = 21
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakHeader1">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when a part of a report is ready to be formatted. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakHeader1 through RPT_BeforeBreakHeader8 are before a report's detail block. Value = 6
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakHeader2">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when a part of a report is ready to be formatted. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakHeader1 through RPT_BeforeBreakHeader8 are before a report's detail block. Value = 7
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakHeader3">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when a part of a report is ready to be formatted. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakHeader1 through RPT_BeforeBreakHeader8 are before a report's detail block. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakHeader4">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when a part of a report is ready to be formatted. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakHeader1 through RPT_BeforeBreakHeader8 are before a report's detail block. Value = 9
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakHeader5">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when a part of a report is ready to be formatted. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakHeader1 through RPT_BeforeBreakHeader8 are before a report's detail block. Value = 10
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakHeader6">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when a part of a report is ready to be formatted. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakHeader1 through RPT_BeforeBreakHeader8 are before a report's detail block. Value = 11
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakHeader7">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when a part of a report is ready to be formatted. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakHeader1 through RPT_BeforeBreakHeader8 are before a report's detail block. Value = 12
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeBreakHeader8">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when a part of a report is ready to be formatted. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeBreakHeader1 through RPT_BeforeBreakHeader8 are before a report's detail block. Value = 13
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeDetail">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when a part of a report is ready to be processed. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforeDetail indicates it is ready to process the detail block. Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforePageFooter">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message when a part of a report is ready to be processed. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforePageFooter indicates that it is ready to process the bottom of a page. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforePageHeader">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message when a part of a report is ready to be processed. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforePageHeader indicates that it is ready to process the top of a page. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeReportFooter">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message when a part of a report is ready to be processed. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforePageHeader indicates that it is ready to process the top of a page. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_BeforeReportHeader">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message when a part of a report is ready to be processed. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_BeforePageHeader indicates that it is ready to process the top of a page. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakFooter1">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakFooter1 through RPT_DoneBreakFooter8 are after a report's detail block. Value = 56
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakFooter2">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakFooter1 through RPT_DoneBreakFooter8 are after a report's detail block. Value = 57
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakFooter3">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakFooter1 through RPT_DoneBreakFooter8 are after a report's detail block. Value = 58
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakFooter4">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakFooter1 through RPT_DoneBreakFooter8 are after a report's detail block. Value = 59
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakFooter5">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakFooter1 through RPT_DoneBreakFooter8 are after a report's detail block. Value = 60
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakFooter6">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakFooter1 through RPT_DoneBreakFooter8 are after a report's detail block. Value = 61
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakFooter7">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakFooter1 through RPT_DoneBreakFooter8 are after a report's detail block. Value = 62
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakFooter8">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakFooter1 through RPT_DoneBreakFooter8 are after a report's detail block. Value = 63
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakHeader1">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakHeader1 through RPT_DoneBreakHeader8 are before a report's detail block. Value = 48
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakHeader2">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakHeader1 through RPT_DoneBreakHeader8 are before a report's detail block. Value = 49
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakHeader3">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakHeader1 through RPT_DoneBreakHeader8 are before a report's detail block. Value = 50
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakHeader4">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakHeader1 through RPT_DoneBreakHeader8 are before a report's detail block. Value = 51
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakHeader5">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakHeader1 through RPT_DoneBreakHeader8 are before a report's detail block. Value = 52
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakHeader6">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakHeader1 through RPT_DoneBreakHeader8 are before a report's detail block. Value = 53
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakHeader7">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakHeader1 through RPT_DoneBreakHeader8 are before a report's detail block. Value = 54
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneBreakHeader8">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneBreakHeader1 through RPT_DoneBreakHeader8 are before a report's detail block. Value = 55
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneDetail">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneDetail indicates that the detail block has just been processed. Value = 47
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DonePageFooter">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DonePageFooter indicates that it has just processed the bottom of a page. Value = 44
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DonePageHeader">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DonePageHeader indicates that it has just processed the top of a page. Value = 43
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneReportFooter">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneReportFooter indicates that it has processed the end of the report. Value = 46
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_DoneReportHeader">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when the formatting of a part of a report is finished. 
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report has just been processed. 
            RPT_DoneReportHeader indicates that it has completed processing the beginning of the report. Value = 45
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakFooter1">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakFooter1 through RPT_OutputBreakFooter8 are after a report's detail block. Value = 35
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakFooter2">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakFooter1 through RPT_OutputBreakFooter8 are after a report's detail block. Value = 36
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakFooter3">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakFooter1 through RPT_OutputBreakFooter8 are after a report's detail block. Value = 37
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakFooter4">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakFooter1 through RPT_OutputBreakFooter8 are after a report's detail block. Value = 38
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakFooter5">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakFooter1 through RPT_OutputBreakFooter8 are after a report's detail block. Value = 39
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakFooter6">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakFooter1 through RPT_OutputBreakFooter8 are after a report's detail block. Value = 40
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakFooter7">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakFooter1 through RPT_OutputBreakFooter8 are after a report's detail block. Value = 41
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakFooter8">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakFooter1 through RPT_OutputBreakFooter8 are after a report's detail block. Value = 42
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakHeader1">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakHeader1 through RPT_OutputBreakHeader8 are before a report's detail block. Value = 27
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakHeader2">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakHeader1 through RPT_OutputBreakHeader8 are before a report's detail block. Value = 28
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakHeader3">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakHeader1 through RPT_OutputBreakHeader8 are before a report's detail block. Value = 29
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakHeader4">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakHeader1 through RPT_OutputBreakHeader8 are before a report's detail block. Value = 30
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakHeader5">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakHeader1 through RPT_OutputBreakHeader8 are before a report's detail block. Value = 31
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakHeader6">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakHeader1 through RPT_OutputBreakHeader8 are before a report's detail block. Value = 32
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakHeader7">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakHeader1 through RPT_OutputBreakHeader8 are before a report's detail block. Value = 33
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputBreakHeader8">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputBreakHeader1 through RPT_OutputBreakHeader8 are before a report's detail block. Value = 34
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputDetail">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputDetail indicates that itlder is ready to process the detail block. Value = 26
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputPageFooter">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputPageFooter indicates that it is ready to process the bottom of a page. Value = 23
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputPageHeader">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputPageHeader indicates that it is ready to process the top of a page. Value = 22
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputReportFooter">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputPageHeader indicates that it is ready to process the end of the report. Value = 25
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_OutputReportHeader">
            <summary>
            Use this constant in a SAM_ReportNotify message's lParam. The SAM_ReportNotify message is send when it has formatted a block, but before it is actually output.
            When you process SAM_ReportNotify, you can check the lParam parameter value to see which part of the report is ready to be processed. 
            RPT_OutputPageHeader indicates that it is ready to process the beginning of the report. Value = 24
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_CmdFirstPage">
            <summary>
            Use this constant with the Sal.ReportCmd function to display the first page of a report. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_CmdGoToPage">
            <summary>
            Use this constant with the Sal.ReportCmd function to display a dialog box where the user can enter the page number
            in the report to scroll to. Value = 9
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_CmdLastPage">
            <summary>
            Use this constant with the Sal.ReportCmd function to display the last page of a report. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_CmdNextPage">
            <summary>
            Use this constant with the Sal.ReportCmd function to display the next page of a report. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_CmdPrevPage">
            <summary>
            Use this constant with the Sal.ReportCmd function to display the previous page of a report. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_CmdPrint">
            <summary>
            Use this constant with the Sal.ReportCmd function to print the report. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_CmdPrinterSetup">
            <summary>
            Use this constant with the Sal.ReportCmd function to display the Printer Setup dialog box where the user can change the print settings. Value = 7
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_CmdSizeActual">
            <summary>
            Use this constant with the Sal.ReportCmd function to display a report in its true size in the report window. 
            The user may need to scroll the window horizontally or vertically to see the entire report. Value = 6
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_CmdSizeFit">
            <summary>
            Use this constant with the Sal.ReportCmd function fit the report within the report window. 
            This is useful when you want to view the general format of a report as it appears when printed. Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_ErrBind">
            <summary>
            RPT_ErrBind means that a bind error occurred. Returned by the functions: 
            Sal.ReportCreate, Sal.ReportPrint, Sal.ReportPrintToFile, Sal.ReportView, Sal.ReportTableCreate, Sal.ReportTablePrint, Sal.ReportTableView. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_ErrCount">
            <summary>
            RPT_ErrCount means that a report function provided the wrong number of bind/input variables. 
            Returned by the functions: Sal.ReportCreate, Sal.ReportPrint, Sal.ReportPrintToFile, Sal.ReportView, 
            Sal.ReportTableCreate, Sal.ReportTablePrint, Sal.ReportTableView. Value = 9
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_ErrFilenameLength">
            <summary>
            RPT_ErrFilenameLength means that the specified report file name was too long. 
            Returned by the functions: Sal.ReportCreate, Sal.ReportPrint, Sal.ReportPrintToFile, Sal.ReportView, 
            Sal.ReportTableCreate, Sal.ReportTablePrint, Sal.ReportTableView. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_ErrFileOpen">
            <summary>
            RPT_ErrFileOpen means that a report function was unable to open the specified report file. 
            Returned by the functions: Sal.ReportCreate, Sal.ReportPrint, Sal.ReportPrintToFile, Sal.ReportView, 
            Sal.ReportTableCreate, Sal.ReportTablePrint, Sal.ReportTableView. Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_ErrInput">
            <summary>
            RPT_ErrInput means that a mismatch occurred between the input variable and the associated bind variable. 
            Returned by the functions: Sal.ReportCreate, Sal.ReportPrint, Sal.ReportPrintToFile, Sal.ReportView, 
            Sal.ReportTableCreate, Sal.ReportTablePrint, Sal.ReportTableView. Value = 10
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_ErrLoadDLL">
            <summary>
            RPT_ErrLoadDLL means that a report function was unable to load the required DLLs. 
            Returned by the functions: Sal.ReportCreate, Sal.ReportPrint, Sal.ReportPrintToFile, Sal.ReportView, 
            Sal.ReportTableCreate, Sal.ReportTablePrint, Sal.ReportTableView. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_ErrMaxRpts">
            <summary>
            RPT_ErrMaxRpts means that the maximum number of reports was exceeded. Maximum number of reports = 10. 
            Returned by the functions: Sal.ReportCreate, Sal.ReportPrint, Sal.ReportPrintToFile, Sal.ReportView, 
            Sal.ReportTableCreate, Sal.ReportTablePrint, Sal.ReportTableView. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_ErrPrtOpen">
            <summary>
            RPT_ErrPrtOpen means that a report function was unable to open the printer. 
            Returned by the functions: Sal.ReportCreate, Sal.ReportPrint, Sal.ReportPrintToFile, Sal.ReportView, 
            Sal.ReportTableCreate, Sal.ReportTablePrint, Sal.ReportTableView. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_ErrRptOpen">
            <summary>
            RPT_ErrRptOpen means that a report function was unable to open the specified report for printing. 
            Returned by the functions: Sal.ReportCreate, Sal.ReportPrint, Sal.ReportPrintToFile, Sal.ReportView, 
            Sal.ReportTableCreate, Sal.ReportTablePrint, Sal.ReportTableView. Value = 7
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_ErrRptWindow">
            <summary>
            RPT_ErrRptWindow means that a report function was unable to open the report window. 
            Returned by the functions: Sal.ReportCreate, Sal.ReportPrint, Sal.ReportPrintToFile, 
            Sal.ReportView, Sal.ReportTableCreate, Sal.ReportTablePrint, Sal.ReportTableView. Value = 6
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_ErrType">
            <summary>
            RPT_ErrType means that the data type of an input variable did not match the data type of the associated bind variable. 
            Returned by the functions: Sal.ReportCreate, Sal.ReportPrint, Sal.ReportPrintToFile, Sal.ReportView, 
            Sal.ReportTableCreate, Sal.ReportTablePrint, Sal.ReportTableView Value = 11
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_NoPrint">
            <summary>
            You can turn off the printer icon on the default report view toolbar by specifying this flag in the nFlags parameter of the Sal.ReportView function:
            RPT_NoPrint No print button on the toolbar
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_NoToolbar">
            <summary>
            You can turn off the toolbar in report view by specifying this flag in the nFlags parameter of the Sal.ReportView function: 
            RPT_NoToolbar No toolbar in the preview window
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_EnableCancel">
            <summary>
            Use this constant to enable the cancel button in the report preview panel. 
            It should be specified in the nFlags paramete of Sal.ReportView function.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_PrintAll">
            <summary>
            Use this constant with the Sal.ReportPrint function or the Sal.ReportPrintToFile function to print all pages of a report. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_PrintDraft">
            <summary>
            Use this constant with the Sal.ReportPrint function or the Sal.ReportPrintToFile function to print a report in draft mode. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_PrintNoAbort">
            <summary>
            Use this constant with the Sal.ReportPrint function or the Sal.ReportPrintToFile function 
            so that does not display the dialog box that lets the user cancel the report. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_PrintNoWarn">
            <summary>
            Use this constant with the Sal.ReportPrint function or the Sal.ReportPrintToFile function
            to suppress warnings about margin overflow and tiled pages. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_PrintNoErrors">
            <summary>
            Use this constant with the Sal.ReportPrint function or the Sal.ReportPrintToFile function
            to suppress error message dialog boxes during printing. Value = 16
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_PrintEmptyReport">
            <summary>
            Use this constant to print reports with empty data sets. 
            This option adds one empty row to the data set passed to the reporting engine.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_PrintNullStringsAsDefaultValues">
            <summary>
            Use this constant to pass NULL strings as strings with length 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_PrintTableHiddenColumns">
            <summary>
            Use this constant to include hidden columns when printing table windows
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_PrintParamCopies">
            <summary>
            Use this flag with the Sal.ReportTablePrint function to specify the number of copies to print. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_PrintParamFirstPage">
            <summary>
            Use this flag with the Sal.ReportTablePrint function to specify the first page to print. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_PrintParamLastPage">
            <summary>
            Use this flag with the Sal.ReportTablePrint function to specify the last page to print. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_PrintParamOptions">
            <summary>
            Use this flag with the Sal.ReportTablePrint function to specify report options: 
            RPT_PrintAll, RPT_PrintDraft, RPT_PrintNoAbort, RPT_PrintNoErrors, RPT_PrintNoWarn, or RPT_PrintRange. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_PrintRange">
            <summary>
            Use this constant with the Sal.ReportPrint function or the Sal.ReportPrintToFile function to print a range of pages. 
            You must also set the values of the first (nFirstPage) and last (nLastPage) pages of the report. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.RPT_PaperLetter">
            <summary>
            Sal.ReportSetPrinterSettings constants
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_Activate">
            <summary>
            SAM_Activate is sent to top-level and MDI windows when the window is activated or deactivated. 
            The wParam indicates whether the window is being activated or deactivated. 
            Message Variables hWndForm Handle of top-level window. hWndItem Object handle. 
            wParam Whether the window is being activated or deactivated: TRUE = Activated FALSE = Deactivated IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_AnyEdit">
            <summary>
            SAM_AnyEdit is sent to a combo box, data field, multiline text field, or table window column whenever you make a change to that object's value. 
            The object receives a SAM_AnyEdit message on every key stroke. By processing SAM_AnyEdit messages, an application can check an object's value as it changes.
            Message Variables For a data field, combo box, or multiline text field: hWndForm Window handle of the parent window. 
            hWndItem Window handle of the object. wParam Unused. IParam Unused. 
            For a table window column: hWndForm Window handle of the table window. hWndItem Window handle of the column. wParam Unused. IParam Row number of the table window.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_AppExit">
            <summary>
            SAM_AppExit is sent to an application after all of the application's windows have been destroyed (closed). 
            When the user exits an application or switches from user mode to design mode, an application's form windows, dialog boxes, and table windows are destroyed.
            Following this, SAM_AppExit is sent to the application. You can perform clean-up tasks (such as disconnecting from a database) before the application terminates.
            This is the last message an application receives and it is only sent to the Application Actions section of the outline. 
            Be sure not to reference any windows in your statements when processing this message! 
            Message Variables hWndForm None. hWndItem None. wParam None. IParam None.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_AppStartup">
            <summary>
            SAM_AppStartup is sent to an application before any of the application's windows have been created, including those which are automatically created at run time.
            You can process SAM_AppStartup and perform initialization tasks such as displaying a login dialog box that authorizes access to a database. 
            This is the first message an application receives and it is sent only to the Application Actions section of the outline. 
            Message Variables hWndForm None. hWndItem None. wParam None. IParam None.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_CacheFull">
            <summary>
            SAM_CacheFull is sent to a table window when needs to fetch a row from the data source but the table window cache is full
            and none of its rows qualify as discardable. 
            If the table window has a non-discardable cache, SAM_CacheFull indicates that no more data can fit in the table window cache. 
            If the table window has a discardable cache, SAM_CacheFull indicates that the cache is full of data that you modified and must now save. 
            Once you save the modified rows, they qualify as discardable. 
            Message Variables hWndForm Handle of the table window. hWndItem None. wParam Unused. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_CaptionDoubleClick">
            <summary>
            SAM_CaptionDoubleClick is sent to a table window and a table window column when you double click on a table window column title. 
            To retrieve the table window column's window handle in wParam, use Sal.NumberToWindowHandle. 
            Message Variables hWndForm Handle of the table window. hWndItem Table window handle in table window message actions, column handle in column message actions.
            wParam Handle of the column. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_Click">
            <summary>
            In general, SAM_Click alerts an application that the user has clicked an object with the left mouse button. 
            SAM_Click is sent to a check box or push button when you click either of these objects or perform a keyboard activity that simulates a mouse click. 
            SAM_Click is sent to a currently-unselected radio button when you click it or perform a keyboard activity that simulates a mouse click. 
            If the radio button you click on is already selected, no SAM_Click is sent. 
            SAM_Click is sent to a list box when you click an entry or perform a keyboard activity that simulates a mouse click. 
            If you click an empty list box or click a portion of the list box that contains no entries, no SAM_Click is sent. 
            SAM_Click is sent to a combo box when you click an entry in the drop-down list box or perform a keyboard activity that simulates a mouse click. 
            If you click the data field portion of the combo box or the button that invokes the drop-down list box, no SAM_Click is sent. 
            SAM_Click is sent to a table window and the column with the focus when you click a table window cell or perform a keyboard activity that simulates a mouse click.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_Close">
            <summary>
            SAM_Close is sent to a dialog box, a form window, MDI window, or a top-level table window when you choose the Close command from a window's system menu
            or when you double-click on the window's system menu. 
            SAM_Close is sent to an application to notify the application that you are attempting to close a window. 
            By processing the SAM_Close message, an application can check the form window or table window to see if there is data
            that needs to be saved to the data source. A SAM_Close message is not sent on a call to Sal.Quit, Sal.EndDialog, or Sal.DestroyWindow. 
            If SAM_Close is sent to the Message Actions section of a modal or system modal dialog box, 
            the application can call Sal.MessageBox to prevent the destruction of the dialog box. 
            Otherwise, default processing closes the message box. If SAM_Close does not execute a return, the window closes; 
            if SAM_Close returns FALSE, the window does not close. Message Variables hWndForm Window Handle of the current top-level window. 
            hWndItem Unused. wParam Unused. lParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_ColumnSelectClick">
            <summary>
            SAM_ColumnSelectClick is sent to a table window, and a table window column when the user selects or deselects a column by clicking on the column title. 
            You must set TBL_Flag_SelectableCols to TRUE by calling Sal.TblSetTableFlags (it is FALSE by default). 
            To retrieve the window handle of the column in wParam, use Sal.NumberToWindowHandle. 
            Message Variables hWndForm Window handle of the table window. hWndItem Table window handle in table window message actions, 
            column handle in column message actions. wParam Column handle. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_ContextMenu">
            <summary>
            SAM_ContextMenu is sent when the user right-clicks a window or presses Shift+F10.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_CornerClick">
            <summary>
            SAM_CornerClick is sent to a table window, and a table window column when you click on the title of a row header. 
            The row header is a non-editable column on the left side of a table window. 
            To retrieve the window handle of the column in wParam use Sal.NumberToWindowHandle. 
            Message Variables hWndForm Window handle of the table window. hWndItem Window handle of the column. 
            wParam Numeric value of the window handle of the column. IParam The context row of the table window.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_CornerDoubleClick">
            <summary>
            SAM_CornerDoubleClick is sent to a table window, and a table window column when you double click on the title of a row header. 
            The row header is a non-editable column on the left side of a table window To retrieve the window handle of the column in wParam, use Sal.NumberToWindowHandle.
            Message Variables hWndForm Window handle of the table window. hWndItem Window handle of the table window. 
            wParam Numeric value of the window handle of the column. IParam The context row of the table window.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_CountRows">
            <summary>
            SAM_CountRows is sent to a table window that has a dynamic scroll range. Use it to query an application for the number of rows in a table window. 
            The user scrolls to the last row in a table window (by pressing a key such as the End key). 
            Applications process the SAM_CountRows message by returning the number of rows in the table window. 
            Typically, this involves counting the number of rows in a result set. If an application does not process the SAM_CountRows message, 
            SAM_FetchRow messages are used to determine the last row in a table window, namely with a TBL_NoMoreRows return from the message. 
            Processing SAM_CountRows, however, yields better performance. Message Variables hWndForm Handle of the table window. 
            hWndItem Handle of the table window. wParam Unused. IParam Unused. Return The number of rows in the table.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_Create">
            <summary>
            SAM_Create is sent to a top-level window (dialog box, form window, or table window) and then to all of its children after they are created, 
            but before they are made visible. It is also sent to an MDI window. For example, follow these steps to create a form window that has data fields:
            1. Create the form window. 2. Create each of its data fields. 
            After creates all the windows, but before making them visible, sends SAM_Create to the objects in this order:
            1. The form window. 2. Each of the form's data fields. After sends the SAM_Create messages, makes the form window and data fields visible. 
            By processing the SAM_Create message, an application can perform initialization tasks. 
            Typical initialization tasks include setting data field values and populating table windows and list boxes with data from a database. 
            Message Variables hWndForm Window handle of current top-level window. hWndItem Handle of the object being created. wParam Unused. lParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_CreateComplete">
            <summary>
            Sends SAM_CreateComplete to windows with contents (top-level windows and child table windows) 
            after creating the window's children and displaying the window (and its children). 
            For example, suppose you create a form window with a data field and a child table window. The child table window has one column. 
            The following happens: 1. The form window is created. 2. The data field is created. 3. The child table window is created.
            4. The child table window's column is created. Once all this is done, sends a SAM_Create message to the top-level window and all of its children. 
            Next, makes the form window and its children visible. Finally, sends a SAM_CreateComplete message to the child table window, 
            and then to the form window (the top-level window). By processing the SAM_CreateComplete message, 
            you can do initialization tasks that depend on the state or contents of child windows. 
            You can also use SAM_CreateComplete to wait to do initialization tasks until after a top-level window (and its children) has become visible. 
            Message Variables hWndForm Window Handle of current top-level window. hWndItem Handle of the object being created. wParam Unused. lParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_CustControlCmd">
            <summary>
            Sends this message to a custom control when its parent window receives a notification (WM_COMMAND) from the custom control. 
            Ignores any value that you Return when you process this message. Message Variables hWndForm Window handle of current top-level window. 
            hWndItem Window handle of custom control. wParam Notification message number. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DDE_ClientExecute">
            <summary>
            SAM_DDE_ClientExecute is sent to all objects in a server application. The event that causes it is a DDE client sent a command string. 
            A server listens for command requests from clients by processing SAM_DDE_ClientExecute. 
            The server gets the command string that the client sent by calling Sal.DDEGetExecuteString. 
            The parameter for Sal.DDEGetExecuteString is the lParam of the SAM_DDE_ClientExecute message, which points to the command string. 
            After calling Sal.DDEGetExecuteString, the server can parse the command string to determine the action to perform. 
            The server can send data or some other response to the client by calling Sal.DDESendToClient. 
            The wParam for the SAM_DDE_ClientExecute message contains the window handle of the client. 
            The server uses wParam in the third parameter of Sal.DDESendToClient to send the data or response back to the same client. 
            Message Variables hWndForm Handle of a top-level window. hWndItem Object handle. wParam Window handle of sender. lParam Command string.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DDE_ClientRequest">
            <summary>
            SAM_DDE_ClientRequest is sent to a server application as the result of a client application's request for updated data. 
            A server listens for requests from clients by processing the SAM_DDE_ClientRequest message. 
            A server sends data to a client by calling Sal.DDESendToClient. The wParam for the SAM_DDE_ClientRequest message contains the window handle of the client. 
            The server uses wParam in a Sal.DDESendToClient parameter to send the data back to the same client. 
            Message Variables hWndForm Handle of a top-level window. hWndItem Object handle. wParam Window handle of the sender. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DDE_DataChange">
            <summary>
            SAM_DDE_DataChange is sent to all objects in a DDE client application. It is sent when a DDE server has sent data to the client. 
            When a DDE server sends an item to the client, the data appears automatically in the window that the client specified in Sal.DDEStartSession. 
            The client application does not need to perform any action to receive the data. 
            However, if the client application wants to know when the server sends an item, it can process the SAM_DDE_DataChange message. 
            Note that SAM_DDE_DataChange is sent after the server sends the data to the client. 
            Message Variables hWndForm Handle of a top-level window. hWndItem Object handle. wParam Unused. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_Destroy">
            <summary>
            SAM_Destroy is sent to a top-level window (dialog box, form window, or table window) and then to all of its children just before the windows are destroyed.
            SAM_Destroy messages are sent after SAM_Close has been sent to the top-level window. 
            For example, if a form window has data fields, sends the messages to the objects in this order: 
            SAM_Close to the form window. SAM_Destroy to the form window. SAM_Destroy to each of the form window's child windows. 
            After all of the SAM_Destroy messages are sent, the top-level and child windows are destroyed. 
            It is also sent to an MDI window. sends SAM_Destroy to an MDI window and its children in this order: 
            MDI window Form window or table window Form window or table window children and grandchildren (columns) Form window or table window toolbar children
            and grandchildren MDI window toolbar children and grandchildren 
            Message Variables hWndForm Window handle of current top-level window. 
            hWndItem Window handle of object being destroyed. wParam Unused. lParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DoubleClick">
            <summary>
            SAM_DoubleClick is sent to a combo box, list box, picture, table window, or a column when you double-click on one of these objects. 
            When the user double-clicks a row in a table window or list box, sends the messages in this order: 
            1. Two SAM_Click messages. 2. SAM_DoubleClick to the table window column or list box. 3. SAM_DoubleClick to the table window. 
            A double-click can select a row in a list box or table window and then start an action for that row. 
            For example, a list box can contain a list of file names. When the user double-clicks a name in the list box, the application opens the file. 
            SAM_DoubleClick is only sent to a combo box if Always Show List is set to Yes. 
            Message Variables For a combo box or list box: hWndForm Handle of form window or dialog box. hWndItem Window handle of the combo box or list box.
            wParam Unused. IParam Unused. For a picture: hWndForm Handle of form window or dialog box. hWndItem Window handle of the picture. 
            wParam The X coordinates in the picture at the point where the user double-clicked. 
            lParam The Y coordinates in the picture at the point where the user double-clicked. 
            For a table window: hWndForm Window handle of the table window. hWndItem Window handle of the column. wParam Unused. lParam Row number in the table window.
            For a column: hWndForm Window handle of the table window. hWndItem Window handle of the column. wParam Unused. lParam RowNumber in the table window.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DragCanAutoStart">
            <summary>
            SAM_DragCanAutoStart is sent to a top-level window, child table window, data field, multiline field, list box, combo box, and picture.
            Sends this message to ask a window whether it wants auto dragging. Return TRUE to enable auto dragging. 
            If you do not process this message or you return FALSE, then does not enable auto dragging. 
            Starts drag mode automatically when the application returns TRUE from SAM_DragCanAutoStart. 
            This is the minimum that an application does to let a user drag from a window. 
            However, you must write additional code to do something when the user drops in a window. 
            Message Variables hWndForm Handle of top-level window. hWndItem Window handle of the source window. wParam Position of the mouse on the X axis. 
            IParam Position of the mouse on the Y axis. 
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DragDrop">
            <summary>
            Sent to a top-level window, child table window, data field, multiline field, list box, combo box, and picture. 
            Sent when the user drops the mouse on a target window. Message Variables hWndForm Handle of top-level window. 
            hWndItem Handle of object receiving message. wParam Window handle of the source window. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DragEnd">
            <summary>
            Sent to a top-level window, child table window, data field, multiline field, list box, combo box, and picture, indicating that drag mode has ended. 
            Message Variables hWndForm Handle of top-level window. hWndItem Handle of object receiving message. wParam Unused. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DragEnter">
            <summary>
            Sent to a top-level window, child table window, data field, multiline field, list box, combo box, and picture, 
            indicating that the mouse has moved into the window while in drag mode. 
            Message Variables hWndForm Handle of top-level window. hWndItem Handle of object receiving message. wParam Window handle of the source window. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DragExit">
            <summary>
            Sent to a top-level window, child table window, data field, multiline field, list box, combo box, and picture, 
            indicating that the mouse has moved off of the window while in drag mode. Message Variables hWndForm Handle of top-level window.
            hWndItem Handle of object receiving message. wParam Window handle of the source window. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DragMove">
            <summary>
            Sent to a top-level window, child table window, data field, multiline field, list box, combo box, and picture, 
            indicating that the mouse has moved onto the window while in drag mode. 
            Message Variables hWndForm Handle of top-level window. hWndItem Handle of object receiving message. wParam Window handle of the source window. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DragNotify">
            <summary>
            Sent to a top-level window, child table window, data field, multiline field, list box, combo box, and picture, 
            indicating that a mouse action occurred while in drag mode. 
            Message Variables hWndForm Handle of top-level window. hWndItem Handle of object receiving message. wParam Window handle of the target window. 
            IParam One of the following messages: SAM_DragDrop - The user moved the mouse into a target window. 
            SAM_DragEnter - The user dropped the mouse in a target window. 
            SAM_DragExit - The user moved the mouse out of the target window. SAM_DragMove - The user moved the mouse within a target window.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DragStart">
            <summary>
            Sent to a top-level window, child table window, data field, multiline field, list box, combo box, and picture, indicating that drag mode has started. 
            Message Variables hWndForm Handle of top-level window. hWndItem Handle of object receiving message. wParam The position of the mouse on the X axis. 
            IParam The position of the mouse on the Y axis.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DropDown">
            <summary>
            SAM_DropDown is sent to a combo box before the list box portion of the combo box drops down. 
            This message does not occur unless the Drop Down item is set to Yes. 
            Message Variables hWndForm Window handle of the form window or dialog box. hWndItem Window handle of the combo box. wParam Unused. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DropDownClosed">
            <summary>
            SAM_DropDownClosed is sent to a combo box after the list box portion of the combo box closes.
            This message does not occur unless the Drop Down item is set to Yes.
            The access modifier intentionally made "internal", only to be available for the APF FW.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DropFiles">
            <summary>
            Sent to a column, data field, multiline field, list box, combo box, picture, custom control. Only sends this message to windows that have enabled file dropping.
            It is sent when the user drops a file or files from Explorer or File Manager on the object. 
            Call the Sal.DropFilesQueryFiles function to get the names of the files dropped on the object. 
            Sal.DropFilesQueryFiles returns the number of files that were dropped or 0 if the function fails. 
            You can only call Sal.DropFilesQueryFiles during SAM_DropFiles message processing. 
            Call the Sal.DropFilesQueryPoint function to get the location of the mouse in the window where the user dropped the file or files. 
            By default, file dropping is enabled for editable picture objects. 
            To avoid this default processing, execute a Return statement in the SAM_DropFiles message processing for a picture object
            and do not perform any other processing. For example, when a user drops on a picture, you can call Sal.DropFilesQueryFiles
            or Sal.DropFilesQueryPoint in the SAM_DropFiles message processing and decide whether to process what the user is dropping or to ignore it
            by executing a Return statement with no other processing. You can completely disable file dropping for an editable picture by calling the
            Sal.DropFilesAccecptFiles function. The default for editable picture windows is TRUE. 
            The default for all other window types is FALSE. Message Variables hWndForm Handle of top-level window. 
            hWndItem Handle of the object receiving the message. wParam Unused. lParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_EndCellTab">
            <summary>
            Sends this message to a table window when the user tries to tab past the last editable cell. 
            You can use this message to automate row insertion. When the window receives this message, add a blank row to the window. 
            By default, this message returns FALSE, which selects the current row. Return TRUE to prevent this behavior. 
            Message Variables hWndForm Window handle of the table window. hWndItem Window handle of the table window. wParam Unused. 
            IParam Table window context row that the user is trying to tab away from (first row is 0, second row is 1, and so on)
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_FetchDone">
            <summary>
            SAM_FetchDone is sent to a table window when Sal.TblPopulate, using the TBL_FillAllBackground value as its last parameter, 
            completes the population of a table window Message Variables hWndForm Window handle of the table window. hWndItem Window handle of the table window. 
            wParam Unused. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_FetchRow">
            <summary>
            SAM_FetchRow is sent to a table window whenever needs to copy a row into the table window cache. 
            When you populate a table window, sends a SAM_FetchRow message for every row in the table window that displays. 
            When the user scrolls forward, sends more SAM_FetchRow messages to the table window for those rows not currently in the cache that need to be displayed.
            You usually call Sql.FetchRow to fetch a row into the table window based on the row number in lParam. 
            Note: Setting a breakpoint on a statement that executes while processing a SAM_FetchRow message can cause incomplete painting of a table window. 
            Message Variables hWndForm Window handle of the table window. hWndItem Window handle of the table window. wParam Unused. 
            IParam Row number of row that was populated. Return One of three possible values: 
            TBL_NoMoreRows - There are no rows at the specified fetch number and beyond. TBL_RowDeleted - The row has been deleted. 
            TBL_RowFetched - The row was fetched successfully.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_FetchRowDone">
            <summary>
            SAM_FetchRowDone is sent to a table window after populates a row. Message Variables hWndForm Window handle of the table window. 
            hWndItem Window handle of the table window. wParam Unused. IParam Row number of the fetched row.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_FieldEdit">
            <summary>
            SAM_FieldEdit is sent to a combo box, data field, multiline text field, table window, or table window column when you change a window's value
            and then move the focus away from that window. For example, if you enter a value into a data field, 
            then press the TAB key or click the mouse to move to another field, a SAM_FieldEdit message is sent to the data field. 
            The SAM_FieldEdit message is different from the SAM_AnyEdit message. A SAM_AnyEdit message is sent for every keystroke, 
            while a SAM_FieldEdit message is sent only when you attempt to leave a window whose value you changed. 
            Use SAM_Validate for field validation. SAM_Validate supersedes SAM_FieldEdit.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_Help">
            <summary>
            SAM_Help is sent to any top level window and MDI window when the user presses the F1 function key. 
            It is used in conjunction with Sal.WinHelp to call up a user-created Help system. The wParam contains the handle of the child object
            that has the focus that you can use for a context-sensitive help system. 
            Message Variables hWndForm Window handle of the current form window or table window. hWndItem Window handle of the current form window or table window. 
            wParam Window handle of the child window that has the focus. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_KillFocus">
            <summary>
            SAM_KillFocus is sent to a table window, data field, multiline field, pushbutton, radio button, check box, option button, combo box, list box, column,
            and horizontal and vertical scroll bar as you are about to exit the object. The message is always sent whether or not you changed the object's value. 
            Warning: You cannot call Sal.SetFocus in SAM_KillFocus processing because of a Windows limitation. 
            Message Variables hWndForm Window handle of the top-level window. hWndItem Window handle of the object. 
            wParam Handle of the window gaining the focus. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_Print">
            <summary>
            SAM_Print is sent to a form window, data field, multiline text field, combo box, or push button while the object prints.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_ReportFetchInit">
            <summary>
            Sent to a top-level window or MDI window that started a report. Happens when the first page of a report is ready for formatting. 
            It sends SAM_ReportFetchInit after sending SAM_ReportStart. SAM_ReportFetchInit means that it is ready to receive data from the application.
            If the report contains data from a database, call SqlExecute. If Sql.Execute returns TRUE, then Return TRUE. 
            If you Return FALSE, the report stops. If you do not Return a value, or you do not process the message, the report continues. 
            Message Variables hWndForm Unused. hWndItem Unused. wParam Window handle of a report window. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_ReportFetchNext">
            <summary>
            SAM_ReportFetchNext message is send to a top-level window or MDI window that started the report. 
            This message is sent after a SAM_ReportFetchInit message to indicate that it is ready to receive the next row of data from the application. 
            If the application is going to fetch the report data from a database, it typically makes a call to Sql.FetchNext to fetch the next row
            from the database upon receipt of this message. If the fetch is successful, the application returns TRUE for SAM_ReportFetchNext. 
            Does not send data from the application to the report until the application returns TRUE in SAM_ReportFetchNext processing. 
            If there is no more data to fetch, the application returns FALSE. Message Variables hWndForm Unused. hWndItem Unused. 
            wParam Window handle of the window that started the report. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_ReportFinish">
            <summary>
            SAM_ReportFinish message is sent to a top-level window or MDI window that started the report. SAM_ReportFinish is sent when the report finishes. 
            The application can use this message to do any sort of cleanup that is needed following the generation of a report. 
            Message Variables hWndForm Unused. hWndItem Unused. wParam Window handle of the window that started the report. IParam TRUE, 
            if the user has canceled printing the report.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_ReportNotify">
            <summary>
            Data is fetched and blocks of the report are formatted. When the formatted blocks cross a page boundary, 
            a page header/footer block set is inserted in the flow and the page is sent to the printer or displayed in preview mode. 
            The report sends SAM_ReportNotify messages as the report blocks are formatted and output into the page buffer. 
            The Before notifications are send before any formatting occurs, the Output notifications are sent when the first line of the report is output 
            and the Done notifications are sent when the entire block is output. Notifications are sent to a top-level window or MDI window that starts the report. 
            Two sets of notifications are sent for each block: 
            When at least one line of the formatted block is output | When the block is finished outputting Check the lParam variable
            to see which part of the report is ready to be formated. The lParam is one of the RPT_Before* constants. 
            Any value that you return during SAM_ReportNotify processing is ignored
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_ReportStart">
            <summary>
            Sent to a top-level window or MDI window that started a report when a part of a report is ready to be formatted. 
            SAM_ReportStart is sent after the application calls the report with either Sal.ReportView or Sal.ReportPrint to indicate that the report is starting.
            SAM_ReportStart is sent before the report displays or prints. 
            You can use SAM_ReportStart to do any sort of initialization necessary before sending data to the report. 
            Ignores SAM_ReportStart's return value. Message Variables hWndForm Unused. hWndItem Unused. 
            wParam Window handle of the window that started the report. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_RowHeaderClick">
            <summary>
            SAM_RowHeaderClick is sent to a table window when you click on a row in the row header. 
            This message is not sent unless Sal.TblDefineRowHeader has been used to define a row header. 
            Message Variables hWndForm Window handle of the table window. hWndItem Window Handle of the table window. wParam Unused. IParam Context row of the table window.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_RowHeaderDoubleClick">
            <summary>
            SAM_RowHeaderDoubleClick is sent to a table window when you double-click on a row in the row header. 
            Only sends this message when TBL_RowHdr_Visible is TRUE (which is the default). 
            If TBL_RowHdr_Visible is FALSE, you can set it to TRUE by calling Sal.TblDefineRowHeader. Message Variables hWndForm Window handle of the table window. 
            hWndItem Window Handle of the table window. wParam Unused. lParam Context row of the table window
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_RowSetContext">
            <summary>
            Sends this message to a TableWindow when the user changes its focus row. 
            If you process this message but do not execute a Return statement, performs its default processing. 
            Message Variables hWndForm Window handle of the top-level window. hWndItem Window handle of the object. wParam Unused. lParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_RowValidate">
            <summary>
            SAM_RowValidate is sent to a table window before the table window's focus row changes, letting the application validate the contents of the row. 
            The SAM_RowValidate message is sent regardless of the current row flags or cell edited flags. 
            It is sent only when you change the focus row, not when you remove the focus from the table window. 
            If the application returns VALIDATE_Cancel, the focus remains on the current row. 
            If the application returns VALIDATE_Ok, the table window behaves as normal and changes the focus row. 
            Message Variables hWndForm Window handle of the table window. hWndItem Window handle of the table window. wParam Unused. 
            lParam Table window context row (first row is 0, second row is 1, and so on).
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_ScrollBar">
            <summary>
            SAM_ScrollBar is sent to a horizontal or vertical scroll bar when you move within the scroll bar using either the mouse or the keyboard. 
            The application must check SAM_ScrollBar's wParam variable in order to determine which of the following movements occurred: 
            SB_Bottom SB_LineDown SB_LineUp SB_PageDown SB_PageUp SB_ThumbPosition SB_ThumbTrack SB_Top
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_SetFocus">
            <summary>
            SAM_SetFocus is sent to a check box, combo box, data field, list box, multiline text field, push button, radio button, scroll bar, 
            or table window column when it receives the input focus. Process the SAM_SetFocus message and initialize actions to take place when the user enters an object.
            Avoid calling functions that can change the focus (such as Sal.MessageBox, Sal.ModalDialog, Sal.SendMsg) while processing a SAM_SetFocus message. 
            Message Variables hWndForm Window handle of the top-level window. hWndItem Window handle of the object receiving the message. 
            wParam Handle of the window losing the focus. lParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_SqlError">
            <summary>
            Sent to the Application Actions section of the outline when a SQL function fails. 
            If you process this message, you can control how the application responds to SQL errors on a global level 
            instead of using the default error processing which displays a dialog box with the error number and error text. 
            Call Sql.ExtractArgs to get the error code, error position, and Sql Handle from the wParam and lParam. 
            You can also use When SqlError in any actions section of the outline to process an error at a local level. 
            Message Variables hWndForm Always hWndNULL. hWndItem Not used. wParam Sql Handle. lParam SQL Error code and position
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_Timer">
            <summary>
            Sent to the Application Actions, top-level window and its children, MDI window every n milliseconds, as specified by Sal.TimerSet. 
            Check the wParam to find the identifier of the timer that sent the message. 
            This way, one object can process SAM_Timer messages from more than one timer. Important: Timers are a limited resource in Windows, so use them sparingly. 
            Message Variables hWndForm Window handle of the top-level window. hWndItem Window handle of the object receiving the message. 
            wParam Timer ID. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_TabChange">
            <summary>
            This message is fired when the user navigates to a different tab page in a tab control.
            wParam = Index of the formerly active tab page. lParam = Index of the newly activated tab page.
            Return False to prevent the tab control from switching the active tab.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_TblDoDetails">
            <summary>
            Sends this message to a table window when the user or code changes its focus row. If you process this message but do not execute a Return statement, 
            performs its default processing. Message Variables hWndForm Window handle of the top-level window. 
            hWndItem Window handle of the object. wParam Unused. IParam Unused.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_User">
            <summary>
            This constant represents the value at which user-defined messages should start. 
            The next consecutive user-defined message would be SAM_User+1. Value = 0x4000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_Validate">
            <summary>
            Sent to a Data field, multiline field, combo box, and column when the user changes the value of the object and then moves the focus away from the object. 
            The user can move the focus by several actions such as tabbing to another object, clicking another object, 
            or using a mnemonic or accelerator to activate another object. When a user changes one of these objects, the object's field edit flag changes to TRUE. 
            You can get and set the field edit flag using Sal.QueryFieldEdit and Sal.SetFieldEdit. SAM_Validate validates the data that the user entered or changed. 
            Whenever the user changes an object, sends SAM_Validate. If an object is valid, return VALIDATE_Ok. 
            The value you return from SAM_Validate processing controls whether the focus changes. 
            Does not send SAM_Validate when the user selects a menu item (a menu selection does not change the focus). 
            You can force to send SAM_Validate by calling Sal.SendValidateMsg by calling Sal.SendValidateMsg in the menu actions of a menu item. 
            This forces field validation before processing a menu selection (without changing the focus). 
            Sal.SendValidateMsg returns the value that the SAM_Validate message processing returns. 
            To Control the action that happens return one of these values: VALIDATE_Cancel, VALIDATE_Ok or VALIDATE_OkClearFlag. 
            Note: Unless you return VALIDATE_Cancel SAM_FieldEdit will also be send to the object.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_Dock">
            <summary>
            SAM_Dock is sent to a docking host (top-level window) when a docking dialog is about to change its docking orientation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_DockChange">
            <summary>
            SAM_DockChange is sent to a docking dialog box after it has changed its docking orientation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_TblSort">
            <summary>
            SAM_ClickToSort is sent to a table when a column header is clicked for sorting. Handle of the clicked column is sent as the wParam. lParam is not used.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_NavChange">
            <summary>
            SAM_NavChange is sent when a pane becomes active (i.e. displayed or selected).
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_NavGroupCollapse">
            <summary>
            SAM_NavGroupCollapse is sent when a group (within a pane, delimited by a pane separator) is collapsed.
            wParam The index of the pane where is the group is located. laram The index of the group which is being collapsed.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_NavGroupExpand">
            <summary>
            SAM_NavGroupExpand is sent when a group (within a pane, delimited by a pane separator) is expanded.
            wParam The index of the pane where is the group is located. lParam The index of the group which is being expanded.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAM_NavResize">
            <summary>
            SAM_NavResize is sent when the splitter is moved to a new position.
            wParam The index of the pane which is being resized. 
            lParam The size of the object after resizing. 
            The low-order word contains the width in pixels, and the high-order word contains the height in pixels. 
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SB_Bottom">
            <summary>
            The SAM_ScrollBar message sends this constant (as the wParam variable) to indicate that you have scrolled to the scroll bar's end (maximum). Value = 7
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SB_LineUp">
            <summary>
            The SAM_ScrollBar message sends this constant (as the wParam variable) to indicate that you have scrolled one line more. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SB_PageDown">
            <summary>
            The SAM_ScrollBar message sends this constant (as the wParam variable) to indicate that you have scrolled one page less. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SB_PageUp">
            <summary>
            The SAM_ScrollBar message sends this constant (as the wParam variable) to indicate that you have scrolled one page more. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SB_ThumbPosition">
            <summary>
            The SAM_ScrollBar message sends this constant (as the wParam variable) to indicate that you dragged the scroll box to a new position within the scroll bar.
            Specify SB_ThumbPosition if you want the client area repainted when you release the Thumb. (Compare to SB_ThumbTrack). Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SB_ThumbTrack">
            <summary>
            The SAM_ScrollBar message sends this constant (as the wParam variable) to indicate that you dragged the scroll box to a new position. 
            Specify SB_ThumbTrack if you want the client area updated every time you click on and drag the thumb of the scroll bar. (Compare to SB_ThumbPosition). Value = 5.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SB_Top">
            <summary>
            The SAM_ScrollBar message sends this constant (as the wParam variable) to indicate that you scrolled to the beginning (minimum) of the scroll bar. Value = 6
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_Adjust">
            <summary>
            Sal.TblDeleteRow uses this constant to coordinate the deletion of a table window row with the deletion of a row from the underlying result set. 
            TBL_Adjust ensures automatic correspondence between the lParam (selected row) of the SAM_FetchRow message and the row number in the result set. 
            It automatically re-synchronizes the row number in the result set with the row number in the table window. 
            Using TBL_Adjust prevents blank rows in the table window. When the user deletes with TBL_Adjust the row number is remembered. 
            All actions with the table, fetching, row context, row searching then adjusts the row number to be insync with the sql result set
            row number hiding those that are deleted. If you were to just delete from the result set, 
            the next time that table row were asked to fetch it's returns would be null (deleted). Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_Error">
            <summary>
            Returns this constant when a table window function is unsuccessful.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_FillAll">
            <summary>
            The Sal.TblPopulate function uses this constant to populate an entire table window at once. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_FillAllBackground">
            <summary>
            The Sal.TblPopulate function uses this constant to populate the visible portion of a table window first, 
            then return control to the application and continue fetching rows in the background. 
            Fetches subsequent rows at a rate of one row every 1/4 of a second. Once all rows have been fetched, the table window receives a SAM_FetchDone message. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_FillNormal">
            <summary>
            The Sal.TblPopulate function uses this constant to populate the visible portion of the table window first, then populates new rows as they are scrolled into view. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_Flag_EditLeftJustify">
            <summary>
            This flag instructs to left-justify cells while they are being edited. By default, cell editing behavior reflects the column definition. 
            For example, when you edit a right-justified column, right- justifies the text. With center-justified and right-justified columns, 
            this means that you are not able to enter more text than fits in the cell. Use TBL_Flag_EditLeftJustify with the Sal.TblQueryTableFlags 
            and Sal.TblSetTableFlags functions. Value = 0x4000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_Flag_GrayedHeaders">
            <summary>
            This flag instructs to paint column headings and row headings with color and shading similar to push buttons. 
            Use TBL_Flag_GrayedHeaders with the Sal.TblQueryTableFlags and Sal.TblSetTableFlags functions. Value = 0x200
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_Flag_MovableCols">
            <summary>
            This flag lets the user drag-move columns. 
            Use TBL_Flag_MoveableCols with the Sal.TblQueryTableFlags and Sal.TblSetTableFlags functions. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_Flag_SelectableCols">
            <summary>
            This flag lets the user select columns by clicking the column title. 
            Use TBL_Flag_SelectableCols with the Sal.TblQueryTableFlags and Sal.TblSetTableFlags functions. Value = 0x80
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_Flag_HScrollByCols">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_Flag_ShowVScroll">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_Flag_ShowWaitCursor">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_Flag_SingleSelection">
            <summary>
            This flag ensures that the user can only select one row at a time from a table window. 
            Use TBL_Flag_SingleSelection with the Sal.TblQueryTableFlags and Sal.TblSetTableFlags functions. Value = 0x1000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_Flag_SizableCols">
            <summary>
            This flag lets the user drag-size columns. 
            Use TBL_Flag_SizableCols with the Sal.TblQueryTableFlags and Sal.TblSetTableFlags functions. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_Flag_SuppressLastColLine">
            <summary>
            This flag suppresses painting of the dotted lines that separate columns. 
            Use TBL_Flag_SuppressRowLines with the Sal.TblQueryTableFlags and Sal.TblSetTableFlags functions. Value = 0x0200
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_Flag_SuppressRowLines">
            <summary>
            This flag suppresses painting of the dotted lines that separate rows. 
            Use TBL_Flag_SuppressRowLines with the Sal.TblQueryTableFlags and Sal.TblSetTableFlags functions. Value = 0x0800
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_MaxRow">
            <summary>
            This constant represents the maximum or last row in a table window. 
            Use it with the Sal.TblSetRange (to define a dynamic scroll range), Sal.TblFindPrevRow (to find the last row in a table), and Sal.TblInsertRow functions.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_MinRow">
            <summary>
            This constant represents the minimum or first row in a table window. 
            Use it with the Sal.TblFindNextRow (to find the first row in a table), Sal.TblInsertRow and Sal.TblSetRange functions.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_MinSplitRow">
            <summary>
            This constant identifies the minimum row number of a row in the lower half of a split window. 
            For example, you can use it with the Sal.TblSetFocusRow function to set the focus to the first row in the lower half of a split window.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_NoAdjust">
            <summary>
            The Sal.TblDeleteRow function uses this constant to coordinate the deletion of a table window row with the deletion of a row from the underlying result set.
            TBL_NoAdjust does not re-synchronize the row number of the row in the result set with the row number of the row in the table window. 
            When you delete a row from a table window, a blank row displays in its place. When the user deletes with TBL_NoAdjust it simply deletes that row number, 
            all rows above (higher) the deleted are now one less, that is not adjusted for the result set. 
            The row number is not going to be insync with a result set now. 
            A side effect of this is that if you get a fetch message for the row number that was deleted your code will get called
            and null values will be returned (the result set row is deleted). Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_NoMoreRows">
            <summary>
            This constant is returned to the Sal.TblFetchRow function when can not fetch the specified row
            and there are no more rows to fetch after the specified row. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_RowDeleted">
            <summary>
            This constant is returned to the Sal.TblFetchRow function when can not fetch the specified row because another transaction deleted it. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_RowFetched">
            <summary>
            This constant is returned to the Sal.TblFetchRow function when the row is successfully fetched. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_RowHdr_MarkEdits">
            <summary>
            This flag displays a symbol in the edit indicator column of a row that means the setting of the row flag: 
            A check mark means that the row has been modified (ROW_Edited). An X means that the row is marked for deletion (ROW_MarkDeleted). 
            A right arrow means that this is a new row ( ROW_New). Use TBL_RowHdr_MarkEdits with the Sal.TblDefineRowHeader and Sal.TblQueryRowHeader functions. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_RowHdr_ShareColor">
            <summary>
            This flag sets the row header color to the text color of the cells in hWndCol. Otherwise, the row header uses the table window's default text color. 
            Use TBL_RowHdr_ShareColor with the Sal.TblDefineRowHeader and Sal.TblQueryRowHeader functions. Value = 16
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_RowHdr_Sizable">
            <summary>
            This flag lets the user drag-size the row header. 
            Use TBL_RowHdr_Sizable with the Sal.TblDefineRowHeader and Sal.TblQueryRowHeader functions. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_RowHdr_RowsSizable">
            <summary>
            This flag lets the user drag-size the row height. 
            Use TBL_RowHdr_RowsSizable with the Sal.TblDefineRowHeader and Sal.TblQueryRowHeader functions. Value = 32
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_RowHdr_Visible">
            <summary>
            This flag makes the row header visible. 
            Use TBL_RowHdr_Visible with the Sal.TblDefineRowHeader and Sal.TblQueryRowHeader functions. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_AutoScroll">
            <summary>
            The Sal.TblScroll function uses this constant to scroll the table window to the specified row and column. 
            TBL_AutoScroll scrolls the table window as needed until the row becomes visible.
            This is the default and only behaviour supported by the Sal.TblScroll function.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_ScrollTop">
            <summary>
            The SalTblScroll function uses this constant to describe the position of the row to which you are scrolling.
            TBL_ScrollTop scrolls the row to the top of the table window.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_ScrollBottom">
            <summary>
            The Sal.TblScroll function uses this constant to describe the position of the row to which you are scrolling.
            TBL_ScrollBottom scrolls the row to the bottom of the table window.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_SetFirstRow">
            <summary>
            This constant is used by Sal.TblSetRow to change the current focus row in a table window to the first row. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_SetLastRow">
            <summary>
            This constant is used by Sal.TblSetRow to change the current focus row in a table window to the last row. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_SetNextRow">
            <summary>
            This constant is used by Sal.TblSetRow to change the current focus row in a table window to the next row. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_SetPrevRow">
            <summary>
            This constant is used by Sal.TblSetRow to change the current focus row in a table window to the previous row. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_SortDecreasing">
            <summary>
            You specify this constant for Sal.TblSortRows when you want to sort the table window rows in descending order. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_SortIncreasing">
            <summary>
            You specify this constant for Sal.TblSortRows when you want to sort the table window rows in ascending order. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_Split_Adjustable">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_TempRow">
            <summary>
            This constant represents a temporary row that you can use with the SalTblSetContext function to move the context away from a table window row. 
            You can also use it with the Sal.TblQueryContext function. Value = 0x7FFFFFF1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_XOverLockedColumns">
            <summary>
            Sal.TblObjectsFromPoint returns this constant when the X coordinate is in a locked column. Value = 0x0200
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_XOverLockedColumnsBorder">
            <summary>
            Sal.TblObjectsFromPoint returns this constant when the X coordinate is between a locked column and an unlocked column.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_XOverRowHeader">
            <summary>
            Sal.TblObjectsFromPoint returns this constant when the X coordinate is in a row header. Value = 0x0100
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_XOverUnlockedColumns">
            <summary>
            Sal.TblObjectsFromPoint returns this constant when the X coordinate is in an unlocked column. Value = 0x0400
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_YOverColumnHeader">
            <summary>
            Sal.TblObjectsFromPoint returns this constant when the Y coordinate is in a column header. Value = 0x01
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_YOverNormalRows">
            <summary>
            Sal.TblObjectsFromPoint returns this constant when the Y coordinate is in a row in the upper part of a split table window
            or in a row in a non-split table window. Value = 0x04
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_YOverSplitBar">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TBL_YOverSplitRows">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TPM_CenterAlign">
            <summary>
            Use this constant with Sal.TrackPopupMenu to center-align the pop-up menu. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TPM_ContextMenu">
            <summary>
            Use this flag with Sal.TrackPopupMenuwhen displaying a popup menu in response to SAM_ContextMenu. 
            This flag sets the focus to the window specified in Sal.TrackPopupMenu
            and displays the popup left aligned with the horizontal screen coordinate. Value = 0x4000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TPM_CursorX">
            <summary>
            Use this constant with Sal.TrackPopupMenu to tell to use the mouse cursor location instead of nX. Value = 0x1000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TPM_CursorY">
            <summary>
            Use this constant with Sal.TrackPopupMenu to tell to use the mouse cursor location instead of nY. Value = 0x2000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TPM_LeftAlign">
            <summary>
            Use this constant with Sal.TrackPopupMenu to left-align the pop-up menu (default) to its horizontal screen coordinate. 
            This coordinate identifies the cursor location, or the point specified by nX/nY. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TPM_LeftButton">
            <summary>
            Use this constant with Sal.TrackPopupMenu to establish the left mouse button as the one with which to click on menu items (default). Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TPM_RightAlign">
            <summary>
            Use this constant with Sal.TrackPopupMenu to right-align the pop-up menu to its horizontal screen coordinate. 
            This coordinate identifies the cursor location, or the point specified by nX/nY. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TPM_RightButton">
            <summary>
            Use this constant with Sal.TrackPopupMenu to establish the right mouse button as the one with which to click on menu items. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_Any">
            <summary>
            Use this constant to specify the first child window of any type. 
            Use TYPE_Any with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x7fffffff
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_BkgdText">
            <summary>
            Use this constant to specify that a child window's object type is label control. 
            Use TYPE_BkgdText with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x800
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_CheckBox">
            <summary>
            Use this constant to specify that a child window's object type is check box. 
            Use TYPE_CheckBox with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x80
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_ChildTable">
            <summary>
            Use this constant to specify that a child window's object type is child table window. 
            Use TYPE_ChildTable with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x80000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_ComboBox">
            <summary>
            Use this constant to specify that a child window's object type is combo box. 
            Use TYPE_ComboBox with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x4000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_ActiveX">
            <summary>
            Use this constant to specify that a child window's object type is an ActiveX control.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_CustControl">
            <summary>
            Use this constant to specify that a child window's object type is custom control. 
            Use TYPE_CustControl with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x4000000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_AccFrame">
            <summary>
            Use this constant to specify that a child window’s object type is an accessory frame. 
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_DataField">
            <summary>
            Use this constant to specify that a child window's object type is data field. 
            Use TYPE_DataField with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 8
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_DialogBox">
            <summary>
            Use this constant to specify that a window's object type is dialog box. 
            Use TYPE_DialogBox with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_FormToolBar">
            <summary>
            Use this constant to specify that a child window's object type is form tool bar. 
            Use TYPE_FormToolBar with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x200000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_FormWindow">
            <summary>
            Use this constant to specify that a window's object type is form window. 
            Use TYPE_FormWindow with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_Frame">
            <summary>
            Use this constant to specify that a child window's object type is frame. 
            Use TYPE_Frame with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x10000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_GroupBox">
            <summary>
            Use this constant to specify that a child window's object type is group box. 
            Use TYPE_GroupBox with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x100
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_HorizScrollBar">
            <summary>
            Use this constant to specify that a child window's object type is horizontal scroll bar. 
            Use TYPE_HorizScrollBar with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x200
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_Line">
            <summary>
            Use this constant to specify that a child window's object type is line. 
            Use TYPE_Line with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x8000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_ListBox">
            <summary>
            Use this constant to specify that a child window's object type is list box. 
            Use TYPE_ListBox with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x2000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_MDIWindow">
            <summary>
            Use this constant to specify that a window's object type is MDI window. 
            Use TYPE_MDIWindow with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x100000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_MultilineText">
            <summary>
            Use this constant to specify that a child window's object type is multi-line text field. 
            Use TYPE_MultilineText with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 16
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_OptButton">
            <summary>
            Use this constant to specify that a child window's object type is option button. 
            Use TYPE_OptButton with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x2000000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_Picture">
            <summary>
            Use this constant to specify that a child window's object type is picture. 
            Use TYPE_Picture with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x20000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_PushButton">
            <summary>
            This constant specifies that a child window's object type is push button. 
            Use TYPE_PushButton with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 32
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_RadioButton">
            <summary>
            This constant specifies that a child window's object type is radio button. 
            Use TYPE_RadioButton with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 64
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_TableColumn">
            <summary>
            This constant specifies that a child window's object type is table window column. 
            Use TYPE_TableColumn with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x1000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_TableWindow">
            <summary>
            This constant specifies that a window's object type is table window. 
            Use TYPE_TableWindow with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_VertScrollBar">
            <summary>
            This constant specifies that a child window's object type is vertical scroll bar. 
            Use TYPE_VertScrollBar with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x400
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_NavBar">
            <summary>
            This constant specifies that a child window's object type is a navigation bar. 
            Use  with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 629
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_NavPane">
            <summary>
            This constant specifies that a child window's object type is a navigation pane inside a navigation bar.
            Use  with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 631
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_TabBar">
            <summary>
            This constant specifies that a child window's object type is a tab bar.
            Use  with the Sal.GetFirstChild, Sal.GetNextChild, and Sal.GetType functions. Value = 0x00040000
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_RichTextControl">
            <summary>
            This constant specifies that a child window's object type is a rich text edit control.
            The VisRichEdit control used to return TYPE_CustControl, it now returns TYPE_RichTextControl.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_GridWindow">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_ChildGrid">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_DatePicker">
            <summary>
            This constant specifies that a child window's object type is a date picker control.
            The VisCalendar control used to return TYPE_CustControl, it now returns TYPE_DatePicker.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TYPE_DateTimePicker">
            <summary>
            This constant specifies that a child window's object type is a date picker control.
            The VisCalendarDropDown control used to return TYPE_CustControl, it now returns TYPE_DateTimePicker.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.VALIDATE_Cancel">
            <summary>
            This constant indicates that validation of the contents of a data field, multiline text field, combo box, or table window column failed. 
            Focus returns to the edited object. VALIDATE_Cancel is one of three possible return values from the SAM_Validate and SAM_RowValidate messages. 
            It is also one of two possible return values from the Sal.SendValidateMsg message. Value = 0
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.VALIDATE_Ok">
            <summary>
            This constant indicates that some user action took place and that the focus moved from the edited object. 
            Examples of user action include tabbing to another object, using the mouse to click on another object, 
            or using a mnemonic or accelerator to activate another object. 
            VALIDATE_Ok is one of three possible return values from the SAM_Validate and SAM_RowValidate messages. 
            It is also one of two possible return values from the Sal.SendValidateMsg message. 
            Performs its own validation if you do not trap and process the SAM_Validate message. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.VALIDATE_OkClearFlag">
            <summary>
            This constant indicates that some user action took place and that cleared the field edited flag. 
            VALIDATE_OkClearFlag is one of three possible return values from the SAM_Validate and SAM_RowValidate messages. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.Window_Invalid">
            <summary>
            The Sal.GetWindowState function returns this constant when the specified window handle is not valid. Value = 1
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.Window_Maximized">
            <summary>
            The Sal.GetWindowState function returns this constant when the specified window is maximized. 
            You can also specify this constant when you call the Sal.LoadAppAndWait function. Value = 3
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.Window_Normal">
            <summary>
            The Sal.GetWindowState function returns this constant when the specified window exists on the screen and is neither maximized nor minimized. 
            You can also specify this constant when you call the Sal.LoadAppAndWait function. Value = 5
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.Window_NotVisible">
            <summary>
            The Sal.GetWindowState function returns this constant when the specified window is not visible on the screen. 
            You can also specify this constant when you call the Sal.LoadAppAndWait function. Value = 2
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.Window_Minimized">
            <summary>
            The Sal.GetWindowState function returns this constant when the specified window is minimized (iconic). 
            You can also specify this constant when you call the Sal.LoadAppAndWait function. Value = 4
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.WM_DDE_Ack">
            <summary>
            DDE messages
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.CREATE_Hidden">
            <summary>
            Flags passed to Sal.CreateWindowEx
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TRACE_File">
            <summary>
            Trace constants used by Sal.StartTrace
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.EVENT_ERROR">
            <summary>
            Event constants used by Sal.Trace
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.VT_EMPTY">
            <summary>
            Variant types
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.SAL_VARIANT">
            <summary>
            COM to SAL type mapping
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DOCK_None">
            <summary>
            Dockable dialogs constants
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.TraceSQL">
            <summary>
            trace switches
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sys.TraceInfo(System.Diagnostics.TraceSwitch,System.String,System.Object[])">
            <summary>
            Logs an information
            </summary>
            <param name="traceswitch"></param>
            <param name="text"></param>
            <param name="object"></param>
        </member>
        <member name="M:PPJ.Runtime.Sys.TraceError(System.Diagnostics.TraceSwitch,System.String,System.Object[])">
            <summary>
            Logs an error
            </summary>
            <param name="traceswitch"></param>
            <param name="text"></param>
            <param name="object"></param>
        </member>
        <member name="M:PPJ.Runtime.Sys.TraceWarning(System.Diagnostics.TraceSwitch,System.String,System.Object[])">
            <summary>
            Logs a warning
            </summary>
            <param name="traceswitch"></param>
            <param name="text"></param>
            <param name="object"></param>
        </member>
        <member name="M:PPJ.Runtime.Sys.TraceVerbose(System.Diagnostics.TraceSwitch,System.String,System.Object[])">
            <summary>
            Logs extra information
            </summary>
            <param name="traceswitch"></param>
            <param name="text"></param>
            <param name="object"></param>
        </member>
        <member name="M:PPJ.Runtime.Sys.TraceException(System.Diagnostics.TraceSwitch,System.Exception,System.Diagnostics.TraceLevel)">
            <summary>
            Logs an exception
            </summary>
            <param name="traceswitch"></param>
            <param name="exception"></param>		
        </member>
        <member name="M:PPJ.Runtime.Sys.LogNotImplemented">
            <summary>
            Logs the call to a method that is not yet implemented.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sys.LogNotSupported">
            <summary>
            Logs the call to a method that is not supported.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Sys.GetExceptionHResult(System.Exception)">
            <summary>
            Reads the protected HResult property.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="F:PPJ.Runtime.Sys.Namespace">
            <summary>
            The application's main namespace.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.hWndItem">
            <summary>
            Window handle of the current control.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.hWndForm">
            <summary>
            Window handle of the current form or dialog.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.hWndMDI">
            <summary>
            Window handle of the current MDI.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.strArgArray">
            <summary>
            This is a dynamic array which contains the command line arguments.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.nArgCount">
            <summary>
            This variable's value is equal to the number of command line arguments you enter.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.wParam">
            <summary>
            The wParam value used in the last message.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.lParam">
            <summary>
            The lParam value used in the last message.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.hWndNULL">
            <summary>
            Use this to detect if a function that returns a window handle succeeded.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.NUMBER_Null">
            <summary>
            Use this constant to set a Number to a null value or to check if a Number value is a null. Value = null (the same as \0 in C programming)
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.STRING_Null">
            <summary>
            Use this constant to set a String to a null value or to check if a String value is a null. Value = null (the same as \0 in C programming)
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Sys.DATETIME_Null">
            <summary>
            Use this constant to set a Date/Time to a null value or to check if a Date/Time value is null.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sys.LogFile">
            <summary>
            Returns/Sets the file used to log
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Sys.CultureInfo">
            <summary>
            Returns the current CultureInfo.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalBoolean">
            <summary>
            SAL Boolean basic type.
            This is exactly the same as SalNumber.
            It is automatically casted to/from SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.#ctor(System.Boolean)">
            <summary>
            Creates a new SalBoolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.#ctor(System.DBNull)">
            <summary>
            Creates a null SalBoolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.#ctor(PPJ.Runtime.SalNumber)">
            <summary>
            Creates a new SalBoolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.#ctor(System.Decimal)">
            <summary>
            Creates a new SalBoolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(PPJ.Runtime.SalBoolean)~System.Decimal">
            <summary>
            Automatic casting from SalBoolean to decimal.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(PPJ.Runtime.SalBoolean)~System.Int32">
            <summary>
            Automatic casting from SalBoolean to int.
            Does not throw an OverflowException if the number is truncated.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(PPJ.Runtime.SalBoolean)~System.Double">
            <summary>
            Automatic casting from SalBoolean to double.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(PPJ.Runtime.SalBoolean)~System.Single">
            <summary>
            Automatic casting from SalBoolean to float.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(PPJ.Runtime.SalBoolean)~System.IntPtr">
            <summary>
            Cast to IntPtr
            Does not throw an OverflowException if the number is truncated.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Explicit(PPJ.Runtime.SalBoolean)~System.UInt32">
            <summary>
            Automatic casting from SalBoolean to uint.
            Does not throw an OverflowException if the number is truncated.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Explicit(PPJ.Runtime.SalBoolean)~System.Int64">
            <summary>
            Automatic casting from SalBoolean to long.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Explicit(PPJ.Runtime.SalBoolean)~System.UInt64">
            <summary>
            Automatic casting from SalBoolean to ulong.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Explicit(PPJ.Runtime.SalBoolean)~System.Char">
            <summary>
            Automatic casting from SalBoolean to char.
            Does not throw an OverflowException if the number is truncated.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Explicit(PPJ.Runtime.SalBoolean)~System.Int16">
            <summary>
            Casting from SalBoolean to short.
            Does not throw an OverflowException if the number is truncated.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Explicit(PPJ.Runtime.SalBoolean)~System.UInt16">
            <summary>
            Casting from SalBoolean to ushort.
            Does not throw an OverflowException if the number is truncated.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Explicit(PPJ.Runtime.SalBoolean)~System.Byte">
            <summary>
            Casting from SalBoolean to byte.
            Does not throw an OverflowException if the number is truncated.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(PPJ.Runtime.SalNumber)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from SalNumber to SalBoolean.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(System.DBNull)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from DBNull to SalBoolean.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(System.Decimal)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from Decimal to SalBoolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(System.Double)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from double to SalBoolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(System.Single)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from float to SalBoolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(System.Int32)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from int to SalBoolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(System.UInt32)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from uint to SalBoolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(System.Boolean)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from bool to SalBoolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(System.Int64)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from long to SalBoolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(System.UInt64)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from long to SalBoolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(System.Int16)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from short to SalBoolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(System.Byte)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from byte to SalBoolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(System.Char)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from char to SalBoolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.Add(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalBoolean)">
            <summary>
            + operator for adding two SalBoolean objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.Subtract(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalBoolean)">
            <summary>
            - operator for subtracting two SalBoolean objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.Multiply(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalBoolean)">
            <summary>
            * operator for multiplying two SalBoolean objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.Divide(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalBoolean)">
            <summary>
            / operator for dividing two SalBoolean objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.Negate(PPJ.Runtime.SalBoolean)">
            <summary>
            Negation operator.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.Compare(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalBoolean)">
            <summary>
            Compares two SalBoolean objects
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Equality(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalBoolean)">
            <summary>
            == operator for comparing two SalBoolean objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Inequality(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalBoolean)">
            <summary>
            != operator for comparing two SalBoolean objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_GreaterThan(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalBoolean)">
            <summary>
            &gt; operator for comparing two SalBoolean objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_LessThan(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalBoolean)">
            <summary>
            &lt; operator for comparing two SalBoolean objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_GreaterThanOrEqual(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalBoolean)">
            <summary>
            &gt;= operator for comparing two SalBoolean objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_LessThanOrEqual(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalBoolean)">
            <summary>
            &lt;= operator for comparing two SalBoolean objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_Implicit(PPJ.Runtime.SalBoolean)~System.Boolean">
            <summary>
            Automatic casting from SalBoolean to boolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_LogicalNot(PPJ.Runtime.SalBoolean)">
            <summary>
            ! boolean NOT operator
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_BitwiseOr(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalBoolean)">
            <summary>
            Short-circuit | operator
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.SalBoolean.op_BitwiseAnd(PPJ.Runtime.SalBoolean,PPJ.Runtime.SalBoolean)" -->
        <member name="M:PPJ.Runtime.SalBoolean.op_True(PPJ.Runtime.SalBoolean)">
            <summary>
            Short-circuit operator
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.op_False(PPJ.Runtime.SalBoolean)">
            <summary>
            Short-circuit operator
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.Equals(System.Object)">
            <summary>
            Overrides the Object.Equals() method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.GetHashCode">
            <summary>
            Overrides the Object.GetHashCode() method
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.ToString">
            <summary>
            Converts the numeric value to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value to a string using the specified format provider.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.ToString(System.String)">
            <summary>
            Converts the numeric value to a string using the specified format string.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value to a string using the specified format string and provider.
            </summary>
            <param name="format"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.ToString(System.Int32)">
            <summary>
            Converts the truncated numeric value to a string.
            </summary>
            <param name="decimals"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalBoolean.ToString(System.Int32,PPJ.Runtime.SalString@)">
            <summary>
            Converts the truncated numeric value to a string.
            </summary>
            <param name="decimals"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.SalBoolean.IsNull">
            <summary>
            Checks if this SalBoolean object contains a null value.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:PPJ.Runtime.SalBoolean.Value">
            <summary>
            Returns the inner decimal value
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalBoolean.Array">
            <summary>
            Dynamic array class for the SalBoolean type.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalDateTime">
            <summary>
            SAL Date/Time basic type.
            It wraps .NET native DateTime type.
            SalDateTime objects are automatically cast to and from DateTime.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.#ctor(System.DateTime)">
            <summary>
            Creates a new SalDateTime.
            </summary>
            <param name="x">DateTime initial value</param>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new SalDateTime
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new SalDateTime
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new SalDateTime
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <param name="milliseconds"></param>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.#ctor(System.DBNull)">
            <summary>
            Creates a null SalDateTime
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.ToDateTime">
            <summary>
            Returns the DateTime value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.op_Implicit(PPJ.Runtime.SalDateTime)~System.DateTime">
            <summary>
            Automatic casting to native DateTime.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.op_Implicit(PPJ.Runtime.SalDateTime)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from SalDateTime to SalBoolean
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.op_Implicit(System.DBNull)~PPJ.Runtime.SalDateTime">
            <summary>
            Automatic casting from DBNull to SalDateTime.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.op_Implicit(System.DateTime)~PPJ.Runtime.SalDateTime">
            <summary>
            Automatic casting to SalDateTime.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.op_Implicit(PPJ.Runtime.SalDateTime)~System.Boolean">
            <summary>
            Automatic casting from SalDateTime to boolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.op_True(PPJ.Runtime.SalDateTime)">
            <summary>
            logical TRUE operator for boolean expressions
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.op_False(PPJ.Runtime.SalDateTime)">
            <summary>
            logical FALSE operator for boolean expressions
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.op_LogicalNot(PPJ.Runtime.SalDateTime)">
            <summary>
            ! boolean NOT operator
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.AddDays(System.Double)">
            <summary>
            Add days or fraction of days to the date.
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.op_Addition(PPJ.Runtime.SalDateTime,PPJ.Runtime.SalNumber)">
            <summary>
            + operator for adding a SalNumber to a SalDateTime.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.op_Addition(PPJ.Runtime.SalNumber,PPJ.Runtime.SalDateTime)">
            <summary>
            + operator for adding a SalNumber to a SalDateTime.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.Subtract(PPJ.Runtime.SalDateTime)">
            <summary>
            Subtract SalDateTime from SalDateTime.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.op_Subtraction(PPJ.Runtime.SalDateTime,PPJ.Runtime.SalNumber)">
            <summary>
            - operator for subtracting a SalNumber from a SalDateTime.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.op_Subtraction(PPJ.Runtime.SalDateTime,PPJ.Runtime.SalDateTime)">
            <summary>
            - operator for subtracting a SalDateTime from a SalDateTime.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.op_Subtraction(PPJ.Runtime.SalDateTime,System.DateTime)">
            <summary>
            - operator for subtracting a DateTime from a SalDateTime.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.op_Subtraction(System.DateTime,PPJ.Runtime.SalDateTime)">
            <summary>
            - operator for subtracting a SalDateTime from a DateTime.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.Compare(PPJ.Runtime.SalDateTime,PPJ.Runtime.SalDateTime)">
            <summary>
            Compares two SalDateTime
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.Equals(System.Object)">
            <summary>
            Overrides the Object.Equals() method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.GetHashCode">
            <summary>
            Overrides the Object.GetHashCode() method
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.ToString(PPJ.Runtime.SalString@)">
            <summary>
            Converts the date/time value to a string value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.ToString">
            <summary>
            Converts the date/time value to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.ToString(System.String)">
            <summary>
            Converts a date/time value to a string value using the specified format string.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts a date/time value to a string value.
            </summary>
            <param name="format"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.GetDefaultLongFormat">
            <summary>
            Composes the default date/time format by appending the milliseconds
            to the system's pattern for the time string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.Day">
            <summary>
            Returns the day portion (1 to 31) of a date/time value or returns -1 if you specify
            DATETIME_Null as a parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.Hour">
            <summary>
            Returns the hour portion (0 to 23) of a date/time value or returns -1 if you specify
            DATETIME_Null as a parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.Minute">
            <summary>
            Returns the minute portion (0 to 59) of a date/time value or returns -1 if you specify
            DATETIME_Null as a parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.Month">
            <summary>
            Returns the month portion (1 to 12) of a date/time value or returns -1 if you specify
            DATETIME_Null as a parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.MonthBegin">
            <summary>
            Returns the date of the first day of the month or it returns DATETIME_Null if the
            value you specify is null. For example, if dtDateTime is December 25, 1992, SalDateMonthBegin
            returns December 1, 1992.
            </summary>
            <returns>dtMonthBegin</returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.Quarter">
            <summary>
            Returns the quarter of the year (1 to 4) of a date/time value or returns -1 if you
            specify DATETIME_Null as a parameter.
            </summary>
            <returns>nQuarter</returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.QuarterBegin">
            <summary>
            Returns the date of the first day of the quarter of a date/time value or it returns
            DATETIME_Null if the value you specify is null.
            </summary>
            <returns>dtQuarterBegin</returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.Second">
            <summary>
            Returns the seconds portion (0 to 59) of a date/time value or returns -1 if you specify
            DATETIME_Null as a parameter.
            </summary>
            <returns>nSeconds</returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.WeekBegin">
            <summary>
            Returns the date of the previous Monday or the current day if it is a Monday or it
            returns DATETIME_Null if the value you specify is null.
            </summary>
            <returns>dtWeekBegin</returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.Weekday">
            <summary>
            Returns the day of the week as a number between 0 and 6 or returns -1 if you specify
            DATETIME_Null as a parameter. 0 represents Saturday, 1 represents Sunday, and
            so on.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.Year">
            <summary>
            Returns the year portion of a date or returns -1 if you specify DATETIME_Null as
            a parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalDateTime.YearBegin">
            <summary>
            Returns the date of the first day of the year or it returns DATETIME_Null if the
            value you specify is null.
            </summary>
            <param name="dtDateTime">A date/time value.</param>
            <returns>dtYearBegin</returns>
        </member>
        <member name="P:PPJ.Runtime.SalDateTime.IsNull">
            <summary>
            Checks if this SalDateTime object contain a null value.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:PPJ.Runtime.SalDateTime.Value">
            <summary>
            Returns the inner DateTime value
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalDateTime.Ticks">
            <summary>
            Returns the number of ticks.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalDateTime.Current">
            <summary>
            Returns the PC's current date/time.
            </summary>
            <returns>dtNow</returns>
        </member>
        <member name="T:PPJ.Runtime.SalDateTime.Array">
            <summary>
            Dynamic array class for the SalDateTime type.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalFile">
            <summary>
            Contains the implementation form SalFileHandle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFile.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Text.Encoding,System.Boolean)">
            <summary>
            Opens, re-opens, creates, or deletes a file.
            </summary>
            <param name="fileName"></param>
            <param name="mode"></param>
            <param name="access"></param>
        </member>
        <member name="M:PPJ.Runtime.SalFile.Finalize">
            <summary>
            Finalizer, frees the GCHandle associated with this object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFile.FromHandle(System.IntPtr)">
            <summary>
            Retrieves the instance of this class associated to the GC handle.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFile.Close">
            <summary>
            Closes the file.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFile.GetChar">
            <summary>
            Returns the next character in an open file.
            </summary>
            <returns>byte</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFile.GetString(System.Int32)">
            <summary>
            Returns the next line from an open file.
            </summary>
            <param name="size">The maximum number of bytes to read.</param>
            <returns>string</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.SalFile.PutChar(System.Int32)" -->
        <member name="M:PPJ.Runtime.SalFile.PutString(System.String)">
            <summary>
            Writes a string to an open file.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:PPJ.Runtime.SalFile.ReadBytes(System.Int32)">
            <summary>
            Reads a buffer of bytes from an open file.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFile.ReadChars(System.Int32)">
            <summary>
            Reads a buffer of characters from an open file.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFile.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Positions the file pointer in an open file. The next file operation (such as a read
            or write) takes place at this new location.
            </summary>
            <param name="bytes"></param>
            <param name="position"></param>
        </member>
        <member name="M:PPJ.Runtime.SalFile.Tell">
            <summary>
            Returns the current position in an open file.
            </summary>
            <returns>position</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFile.Write(System.Byte[],System.Int32)">
            <summary>
            Writes a sequence of bytes to the open file.
            </summary>
            <param name="buf"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFile.Write(System.Char[],System.Int32)">
            <summary>
            Writes a sequence of characters to the open file.
            </summary>
            <param name="buf"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFile.WritePreamble">
            <summary>
            Writes the encoding preamble to the file only if the
            stream is at position 0.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFile.ReadPreamble">
            <summary>
            Reads the preamble and detects the encodind.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalFile.Handle">
            <summary>
            Returns the GC handle for this object.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalFile.FileStream">
            <summary>
            Returns the wrapped FileStream object.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalFile.Encoding">
            <summary>
            Returns the encoding.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalFile.IsBinary">
            <summary>
            Returns true if the file was opened in binary mode.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalFileHandle">
            <summary>
            
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.#ctor(System.IntPtr)">
            <summary>
            Creates a SalFileHandle and retrieves the inner SalFile from
            the specified handle. The handle must be a valid handle from another
            SalFileHandle instance, or zero.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.op_Explicit(PPJ.Runtime.SalFileHandle)~PPJ.Runtime.SalWindowHandle">
            <summary>
            Converts a SalFileHandle object into a SalWindowHandle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.op_Explicit(PPJ.Runtime.SalWindowHandle)~PPJ.Runtime.SalFileHandle">
            <summary>
            Converts a SalWindowHandle to a SalFileHandle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.op_Equality(PPJ.Runtime.SalFileHandle,PPJ.Runtime.SalFileHandle)">
            <summary>
            == operator for comparing two SalFileHandle objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.op_Inequality(PPJ.Runtime.SalFileHandle,PPJ.Runtime.SalFileHandle)">
            <summary>
            != operator for comparing two SalFileHandle objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.op_Equality(PPJ.Runtime.SalFileHandle,PPJ.Runtime.SalWindowHandle)">
            <summary>
            == operator for comparing a SalFileHandle to a SalWindowHandle
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.op_Inequality(PPJ.Runtime.SalFileHandle,PPJ.Runtime.SalWindowHandle)">
            <summary>
            != operator for comparing a SalFileHandle to a SalWindowHandle
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.op_Equality(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalFileHandle)">
            <summary>
            == operator for comparing a SalFileHandle to a SalWindowHandle
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.op_Inequality(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalFileHandle)">
            <summary>
            != operator for comparing a SalFileHandle to a SalWindowHandle
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.op_Implicit(PPJ.Runtime.SalFileHandle)~System.Boolean">
            <summary>
            Automatic casting from SalFileHandle to boolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.op_LogicalNot(PPJ.Runtime.SalFileHandle)">
            <summary>
            ! boolean NOT operator
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.op_True(PPJ.Runtime.SalFileHandle)">
            <summary>
            logical TRUE operator for boolean expressions
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.op_False(PPJ.Runtime.SalFileHandle)">
            <summary>
            logical FALSE operator for boolean expressions
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.Equals(System.Object)">
            <summary>
            Overrides the Object.Equals() method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.GetHashCode">
            <summary>
            Overrides the Object.GetHashCode() method
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.FromHandle(System.IntPtr)">
            <summary>
            Returns the SalFileHandle object from the handle
            </summary>
            <param name="num"></param>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.HandleException(System.Exception)">
            <summary>
            Logs the exception and saves the error code.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.Close">
            <summary>
            Closes a file.
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.Open(System.String,System.Int32)">
            <summary>
            Opens, re-opens, creates, or deletes a file.
            </summary>
            <param name="fileName">The name of the file to open, create, delete, or test.</param>
            <param name="flags">A constant that specifies the style in which to open the file. nStyle can be one or more styles combined using the bitwise OR (|) operator.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.Open(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Opens, re-opens, creates, or deletes a file.
            </summary>
            <param name="fileName">The name of the file to open, create, delete, or test.</param>
            <param name="flags">A constant that specifies the style in which to open the file. nStyle can be one or more styles combined using the bitwise OR (|) operator.</param>
            <param name="encoding">Encoder used to read/write characters.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.GetChar">
            <summary>
            Returns the next character in an open file.
            </summary>
            <param name="hFile">The handle of the open file.</param>
            <returns>nChar</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.GetChar(PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the next character in an open file.
            </summary>
            <param name="hFile">The handle of the open file.</param>
            <returns>nChar</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.GetString(System.Int32)">
            <summary>
            Returns the next line from an open file.
            Lines are terminated by \r\n or \r or \n
            </summary>
            <param name="buffer"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.GetString(PPJ.Runtime.SalString@,System.Int32)">
            <summary>
            Returns the next line from an open file.
            Lines are terminated by \r\n or \r or \n
            </summary>
            <param name="buffer"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.PutChar(System.Int32)">
            <summary>
            Writes a character to an open file.
            </summary>
            <param name="nChar">The ANSI numeric value of the character to write to hFile.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.PutString(System.String)">
            <summary>
            Writes a string to an open file.
            </summary>
            <param name="sString">The string to write.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.Read(System.Int32)">
            <summary>
            Reads a buffer of characters from an open file to a string .
            </summary>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.Read(PPJ.Runtime.SalString@,System.Int32)">
            <summary>
            Reads a buffer of characters from an open file to a string.
            </summary>
            <param name="str"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.Read(PPJ.Runtime.SalBinary@,System.Int32)">
            <summary>
            Reads a buffer of characters from an open file to a binary buffer.
            </summary>
            <param name="str"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.Seek(System.Int32,System.Int32)">
            <summary>
            Positions the file pointer in an open file. The next file operation (such as a read
            or write) takes place at this new location.
            </summary>
            <param name="nBytes">The specific position of the file pointer; the number of bytes from nPosition where the next file operation will take place.</param>
            <param name="nPosition">The general position of the file pointer; one of the following values: FILE_SeekBegin FILE_SeekCurrent FILE_SeekEnd</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.Tell">
            <summary>
            Returns the current position in an open file.
            </summary>
            <returns>nPos</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.Write(PPJ.Runtime.SalString,System.Int32)">
            <summary>
            Writes a string to an open file.
            </summary>
            <param name="str">The string to write to hFile.</param>
            <param name="length">The number of bytes to write.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.Write(PPJ.Runtime.SalBinary,System.Int32)">
            <summary>
            Writes a binary buffer to an open file.
            </summary>
            <param name="binary">The string to write to hFile.</param>
            <param name="length">The number of bytes to write.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.Copy(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean)">
            <summary>
            Copies the contents of one file (source) to another file (destination).
            </summary>
            <param name="sSourcePath">The full path name of the source file.</param>
            <param name="sDestPath">The full path name of the destination file.</param>
            <param name="bOverWrite">Specifies whether (TRUE) or not (FALSE) to overwrite the destination file. If the destination file already exists and bOverWrite is FALSE, then SalFileCopy fails, and returns FILE_CopyExist. If the destination file already exists and bOverWrite is TRUE, then SalFileCopy succeeds and the destination file is overwritten.</param>
            <returns>nStatus</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.CreateDirectory(PPJ.Runtime.SalString)">
            <summary>
            Creates a directory.
            </summary>
            <param name="sDir">The full path name of the new directory.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.GetCurrentDirectory(PPJ.Runtime.SalString@)">
            <summary>
            Gets the full path name of the current working directory.
            </summary>
            <param name="sPath">The full path name, including the drive letter, of the current working directory.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.GetDateTime(PPJ.Runtime.SalString,PPJ.Runtime.SalDateTime@)">
            <summary>
            Gets the modification date and time of the specified file.
            </summary>
            <param name="sFilename">The name of the file whose modification date you want.</param>
            <param name="dtDateTime">The modification date and time of sFilename.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.GetDrive">
            <summary>
            Gets the letter of the default (current) disk drive.
            </summary>
            <returns>sDriveLetter</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.SetDrive(PPJ.Runtime.SalString)">
            <summary>
            Sets the current disk drive to the specified drive letter.
            </summary>
            <param name="sDriveLetter">The new disk drive letter. The length of this parameter's value is one character.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.SetCurrentDirectory(PPJ.Runtime.SalString)">
            <summary>
            Changes the current working directory. If the specified path does not contain a drive
            letter, the default drive's current directory is changed. Otherwise, the specified
            drive's current directory is changed and the specified drive is made the
            current drive.
            </summary>
            <param name="sPath">The path name of the new current working directory.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.SetDateTime(PPJ.Runtime.SalString,PPJ.Runtime.SalDateTime)">
            <summary>
            Sets the modification date and time of the specified file.
            </summary>
            <param name="sFilename">The name of the file whose modification date you want to set.</param>
            <param name="dtDateTime">The modification date and time.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalFileHandle.RemoveDirectory(PPJ.Runtime.SalString)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="sDir">The full path name of the directory to delete.</param>
            <returns>bOk</returns>
        </member>
        <member name="P:PPJ.Runtime.SalFileHandle.Handle">
            <summary>
            Returns the handle for this SalFileHandle object
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalFileHandle.IsNull">
            <summary>
            Checks if this SalFileHandle object contains a null value.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:PPJ.Runtime.SalFileHandle.IsBinary">
            <summary>
            Returns true if the file was opened in binary mode.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalFileHandle.FileStream">
            <summary>
            Returns the wrapped FileStream object.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalFileHandle.LastError">
            <summary>
            Returns the last error code.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalFileHandle.Array">
            <summary>
            Dynamic array class for the SalFileHandle type.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalNumber">
            <summary>
            SAL Number basic type.
            It wraps .NET native Decimal type.
            SalNumber objects are automatically cast to and from
            SalBoolean, Decimal, and int.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(System.Decimal)">
            <summary>
            Creates a new SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(System.Double)">
            <summary>
            Creates a new SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(System.Single)">
            <summary>
            Creates a new SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(System.Int32)">
            <summary>
            Creates a new SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(System.UInt32)">
            <summary>
            Creates a new SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(System.Int64)">
            <summary>
            Creates a new SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(System.UInt64)">
            <summary>
            Creates a new SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(System.Int16)">
            <summary>
            Creates a new SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(System.UInt16)">
            <summary>
            Creates a new SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(System.Char)">
            <summary>
            Creates a new SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(System.Byte)">
            <summary>
            Creates a new SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(System.Boolean)">
            <summary>
            Creates a new SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(System.Enum)">
            <summary>
            Creates a new SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(System.IntPtr)">
            <summary>
            Creates a new SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(PPJ.Runtime.SalBoolean)">
            <summary>
            Creates a null SalNumber
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.#ctor(System.DBNull)">
            <summary>
            Creates a null SalNumber
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(PPJ.Runtime.SalNumber)~System.Decimal">
            <summary>
            Automatic casting from SalNumber to decimal.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(PPJ.Runtime.SalNumber)~System.Int32">
            <summary>
            Automatic casting from SalNumber to int.
            Does not throw an OverflowException if the number is truncated.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(PPJ.Runtime.SalNumber)~System.Double">
            <summary>
            Automatic casting from SalNumber to double.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(PPJ.Runtime.SalNumber)~System.Single">
            <summary>
            Automatic casting from SalNumber to float.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(PPJ.Runtime.SalNumber)~System.IntPtr">
            <summary>
            Cast to IntPtr
            Does not throw an OverflowException if the number is truncated.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Explicit(PPJ.Runtime.SalNumber)~System.UInt32">
            <summary>
            Automatic casting from SalNumber to uint.
            Does not throw an OverflowException if the number is truncated.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Explicit(PPJ.Runtime.SalNumber)~System.Int64">
            <summary>
            Automatic casting from SalNumber to long.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Explicit(PPJ.Runtime.SalNumber)~System.UInt64">
            <summary>
            Automatic casting from SalNumber to ulong.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Explicit(PPJ.Runtime.SalNumber)~System.Char">
            <summary>
            Automatic casting from SalNumber to char.
            Does not throw an OverflowException if the number is truncated.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Explicit(PPJ.Runtime.SalNumber)~System.Int16">
            <summary>
            Casting from SalNumber to short.
            Does not throw an OverflowException if the number is truncated.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Explicit(PPJ.Runtime.SalNumber)~System.UInt16">
            <summary>
            Casting from SalNumber to ushort.
            Does not throw an OverflowException if the number is truncated.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Explicit(PPJ.Runtime.SalNumber)~System.Byte">
            <summary>
            Casting from SalNumber to byte.
            Does not throw an OverflowException if the number is truncated.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(PPJ.Runtime.SalBoolean)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from SalBoolean to SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(System.DBNull)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from DBNull to SalNumber.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(System.Decimal)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from Decimal to SalNumber
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(System.Double)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from double to SalNumber
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(System.Single)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from float to SalNumber
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(System.Int32)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from int to SalNumber
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(System.UInt32)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from uint to SalNumber
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(System.Boolean)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from bool to SalNumber
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(System.Enum)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from Enum to SalNumber
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(System.IntPtr)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from IntPtr to SalNumber
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(System.Int64)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from long to SalNumber
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(System.UInt64)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from ulong to SalNumber
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(System.Int16)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from short to SalNumber
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(System.UInt16)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from ushort to SalNumber
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(System.Byte)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from byte to SalNumber
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(System.Char)~PPJ.Runtime.SalNumber">
            <summary>
            Automatic casting from char to SalNumber
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Add(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            + operators for adding two SalNumber objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Subtract(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            - operator for subtracting two SalNumber objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Multiply(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            * operator for multiplying two SalNumber objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Divide(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            / operator for dividing two SalNumber objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Increment(PPJ.Runtime.SalNumber)">
            <summary>
            ++ operator for incrementing SalNumber objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Decrement(PPJ.Runtime.SalNumber)">
            <summary>
            -- operator for decrementing SalNumber objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Negate(PPJ.Runtime.SalNumber)">
            <summary>
            Negation operator.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Compare(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Compares two SalNumbers values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Equality(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            == operator for comparing two SalNumber objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Inequality(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            != operator for comparing two SalNumber objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_GreaterThan(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            &gt; operator for comparing two SalNumber objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_LessThan(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            &lt; operator for comparing two SalNumber objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_GreaterThanOrEqual(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            &gt;= operator for comparing two SalNumber objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_LessThanOrEqual(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            &lt;= operator for comparing two SalNumber objects
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.SalNumber.op_BitwiseAnd(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)" -->
        <member name="M:PPJ.Runtime.SalNumber.op_BitwiseOr(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            | boolean OR operator
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_Implicit(PPJ.Runtime.SalNumber)~System.Boolean">
            <summary>
            Automatic casting from SalNumber to boolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.op_LogicalNot(PPJ.Runtime.SalNumber)">
            <summary>
            ! boolean NOT operator
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Equals(System.Object)">
            <summary>
            Overrides the Object.Equals() method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.GetHashCode">
            <summary>
            Overrides the Object.GetHashCode() method
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.ToString">
            <summary>
            Converts a numeric value to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.ToString(System.IFormatProvider)">
            <summary>
            Converts a numeric value to a string using the specified format provider.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.ToString(System.String)">
            <summary>
            Converts a numeric value to a string using the specified format string.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts a numeric value to a string using the specified format string and provider.
            </summary>
            <param name="format"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Abs">
            <summary>
            Computes a number's absolute value.
            </summary>
            <returns>nNum</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.ArcCos">
            <summary>
            Computes the arc cosine of a value in the range 0 to 1. The value's domain is -1
            to 1.
            </summary>
            <returns>nArcCos</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.ArcSin">
            <summary>
            Computes a value's arc sine. The value's domain is -1 to 1.
            </summary>
            <returns>nArcSin</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.ArcTan">
            <summary>
            Computes a value's arc tangent.
            </summary>
            <returns>nArcTan</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.ArcTan2(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Computes the arc tangent of two values. This function uses the signs of both parameters
            to determine the quadrant of the return value.
            </summary>
            <param name="nm_valueY">One of two values whose arc tangent you want.</param>
            <param name="nm_valueX">The other of two values whose arc tangent you want.</param>
            <returns>nArcTan2</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Cos">
            <summary>
            Computes an angle's cosine.
            </summary>
            <returns>nCos</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.CosH">
            <summary>
            Computes an angle's hyperbolic cosine.
            </summary>
            <returns>nCosH</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Exponent">
            <summary>
            Computes a value's exponential function.
            </summary>
            <returns>nNumExp</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.HighWord">
            <summary>
            Returns a number's high-order word value (most significant 16 bits).
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Hypot(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Computes the length of the hypotenuse of a right triangle, given the lengths of the
            other two sides.
            </summary>
            <param name="nX">The length of one side of a right triangle.</param>
            <param name="nY">The length of another side of a right triangle.</param>
            <returns>nHypotenuse</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Log">
            <summary>
            Computes a number's natural logarithm.
            </summary>
            <returns>nLog</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.LogBase10">
            <summary>
            Computes a number's base 10 logarithm.
            </summary>
            <returns>nLogBase10</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.LowWord">
            <summary>
            Returns a number's low-order word value (least significant 16 bits).
            </summary>
            <returns>nLo</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Max(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Returns the greater of two values.
            </summary>
            <param name="x">The first of two values.</param>
            <param name="y">The second of two values.</param>
            <returns>nNumMax</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Min(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Returns the lesser of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>nNumMin</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Mod(PPJ.Runtime.SalNumber)">
            <summary>
            Returns a number's modulo.
            </summary>
            <param name="nDividend">The dividend value.</param>
            <returns>nModulo</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Pi">
            <summary>
            Multiples a number by Pi. Pi is equal to 3.1415926535979323.
            </summary>
            <returns>nNumPi</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Power(PPJ.Runtime.SalNumber)">
            <summary>
            Computes nX raised to the power of nY. This function does not recognize integral,
            floating-point values greater than 2 to the 64th power, such as 1.0E100.
            </summary>
            <param name="nPower">The exponent.</param>
            <returns>nNumPower</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.RandInit(System.Int32)">
            <summary>
            Sets the starting point for generating a series of pseudo-random numbers using SalNumberRandom.
            </summary>
            <param name="nSeed">The starting point. A whole number in the range of 0 to 32767.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Random">
            <summary>
            Generates a pseudo-random number. The numbers generated by this function are integers
            (whole numbers) in the range 0 to 32767 (0 to 0x7FFF).
            </summary>
            <returns>nRandomNum</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Round">
            <summary>
            Returns a rounded number. If the fractional part of a number is greater than or equal
            to .5, rounds the number up. For example, the number 124.33 returns 124; the number 124.56 returns 125.
            </summary>
            <returns>nResult</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Sin">
            <summary>
            Computes an angle's sine.
            </summary>
            <returns>nSin</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.SinH">
            <summary>
            Computes an angle's hyperbolic sine.
            </summary>
            <returns>nSinH</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Sqrt">
            <summary>
            Computes a number's square root.
            </summary>
            <returns>nSqrt</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Tan">
            <summary>
            Computes an angle's tangent.
            </summary>
            <returns>nTan</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.TanH">
            <summary>
            Computes an angle's hyperbolic tangent.
            </summary>
            <returns>nTanH</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.ToString(System.Int32)">
            <summary>
            Converts a number to a string.
            </summary>
            <param name="decimals"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.ToString(System.Int32,PPJ.Runtime.SalString@)">
            <summary>
            Converts a number to a string.
            </summary>
            <param name="decimals"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.Truncate(System.Int32,System.Int32)">
            <summary>
            Truncates a number.
            </summary>
            <param name="nPrecision">The number of digits to display, starting with the leftmost.</param>
            <param name="nScale">The number of digits to the right of the decimal point. The nPrecision parameter must be large enough to hold the number of digits that you specify in this parameter.</param>
            <returns>nResult</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.ToWindowHandle">
            <summary>
            Converts a number to a window handle.
            </summary>
            <param name="nNumber">The number to convert.</param>
            <returns>nNumber</returns>
        </member>
        <member name="M:PPJ.Runtime.SalNumber.ToCharacter">
            <summary>
            Converts a decimal value to a UNICODE character.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.SalNumber.IsNull">
            <summary>
            Checks if this SalNumber object contain a null value.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:PPJ.Runtime.SalNumber.Value">
            <summary>
            Returns the inner decimal value
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalNumber.Array">
            <summary>
            Dynamic array class for the SalNumber type.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalResource">
            <summary>
            Base class for SalResource* classes.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalResource.#ctor(System.String)">
            <summary>
            Constructs a SalResource object.
            </summary>
            <param name="ResourceName">The name of the embedded resource file.</param>
        </member>
        <member name="M:PPJ.Runtime.SalResource.#ctor(System.String,System.ComponentModel.ISite)">
            <summary>
            Constructs a SalResource object at design time.
            </summary>
            <param name="name"></param>
            <param name="site"></param>
        </member>
        <member name="M:PPJ.Runtime.SalResource.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
            Constructs a SalResource object.
            </summary>
            <param name="name"></param>
            <param name="asm"></param>
        </member>
        <member name="M:PPJ.Runtime.SalResource.Create(System.String,System.Reflection.Assembly)">
            <summary>
            Creates the SalResource object.
            </summary>
            <param name="name"></param>
            <param name="asm"></param>
        </member>
        <member name="M:PPJ.Runtime.SalResource.FromName(System.String)">
            <summary>
            Returns the requested resource.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalResource.GetResource(System.Type,System.String)">
            <summary>
            Extracts the SalResource instance from the Res container type.
            </summary>
            <param name="asm"></param>
            <param name="resType"></param>
            <param name="resName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalResource.LoadManifestResources(System.Reflection.Assembly)">
            <summary>
            Loads all the resources in the specified assembly.
            </summary>
            <param name="asm"></param>
        </member>
        <member name="M:PPJ.Runtime.SalResource.GetResourceTypeName(System.String)">
            <summary>
            Extracts the resource type name from the full name.
            </summary>
            <param name="qualifiedName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalResource.GetResourceName(System.String)">
            <summary>
            Extracts the resource name from the full name.
            </summary>
            <param name="qualifiedName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalResource.GetAssemblyName(System.String)">
            <summary>
            Returns the fully qualified type name from the resource full name.
            </summary>
            <param name="qualifiedName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalResource.GetFullName(System.String[],System.String)">
            <summary>
            Returns the full name of the resource.
            </summary>
            <param name="list"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalResource.GetStream">
            <summary>
            Returns the stream to be used to load the image bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalResource.GetImage">
            <summary>
            Loads the icon or a bitmap from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.SalResource.Name">
            <summary>
            Returns the name of the resource.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalResourceIcon">
            <summary>
            Represents a SAL icon resource.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalResourceImage">
            <summary>
            Represents a SAL bitmap resource.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalResourceCursor">
            <summary>
            Represents a SAL cursor resource.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalString">
            <summary>
            SAL String basic type.
            It wraps .NET String class.
            SalString objects are automatically cast to and from .NET String type.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.#ctor">
            <summary>
            Constructs a new SalString object containing an empty string.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.#ctor(System.String)">
            <summary>
            Constructs a new SalString object.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:PPJ.Runtime.SalString.#ctor(System.Char[])">
            <summary>
            Constructs a new SalString object.
            </summary>
            <param name="chars"></param>
        </member>
        <member name="M:PPJ.Runtime.SalString.#ctor(System.Char[],System.Int32,System.Int32)">
            <summary>
            Constructs a new SalString object.
            </summary>
            <param name="chars"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:PPJ.Runtime.SalString.#ctor(System.Byte[])">
            <summary>
            Constructs a new SalString object.
            </summary>
            <param name="blob"></param>
        </member>
        <member name="M:PPJ.Runtime.SalString.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Constructs a new SalString object.
            </summary>
            <param name="blob"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:PPJ.Runtime.SalString.op_Implicit(System.String)~PPJ.Runtime.SalString">
            <summary>
            Automatic casting from String to SalString.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.op_Implicit(System.DBNull)~PPJ.Runtime.SalString">
            <summary>
            Automatic casting from DBNull to SalString.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.op_Implicit(PPJ.Runtime.SalString)~System.String">
            <summary>
            Automatic casting from SalString to String.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.op_Implicit(PPJ.Runtime.SalString)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from SalString to SalBoolean
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Concat(PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            + operator for concatenating two SalString objects.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.Compare(PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Compares two strings lexicographically to match SAL comparison rules.
            SAL apparently uses _xcmp().
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.op_Equality(PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            == operator for comparing two SalString objects.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.op_Inequality(PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            != operator for comparing two SalString objects.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.op_GreaterThan(PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            &gt; operator for comparing two SalString objects.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.op_GreaterThanOrEqual(PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            &gt;= operator for comparing two SalString objects.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.op_LessThan(PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            &lt; operator for comparing two SalString objects.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.op_LessThanOrEqual(PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            &lt;= operator for comparing two SalString objects.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.op_Implicit(PPJ.Runtime.SalString)~System.Boolean">
            <summary>
            Automatic casting from SalString to boolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.op_True(PPJ.Runtime.SalString)">
            <summary>
            logical TRUE operator for boolean expressions
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.op_False(PPJ.Runtime.SalString)">
            <summary>
            logical FALSE operator for boolean expressions
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.op_LogicalNot(PPJ.Runtime.SalString)">
            <summary>
            ! logical NOT operator
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.Equals(System.Object)">
            <summary>
            Overrides the Object.Equals() method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.GetHashCode">
            <summary>
            Overrides the Object.GetHashCode() method
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ToString">
            <summary>
            Overrides the ToString() method and redirects it to the wrapped member.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ToHex">
            <summary>
            Encodes the string buffer to a hexadecimal string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.FromHex(System.String)">
            <summary>
            Decodes a hexadecimal string into a string.
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ToHandle">
            <summary>
            Converts a string to a number (handle) so it can be passed in a message
            using SalHStringTonumber.
            
            The handle is created using a GCHandle reference tos this string. Therefore
            once the strong reference is created, this string will never be garbage collected
            until the application exits.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.FromHandle(System.IntPtr)">
            <summary>
            Converts a number (string handle) to a string.
            </summary>
            <param name="num"></param>
        </member>
        <member name="M:PPJ.Runtime.SalString.FreeHandle(System.IntPtr)">
            <summary>
            Frees a string handle created using SalHStringTonumber.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:PPJ.Runtime.SalString.GetBlob">
            <summary>
            Returns the string content as an array of bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.SetBlob(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Assigns the blob buffer to the inner string.
            </summary>
            <param name="blob"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:PPJ.Runtime.SalString.Clone">
            <summary>
            Returns a copy of this string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Compress">
            <summary>
            Compresses the string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Compress(PPJ.Runtime.SalString@)">
            <summary>
            Compresses the string.
            </summary>
            <param name="sRet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.CompressInternal">
            <summary>
            Compresses the string. Use this function to compress strings for storage
            on disk or in the database. Use this function for long strings, or when storing
            images and so on.
            
            Uses the Fin algorithm written by Jussi Puttonen, Timo Raita and Jukka Teuhola and
            submitted to DDJ compression contest. http://www.jjj.de/crs4/lds_11.Readme
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.GetBufferLength">
            <summary>
            Returns the current buffer length of the string.
            </summary>
            <returns>nLength</returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.IsValidCurrency(System.Int32,System.Int32)">
            <summary>
            Verifies that an entire character string represents a valid currency value.
            </summary>
            <param name="precision"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.IsValidCurrency(System.Int32,System.Int32,System.IFormatProvider)">
            <summary>
            Verifies that an entire character string represents a valid currency value.
            </summary>
            <param name="precision"></param>
            <param name="scale"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.IsValidCurrency(System.Int32,System.Int32,System.String,System.IFormatProvider)">
            <summary>
            Verifies that an entire character string represents a valid currency value.
            </summary>
            <param name="precision"></param>
            <param name="scale"></param>
            <param name="format"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.IsValidDecimal(System.Int32,System.Int32)">
            <summary>
            Verifies that an entire character string represents a valid decimal value.
            </summary>
            <param name="nPrecision">The number of digits to display.</param>
            <param name="nScale">The number of digits to the right of the decimal point.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.IsValidDecimal(System.Int32,System.Int32,System.IFormatProvider)">
            <summary>
            Verifies that an entire character string represents a valid decimal value.
            </summary>
            <param name="nPrecision">The number of digits to display.</param>
            <param name="nScale">The number of digits to the right of the decimal point.</param>
            <param name="provider"></param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.IsValidDecimal(System.Int32,System.Int32,System.String,System.IFormatProvider)">
            <summary>
            Verifies that an entire character string represents a valid decimal value.
            </summary>
            <param name="nPrecision">The number of digits to display.</param>
            <param name="nScale">The number of digits to the right of the decimal point.</param>
            <param name="provider"></param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.IsValidDateTime">
            <summary>
            Verifies that an entire character string represents a valid date/time value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.IsValidDateTime(System.IFormatProvider)">
            <summary>
            Verifies that an entire character string represents a valid date/time value.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.IsValidDateTime(System.String,System.IFormatProvider)">
            <summary>
            Verifies that an entire character string represents a valid date/time value.
            </summary>
            <param name="format"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.IsValidNumber">
            <summary>
            Verifies that an entire character string represents a valid number value.
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.IsValidNumber(System.IFormatProvider)">
            <summary>
            Verifies that an entire character string represents a valid number value.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.IsValidNumber(System.String,System.IFormatProvider)">
            <summary>
            Verifies that an entire character string represents a valid number value.
            </summary>
            <param name="formant"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.IsValidInteger">
            <summary>
            Verifies that an entire character string represents a valid integer value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.IsValidInteger(System.String)">
            <summary>
            Verifies that an entire character string represents a valid integer value.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.IsValidIdentifierName">
            <summary>
            Returns TRUE if the string is a valid identifier.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalString.Left(System.Int32)">
            <summary>
            Returns a substring of a specified length starting at position zero.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Left(System.Int32,PPJ.Runtime.SalString@)">
            <summary>
            Returns a substring of a specified length starting at position zero.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Lop(PPJ.Runtime.SalString@)">
            <summary>
            Returns the UNICODE numeric value of the first character of a string in decimal format
            ane removes the first character of the string.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.FirstChar(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the UNICODE numeric value of the first character of a string in decimal format
            and removes the first character of the string.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ToLower">
            <summary>
            Converts a string to lowercase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ToLower(PPJ.Runtime.SalString@)">
            <summary>
            Converts a string to lowercase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Mid(System.Int32,System.Int32)">
            <summary>
            Returns a substring, starting at a specified position and containing a specified number of characters.
            </summary>
            <param name="pos"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Mid(System.Int32,System.Int32,PPJ.Runtime.SalString@)">
            <summary>
            Returns a substring, starting at a specified position and containing a specified number of characters.
            </summary>
            <param name="pos"></param>
            <param name="length"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ToProper">
            <summary>
            Converts a string to a proper name. In a proper name, the first
            letter of each word is uppercase; the remaining letters are lowercase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ToProper(PPJ.Runtime.SalString@)">
            <summary>
            Converts a string to a proper name. In a proper name, the first
            letter of each word is uppercase; the remaining letters are lowercase.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Repeat(System.Int32)">
            <summary>
            Concatenates a string with itself a specified number of times.
            </summary>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Repeat(System.Int32,PPJ.Runtime.SalString@)">
            <summary>
            Concatenates a string with itself a specified number of times.
            </summary>
            <param name="times"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Replace(System.Int32,System.Int32,System.String)">
            <summary>
            Replaces characters in one string with characters from another string.
            </summary>
            <param name="startPos"></param>
            <param name="length"></param>
            <param name="replace"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Replace(System.Int32,System.Int32,System.String,PPJ.Runtime.SalString@)">
            <summary>
            Replaces characters in one string with characters from another string.
            </summary>
            <param name="startPos"></param>
            <param name="length"></param>
            <param name="replace"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Right(System.Int32)">
            <summary>
            Returns a string of specified length,
            starting with the last character in the string.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Right(System.Int32,PPJ.Runtime.SalString@)">
            <summary>
            Returns a string of specified length,
            starting with the last character in the string.
            </summary>
            <param name="length"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Scan(System.String)">
            <summary>
            Searches for and returns the offset of a specified substring.
            Uses wildcard chars: % and _
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ScanInternal(System.String)">
            <summary>
            Searches for and returns the offset of a specified substring.
            Uses wildcard chars: % and _
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.SalString.SetBufferLength(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.SalString.SetBufferLength(PPJ.Runtime.SalString@,System.Int32)" -->
        <member name="M:PPJ.Runtime.SalString.ToDate">
            <summary>
            Converts a string to a date/time value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ToDate(System.String)">
            <summary>
            Converts a string to a date/time value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ToDate(System.String,System.IFormatProvider)">
            <summary>
            Converts a string to a date/time value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Tokenize(System.String,System.String)">
            <summary>
            Parses a string into substrings (tokens) based on specified start and end delimiters.
            </summary>
            <param name="startDel"></param>
            <param name="endDel"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Tokenize(System.String,System.String,PPJ.Runtime.SalArray{PPJ.Runtime.SalString})">
            <summary>
            Parses a string into substrings (tokens) based on specified start and end delimiters.
            </summary>
            <param name="startDel"></param>
            <param name="endDel"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.TokenizeInternal(System.String,System.String)">
            <summary>
            Parses a string into substrings (tokens) based on specified start and end delimiters.
            </summary>
            <param name="startDel"></param>
            <param name="endDel"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ToNumber">
            <summary>
            Converts a string to a number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ToNumber(System.String)">
            <summary>
            Converts a string to a number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ToNumber(System.String,System.IFormatProvider)">
            <summary>
            Converts a string to a number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Trim">
            <summary>
            Strips leading and trailing blanks and compresses multiple spaces and tabs within
            a string to single spaces.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Trim(PPJ.Runtime.SalString@)">
            <summary>
            Strips leading and trailing blanks and compresses multiple spaces and tabs within
            a string to single spaces.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.TrimInternal">
            <summary>
            Strips leading and trailing blanks and compresses multiple spaces and tabs within
            a string to single spaces.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Uncompress">
            <summary>
            Decompresses the string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.Uncompress(PPJ.Runtime.SalString@)">
            <summary>
            Decompresses the string.
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.UncompressInternal">
            <summary>
            Decompresses a compressed string.
            
            Uses the Fin public algorithm written by Jussi Puttonen, Timo Raita and Jukka Teuhola and
            submitted to DDJ compression contest. http://www.jjj.de/crs4/lds_11.Readme
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ToUpper">
            <summary>
            Converts a string to uppercase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ToUpper(PPJ.Runtime.SalString@)">
            <summary>
            Converts a string to uppercase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
            <summary>
            Parse a number string without throwing an exception.
            </summary>
            <param name="text"></param>
            <param name="style"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.TryParse(System.String,System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
            <summary>
            Parse a numeric string stripping out all formatting chars that are not applied to the number.
            </summary>
            <param name="text"></param>
            <param name="style"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.TryParse(System.String,System.IFormatProvider,System.DateTime@)">
            <summary>
            Parse a DateTime string without returning an exception.
            </summary>
            <param name="text"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.TryParse(System.String,System.String,System.IFormatProvider,System.DateTime@)">
            <summary>
            Parse a DateTime string without returning an exception.
            </summary>
            <param name="text"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.TryParse(System.String,System.String[],System.IFormatProvider,System.DateTime@)">
            <summary>
            Parse a DateTime string without returning an exception.
            </summary>
            <param name="text"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.CheckPrecision(System.Decimal,System.Int32,System.Int32)">
            <summary>
            Validates the precision and scale of the specified number.
            </summary>
            <param name="num"></param>
            <param name="precision"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.CheckAndFixSeparators(System.String@,System.Globalization.NumberFormatInfo)">
            <summary>
            Enforces the thousand separator rule (3 digits after the separator) because .NET parsing
            doesn't do it and incorrectly parses "1,,,,2" or "1,2" into 12.
            
            This function also converts the invariant decimal point to the local decimal point because 
            we should be able to parse "1.2" into 1.2 also when the local language uses a different 
            separator (when it doesn't collide with the standard decimal and thousand separators.
            Basiclly, in Swedish (for example), where
            the decimal separator is "," and the thousand separator is " " we should be able to parse "1.2"
            into a decimal number.
            </summary>
            <param name="text"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalString.ReleaseGCHandles(System.String@)">
            <summary>
            Used by the framework to free all GC handles that were allocated by SalString objects
            being transformed to handles (by the ToHandle() method) and never dealloced again by
            after having performed a call to FromHandle() call. Each handle need to be released
            directly when no longer used by calling the FreeHandle() method.
            This mechanism limits the memory leaks that are caused due above mentioned reason
            and is called when each explorer thread is being terminated. /Rakuse
            </summary>
            <param name="traceMessage"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.SalString.Length">
            <summary>
            Returns the string's length up to the terminator char.
            </summary>
            <returns>nLength</returns>
        </member>
        <member name="P:PPJ.Runtime.SalString.IsNull">
            <summary>
            Checks if this SalString object contains a null value.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:PPJ.Runtime.SalString.IsEmpty">
            <summary>
            Checks if this SalString object contains a null value or is empty.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:PPJ.Runtime.SalString.IsBlob">
            <summary>
            Blob flag.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalString.Value">
            <summary>
            Returns the inner string value
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalString.Item(System.Int32)">
            <summary>
            Character indexer
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalString.DateTimeFormatFixer">
            <summary>
            Utility class used to adapt a DateTime string to a specified format.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalString.NumericFormatFixer">
            <summary>
            Utility class used to parse a numeric format string and to
            remove the formatting chars from a string before parsing it.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalString.Array">
            <summary>
            Dynamic array class for the SalString type.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalStringContext">
            <summary>
            Special SalString extension to support SalContextCurrent().
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalStringContext.#ctor(System.Object)">
            <summary>
            Constructs a new SalStringObject holding a reference to the context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:PPJ.Runtime.SalStringContext.op_Equality(PPJ.Runtime.SalStringContext,PPJ.Runtime.SalStringContext)">
            <summary>
            == operator for comparing two SalStringContext objects.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalStringContext.op_Inequality(PPJ.Runtime.SalStringContext,PPJ.Runtime.SalStringContext)">
            <summary>
            != operator for comparing two SalStringContext objects.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalStringContext.Equals(System.Object)">
            <summary>
            Overrides the Object.Equals() method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalStringContext.GetHashCode">
            <summary>
            Overrides the Object.GetHashCode() method.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.SalStringContext.Context">
            <summary>
            Returns the wrapped context object.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalWindowHandle">
            <summary>
            SAL WindowHandle basic type.
            This class holds either a raw handle (a handle to SalSqlHandle, SalSqlSessionHandle,
            SalFileHandle, or a native control handle) or a weak reference to a .NET control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.#ctor(System.IntPtr)">
            <summary>
            Creates a new SalWindowHandle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates a new SalWindowHandle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Creates a new SalWindowHandle wrapping a SalSqlHandle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.InitFromControl(System.Windows.Forms.Control)">
            <summary>
            Saves a weak reference to the control.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ToNumber">
            <summary>
            Returns the value converted to SalNumber.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ToIntPtr">
            <summary>
            Returns the IntPtr value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ToInt32">
            <summary>
            Converts a window handle to a number.
            </summary>
            <param name="hWnd">The handle to convert.</param>
            <returns>nWnd</returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ToControl">
            <summary>
            Returns the Control associated with this handle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.op_Implicit(PPJ.Runtime.SalWindowHandle)~System.IntPtr">
            <summary>
            Automatic casting from SalWindowHandle to IntPtr.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.op_Implicit(PPJ.Runtime.SalWindowHandle)~System.Windows.Forms.Control">
            <summary>
            Automatic casting from SalWindowHandle to Control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.op_Implicit(System.Windows.Forms.Control)~PPJ.Runtime.SalWindowHandle">
            <summary>
            Automatic casting from Control SalWindowHandle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.op_Explicit(PPJ.Runtime.SalWindowHandle)~System.Int32">
            <summary>
            Automatic casting from SalWindowHandle to int.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.op_Implicit(System.IntPtr)~PPJ.Runtime.SalWindowHandle">
            <summary>
            Automatic casting from IntPtr to SalWindowHandle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.op_Implicit(System.Int32)~PPJ.Runtime.SalWindowHandle">
            <summary>
            Automatic casting from int to SalWindowHandle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.op_Implicit(System.UInt32)~PPJ.Runtime.SalWindowHandle">
            <summary>
            Automatic casting from uint to SalWindowHandle
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.op_Implicit(PPJ.Runtime.SalWindowHandle)~PPJ.Runtime.SalBoolean">
            <summary>
            Automatic casting from SalWindowHandle to SalBoolean
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.op_Implicit(PPJ.Runtime.SalWindowHandle)~System.Boolean">
            <summary>
            Automatic casting from SalWindowHandle to boolean
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.op_True(PPJ.Runtime.SalWindowHandle)">
            <summary>
            logical TRUE operator for boolean expressions
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.op_False(PPJ.Runtime.SalWindowHandle)">
            <summary>
            logical FALSE operator for boolean expressions
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.op_LogicalNot(PPJ.Runtime.SalWindowHandle)">
            <summary>
            ! boolean NOT operator
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.op_Equality(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalWindowHandle)">
            <summary>
            == operator for comparing two SalWindowHandle objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.op_Inequality(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalWindowHandle)">
            <summary>
            != operator for comparing two SalWindowHandle objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.Equals(System.Object)">
            <summary>
            Overrides the Object.Equals() method.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetHashCode">
            <summary>
            Overrides the Object.GetHashCode() method
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ToString">
            <summary>
            Overrides the ToString() method and redirects it to the wrapped member.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.FindMember(System.String)">
            <summary>
            Find a member in the specified control.
            Used as a helper functions to resolve unqualified references.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.FindControl(System.String)">
            <summary>
            Finds a member control in the specified control.
            Used as a helper functions to resolve unqualified references.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DrawMenuBar">
            <summary>
            Redraws the menu bar for a given form window or top-level table window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.EndDialog(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys a modal dialog box and returns control to the caller of SalModalDialog.
            </summary>
            <param name="nReturn"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetDefaultButton">
            <summary>
            Returns the handle of the default push button on a form window or dialog box. The
            default push button is the one that has the focus by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ShowToolBar(PPJ.Runtime.SalBoolean)">
            <summary>
            Shows or hides the tool bar on a top-level or MDI window.
            </summary>
            <param name="bShow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetStatusBarText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Gets the text displayed in the status bar of a top-level or MDI window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetStatusBarText(PPJ.Runtime.SalNumber)">
            <summary>
            Gets the text displayed in the status bar of a top-level or MDI window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetStatusBarText(PPJ.Runtime.SalString)">
            <summary>
            Displays specified text in the status bar of a top-level or MDI window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ShowStatusBar(PPJ.Runtime.SalBoolean)">
            <summary>
            Shows or hides the status bar on a top-level or MDI window.
            </summary>
            <param name="bShow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.MDIArrangeIcons">
            <summary>
            Arranges minimized child window icons in an MDI window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.MDICascade">
            <summary>
            Cascades all non-iconized child windows of an MDI window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.MDITile(PPJ.Runtime.SalBoolean)">
            <summary>
            Tiles all non-iconized child windows of an MDI window. Windows that are not sizable
            will not be tiled.
            </summary>
            <param name="bPosition"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.FireWindowActionsToChildren(System.Int32,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the children's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetModified(PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears the field edit flag for an editable data field, combo box, multiline
            text field, table window column, or picture.
            </summary>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.IsModified">
            <summary>
            Returns the setting of the Field Edit Flag for a data field, multiline field, combo
            box, table window's context row cell, or picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetDataType">
            <summary>
            Returns a data field's or table window column's data type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.Clear">
            <summary>
            Clears the value from a data field, multiline field, or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetLabel">
            <summary>
            Retrieves the window handle of the label (label control) that is associated with the hWndTarget parameter.
            There must be a mnemonic in that label, and it must immediately precede hWndTarget in the outline, or this function will fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DisableWindowAndLabel">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            A label is the label control that immediately precedes the window in the outline.
            The label control must have a mnemonic. If the window contains text (for
            example, a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.EnableWindowAndLabel">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window in the
            outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ShowWindowAndLabel">
            <summary>
            Makes a window and its associated label visible. A label is the label control that
            immediately precedes the window in the outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.HideWindowAndLabel">
            <summary>
            Hides a window and its associated label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetLabelText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of the associaetd label control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetLabelText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetLabelText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.IsEmpty">
            <summary>
            Verifies whether a data field, multiline text field, or table window column is null
            or empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.IsValidDateTime">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid date/time value. For multiline text fields, the date/time value must
            be the only item in the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.IsValidDecimal(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid decimal value. For multiline text fields, the decimal value must be
            the only item in the field.
            </summary>
            <param name="nPrecision"></param>
            <param name="nScale"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.IsValidInteger">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid integer value. For multiline text fields, the integer value must be
            the only item in the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.IsValidNumber">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid numeric value. Valid numbers are integers or floating point numbers,
            negative and positive. For multiline text fields, the numeric value must be the
            only item in the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetFormattedText(PPJ.Runtime.SalString@,PPJ.Runtime.SalBoolean)">
            <summary>
            Copies the contents of a data field or table window column to a string. This function
            also lets you copy the format of the data.
            </summary>
            <param name="sText"></param>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetFormattedText(PPJ.Runtime.SalBoolean)">
            <summary>
            Copies the contents of a data field or table window column to a string. This function
            also lets you copy the format of the data.
            </summary>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetFormatCode">
            <summary>
            Returns the current format of a data field or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetFormatCode(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a data field's or table window column's format.
            </summary>
            <param name="nFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetInputMask(PPJ.Runtime.SalString@)">
            <summary>
            Gets the input mask of a data field or table window column.
            </summary>
            <param name="sMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetInputMask">
            <summary>
            Gets the input mask of a data field or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetFormat(PPJ.Runtime.SalString@)">
            <summary>
            Gets the picture format of a data field or table window column.
            </summary>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetFormat">
            <summary>
            Gets the picture format of a data field or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.IsValid">
            <summary>
            Validates the contents of a data field or table window column using the current profile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetInputMask(PPJ.Runtime.SalString)">
            <summary>
            Sets the input mask of a data field or table window column.
            </summary>
            <param name="sMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetFormat(PPJ.Runtime.SalString)">
            <summary>
            Sets the picture format of a data field or table window column.
            </summary>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetText(PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean)">
            <summary>
            Copies a string to a data field or table window column. After copying the string
            to the field, formats the string.
            </summary>
            <param name="sValue"></param>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetTextUnmasked(PPJ.Runtime.SalString@)">
            <summary>
            Unmasks the text from a masked edit control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetTextUnmasked">
            <summary>
            Unmasks the text from a masked edit control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.Validate">
            <summary>
            Validates and formats a data field's or table window column's contents.
            </summary>
            <param name="nValidate"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.Validate(PPJ.Runtime.SalNumber)">
            <summary>
            Validates and formats a data field's or table window column's contents.
            </summary>
            <param name="nValidate"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetDataLength(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a limit on the number of characters that a user can enter into a data field,
            multiline text field, or table window column.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetDataLength">
            <summary>
            Returns the maximum length of a data field, multiline text field, or table window
            column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.IsChecked">
            <summary>
            Determines whether a radio button is set or a check box is checked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetScrollBarPosition(PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the current scroll bar value.
            </summary>
            <param name="ctrl"></param>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetScrollBarPosition">
            <summary>
            Returns the current scroll bar value.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetScrollBarRange(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a scroll bar's scroll range, line increment, and page increment.
            </summary>
            <param name="nMin"></param>
            <param name="nMax"></param>
            <param name="nLine"></param>
            <param name="nPage"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetScrollBarPosition(PPJ.Runtime.SalNumber)">
            <summary>
            Sets the scrollbar's value.
            </summary>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetScrollBarRange(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a scroll bar's range, line increment, and page increment. When the scroll bar
            is created, assigns it these values: Minimum scroll position0 Maximum
            scroll position100 Line Increment1 Page Increment10 If the scroll bar's current
            position is outside the new range, its position changes to one within the new range.
            The range of a scroll bar is -32,767 to 32,767.
            </summary>
            <param name="nMin"></param>
            <param name="nMax"></param>
            <param name="nLine"></param>
            <param name="nPage"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetDefaultButton">
            <summary>
            Sets the default push button of a form window or dialog box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.AddListItem(PPJ.Runtime.SalString)">
            <summary>
            Adds a string to a list box or combo box.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ClearList">
            <summary>
            Deletes all entries from a list box or combo box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DeleteListItem(PPJ.Runtime.SalNumber)">
            <summary>
            Deletes a list box or combo box entry.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetListSelectedItems(PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Returns an array of index numbers of selected list box entries.
            </summary>
            <param name="nSelectedArray"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.InsertListItem(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Inserts an entry into a list box or combo box at a specified position.
            </summary>
            <param name="nIndex"></param>
            <param name="sAdd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.PopulateList(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString)">
            <summary>
            Populates a list box or combo box with a result set. SalListPopulate overrides any
            settings made with SalListSetTabs. If the SELECT statement returns data from multiple
            columns, each column's data displayed in a list box is separated by tabs.
            However, due to a Microsoft Windows limitation, each column's data displayed in
            a combo box is separated by a single '|' character. There is no space between
            one column's data, the separator character, and another column's data.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.PopulateList(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Populates a list box or combo box with a result set. SalListPopulate overrides any
            settings made with SalListSetTabs. If the SELECT statement returns data from multiple
            columns, each column's data displayed in a list box is separated by tabs.
            However, due to a Microsoft Windows limitation, each column's data displayed in
            a combo box is separated by a single '|' character. There is no space between
            one column's data, the separator character, and another column's data.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetListItemsCount">
            <summary>
            Returns the number of list box or combo box entries.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetListSelectedItemsCount">
            <summary>
            Returns the number of selected entries in a multiple-selection list box. Specify
            single- or multiple-selection in the list box's customizer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetListSelectedIndex">
            <summary>
            Returns the index of the selected entry in a combo box or single-selection list box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetListItemState(PPJ.Runtime.SalNumber)">
            <summary>
            Determines whether the specified list box or combo box entry is selected.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetListItemText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Returns the text of the specified item.
            </summary>
            <param name="nIndex"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetListItemText(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the text of the specified item.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetListItemTextLength(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the length of a list box or combo box entry.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetListRedraw(PPJ.Runtime.SalNumber)">
            <summary>
            Redraws entries in a list box or combo box, or prevents them from being redrawn.
            </summary>
            <param name="bRedraw"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetListSelectedText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Finds and selects a combo box or single-selection list box entry.
            </summary>
            <param name="nIndexStart"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetListSelectedItems(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Selects or deselects a combo box or multiple-selection list box entry.
            </summary>
            <param name="nIndex"></param>
            <param name="bSelect"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetListSelectedIndex(PPJ.Runtime.SalNumber)">
            <summary>
            Selects or deselects a combo box or single-selection list box entry.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetListTabStops(PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Sets tabs in a list box.
            </summary>
            <param name="nTabStops"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.PopulateListFiles(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Populates a list box or combo box with a directory of files.
            </summary>
            <param name="ctrlPath"></param>
            <param name="sPathName"></param>
            <param name="nAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetListSelectedFile(PPJ.Runtime.SalString@)">
            <summary>
            Fetches the selected directory or file name from a list box or combo box.
            </summary>
            <param name="sFileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetListSelectedFile">
            <summary>
            Fetches the selected directory or file name from a list box or combo box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.AnyRows(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Determines whether any rows in the specified table window match certain flags.
            </summary>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ClearSelection">
            <summary>
            Deselects all rows of a table window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ColumnAverage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Computes the average of all column values or only specified column values in a table
            window.
            </summary>
            <param name="nColumnID"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ColumnSum(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Computes the sum of all column values or only specified column values in a table
            window.
            </summary>
            <param name="ColumnID"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.CopyRows(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Copies the contents of the specified table window rows to the Clipboard in text format.
            </summary>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.CreateColumn(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Creates a table window column of string data type at runtime.
            </summary>
            <param name="table"></param>
            <param name="nColumnPos"></param>
            <param name="nDispWidth"></param>
            <param name="nMaxChars"></param>
            <param name="sTitle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.CreateColumnEx(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a table window column using a given data type at runtime.
            Allowed types are DT_String, DT_Number and DT_DateTime
            </summary>
            <param name="table"></param>
            <param name="nColumnPos"></param>
            <param name="nDispWidth"></param>
            <param name="sTitle"></param>
            <param name="nMaxChars"></param>
            <param name="nDatatype"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DefineRowHeader(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Defines the appearance and behavior of a table window's row header.
            </summary>
            <param name="sTitle"></param>
            <param name="nWidth"></param>
            <param name="nFlags"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DefineSplitWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Splits a table window horizontally.
            </summary>
            <param name="nRowsLowerHalf"></param>
            <param name="bDragAdjust"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.QuerySplitWindow(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalBoolean@)">
            <summary>
            Specifies how a table window is split horizontally.
            </summary>
            <param name="nRowsLowerHalf"></param>
            <param name="bDragAdjust"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DeleteRow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Deletes a row from a table window but not from the database.
            </summary>
            <param name="nRow"></param>
            <param name="nFlag"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DeleteSelected(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Applies a SQL DELETE statement to all table window rows with the ROW Selected flag.
            </summary>
            <param name="hSql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DeleteSelected(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL DELETE statement to all table window rows with the ROW Selected flag.
            </summary>
            <param name="hSql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DestroyColumns">
            <summary>
            Destroys all automatic columns created by SalTblCreateColumn or SalTblPopulate at
            runtime. This function only works on table windows that contain only automatic
            columns.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DoDeletes(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Applies a SQL DELETE statement to all table window rows that have flagsOn flags.
            </summary>
            <param name="hSql"></param>
            <param name="flagsOn"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DoDeletes(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL DELETE statement to all table window rows that have flagsOn flags.
            </summary>
            <param name="hSql"></param>
            <param name="flagsOn"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DoInserts(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean)">
            <summary>
            Applies a SQL INSERT statement to all the rows in a table window that have the ROW New flag.
            </summary>
            <param name="hSql"></param>
            <param name="bClearFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DoInserts(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL INSERT statement to all the rows in a table window that have the ROW New flag.
            </summary>
            <param name="hSql"></param>
            <param name="bClearFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DoUpdates(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean)">
            <summary>
            Applies a SQL UPDATE statement to all table window rows with the Row Edited flag.
            </summary>
            <param name="hSql"></param>
            <param name="bClearFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DoUpdates(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL UPDATE statement to all table window rows with the Row Edited flag.
            </summary>
            <param name="hSql"></param>
            <param name="bClearFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.FetchRow(PPJ.Runtime.SalNumber)">
            <summary>
            Sends a SAM_FetchRow message to a table window if the row you specify is not currently
            in the table window cache.
            </summary>
            <param name="nRow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.FindNextRow(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Scans forward in a table looking for a row whose flags match those specified.
            </summary>
            <param name="Row"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.FindPrevRow(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Scans backward in a table looking for a row whose flags match those specified.
            </summary>
            <param name="Row"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetColumnText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Gets data from a column of a table window's context row.
            </summary>
            <param name="nColumnID"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetColumnText(PPJ.Runtime.SalNumber)">
            <summary>
            Gets data from a column of a table window's context row.
            </summary>
            <param name="nColumnID"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetColumnWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Gets the handle of a table window column.
            </summary>
            <param name="nCol"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.InsertRow(PPJ.Runtime.SalNumber)">
            <summary>
            Inserts a new blank row into a table window.
            </summary>
            <param name="nRow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.KillCellEdit">
            <summary>
            Takes a row out of edit mode and selects the row. This causes the row to receive
            both SAM_Validate and SAM_KillFocus messages.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.SalWindowHandle.KillFocusRow" -->
        <member name="M:PPJ.Runtime.SalWindowHandle.HitTest(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalWindowHandle@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the part of the table window located at a given coordinate.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <param name="nRow"></param>
            <param name="hWndCol"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.PasteRows">
            <summary>
            Pastes the contents of the Clipboard to the specified table window. Assumes
            the Clipboard data is in text format with cells delimited by tab characters and
            rows delimited by end-of-line characters. Inserts the new rows into the
            table window without overwriting existing rows, and converts the data to the
            data types of the corresponding table window columns.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.Populate(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Compiles, binds, and executes a SQL SELECT statement, then fetches the rows of the
            result set and populates a table window with them.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <param name="nMethod"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.Populate(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Compiles, binds, and executes a SQL SELECT statement, then fetches the rows of the
            result set and populates a table window with them.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <param name="nMethod"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.Populate(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString)">
            <summary>
            Compiles, binds, and executes a SQL SELECT statement, then fetches the rows of the
            result set and populates a table window with them.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <param name="nMethod"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.Populate(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Compiles, binds, and executes a SQL SELECT statement, then fetches the rows of the
            result set and populates a table window with them.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <param name="nMethod"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetContextRow">
            <summary>
            Returns a table window's current context row. Before sending a SAM_FetchRow message,
            automatically sets the context row so that assignments made while processing
            the message reference the correct row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.QueryFocusCell(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalWindowHandle@)">
            <summary>
            Identifies the cell in a table window with the focus.
            </summary>
            <param name="nRow"></param>
            <param name="hWndCol"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetLinesPerRow(PPJ.Runtime.SalNumber@)">
            <summary>
            Retrieves the height of a row in lines.
            </summary>
            <param name="nLines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetLinesPerRow">
            <summary>
            Retrieves the height of a row in lines.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetLockedColumns">
            <summary>
            Retrieves the number of locked table window columns.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetRowFlags(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Queries a row's flags.
            </summary>
            <param name="nRow"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.QueryRowHeader(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalWindowHandle@)">
            <summary>
            Gets a table window's row header definition.
            </summary>
            <param name="sTitle"></param>
            <param name="nMaxTitle"></param>
            <param name="nWidth"></param>
            <param name="nFlags"></param>
            <param name="hWndCol"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.QueryScroll(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a table window's current scroll position and range. The scroll position is
            the row number of the row that is currently at the top of the window. You set
            the table window range with SalTblSetRange and changes it when you insert
            or delete rows from the table window.
            </summary>
            <param name="nPosition"></param>
            <param name="nMinRange"></param>
            <param name="nMaxRange"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetTableFlags(PPJ.Runtime.SalNumber)">
            <summary>
            Tests the state of a table window's flags.
            </summary>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.QueryVisibleRange(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the current range of visible rows in a table window.
            </summary>
            <param name="nMinRange"></param>
            <param name="nMaxRange"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ResetTable">
            <summary>
            Clears a table window by discarding all rows from the table window cache and setting
            the table range to 0, -1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ScrollRow(PPJ.Runtime.SalNumber,System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Scrolls a table window to the specified row and column.
            </summary>
            <param name="nRow"></param>
            <param name="column"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ScrollRow(PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Scrolls a table window to the specified row and column.
            </summary>
            <param name="nRow"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetColumnText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Assigns data to a column of a table window's context row.
            </summary>
            <param name="nColumnID"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetContextRow(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a table window's context row. Setting the context row does not send a SAM_FetchRow
            message. If the row is not currently in memory, creates a new row
            in memory and sets its cell values to null.
            </summary>
            <param name="nRow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetFlagsAnyRows(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets or clears row flags.
            </summary>
            <param name="Flags"></param>
            <param name="Set"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetFocusCell(PPJ.Runtime.SalNumber,System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the focus to the specified table window cell (row and column). Puts
            the table window into edit mode and lets the user select a portion of the data in
            the cell.
            </summary>
            <param name="nRow"></param>
            <param name="column"></param>
            <param name="nEditMin"></param>
            <param name="nEditMax"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetFocusRow(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a table window's focus frame row.
            </summary>
            <param name="nRow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetLinesPerRow(PPJ.Runtime.SalNumber)">
            <summary>
            Sets the height of a row in lines.
            </summary>
            <param name="nLines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetLockedColumns(PPJ.Runtime.SalNumber)">
            <summary>
            Sets the number of locked table window columns.
            </summary>
            <param name="nLockedColumns"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetRange(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Defines the minimum and maximum rows (range) of a table.
            </summary>
            <param name="nMin"></param>
            <param name="nMax"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetRow(PPJ.Runtime.SalNumber)">
            <summary>
            Sets the focus to the first, last, next, or previous row in a table window.
            </summary>
            <param name="nRowPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetRowFlags(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears a table window row's flags.
            </summary>
            <param name="nRow"></param>
            <param name="nFlags"></param>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetTableFlags(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears a table window's flags.
            </summary>
            <param name="nFlags"></param>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SortRows(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sorts the rows of a table window based on the values in one of the
            table window's columns.
            </summary>
            <param name="nColumnID"></param>
            <param name="nOrder"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetColumnTitle(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Gets the title of a table window column.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetColumnTitle(PPJ.Runtime.SalNumber)">
            <summary>
            Gets the title of a table window column.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DefineCheckBoxColumn(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Define a column as a check box.
            </summary>
            <param name="column"></param>
            <param name="nFlags"></param>
            <param name="sCheckedValue"></param>
            <param name="sUncheckedValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DefineDropDownListColumn(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Define a column as a drop down list.
            </summary>
            <param name="nFlags"></param>
            <param name="nLines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.DefinePopupEditColumn(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Define a column as a popup edit window.
            </summary>
            <param name="nFlags"></param>
            <param name="nLines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.QueryCheckBoxColumn(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@,PPJ.Runtime.SalString@)">
            <summary>
            If the column is defined as a check box, this function retrieves information about
            the check box and returns TRUE. If it is not a check box, this function returns
            FALSE.
            </summary>
            <param name="nFlags"></param>
            <param name="sCheckedValue"></param>
            <param name="sUncheckedValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetCellType(PPJ.Runtime.SalNumber@)">
            <summary>
            Indicates whether a column is a checkbox, drop down list, popup edit, or standard
            column.
            </summary>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetCellType">
            <summary>
            Indicates whether a column is a checkbox, drop down list, popup edit, or standard
            column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetColumnFlags(PPJ.Runtime.SalNumber)">
            <summary>
            Tests the state of a table window column's flags.
            </summary>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetColumnID">
            <summary>
            Gets a table window column's identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetColumnPosition">
            <summary>
            Gets a table window column's relative position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetColumnWidth(PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the width (in form units) of a table window column.
            </summary>
            <param name="nFormUnits"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetColumnWidth">
            <summary>
            Returns the width (in form units) of a table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.QueryDropDownListColumn(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            If the column is defined as a drop down list, this function retrieves information
            about the list and returns TRUE. If it is not a drop down list, this function returns
            FALSE.
            </summary>
            <param name="nFlags"></param>
            <param name="nLines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.QueryPopupEditColumn(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            If the column is defined as a popup edit, this function retrieves information about
            the popup edit and returns TRUE. If it is not a popup edit, this function returns
            FALSE.
            </summary>
            <param name="nFlags"></param>
            <param name="nLines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetCellTextColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Changes a table window cell's text color.
            </summary>
            <param name="nColor"></param>
            <param name="bDiscardable"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetCellTextColor(PPJ.Runtime.SalNumber)">
            <summary>
            Changes a table window cell's text color.
            </summary>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetColumnFlags(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears a table window column's flags.
            </summary>
            <param name="nFlags"></param>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetColumnPos(PPJ.Runtime.SalNumber)">
            <summary>
            Moves a table window column to a new position.
            </summary>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetColumnTitle(PPJ.Runtime.SalString)">
            <summary>
            Sets the title of a table window column.
            </summary>
            <param name="sTitle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetColumnPosition(PPJ.Runtime.SalNumber)">
            <summary>
            Moves a table window column to a new position.
            </summary>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetColumnWidth(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a table window column's display width.
            </summary>
            <param name="nFormUnits"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.ClearImage">
            <summary>
            Deletes the contents of a picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetImageDescription(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves a description of a picture's contents.
            </summary>
            <param name="sDesc"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetImageDescription(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves a description of a picture's contents.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetImageBytes(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@)">
            <summary>
            Copies the contents of a picture to a string.
            </summary>
            <param name="buffer"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetImageBytes(PPJ.Runtime.SalBinary@,PPJ.Runtime.SalNumber@)">
            <summary>
            Copies the contents of a picture to a binary buffer.
            </summary>
            <param name="buffer"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetImageString(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Copies the contents of a picture to a string.
            </summary>
            <param name="nFormat"></param>
            <param name="sPict"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetImageString(PPJ.Runtime.SalNumber)">
            <summary>
            Return the contents of a picture into a string.
            </summary>
            <param name="nFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.GetImageString(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBinary@)">
            <summary>
            Copies the contents of a picture to a string.
            </summary>
            <param name="format"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetImageResource(PPJ.Runtime.SalResource,PPJ.Runtime.SalNumber)">
            <summary>
            Inserts a resource into a picture.
            </summary>
            <param name="tResource"></param>
            <param name="nFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetImageFile(PPJ.Runtime.SalString)">
            <summary>
            Inserts a file's contents into a picture.
            </summary>
            <param name="sFileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetImageFit(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the fit for a picture.
            </summary>
            <param name="nFit"></param>
            <param name="nScaleWidth"></param>
            <param name="nScaleHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetImageHandle(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the picture image of a picture window with the handle of a bitmap (HBITMAP)
            or icon (HICON). Usually, HBITMAPs and HICONs are loaded from DLLs.
            </summary>
            <param name="nType"></param>
            <param name="nHandle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetImageBytes(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Inserts the contents of a picture to an image without the image header.
            </summary>
            <param name="sImageBytes"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetImageString(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Inserts the contents of a string into a picture.
            </summary>
            <param name="nFormat"></param>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.SetImageString(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBinary)">
            <summary>
            Inserts the contents of a birnary buffer into a picture.
            </summary>
            <param name="Format"></param>
            <param name="Picture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavAddPane(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Inserts a pane into the navigation bar control.
            </summary>
            <param name="paneIndex">Indicates a zero-based pane index.  The new pane will be inserted after the pane indicated by nPaneIndex. Use -1 to append as the last pane.</param>
            <param name="name">Name of the new pane (object title)</param>
            <param name="expandedImage">File name of the image to display for the new pane when it is expanded.</param>
            <param name="collapsedImage">File name of the image to display for the new pane when it is collapsed.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavRemovePane(PPJ.Runtime.SalNumber)">
            <summary>
            Removes a pane from the navigation bar control.
            </summary>
            <param name="paneIndex">Zero-based index of the pane to be removed.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavAddGroup(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Adds a new group to the specified pane of a navigation bar.
            </summary>
            <param name="paneIndex">Zero-based index of the pane to which you want to add a group.</param>
            <param name="groupIndex">Zero-based index that the new group will occupy.</param>
            <param name="groupTitle">The title of the new group.</param>
            <param name="height">The height of the new group in form units.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavRemoveGroup(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Removes a group from the navigation bar control.
            </summary>
            <param name="paneIndex">Zero-based index of the pane to be removed.</param>
            <param name="groupIndex">Zero-based index of the group to remove.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavGetActivePane">
            <summary>
            Returns the index of the currently selected pane.
            </summary>
            <returns>The zero-based index of the currently selected pane.</returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavSetActivePane(PPJ.Runtime.SalNumber)">
            <summary>
            Activates the indicated pane.
            </summary>
            <param name="paneIndex">The zero-based index of the pane to activate.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavGetPaneIndex(PPJ.Runtime.SalString)">
            <summary>
            Finds the pane by its name and returns a zero-based index of the pane if successful or -1 if the pane is not found.
            </summary>
            <param name="name">The name of the pane (object title)</param>
            <returns>the zero-based index of the pane.  If the pane is not found, nIndex is -1.</returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavGetPaneTitle(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Returns the title of a pane.
            </summary>
            <param name="paneIndex">Index for the pane whose title you want to get (start at 0)</param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavGetPaneTitle(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the title of a pane.
            </summary>
            <param name="paneIndex">Index for the pane whose title you want to get (start at 0)</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavSetPaneTitle(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Sets the title of a pane.
            </summary>
            <param name="paneIndex">Index for the pane whose title you want to get (start at 0).</param>
            <param name="title">The new title for the pane.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavSetPaneIcon(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBinary,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Sets the title of a pane.
            </summary>
            <param name="paneIndex">Index for the pane.</param>
            <param name="binary">Buffer that stores the image (bmp or icon).</param>
            <param name="format">Indicates the image format. Use PIC_FormatIcon or PIC_FormatBitmap.</param>
            <param name="expanded">TRUE for "expanded" image, FALSE for "collapsed" image</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavGetPaneIcon(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBinary@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Retrieves the icon for the specified navigation pane.
            </summary>
            <param name="paneIndex">Index for the pane.</param>
            <param name="binary">Buffer that stores the image (bmp or icon)</param>
            <param name="format">Indicates the image format. Use PIC_FormatIcon or PIC_FormatBitmap.</param>
            <param name="expanded">TRUE for "expanded" image, FALSE for "collapsed" image</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavEnablePane(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Enables or diables a pane on the navigation bar.
            </summary>
            <param name="paneIndex">Index for the pane to enable (start at 0).</param>
            <param name="enable">Set TRUE to enable pane, FALSE to disable.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavPaneIsEnabled(PPJ.Runtime.SalNumber)">
            <summary>
            Returns true if the pane is enabled (visible in the pane navigator); false if disabled (not visible).
            </summary>
            <param name="paneIndex">Index of pane (start at 0).</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavAssociateChild(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Associates a control to a pane.
            </summary>
            <param name="paneIndex">Zero-based index of the pane.</param>
            <param name="groupIndex">Zero-based index of the group.  If the pane has no groups, use zero.</param>
            <param name="child">the control you're associating to the pane.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavDisassociateChild(PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Disassociates a control from a pane.
            </summary>
            <param name="paneIndex">Zero-based index of the pane</param>
            <param name="child">The control you're disassociating</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavGroupIsExpanded(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the group status. The function returns true if the group is expanded; false if collapsed.
            </summary>
            <param name="paneIndex">Zero-based index of the pane</param>
            <param name="groupIndex">Zero-based index of the group</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavExpandGroup(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Expands or collapses a group.
            </summary>
            <param name="paneIndex">Zero-based index of the pane</param>
            <param name="groupIndex">Zero-based index of the group</param>
            <param name="expand">Set to TRUE to expand, FALSE to collapse</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavSaveState(PPJ.Runtime.SalString@)">
            <summary>
            Saves the settings of a navigation bar to an XML string.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.SalWindowHandle.NavLoadState(PPJ.Runtime.SalString)">
            <summary>
            Restore the settings of a navigation bar from an XML string.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.SalWindowHandle.IsNull">
            <summary>
            Checks if this SalWindowHandle object contain a null value.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:PPJ.Runtime.SalWindowHandle.Value">
            <summary>
            Returns the Handle value.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.SalWindowHandle.Control">
            <summary>
            Returns the referenced control instance.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalWindowHandle.ControlWeakReference">
            <summary>
            Keeps a weak reference to the wrapped control
            and frees the inner GChandle when collected.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.SalWindowHandle.Array">
            <summary>
            Dynamic array class for the SalWindowHandle type.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.TypeManager">
            <summary>
            Manages the available types.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.#cctor">
             <summary>
             Loads the system types.
            
             These are the types that are available the very first time that this
             class is initialized.
             
             Types that might be loaded later will be loaded in the user types cache.
             
             </summary>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.#ctor">
            <summary>
            Singleton (static) class.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.LookupNamedMenu(System.String,System.String)">
            <summary>
            Looks up the requested named menu.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.LookupType(System.String,System.Boolean)">
            <summary>
            Returns the requested Type.
            Looks in all cached assemblies first.
            If the type is not cached, looks for it in all loaded assemblies.
            If the type name is not qualified, it qualifies it with all
            used namespaces at first and all known namespaces at last.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.LookupTypeInternal(System.String,System.Collections.Generic.List{System.String},System.Reflection.Assembly,System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            Look up the specified type name in the assembly or in the cache by concatentating
            all the namespaces in the collection.
            </summary>
            <param name="name"></param>
            <param name="namespaces"></param>
            <param name="asm"></param>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.GetMember(System.Type,System.String)">
            <summary>
            Returns all the MemberInfo that match the requested member in the type.
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.LoadAssembly(System.String)">
            <summary>
            Loads the specified assembly, if it's not already loaded.
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.AddUsedNamespace(System.String)">
            <summary>
            Adds an imported namespace
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.ConvertToType(System.Object,System.Type)">
            <summary>
            Converts a value to the target type.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.CanConvertToType(System.Type,System.Type)">
            <summary>
            Determines whether the source type can be converted to the target type
            </summary>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.IsDerivedFrom(System.Type,System.Type)">
            <summary>
            Returns true if the instance if derived from the specified type.
            It checks also custom operators to support multiple inheritance.
            </summary>
            <param name="obj"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.DynamicCast(System.Object,System.Type)">
            <summary>
            Casts the object to the target type. If the target type is a 
            second base class, uses the custom operators to perform the cast.
            </summary>
            <param name="obj"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.IsLinkedToPPJ(System.Reflection.Assembly)">
            <summary>
            Returns true if the specified assembly is linked to the PPJ runtime.
            </summary>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.OnAssemblyLoad(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            Loads types from assemblies as they are loaded in memory.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.LoadAssemblies">
            <summary>
            Loads all the assemblies available in the application domain
            </summary>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.LoadAssembly(System.Reflection.Assembly)">
            <summary>
            Loads the specified assembly
            </summary>
            <param name="asm"></param>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.ExtractTypesAndNamespaces(System.Reflection.Assembly)">
            <summary>
            Loads all the types in the assembly into our cache.
            </summary>
            <param name="assem">Assembly to extract data from</param>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.LoadType(System.Type)">
            <summary>
            Extracts all the namespaces and the named menus and saves the type in the cache.
            This is not threadsafe and the caller must ensure locking.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.LoadNamedMenus(System.Type)">
            <summary>
            Loads the classes contained in the nested "NamedMenus" class.
            </summary>
            <param name="asm"></param>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.GetTypeEntry(System.Type)">
            <summary>
            Retrieves or returns the TypeEntry corresponding to the Type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.TypeEntry.CanConvertToType(System.Type)">
            <summary>
            Returns true if this Type can be converted to the target type.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.TypeEntry.LoadSecondBaseClasses(System.Type)">
            <summary>
            Returns a table with all second base classes.
            The key is the base type, the value is the operator used to cast to the second base.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.TypeEntry.CanConvertToTypeInternal(System.Type)">
            <summary>
            Determines whether the source type can be converted to the target type
            </summary>
            <param name="sourceType"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.TypeEntry.IsDerivedFrom(System.Type)">
            <summary>
            Returns true if this Type is derived from the specified type.
            Checks also the simulated multiple inheritance cast operators.
            </summary>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.TypeManager.TypeEntry.DynamicCast(System.Object,System.Type)">
            <summary>
            Dynamically casts the object to the type.
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalActiveX">
            <summary>
            ActiveX implementation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalActiveX.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalActiveX.m_cookies">
            <summary>
            Array of cookies returned by the event sink.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.#ctor(System.String)">
            <summary>
            Default constructor.
            Must defined the CLSID for the AX control.
            This class cannot be used as second-base class in a
            multiple inheritance tree.
            </summary>
            <param name="clsid"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetCoClassField">
            <summary>
            Returns the FieldInto for the wrapped _CoClass field.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.AutoErrorMode(PPJ.Runtime.SalBoolean)">
            <summary>
            Turns on/off automatic COM error handling.
            </summary>
            <param name="bOn"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.DoVerb(System.Windows.Forms.Control,System.Int32,System.Boolean)">
            <summary>
            Perform one of the object's enumerated actions.
            </summary>
            <param name="verb"></param>
            <param name="resize"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetObject(System.Windows.Forms.Control,PPJ.Runtime.Com.SalObject)">
            <summary>
            Returns the COM object for the specified AX control.
            </summary>
            <param name="ctrl"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalActiveX.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalActiveX.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalBackgroundText">
            <summary>
            BackgroundText implementation.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.ISalControlBase">
            <summary>
            Base interface for all SAL controls, providing design time information.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalControlBase.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalBackgroundText.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.#ctor">
            <summary>
            Constructs a new SalBackgroundText object.
            This class cannot be used as second-base class.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.ProcessMnemonic(System.Char)">
            <summary>
            Processes menmonic keys to set the focus to the next control in the tab
            order also when the label is hidden.
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalBackgroundText.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalBackgroundText.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalBackgroundText.EnableMouseEvents">
            <summary>
            Gets/Sets a property than enables the control to process mouse events.
            When set to false (default) the control is transparent to the mouse.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalBackgroundText.AllowHtml">
            <summary>
            Allows the text to contain simple html tags.
            <remarks>Supported tags: b, u, i, br</remarks>
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalBackgroundText.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalCheckBox">
            <summary>
            CheckBox implementation.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.ISalControl">
            <summary>
            All SAL controls implement this interface.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.ISalControl.GetDataType">
            <summary>
            Returns the data type of the control
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.ISalControl.Value">
            <summary>
            Returns/Sets the control's value regardless of the type.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalControl.Label">
            <summary>
            Returns/Sets the label associated to the control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalControl.Modified">
            <summary>
            Returns/Sets the modified flag.
            </summary>
            <param name="modified"></param>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalCheckBox._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalCheckBox.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.#ctor">
            <summary>
            Constructs a SalCheckBox object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.ProcessMnemonic(System.Char)">
            <summary>
            Overrides the default implementation to allow for mnemonics when the 
            checkbox does not receive the focus because it's hidden.
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetModified(PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears the field edit flag for an editable data field, combo box, multiline
            text field, table window column, or picture.
            </summary>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.IsModified">
            <summary>
            Returns the setting of the Field Edit Flag for a data field, multiline field, combo
            box, table window's context row cell, or picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetDataType">
            <summary>
            Returns a data field's or table window column's data type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.Clear">
            <summary>
            Clears the value from a data field, multiline field, or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetLabel">
            <summary>
            Retrieves the window handle of the label (label control) that is associated with the hWndTarget parameter.
            There must be a mnemonic in that label, and it must immediately precede hWndTarget in the outline, or this function will fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.DisableWindowAndLabel">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            A label is the label control that immediately precedes the window in the outline.
            The label control must have a mnemonic. If the window contains text (for
            example, a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.EnableWindowAndLabel">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window in the
            outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.ShowWindowAndLabel">
            <summary>
            Makes a window and its associated label visible. A label is the label control that
            immediately precedes the window in the outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.HideWindowAndLabel">
            <summary>
            Hides a window and its associated label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.SetLabelText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of the associaetd label control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetLabelText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.GetLabelText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCheckBox.IsChecked">
            <summary>
            Determines whether a radio button is set or a check box is checked.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalCheckBox.AutoCheck">
            <summary>
            Hide AutoCheck property from the serializer.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalCheckBox.Checked">
            <summary>
            Returns/Sets the checked state of the check box control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalCheckBox.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalCheckBox.AllowHtml">
            <summary>
            Allows the text to contain simple html tags.
            <remarks>Supported tags: b, u, i, br</remarks>
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalCheckBox.Label">
            <summary>
            Returns/Sets the label associated with this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalCheckBox.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalComboBox">
            <summary>
            ComboBox implementation.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.ISalEditControl">
            <summary>
            SAL Editable controls implement this interface
            </summary>
        </member>
        <member name="T:PPJ.Runtime.ISalEditControlBase">
            <summary>
            Base interface for all SAL edit controls, providing information if the value for a control has been changed after it was entered.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.ISalEditControlBase.StoreEnteringValue">
            <summary>
            Stores the current item value in order to make it possible to compare it with the value that will later be validated.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.ISalEditControlBase.SuspendEnteringValue">
            <summary>
            Flag the control to not log value changes during an opeation
            </summary>
        </member>
        <member name="M:PPJ.Runtime.ISalEditControlBase.ResumeEnteringValue">
            <summary>
            Clear the suppress flag and keep loging
            </summary>
        </member>
        <member name="M:PPJ.Runtime.ISalEditControlBase.IsValidatedValueChanged">
            <summary>
            Returns TRUE is the value that is being validated was changed after the item was entered (focused).
            Used to provide the info to the developer in order to exclude unnecessary database call.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.ISalEditControl.ValidateDataType">
            <summary>
            Validates the content of the control against its data type
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.ISalEditControl.ApplyFormat">
            <summary>
            Apply the format string to the value of the control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalEditControl.Validated">
            <summary>
            Returns/Sets the modified flag.
            </summary>
            <param name="modified"></param>
        </member>
        <member name="P:PPJ.Runtime.ISalEditControl.EditMask">
            <summary>
            Returns/Sets the edit mask.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalEditControl.Format">
            <summary>
            Returns/Sets the format picture.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalEditControl.MaxLength">
            <summary>
            Returns/Sets the maximum edit length.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalEditControl.CultureInfo">
            <summary>
            Returns/Sets the specialized CultureInfo for the edit control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.ISalListControl">
            <summary>
            SAL List controls implement this interface.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.ISalListControl.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.ISalListControl.Add(System.Object)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.ISalListControl.AddRange(System.Object[])">
            <summary>
            Adds a collection of items to the list.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:PPJ.Runtime.ISalListControl.Delete(System.Int32)">
            <summary>
            Deletes the item at the index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.ISalListControl.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the items at the specified position.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.ISalListControl.Find(System.Object)">
            <summary>
            Finds the item in the list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.ISalListControl.FindString(System.String,System.Int32)">
            <summary>
            Finds the item in the list.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.ISalListControl.FindStringExact(System.String,System.Int32)">
            <summary>
            Finds the item in the list.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.ISalListControl.IsSelected(System.Int32)">
            <summary>
            Tests if the item at the specified index is selected.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.ISalListControl.SetSelected(System.Int32,System.Boolean)">
            <summary>
            Selects/Deselects the specified item.
            </summary>
            <param name="index"></param>
            <param name="selected"></param>
        </member>
        <member name="P:PPJ.Runtime.ISalListControl.Items">
            <summary>
            Returns the collection of items.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalListControl.Item(System.Int32)">
            <summary>
            Returns the item at the specified index.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalListControl.Count">
            <summary>
            Returns the total number of items in the list.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalListControl.SelectedIndex">
            <summary>
            Returns/Sets the index of the currently selected item.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalListControl.SelectedItem">
            <summary>
            Returns/Sets the currently selected item.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalListControl.SelectedIndices">
            <summary>
            Returns the indices of the selected items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.ISalListControl.SelectionMode">
            <summary>
            Returns/Sets the selection mode.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalComboBox._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalComboBox.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.#ctor">
            <summary>
            Constructs a SalComboBox object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.ReleaseSubclasses">
            <summary>
            Releases the subclasses for the child windows.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.OnWmSize(System.Windows.Forms.Message@)">
            <summary>
            #BugFix for Windows all versions. 
            Resizing a combobox when the selected index > -1 causes the editable text to be selected.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.OnChildEditWndProc(System.Windows.Forms.Message@)">
            <summary>
            Receives messages from the inner edit control.
            Return true to indicated that the message was handled and should not
            be dispatched to the subclassed control's default WndProc.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.OnChildListWndProc(System.Windows.Forms.Message@)">
            <summary>
            Receives messages from the dropdown list control.
            Return true to indicate that the message was handled and should not
            be dispatched to the subclassed control's default WndProc.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetDropDownListBoxRect(System.IntPtr)">
            <summary>
            Returns the rectangle for the dropped down listbox minus the scrollbars.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.IsOverSelectedText">
            <summary>
            Returns true if the mouse is over selected text.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            #BugFix for .NET 1.1 and 2.0
            The Enter key is considered an input key when the list is dropped down without
            considering that when the DropDownStyle is set to Simple the listbox is always
            dropped down and cannot be closed up.
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.OnReadOnlyChanged(System.EventArgs)">
            <summary>
            Called when the ReadOnly property has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.InitializeSpellChecker">
            <summary>
            Initialize the spell checker engine.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetModified(PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears the field edit flag for an editable data field, combo box, multiline
            text field, table window column, or picture.
            </summary>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.IsModified">
            <summary>
            Returns the setting of the Field Edit Flag for a data field, multiline field, combo
            box, table window's context row cell, or picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetDataType">
            <summary>
            Returns a data field's or table window column's data type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.Clear">
            <summary>
            Clears the value from a data field, multiline field, or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetLabel">
            <summary>
            Retrieves the window handle of the label (label control) that is associated with the hWndTarget parameter.
            There must be a mnemonic in that label, and it must immediately precede hWndTarget in the outline, or this function will fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.DisableWindowAndLabel">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            A label is the label control that immediately precedes the window in the outline.
            The label control must have a mnemonic. If the window contains text (for
            example, a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.EnableWindowAndLabel">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window in the
            outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.ShowWindowAndLabel">
            <summary>
            Makes a window and its associated label visible. A label is the label control that
            immediately precedes the window in the outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.HideWindowAndLabel">
            <summary>
            Hides a window and its associated label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetLabelText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of the associaetd label control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetLabelText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetLabelText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.IsEmpty">
            <summary>
            Verifies whether a data field, multiline text field, or table window column is null
            or empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.IsValidDateTime">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid date/time value. For multiline text fields, the date/time value must
            be the only item in the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.IsValidDecimal(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid decimal value. For multiline text fields, the decimal value must be
            the only item in the field.
            </summary>
            <param name="nPrecision"></param>
            <param name="nScale"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.IsValidInteger">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid integer value. For multiline text fields, the integer value must be
            the only item in the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.IsValidNumber">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid numeric value. Valid numbers are integers or floating point numbers,
            negative and positive. For multiline text fields, the numeric value must be the
            only item in the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetFormattedText(PPJ.Runtime.SalString@,PPJ.Runtime.SalBoolean)">
            <summary>
            Copies the contents of a data field or table window column to a string. This function
            also lets you copy the format of the data.
            </summary>
            <param name="sText"></param>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetFormattedText(PPJ.Runtime.SalBoolean)">
            <summary>
            Copies the contents of a data field or table window column to a string. This function
            also lets you copy the format of the data.
            </summary>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetFormatCode">
            <summary>
            Returns the current format of a data field or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetFormatCode(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a data field's or table window column's format.
            </summary>
            <param name="nFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetInputMask(PPJ.Runtime.SalString@)">
            <summary>
            Gets the input mask of a data field or table window column.
            </summary>
            <param name="sMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetInputMask">
            <summary>
            Gets the input mask of a data field or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetFormat(PPJ.Runtime.SalString@)">
            <summary>
            Gets the picture format of a data field or table window column.
            </summary>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetFormat">
            <summary>
            Gets the picture format of a data field or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.IsValid">
            <summary>
            Validates the contents of a data field or table window column using the current profile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetInputMask(PPJ.Runtime.SalString)">
            <summary>
            Sets the input mask of a data field or table window column.
            </summary>
            <param name="sMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetFormat(PPJ.Runtime.SalString)">
            <summary>
            Sets the picture format of a data field or table window column.
            </summary>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetText(PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean)">
            <summary>
            Copies a string to a data field or table window column. After copying the string
            to the field, formats the string.
            </summary>
            <param name="sValue"></param>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetTextUnmasked(PPJ.Runtime.SalString@)">
            <summary>
            Unmasks the text from a masked edit control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetTextUnmasked">
            <summary>
            Unmasks the text from a masked edit control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.Validate">
            <summary>
            Validates and formats a data field's or table window column's contents.
            </summary>
            <param name="nValidate"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.Validate(PPJ.Runtime.SalNumber)">
            <summary>
            Validates and formats a data field's or table window column's contents.
            </summary>
            <param name="nValidate"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetDataLength(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a limit on the number of characters that a user can enter into a data field,
            multiline text field, or table window column.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetDataLength">
            <summary>
            Returns the maximum length of a data field, multiline text field, or table window
            column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.AddListItem(PPJ.Runtime.SalString)">
            <summary>
            Adds a string to a list box or combo box.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.ClearList">
            <summary>
            Deletes all entries from a list box or combo box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.DeleteListItem(PPJ.Runtime.SalNumber)">
            <summary>
            Deletes a list box or combo box entry.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetListSelectedItems(PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Returns an array of index numbers of selected list box entries.
            </summary>
            <param name="nSelectedArray"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.InsertListItem(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Inserts an entry into a list box or combo box at a specified position.
            </summary>
            <param name="nIndex"></param>
            <param name="sAdd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.PopulateList(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString)">
            <summary>
            Populates a list box or combo box with a result set. SalListPopulate overrides any
            settings made with SalListSetTabs. If the SELECT statement returns data from multiple
            columns, each column's data displayed in a list box is separated by tabs.
            However, due to a Microsoft Windows limitation, each column's data displayed in
            a combo box is separated by a single '|' character. There is no space between
            one column's data, the separator character, and another column's data.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.PopulateList(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Populates a list box or combo box with a result set. SalListPopulate overrides any
            settings made with SalListSetTabs. If the SELECT statement returns data from multiple
            columns, each column's data displayed in a list box is separated by tabs.
            However, due to a Microsoft Windows limitation, each column's data displayed in
            a combo box is separated by a single '|' character. There is no space between
            one column's data, the separator character, and another column's data.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetListItemsCount">
            <summary>
            Returns the number of list box or combo box entries.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetListSelectedItemsCount">
            <summary>
            Returns the number of selected entries in a multiple-selection list box. Specify
            single- or multiple-selection in the list box's customizer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetListSelectedIndex">
            <summary>
            Returns the index of the selected entry in a combo box or single-selection list box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetListItemState(PPJ.Runtime.SalNumber)">
            <summary>
            Determines whether the specified list box or combo box entry is selected.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetListItemText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Returns the text of the specified item.
            </summary>
            <param name="nIndex"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetListItemText(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the text of the specified item.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetListItemTextLength(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the length of a list box or combo box entry.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetListRedraw(PPJ.Runtime.SalNumber)">
            <summary>
            Redraws entries in a list box or combo box, or prevents them from being redrawn.
            </summary>
            <param name="bRedraw"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetListSelectedText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Finds and selects a combo box or single-selection list box entry.
            </summary>
            <param name="nIndexStart"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetListSelectedItems(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Selects or deselects a combo box or multiple-selection list box entry.
            </summary>
            <param name="nIndex"></param>
            <param name="bSelect"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetListSelectedIndex(PPJ.Runtime.SalNumber)">
            <summary>
            Selects or deselects a combo box or single-selection list box entry.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.SetListTabStops(PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Sets tabs in a list box.
            </summary>
            <param name="nTabStops"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.PopulateListFiles(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Populates a list box or combo box with a directory of files.
            </summary>
            <param name="ctrlPath"></param>
            <param name="sPathName"></param>
            <param name="nAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetListSelectedFile(PPJ.Runtime.SalString@)">
            <summary>
            Fetches the selected directory or file name from a list box or combo box.
            </summary>
            <param name="sFileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalComboBox.GetListSelectedFile">
            <summary>
            Fetches the selected directory or file name from a list box or combo box.
            </summary>
            <returns></returns>
        </member>
        <member name="E:PPJ.Runtime.Windows.SalComboBox.ReadOnlyChanged">
            <summary>
            Fired when the ReadOnly property is altered.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalComboBox.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalComboBox.EditMask">
            <summary>
            Indicates the edit mask to apply to the text while editing.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalComboBox.Text">
            <summary>
            Returns/Sets the text of the combo box.
            This is overridden remove the edit mask.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalComboBox.Modified">
            <summary>
            Returns/Sets the modified flag.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalComboBox.ReadOnly">
            <summary>
            Returns/Sets the ReadOnly flag for the ComboBox control.
            When the ComboBox is ReadOnly, it can still get the focus.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalComboBox.CultureInfo">
            <summary>
            Returns/Sets the culture to use for this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalComboBox.ShouldSerializeCultureInfo">
            <summary>
            Prevents the designer from serializing inherited CultureInfo.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalComboBox.Watermark">
            <summary>
            Returns/Sets the watermark to use for this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalComboBox.EnableSpellChecker">
            <summary>
            Enables/Disables the built-in spell checker.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalComboBox.Label">
            <summary>
            Returns/Sets the label associated with this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalComboBox.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.TabbedMdiManager">
            <summary>
            Implementation of the TabbedMDI interface.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.GetTabPage(System.Windows.Forms.Form)">
            <summary>
            Returns the tab page associated with the specified form.
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.Enabled">
            <summary>
            Enables or disables the tabbed interface manager.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.CloseButtonStyle">
            <summary>
            Returns or sets the style for the close buttons.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.ShowIcons">
            <summary>
            Returns or sets whether the forms icons should be shows on the tabs.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.ShowThumbnails">
            <summary>
            Returns or sets whether the forms icons should be shows on the tabs.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.ThumbnailsSize">
            <summary>
            Returns or sets the percentage of the form's width to use to generate the thumbnail.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.MaxWidth">
            <summary>
            Returns or sets the maximum width of the tab. When set to 0 the width is limited by the window size.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.Renderer">
            <summary>
            Returns or sets the renderer class used to draw the tabbed interface.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.SelectedIndex">
            <summary>
            Returns/sets the currently selected tab page.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.TabsControl.Close">
            <summary>
            Restores the MDI layout.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.TabsControl.Initialize">
            <summary>
            Starts up the tabbed mdi control, initializes the MdiClient area and loads all the
            existing mdi child forms.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.TabsControl.FindFormPage(System.Windows.Forms.Form)">
            <summary>
            Finds the tab related to the active mdi child form.
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.TabsControl.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Performs mouse clicks.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.TabsControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Highlights the areas under the mouse.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.TabsControl.OnMouseLeave(System.EventArgs)">
            <summary>
            Restores the control after the mouse leaves the area.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.TabsControl.CreateTabPage(System.Windows.Forms.Form)">
            <summary>
            Creates a new tab page and associates it with the specified mdi child form.
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.TabsControl.ClosePage(System.Int32)">
            <summary>
            Closes the form associates with the specified tab page.
            The tab page will be removed after the form is actually closed.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.TabsControl.ShowWindowsMenu">
            <summary>
            Shows the windows drop down menu listing all mdi child forms.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.TabsControl.ShowThumbnailsPanel">
            <summary>
            Displays the thumbnails panel.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.TabsControl.SelectedIndex">
            <summary>
            Returns or sets the active tab page.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.TabsControl.TabPages">
            <summary>
            Returns the tab pages.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.TabbedMdiManager.HitTestLocation">
            <summary>
            Hit test locations.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.TabbedMdiManager.HitTestInfo">
            <summary>
            Hit test return value.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.TabbedMdiManager.CloseButtonShowStyle">
            <summary>
            Styles uses to draw the close button.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.TabbedMdiManager.RendererBase">
            <summary>
            Base class for the renderers.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.RendererBase.ShowThumbnailsPanel">
            <summary>
            Displays the thumbnails panel.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.RendererBase.TabPages">
            <summary>
            Returns the tab pages collection.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.RendererBase.Bounds">
            <summary>
            Returns the bounds of the tabs control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.RendererBase.SelectedIndex">
            <summary>
            Returns the selected tab index.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.RendererBase.SelectedPage">
            <summary>
            Returns the selected tab page or null.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.RendererBase.CloseButtonStyle">
            <summary>
            Returns the style to be used to draw the close buttons.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.RendererBase.ShowIcons">
            <summary>
            Returns the setting to show the forms icons.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.RendererBase.ShowThumbnails">
            <summary>
            Returns the setting to show the forms thumbnails.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.RendererBase.ThumbnailsSize">
            <summary>
            Returns or sets the percentage of the form's width to use to generate the thumbnail.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.RendererBase.Font">
            <summary>
            Returns the font used by the tabs control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.RendererBase.Control">
            <summary>
            Returns the control used to draw the tabs.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.RendererBase.IsThumbnailsPanelVisible">
            <summary>
            Returns true if the thumbnails panel is currently on screen.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.TabbedMdiManager.DefaultRenderer">
            <summary>
            Default renderer. Draws VisualStudio like tabs.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.DefaultRenderer.IsOnTab(System.Drawing.Rectangle,System.Int32,System.Drawing.Point)">
            <summary>
            Verify that the mouse location is really inside the tab.
            Must take in consideration the slanted sides.
            </summary>
            <param name="rect"></param>
            <param name="tabIndex"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.DefaultRenderer.GetTabPolygon(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Generates the polygon needed to draw the tabs.
            </summary>
            <param name="tabRect"></param>
            <param name="leftSlant"></param>
            <param name="rightSlant"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.DefaultRenderer.MeasureTabSize(System.Int32)">
            <summary>
            Measures the size of the single tab.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.DefaultRenderer.MeasureTabs">
            <summary>
            Calculates the size and location of all tabs in the tab strip.
            Rectangles are cached. This function must be called everytime a
            tab is added/removed.
            
            Rectangles of slanted tabs overlap the adjacent tabs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.DefaultRenderer.MeasureLeftSlantSize(System.Int32)">
            <summary>
            Calculates the size of the slant for slanted tabs.
            </summary>
            <param name="tabIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.DefaultRenderer.MeasureRightSlantSize(System.Int32)">
            <summary>
            Calculates the size of the slant for slanted tabs.
            </summary>
            <param name="tabIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.DefaultRenderer.ShowCloseButtonOnTab(System.Int32)">
            <summary>
            Returns true when the close button should be shown on the specified tab.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.TabbedMdiManager.DefaultRenderer.ShowCloseButtonOnHeader">
            <summary>
            Returns true when the close button should be shown on the header.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.TabbedMdiManager.DefaultRenderer.IsAnyTabVisible">
            <summary>
            Returns true if any tab is visible.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Windows.TabbedMdiManager.FlatRendeder">
            <summary>
            Flat tabs renderer. Draws flat looking tabs.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.TabbedMdiManager.Page">
            <summary>
            Wraps MdiChild forms into pages in the tabbed control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.TabbedMdiManager.ExpandableObjectConverter">
            <summary>
            Displays (class name) in the property grid.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Forms.TabbedMDI.ThumbnailsContainer">
            <summary>
            Container for the thumbnails selectors.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Forms.TabbedMDI.ThumbnailsContainer.ThumbnailsSize">
            <summary>
            Returns or sets the percentage of the form's width to use to generate the thumbnail.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Reports.SalReportEngine">
            <summary>
            Provides the load engine that realizes the SalReport fetch loop
            </summary>
        </member>
        <member name="T:PPJ.Runtime.ISalReport">
            <summary>
            Interface to the report provider object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.ISalReport.Preview(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Preview the report. The report viewer control is hosted in
            the specified parent. If the parent is null, a new top level form is created.
            </summary>
            <param name="parent"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.ISalReport.Print(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Prints the report.
            </summary>
            <param name="copies"></param>
            <param name="firstPage"></param>
            <param name="lastPage"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.ISalReport.Export(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Exports the report to the specified file. The kind of export
            is inferred from the extension of the file.
            </summary>
            <param name="file"></param>
            <param name="firstPage"></param>
            <param name="lastPage"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.ISalReport.Create(System.String)">
            <summary>
            Creates a new dynamic report using the specified template. If the templates is
            null (default), the built-in template is used.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.ISalReport.Reset">
            <summary>
            Regenerates the data set and refreshes the report.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.ISalReport.GetReportVariable(System.String)">
            <summary>
            Returns the value of the specified report variable.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.ISalReport.SetReportVariable(System.String,System.Object)">
            <summary>
            Sets the value of the specified report variable.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.ISalReport.DoPreviewCommand(System.Int32)">
            <summary>
            Executes the specified command on the preview window. The command code
            is one of the Sys.RPT_Cmd* constants.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:PPJ.Runtime.ISalReport.ClosePreview">
            <summary>
            Closes the preview window.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalReport.Owner">
            <summary>
            The owner control for the report. This is the control that
            receives the report's notifications.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalReport.FileName">
            <summary>
            The report file name.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalReport.Variables">
            <summary>
            List of report variables, separated by a comma.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalReport.InputItems">
            <summary>
            List of bind input variables, separated by a comma.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalReport.DocumentName">
            <summary>
            Name of the printing document.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalReport.ProgressText">
            <summary>
            Text to show in the progress dialog.
            It can be up to two lines separated by a CRLF.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalReport.ProgressCaption">
            <summary>
            Title of the progress dialog.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalReport.TableWindowSource">
            <summary>
            TableWindow control to be used as the data source for the report.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalReport.ReportDocument">
            <summary>
            Returns the underlying report object.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalReport.Viewer">
            <summary>
            Returns the current instance of the report viewer.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalReport.LastPageNumber">
            <summary>
            Returns the last page number.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalReport.PrinterSettings">
            <summary>
            Returns the printer settings to use when printing the report.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.ISalReportDesignable">
            <summary>
            Interface to a designable report provider object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.ISalReportDesignable.Design">
            <summary>
            Opens the report template in the designer window. 
            Implementation is only available for those engines that contain a designer within the runtime.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Reports.SalReportViewGoToPageDialog">
            <summary>
            Dialog box use to enter the page number to go to.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Reports.SalReportViewGoToPageDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Reports.SalReportViewGoToPageDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PPJ.Runtime.Reports.SalReportViewGoToPageDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Reports.SalReportInputVars">
            <summary>
            Encapsulates a list of input variables.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Reports.SalReportInputVars.Parse(System.String,System.String)">
            <summary>
            Parses the input variables and input items out of the string lists.
            </summary>
            <param name="vars"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Reports.SalReportInputVars.Names">
            <summary>
            Returns the collection of input items names.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Reports.SalReportPrintProgressDialog">
            <summary>
            Summary description for PrintProgressDialog.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Reports.SalReportPrintProgressDialog.DoEvents(System.IntPtr)">
            <summary>
            Allows local event processing during longer tasksAllows local event processing during longer tasks
            </summary>
            <param name="handle">Handle to the control or window for which events are allowed, including all its children</param>
        </member>
        <member name="F:PPJ.Runtime.Reports.SalReportPrintProgressDialog.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Reports.SalReportPrintProgressDialog.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PPJ.Runtime.Reports.SalReportPrintProgressDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Reports.SalReportProgressEventHandler">
            <summary>
            Event handler for the SalReport.PrintProgress event.
            <remarks>Handling this event allows to override the default progress dialog.</remarks>
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Reports.SalReportProgressEventArgs">
            <summary>
            Arguments for the SalReport.PrintProgressEvent.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Reports.SalReportViewProgressPanel.DoEvents(System.IntPtr)">
            <summary>
            Allows local event processing during longer tasksAllows local event processing during longer tasks
            </summary>
            <param name="handle">Handle to the control or window for which events are allowed, including all its children</param>
        </member>
        <member name="F:PPJ.Runtime.Reports.SalReportViewProgressPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Reports.SalReportViewProgressPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PPJ.Runtime.Reports.SalReportViewProgressPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Html.HtmlTextRenderer">
            <summary>
            Simple lightweight text renderer.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Html.HtmlTextRenderer.MeasureText(System.Drawing.Graphics,System.String[])">
            <summary>
            Measures each piece of the html text
            </summary>
            <param name="g"></param>
            <param name="parts"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Html.HtmlTextRenderer.ParseHtml(System.String)">
            <summary>
            Simple html parser.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Windows.IFndNoDesignFilter">
            <summary>
            This interface is used as a marker for controls that should NOT
            have their properties filtered in design time by the PPJTypeDescriptorFilter.
            An example of such control is FndXGantt
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.Common.ChildCollectionEventArgs">
            <summary>
            This class contains additional info about an add or remove operation
            For more information see <see cref="T:PPJ.Runtime.Windows.NavBar.Common.ChildControlCollection"/>
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.ChildCollectionEventArgs.#ctor">
            <summary>
            Initializes a new instance of the CollectionEventArgs class
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.ChildCollectionEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the CollectionEventArgs class
            </summary>
            <param name="item">Item which changed the collection</param>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.Common.ChildCollectionEventArgs.Item">
            <summary>
            Gets the item which changed the collection
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.Common.ChildControlCollection">
            <summary>
            The basic collection class with events which notifies when new items have been added or removed
            </summary>
            <remarks>
            This class can be usefull when a container class needs to now which object have been added to
            the collection or have been removed. This is especially usefull when you want the child controls
            to appear in the document outline (Visual Studio only). The child controls needs to be part of
            the controls collection to achieve this. You can use the events <see cref="E:PPJ.Runtime.Windows.NavBar.Common.ChildControlCollection.ItemAdded"/> and
            <see cref="E:PPJ.Runtime.Windows.NavBar.Common.ChildControlCollection.ItemRemoved"/> to add or remove the controls from the Controls collection. 
            </remarks>
            <example>TODO</example>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.ChildControlCollection.#ctor">
            <summary>
            Initializes a new instance of the ChildControlCollection class
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.NavBar.Common.ChildControlCollection.Sort(System.Collections.IComparer)" -->
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.ChildControlCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Overriden. Raises the Removed event 
            </summary>      
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.ChildControlCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Overriden. Raises the item added event 
            </summary>      
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.Common.ChildControlCollection.ItemAdded">
            <summary>
            Occurs when an item has been added to the collection
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.Common.ChildControlCollection.ItemRemoved">
            <summary>
            Occurs when an item has been removed from the collection
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.ExtDrawing.DrawGradient(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color[],System.Single[])">
            <summary>
            Draws a gradient on a Graphics canvas
            </summary>
            <param name="g">The graphics canvas</param>
            <param name="bounds">The bounds of the gradient</param>
            <param name="colors">The colors of the gradient</param>
            <param name="positions">The position of the colors inside the gradient</param>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.Common.IObserver">
            <summary>
            Represents an object which can observe other <see cref="T:PPJ.Runtime.Windows.NavBar.Common.IObservable"/> objects
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.IObserver.Notify(PPJ.Runtime.Windows.NavBar.Common.IObservable,System.String,System.Object)">
            <summary>
            Handles the notification the <see cref="T:PPJ.Runtime.Windows.NavBar.Common.IObservable"/> sent. 
            </summary>
            <param name="obj">The observable object</param>
            <param name="id">An identification which caused this notification</param>
            <param name="arguments">Additional info</param>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.Common.PopupCancelEventArgs">
            <summary>
            Arguments to a <see cref="!:PopupCancelEvent"/>.  Provides a
            reference to the popup form that is to be closed and 
            allows the operation to be cancelled.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.Common.PopupCancelEventArgs.cancel">
            <summary>
            Whether to cancel the operation
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.Common.PopupCancelEventArgs.location">
            <summary>
            Mouse down location
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.Common.PopupCancelEventArgs.popup">
            <summary>
            Popup form.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.PopupCancelEventArgs.#ctor(System.Windows.Forms.Form,System.Drawing.Point)">
            <summary>
            Constructs a new instance of this class.
            </summary>
            <param name="popup">The popup form</param>
            <param name="location">The mouse location, if any, where the
            mouse event that would cancel the popup occured.</param>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.Common.PopupCancelEventArgs.Popup">
            <summary>
            Gets the popup form
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.Common.PopupCancelEventArgs.CursorLocation">
            <summary>
            Gets the location that the mouse down which would cancel this 
            popup occurred
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.Common.PopupCancelEventArgs.Cancel">
            <summary>
            Gets/sets whether to cancel closing the form. Set to
            <c>true</c> to prevent the popup from being closed.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.Common.PopupCancelEventHandler">
            <summary>
            Represents the method which responds to a <see cref="!:PopupCancel"/> event.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.Common.PopupClosedEventArgs">
            <summary>
            Contains event information for a <see cref="!:PopupClosed"/> event.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.Common.PopupClosedEventArgs.popup">
            <summary>
            The popup form.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.PopupClosedEventArgs.#ctor(System.Windows.Forms.Form)">
            <summary>
            Constructs a new instance of this class for the specified
            popup form.
            </summary>
            <param name="popup">Popup Form which is being closed.</param>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.Common.PopupClosedEventArgs.Popup">
            <summary>
            Gets the popup form which is being closed.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.Common.PopupClosedEventHandler">
            <summary>
            Represents the method which responds to a <see cref="!:PopupClosed"/> event.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper">
            <summary>
            A class to assist in creating popup windows like Combo Box drop-downs and Menus.
            This class includes functionality to keep the title bar of the popup owner form
            active whilst the popup is displayed, and to automatically cancel the popup
            whenever the user clicks outside the popup window or shifts focus to another 
            application.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.popClosedHandler">
            <summary>
            Event Handler to detect when the popup window is closed
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.filter">
            <summary>
            Message filter to detect mouse clicks anywhere in the application
            whilst the popup window is being displayed.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.popup">
            <summary>
            The popup form that is being shown.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.owner">
            <summary>
            The owner of the popup form that is being shown:
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.popupShowing">
            <summary>
            Whether the popup is showing or not.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.skipClose">
            <summary>
            Whether the popup has been cancelled, notified by PopupCancel,
            rather than closed.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.ShowPopup(System.Windows.Forms.Form,System.Windows.Forms.Form,System.Drawing.Point)">
            <summary>
            Shows the specified Form as a popup window, keeping the
            Owner's title bar active and preparing to cancel the popup
            should the user click anywhere outside the popup window.
            <para>Typical code to use this message is as follows:</para>
            <code>
               frmPopup popup = new frmPopup();
               Point location = this.PointToScreen(new Point(button1.Left, button1.Bottom));
               popupHelper.ShowPopup(this, popup, location);
            </code>
            <para>Put as much initialisation code as possible
            into the popup form's constructor, rather than the <see cref="!:System.Windows.Forms.Load"/>
            event as this will improve visual appearance.</para>
            </summary>
            <param name="owner">Main form which owns the popup</param>
            <param name="popup">Window to show as a popup</param>
            <param name="location">Location relative to the screen to show the popup at.</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.popup_Closed(System.Object,System.EventArgs)">
            <summary>
            Responds to the <see cref="E:System.Windows.Forms.Form.Closed"/>
            event from the popup form.
            </summary>
            <param name="sender">Popup form that has been closed.</param>
            <param name="e">Not used.</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Subclasses the owning form's existing Window Procedure to enables the 
            title bar to remain active when a popup is show, and to detect if
            the user clicks onto another application whilst the popup is visible.
            </summary>
            <param name="m">Window Procedure Message</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.ClosePopup">
            <summary>
            Called when the popup is being hidden.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.OnPopupClosed(PPJ.Runtime.Windows.NavBar.Common.PopupClosedEventArgs)">
            <summary>
            Raises the <see cref="E:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.PopupClosed"/> event.
            </summary>
            <param name="e"><see cref="T:PPJ.Runtime.Windows.NavBar.Common.PopupClosedEventArgs"/> describing the
            popup form that is being closed.</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.OnPopupCancel(PPJ.Runtime.Windows.NavBar.Common.PopupCancelEventArgs)">
            <summary>
            Raises the <see cref="E:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.PopupCancel"/> event.
            </summary>
            <param name="e"><see cref="T:PPJ.Runtime.Windows.NavBar.Common.PopupCancelEventArgs"/> describing the
            popup form that about to be cancelled.</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>Use the <see cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)"/>
            method to attach this class to the form you want to show popups from.</remarks>
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.PopupClosed">
            <summary>
            Raised when the popup form is closed.
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper.PopupCancel">
            <summary>
            Raised when the Popup Window is about to be cancelled.  The
            <see cref="P:PPJ.Runtime.Windows.NavBar.Common.PopupCancelEventArgs.Cancel"/> property can be
            set to <c>true</c> to prevent the form from being cancelled.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelperMessageFilter">
            <summary>
            A Message Loop filter which detect mouse events whilst the popup form is shown
            and notifies the owning <see cref="T:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper"/> class when a mouse
            click outside the popup occurs.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelperMessageFilter.popup">
            <summary>
            The popup form
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelperMessageFilter.owner">
            <summary>
            The owning <see cref="T:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper"/> object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelperMessageFilter.#ctor(PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper)">
            <summary>
            Constructs a new instance of this class and sets the owning
            object.
            </summary>
            <param name="owner">The <see cref="T:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelper"/> object
            which owns this class.</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelperMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Checks the message loop for mouse messages whilst the popup
            window is displayed.  If one is detected the position is
            checked to see if it is outside the form, and the owner
            is notified if so.
            </summary>
            <param name="m">Windows Message about to be processed by the
            message loop</param>
            <returns><c>true</c> to filter the message, <c>false</c> otherwise.
            This implementation always returns <c>false</c>.</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelperMessageFilter.OnMouseDown">
            <summary>
            Checks the mouse location and calls the OnCancelPopup method
            if the mouse is outside the popup form.		
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelperMessageFilter.OnCancelPopup(PPJ.Runtime.Windows.NavBar.Common.PopupCancelEventArgs)">
            <summary>
            Raises the <see cref="E:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelperMessageFilter.PopupCancel"/> event.
            </summary>
            <param name="e">The <see cref="T:PPJ.Runtime.Windows.NavBar.Common.PopupCancelEventArgs"/> associated 
            with the cancel event.</param>
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelperMessageFilter.PopupCancel">
            <summary>
            Raised when the Popup Window is about to be cancelled.  The
            <see cref="P:PPJ.Runtime.Windows.NavBar.Common.PopupCancelEventArgs.Cancel"/> property can be
            set to <c>true</c> to prevent the form from being cancelled.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.Common.PopupWindowHelperMessageFilter.Popup">
            <summary>
            Gets/sets the popup form which is being displayed.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.ControlState">
            <summary>
            Indicates in what state the control currently is. 
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.ControlState.Normal">
            <summary>
            Indicates that the control is in it's normal state
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.ControlState.Active">
            <summary>
            Indicates the the control is the active control
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.InputState">
            <summary>
            Indicates what input has been given to the control
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.InputState.Normal">
            <summary>
            Indicates that no input has been given
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.InputState.Clicked">
            <summary>
            Indicates that the user is currently clicking on the control
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.InputState.Hovered">
            <summary>
            Indicates that the user is currently hovering the control with the mouse
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.NaviBand">
            <summary>
            This class represents a Band which is a part of the Navigation bar
            </summary>
            <remarks>
            The band is the actual control container which will be displayed when the user clicks
            on the button which has been assigned to this band. 
            The size of this control is controlled by the layout engine. 
            </remarks>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBand.#ctor">
            <summary>
            Initializes a new instance of the Navigation band
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBand.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the Navigation band
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBand.Initialize">
            <summary>
            Initializes the control for the first time. 
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBand.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Raises the Paint event
            </summary>
            <param name="e">Additional paint info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBand.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Raises the PaintBackground and draws the background of the Navigation band
            </summary>
            <param name="pevent">Additional paint info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBand.OnResize(System.EventArgs)">
            <summary>
            Overriden. Raises the Resize event and Invalidates the control
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBand.OnTextChanged(System.EventArgs)">
            <summary>
            Overriden. Raises the TetChanged event
            </summary>
            <param name="e">Additional event info</param>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBand.Order">
            <summary>
            Gets or sets the position in a list of this band
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBand.OriginalOrder">
            <summary>
            Gets or sets the original position in a list of this band
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBand.LargeImage">
            <summary>
            Gets or sets the large image displayed when the button is not in minimized mode
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBand.SmallImage">
            <summary>
            Gets or set the image displayed when the button is in minimized mode
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBand.Button">
            <summary>
            Gets the button which is associated with this band
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBand.Renderer">
            <summary>
            Gets or sets the renderer for this control
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBand.NaviBar">
            <summary>
            Gets the owner NaviBar control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandClientArea.#ctor">
            <summary>
            Initializes a new instance of the NaviBandClientArea
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandClientArea.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the NaviBandClientArea
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandClientArea.Initialize">
            <summary>
            Initializes the control for the first time. 
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandClientArea.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Raises the Paint event
            </summary>
            <param name="e">Additional paint info</param>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.NaviBandCollapsed">
            <summary>
            This class represents a Band which is collapsed
            </summary>
            <remarks>
            The navigation pane contains one band which acts for all bands as the collapsed version. 
            The navigation pane brings the collapsed band to front when the user turns the navigation pane
            to collapsed mode. 
            </remarks>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollapsed.#ctor">
            <summary>
            Initializes a new instance of the Navigation band
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollapsed.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the Navigation band
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollapsed.Initialize">
            <summary>
            Initializes the control for the first time. 
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollapsed.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Raises the Paint event
            </summary>
            <param name="e">Additional paint info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollapsed.OnResize(System.EventArgs)">
            <summary>
            Overriden. Raises the Resize event and Invalidates the control
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollapsed.OnTextChanged(System.EventArgs)">
            <summary>
            Overriden. Raises the TetChanged event
            </summary>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollapsed.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Raises the PaintBackground
            </summary>
            <param name="pevent">Additional paint info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollapsed.OnMouseEnter(System.EventArgs)">
            <summary>
            Overriden. Raises the MouseEnter event
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollapsed.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raises the MouseDown event
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollapsed.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raises the MouseUp event 
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollapsed.OnMouseLeave(System.EventArgs)">
            <summary>
            Overriden. Raises the MouseLeave event
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.NaviBandCollection">
            <summary>
            This class represents a collection of Navigation Bands
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollection.#ctor">
            <summary>
            Initializes a new instance of the NaviBandCollection class
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollection.Add(PPJ.Runtime.Windows.NavBar.NaviBand)">
            <summary>
            Adds a new NaviBand the the collection
            </summary>
            <param name="value">The new NaviBand to add</param>
            <exception cref="!:ArgumentNullExceptions">Raised when the band argument is null</exception>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollection.Insert(System.Int32,PPJ.Runtime.Windows.NavBar.NaviBand)">
            <summary>
            Inserts a new NaviBand in the collection at the specified position
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollection.SilentAdd(PPJ.Runtime.Windows.NavBar.NaviBand)">
            <summary>
            Adds a new NaviBand the the collection without notifying parent
            </summary>
            <param name="value">The new NaviBand to add</param>
            <exception cref="!:ArgumentNullExceptions">Raised when the band argument is null</exception>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollection.Remove(PPJ.Runtime.Windows.NavBar.NaviBand)">
            <summary>
            Removes a band from the collection of bands
            </summary>
            <param name="band">The band to remove</param>
            <exception cref="!:ArgumentNullExceptions">Raised when the band argument is null</exception>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandCollection.Contains(PPJ.Runtime.Windows.NavBar.NaviBand)">
            <summary>
            Determines whether the list contains a specific value
            </summary>
            <param name="band">The value</param>
            <returns>Returns true if the list contains the item; false otherwise</returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBandCollection.Item(System.Int32)">
            <summary>
            Gets or sets a NaviBand at a certain location
            </summary>
            <param name="index">The index</param>
            <returns>The item if found</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandEventArgs.#ctor(PPJ.Runtime.Windows.NavBar.NaviBand)">
            <summary>
            Initializes a new instance of the NaviBandEventArgs class
            </summary>
            <param name="newActiveButton">The new active band</param>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBandEventArgs.Canceled">
            <summary>
            Gets or sets whether the event is canceled
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBandEventArgs.Group">
            <summary>
            Gets the group that triggered the event.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviBandEventArgs.Band">
            <summary>
            Gets the band that triggered the event.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviForm.#ctor">
            <summary>
            Initializes a new instance of the NaviForm
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.NaviForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandPopup.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Raises the Paint event
            </summary>
            <param name="e">Additional paint info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandPopup.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Raises the PaintBackground and draws the background of the Navigation band
            </summary>
            <param name="pevent">Additional paint info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandPopup.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raises the MouseDown event
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandPopup.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raises the MouseDown event.
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandPopup.OnMouseLeave(System.EventArgs)">
            <summary>
            Overriden. Raises the MouseLeave event and changes the cursor back to default
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandPopup.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raises the MouseUp event
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.NaviBandPopup.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandPopup.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandPopup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.NaviBandRenderer">
            <summary>
            This class contains the drawing functionality for a NavigationBand
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the background of an Navigation band
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds that the drawing should apply to</param>
            <param name="state"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandRenderer.DrawCollapsedBand(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Boolean,PPJ.Runtime.Windows.NavBar.InputState)">
            <summary>
            Draws the background of the collapsed band
            </summary>
            <param name="g">The canvas to draw on</param>
            <param name="bounds">The bounds of the drawing</param>
            <param name="text">The text that should appear into the bar</param>
            <param name="font">The font to use when drawing the text</param>
            <param name="state">The inputstate of the collapsed band</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandRenderer.DrawPopupBand(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the background of the popped up band
            </summary>
            <param name="g">The canvas to draw on</param>
            <param name="bounds">The bounds of the drawing</param>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.NaviBandRendererSystem">
            <summary>
            This class contains the drawing functionality for a NavigationBand
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandRendererSystem.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the background of an Navigation band
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds that the drawing should apply to</param>
            <param name="state"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandRendererSystem.DrawCollapsedBand(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Boolean,PPJ.Runtime.Windows.NavBar.InputState)">
            <summary>
            Draws the background of the collapsed band
            </summary>
            <param name="g">The canvas to draw on</param>
            <param name="bounds">The bounds of the drawing</param>
            <param name="text">The text that should appear into the bar</param>
            <param name="font">The font to use when drawing the text</param>
            <param name="state">The inputstate of the collapsed band</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBandRendererSystem.DrawPopupBand(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the background of the popped up band
            </summary>
            <param name="g">The canvas to draw on</param>
            <param name="bounds">The bounds of the drawing</param>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.NaviBarRenderer">
            <summary>
            Contains the base class for all Bar drawing classes
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBarRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the background of the NavigationBar
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds of the background</param>
            <remarks>Its sufficient to supply the ClientRectangle property of the control</remarks>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBarRenderer.DrawSmallButtonRegion(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the background of the rectangle containing the small buttons on the bottom 
            of the NavigationBar
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds of the small rectangle</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBarRenderer.DrawHeader(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the header region on top of the NavigationBar
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds of the header</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBarRenderer.DrawHeaderText(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Boolean)">
            <summary>
            Draws the text of the header region
            </summary>
            <param name="g">The canvas to draw on</param>
            <param name="bounds">The bounds of the text</param>
            <param name="text">The header text to draw</param>
            <param name="font">The font to use to draw the text</param>
            <param name="rightToLeft">indicates whether it's right to left or left to right layout</param>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.NaviBarRendererSystem">
            <summary>
            This class contains drawing functionality for the Navigation pane
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBarRendererSystem.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the background of the NavigationBar
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds of the background</param>
            <remarks>Its sufficient to supply the ClientRectangle property of the control</remarks>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBarRendererSystem.DrawSmallButtonRegion(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the background of the rectangle containing the small buttons on the bottom 
            of the NavigationBar
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds of the small rectangle</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBarRendererSystem.DrawHeader(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the header region on top of the NavigationBar
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds of the header</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviBarRendererSystem.DrawHeaderText(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Font,System.Boolean)">
            <summary>
            Draws the text of the header region
            </summary>
            <param name="g">The canvas to draw on</param>
            <param name="bounds">The bounds of the text</param>
            <param name="text">The header text to draw</param>
            <param name="font">The font to use to draw the text</param>
            <param name="rightToLeft">indicates whether it's right to left or left to right layout</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButton.#ctor">
            <summary>
            Initializes a new instance of the NaviButton
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButton.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the NaviButton
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButton.Initialize">
            <summary>
            Initializes the button for the first time
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButton.OnActivated(System.EventArgs)">
            <summary>
            Raises the Activated event
            </summary>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Raises the Paint event 
            </summary>
            <param name="e">Additional paint info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButton.OnMouseEnter(System.EventArgs)">
            <summary>
            Overriden. Raises the MouseEnter event
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raises the MouseDown event
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raises the MouseUp event 
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButton.OnMouseLeave(System.EventArgs)">
            <summary>
            Overriden. Raises the MouseLeave event
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButton.OnTextChanged(System.EventArgs)">
            <summary>
            Overriden. Raises the TextChanged event
            </summary>
            <param name="e">Additional event info</param>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviButton.LargeImage">
            <summary>
            Gets or sets the large image displayed when the button is not in minimized mode
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviButton.SmallImage">
            <summary>
            Gets or set the image displayed when the button is in minimized mode
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviButton.ShowImage">
            <summary>
            Gets or sets whether the image is visible or not
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviButton.Band">
            <summary>
            Gets or sets the band that is associated with this button
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviButton.Active">
            <summary>
            Gets or sets whether the button is currently the active button
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviButton.Small">
            <summary>
            Gets or sets whether the button should be drawn in the compact mode or the full mode
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviButton.Collapsed">
            <summary>
            Gets or sets whether the buttons should be drawn in minimized mode or not
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviButton.Renderer">
            <summary>
            Gets or sets the renderer 
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.NaviButton.Activated">
            <summary>
            Occurs the button is activated
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonCollapse.#ctor">
            <summary>
            Initializes a new instance of the NavigationBarButton
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonCollapse.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Raises the Paint event 
            </summary>
            <param name="e">Additional paint info</param>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviButtonCollapse.Collapsed">
            <summary>
            Gets or sets whether the buttons should be drawn in minimized mode or not
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.NaviButtonCollection">
            <summary>
            This class represents a collection of <see cref="T:PPJ.Runtime.Windows.NavBar.NaviButton"/> items
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonCollection.#ctor">
            <summary>
            Initializes a new instance of the NaviButtonCollection class
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonCollection.Add(PPJ.Runtime.Windows.NavBar.NaviButton)">
            <summary>
            Adds a new button the the collection
            </summary>
            <param name="value">The new button to add</param>
            <exception cref="!:ArgumentNullExceptions">
            Raised when the button argument is null
            </exception>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonCollection.Remove(PPJ.Runtime.Windows.NavBar.NaviButton)">
            <summary>
            Removes an item from the list
            </summary>
            <param name="value">The button to remove</param>
            <exception cref="!:ArgumentNullExceptions">
            Raised when the button argument is null
            </exception>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonCollection.Contains(PPJ.Runtime.Windows.NavBar.NaviButton)">
            <summary>
            Determines whether the list contains a specific value
            </summary>
            <param name="band">The value</param>
            <returns>Returns true if the list contains the item; false otherwise</returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviButtonCollection.Item(System.Int32)">
            <summary>
            Gets or sets a NavigationButton at a certain location
            </summary>
            <param name="index">The index</param>
            <returns>The item if found</returns>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.NaviButtonRenderer">
            <summary>
            This class contains drawing functionality for an button
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonRenderer.#ctor">
            <summary>
            Initializes a new instance of the NaviButtonRenderer class
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,PPJ.Runtime.Windows.NavBar.ControlState,PPJ.Runtime.Windows.NavBar.InputState)">
            <summary>
            Draws the background gradients of an Button
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds that the drawing should apply to</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonRenderer.DrawText(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Font,System.String,System.Boolean)">
            <summary>
            Draws text on a graphics canvas
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds of the text</param>
            <param name="font">The font of the text</param>
            <param name="text">The text to draw</param>
            <param name="rightToLeft">Rigth to left or left to right layout</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonRenderer.DrawImage(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Image)">
            <summary>
            Draws an image on the canvas at a given location
            </summary>
            <param name="g">The graphics canvas to draw on</param>
            <param name="location">The location of the image</param>
            <param name="image">The image</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonRenderer.DrawOptionsTriangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the surface of the options button
            </summary>
            <param name="g">The graphics canvas to draw on</param>
            <param name="bounds">The bounds of the text</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonRenderer.DrawCollapseButton(System.Drawing.Graphics,System.Drawing.Rectangle,PPJ.Runtime.Windows.NavBar.InputState,System.Boolean,System.Boolean)">
            <summary>
            Draws the surface of the Collapse button
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds that the drawing should apply to</param>
            <param name="inputState">The input state of the control</param>
            <param name="rightToLeft">Right to left or left to right</param>
            <param name="collapsed">The bar is collasped or not</param>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.NaviButtonRendererSystem">
            <summary>
            This class contains drawing functionality for an button
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonRendererSystem.#ctor">
            <summary>
            Initializes a new instance of the NaviButtonOfficeRenderer class
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonRendererSystem.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,PPJ.Runtime.Windows.NavBar.ControlState,PPJ.Runtime.Windows.NavBar.InputState)">
            <summary>
            Draws the background gradients of an Button
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds that the drawing should apply to</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonRendererSystem.DrawText(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Font,System.String,System.Boolean)">
            <summary>
            Draws text on a graphics canvas
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds of the text</param>
            <param name="font">The font of the text</param>
            <param name="text">The text to draw</param>
            <param name="rightToLeft">Rigth to left or left to right layout</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonRendererSystem.DrawImage(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Image)">
            <summary>
            Draws an image on the canvas at a given location
            </summary>
            <param name="g">The graphics canvas to draw on</param>
            <param name="location">The location of the image</param>
            <param name="image">The image</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonRendererSystem.DrawOptionsTriangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the surface of the options button
            </summary>
            <param name="g">The graphics canvas to draw on</param>
            <param name="bounds">The bounds of the text</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviButtonRendererSystem.DrawCollapseButton(System.Drawing.Graphics,System.Drawing.Rectangle,PPJ.Runtime.Windows.NavBar.InputState,System.Boolean,System.Boolean)">
            <summary>
            Draws the surface of the Collapse button
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds that the drawing should apply to</param>
            <param name="inputState">The input state of the control</param>
            <param name="rightToLeft">Right to left or left to right</param>
            <param name="collapsed">The bar is collasped or not</param>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.NaviGroup">
            <summary>
            Represents a container control which can be expanded or collapsed to a header bar only. 
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviGroup.#ctor">
            <summary>
            Initializes a new instance of the GroupView class
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviGroup.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the GroupView class
            </summary>
            <param name="container">The container to which this control belongs</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviGroup.Initialize">
            <summary>
            Initializes the control for the first time
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviGroup.CreateBounds(System.Int32)">
            <summary>
            Creates a new Region for the header using a specified Height. 
            </summary>
            <param name="height">The height of the header</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviGroup.Expand">
            <summary>
            Expands the view to full height
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviGroup.Collapse">
            <summary>
            Collapses the view to the header only
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviGroup.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Raises the Paint event 
            </summary>
            <param name="e">Additional paint info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviGroup.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Raises the PaintBackground event 
            </summary>
            <param name="e">Additional paint info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviGroup.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raises the MouseClick event
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviGroup.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raises the MouseMove event and shows a hand when the mouse is moved over the header
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviGroup.OnMouseLeave(System.EventArgs)">
            <summary>
            Overriden. Raises the MouseLeave event and changes the current cursor to the default. 
            </summary>
            <param name="e">Additional mouse info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviGroup.OnResize(System.EventArgs)">
            <summary>
            Overriden. Raises the Resize event and reinitializes the bounds of the header
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviGroup.OnHeaderMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs when the user clicks with the mouse inside the header region
            </summary>
            <param name="e">Additional mouse event info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviGroup.BeginInit">
            <summary>
            Starts the initialization for the control
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviGroup.EndInit">
            <summary>
            Automatically creates the bounds for the control based on the current header height.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviGroup.Caption">
            <summary>
            Gets or sets the text displayed in the header region
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviGroup.HeaderHeight">
            <summary>
            Gets or sets the height of the header
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviGroup.Expanded">
            <summary>
            Gets or sets whether the control is expanded or collapsed to the header only
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviGroup.ExpandedHeight">
            <summary>
            Gets or sets the height of the GroupView when it's expanded
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviGroup.Height">
            <summary>
            Overriden. Gets or sets the current height of the GroupView
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviGroup.ContextMenuStrip">
            <summary>
            Overriden. Gets or sets the ContextMenuStrip associated with this control
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviGroup.HeaderContextMenuStrip">
            <summary>
            Gets or sets the shortcut menu to display when the user right-clicks the header. 
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviGroup.HeaderRegion">
            <summary>
            Gets the region used for the header
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviGroup.NaviBar">
            <summary>
            Gets the owner NaviBar control.
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.NaviGroup.GroupExpanded">
            <summary>
            Occurs when the group is expanded.
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.NaviGroup.GroupCollapsed">
            <summary>
            Occurs when the group is collapsed.
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.NavBar.NaviGroup.HeaderMouseClick">
            <summary>
            Occurs when the user clicks with the mouse inside the header region
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayout.Notify(PPJ.Runtime.Windows.NavBar.Common.IObservable,System.String,System.Object)">
            <summary>
            Overriden. Handles the Notification the observable object sent
            </summary>
            <param name="obj">The observable object</param>
            <param name="id">An identification which caused this notification</param>
            <param name="arguments">Additional info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayout.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the Navigation pane
            </summary>
            <param name="g">Graphics object providing drawing functionality</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayout.DrawBackground(System.Drawing.Graphics)">
            <summary>
            Draws the background of the Navigation pane
            </summary>
            <param name="g">Graphics object providing drawing functionality</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayout.Layout(System.Object,System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Requests that the layout engine should perform a layout operation
            </summary>
            <param name="container">The container </param>
            <param name="layoutEventArgs">Additional event info</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayout.InitializeChildControls">
            <summary>
            Initializes the child controls, only call once. 
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayout.EndInit">
            <summary>
            Handles additional functionality at the end of the initialization
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayout.SwitchCollapsion(System.Boolean,System.Boolean)">
            <summary>
            Changes the navigation bar to collapsed view 
            </summary>     
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.NaviLayout.Bar">
            <summary>
            Gets or sets the Navigationbar
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviLayout.VisibleButtons">
            <summary>
            Gets the amount of visible buttons
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.#ctor">
            <summary>
            Initializes a new instance of the NaviOfficeLayout class
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.LayoutSplitter">
            <summary>
            Calculates the position of the splitter
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.LayoutBands">
            <summary>
            Calculates the size and the position of the bands
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.CalculateRegions">
            <summary>
            Recalculates the size and positions of the small button rectangle
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.MouseInSplitter(System.Int32,System.Int32)">
            <summary>
            Returns true if the given x and y coordinate are inside the bounds of the splitter 
            rectangle
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <returns>True when the x and y coordinate are inside the bounds; False otherwise</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.HandleMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseDown event
            </summary>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.HandleMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseMove event
            </summary>
            <param name="e">Additional event info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.ReCalculateButtonTotals">
            <summary>
            Recalculates the total visible buttons and visible large buttons
            </summary>
            <remarks>
            This method prevents the visible button count and the visible large button count to be 
            higher than the actual amount of buttons. This method should be called whenever the 
            collection of buttons is changed
            </remarks>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.DragSplitter(System.Int32)">
            <summary>
            Moves the splitter to a new location
            </summary>
            <param name="ylocation">The new y coordinate of the splitter</param>
            <remarks>
            The splitter can not be moved outside the bounds of the control. This method also moves the 
            splitter based on the current button height and the amount of visible buttons. 
            </remarks>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.LayoutButtons">
            <summary>
            Calculates the position of the buttons
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.ShowMoreOptionsDialog">
            <summary>
            Creates a new instance of the option dialog and shows it to the user.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.ShowOptionsMenu">
            <summary>
            Shows the options menu 
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.InitializeChildControls">
            <summary>
            Initializes all child controls
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.InitializeMenu">
            <summary>
            Initializes the menu for the first time
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.InitializeSubMenu">
            <summary>
            Fills the submenu with the approperiate menuitems and initializes their checkstate
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.LayoutMenu">
            <summary>
            Relayouts the options menu
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.Layout(System.Object,System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Requests that the layout engine should perform a layout operation
            </summary>
            <param name="container">The container </param>
            <param name="layoutEventArgs">Additional event info</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the Navigation pane control
            </summary>
            <param name="g">A graphics object providing drawing functionality</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.DrawBackground(System.Drawing.Graphics)">
            <summary>
            Draws the background of the Navigation pane
            </summary>
            <param name="g">Graphics object providing drawing functionality</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.Notify(PPJ.Runtime.Windows.NavBar.Common.IObservable,System.String,System.Object)">
            <summary>
            Overriden. Handles the Notification the observable object sent
            </summary>
            <param name="obj">The observable object</param>
            <param name="id">An identification which caused this notification</param>
            <param name="arguments">Additional info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.EndInit">
            <summary>
            Handles additional functionality at the end of the initialization
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.SwitchCollapsion(System.Boolean,System.Boolean)">
            <summary>
            Changes the navigation bar to Bar.Collapsed view 
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.optionsButton_Click(System.Object,System.EventArgs)">
            <summary>
            Shows the options menu 
            </summary>
            <param name="sender">The button on which this event occured</param>
            <param name="e">Additional info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.miShowMoreButtons_Click(System.Object,System.EventArgs)">
            <summary>
            Shows more buttons
            </summary>
            <param name="sender">The control on which this event occured</param>
            <param name="e">Additional info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.miShowLessButtons_Click(System.Object,System.EventArgs)">
            <summary>
            Shows less buttons
            </summary>
            <param name="sender">The control on which this event occured</param>
            <param name="e">Additional info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.miShowMoreOptions_Click(System.Object,System.EventArgs)">
            <summary>
            Shows more options regarding the navigation bar
            </summary>
            <param name="sender">The control on which this event occured</param>
            <param name="e">Additional info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.menuItem_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Shows or hide the button linked to the menu item
            </summary>
            <param name="sender">The control on which this event occured</param>
            <param name="e">Additional info</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.collapseButton_Click(System.Object,System.EventArgs)">
            <summary>
            Switch the collapsion of the Navigation bar
            </summary>      
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.CollapsedBand_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Shows the band in a popup
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.Renderer">
            <summary>
            Gets or sets the renderer responsible for drawing the NaviBar
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.ShowNeverCollapse">
            <summary>
            Gets or sets whether the collapse button should be visible or not. 
            </summary>
            <remarks>
            This options overrides the showcollapsebutton property
            </remarks>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.SplitterRenderer">
            <summary>
            Gets or sets the renderer responsible for drawing the splitter
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.NavBar.NaviLayoutOff.VisibleButtons">
            <summary>
            Gets the amount of visible buttons including the Large buttons
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.NavBar.NaviOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.NaviSplitterRenderer">
            <summary>
            Contains drawing functionality for the splitter
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviSplitterRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the background of the gradient splitter class to a graphics surface
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds of the drawing relative to the graphics surface</param>
        </member>
        <member name="T:PPJ.Runtime.Windows.NavBar.NaviSplitterRendererSystem">
            <summary>
            Contains drawing functionality for the splitter
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviSplitterRendererSystem.#ctor">
            <summary>
            Initializes a new instance of the GradientSplitterProRenderer class 
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.NavBar.NaviSplitterRendererSystem.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the background of the gradient splitter class to a graphics surface
            </summary>
            <param name="g">The graphics surface to draw on</param>
            <param name="bounds">The bounds of the drawing relative to the graphics surface</param>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalContext">
            <summary>
            Syncronizes the Sys.hWndItem, Sys.hWndForm and Sys.hWndForm
            with the control handling the message.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalContext.#ctor">
            <summary>
            Constructs a new empty SalContext.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalContext.#ctor(PPJ.Runtime.Windows.SalContext)">
            <summary>
            Constructs a new SalContext and pushes it on the stack.
            </summary>
            <param name="salWnd"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalContext.#ctor(System.Windows.Forms.Control)">
            <summary>
            Constructs a new SalContext and pushes it on the stack.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalContext.#ctor(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Constructs a new SalContext and pushes it on the stack.
            </summary>
            <param name="ctrl"></param>
            <param name="locals"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalContext.#ctor(System.Windows.Forms.Control,System.Object)">
            <summary>
            Constructs a new SalContext and pushes it on the stack.
            </summary>
            <param name="ctrl"></param>
            <param name="locals"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalContext.#ctor(System.Windows.Forms.Control,System.Object,System.Boolean)">
            <summary>
            Constructs a new SalContext and pushes it on the stack.
            </summary>
            <param name="ctrl"></param>
            <param name="locals"></param>
            <param name="root">root context flag</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalContext.EnsureStack">
            <summary>
            Ensures that the stack is created and has at least one
            element in it.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalContext.LoadVarsMDI(System.Windows.Forms.Control)">
            <summary>
            Loads m_hWndMDI.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalContext.LoadVarsForm(System.Windows.Forms.Control)">
            <summary>
            Loads m_hWndForm.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalContext.LoadVarsTableWindow(System.Windows.Forms.Control)">
            <summary>
            Loads m_hWndForm from a child table control.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalContext.LoadVarsTableWindowColumn(System.Windows.Forms.Control)">
            <summary>
            Loads m_hWndForm and m_hWndItem from a table column.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalContext.LoadVarsControl(System.Windows.Forms.Control)">
            <summary>
            Loads m_hWndForm and m_hWndItem from a control (not a child table).
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalContext.Clone">
            <summary>
            Clones the SalContext instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalContext.Current">
            <summary>
            Returns the current context at the top of the stack.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalContext.Control">
            <summary>
            Returns the target control of the messages that created this context.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalContext.WindowActionsIndex">
            <summary>
            Returns the index of the current MessageActions handler being executed.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalContext.Disposed">
            <summary>
            Returns true if the SalContext has been disposed of (out of scope).
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalCustomControl">
            <summary>
            CustomControl implementation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalCustomControl._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalCustomControl.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.#ctor">
            <summary>
            Constructs a SalCustomControl object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.TranslateClassName(System.String)">
            <summary>
            .NET registers all standard Windows class names uppercase.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalCustomControl.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalCustomControl.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalCustomControl.WindowsClassName">
            <summary>
            The name of a window class defined in the DLL.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalCustomControl.WindowsDLLName">
            <summary>
            The name of the DLL that defines the window class.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalCustomControl.WindowsStyle">
            <summary>
            A window style specific to the custom control. 
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalCustomControl.WindowsExStyle">
            <summary>
            An extended window style specific to the custom control. 
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalCustomControl.BorderStyle">
            <summary>
            Gets or sets the border style for the control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalCustomControl.HScroll">
            <summary>
            Gets or sets a value indicating whether the horizontal scroll bar is visible.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalCustomControl.VScroll">
            <summary>
            Gets or sets a value indicating whether the vertical scroll bar is visible.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalCustomControl.CreateParams">
            <summary>
            Returns the creation parameters structure for this custom control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.DataType">
            <summary>
            Data typed for the SalDataField and SalTableColumn controls.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalDataField">
            <summary>
            DataField implementation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalDataField._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalDataField.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.#ctor">
            <summary>
            Constructs a SalDataField object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.OnWmSetFocus(System.Windows.Forms.Message@)">
            <summary>
            #BugFix for .NET 1.1 and 2.0
            When the control gains the focus it must select the entire content unless the
            focus is gained because of form activation or mouse clicks. WinForms doesn't do it
            and selected the entire content only once and only if the mouse is not pressed.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.OnWmLButtonDown(System.Windows.Forms.Message@)">
            <summary>
            Processes WM_LBUTTONDOWN to enable automatic drag-drop mode.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.OnEmSetReadOnly(System.Windows.Forms.Message@)">
            <summary>
            Updates the background color when the read-only status is changed by directly
            sending the EM_SETREADONLY message.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.DetectPercentage(System.String)">
            <summary>
            Returns true if the datafield contains a percentage value.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.IsOverSelectedText">
            <summary>
            Returns true if the mouse is over selected text.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.ToStringField(System.Object)">
            <summary>
            Converts the value to a string that can be assigned to a String field.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.ToBinaryField(System.Object)">
            <summary>
            Converts the binary value to a string that can be assigned to a String field.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.ToNumberField(System.Object)">
            <summary>
            Converts the value to a number and formats it to a string that 
            can be assigned to a Numeric field.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.ToDateTimeField(System.Object)">
            <summary>
            Converts the value to a DateTime and formats it to a string that 
            can be assigned to a DateTime field.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.FormatNumber(PPJ.Runtime.SalNumber)">
            <summary>
            Formats a SalNumber value using the specified format.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.FormatDateTime(PPJ.Runtime.SalDateTime)">
            <summary>
            Formats a SalDateTime value using the specified format.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetValue(PPJ.Runtime.Windows.DataType)">
            <summary>
            Returns the value of the control converted to the specified data type.
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetValue(System.Object,PPJ.Runtime.Windows.DataType)">
            <summary>
            Converts the value to the specified data type and assigns it to the control.
            </summary>
            <param name="dataType"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.ShouldSerializeBackColor">
            <summary>
            Prevents the designer from serializing default colors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.InitializeSpellChecker">
            <summary>
            Initialize the spell checker engine.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.RemoveFormat">
            <summary>
            Remove formatting for valid numeric fields and preserve the Modified flag
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetModified(PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears the field edit flag for an editable data field, combo box, multiline
            text field, table window column, or picture.
            </summary>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.IsModified">
            <summary>
            Returns the setting of the Field Edit Flag for a data field, multiline field, combo
            box, table window's context row cell, or picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetDataType">
            <summary>
            Returns a data field's or table window column's data type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.Clear">
            <summary>
            Clears the value from a data field, multiline field, or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetLabel">
            <summary>
            Retrieves the window handle of the label (label control) that is associated with the hWndTarget parameter.
            There must be a mnemonic in that label, and it must immediately precede hWndTarget in the outline, or this function will fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.DisableWindowAndLabel">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            A label is the label control that immediately precedes the window in the outline.
            The label control must have a mnemonic. If the window contains text (for
            example, a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.EnableWindowAndLabel">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window in the
            outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.ShowWindowAndLabel">
            <summary>
            Makes a window and its associated label visible. A label is the label control that
            immediately precedes the window in the outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.HideWindowAndLabel">
            <summary>
            Hides a window and its associated label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetLabelText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of the associaetd label control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetLabelText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetLabelText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.IsEmpty">
            <summary>
            Verifies whether a data field, multiline text field, or table window column is null
            or empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.IsValidDateTime">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid date/time value. For multiline text fields, the date/time value must
            be the only item in the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.IsValidDecimal(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid decimal value. For multiline text fields, the decimal value must be
            the only item in the field.
            </summary>
            <param name="nPrecision"></param>
            <param name="nScale"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.IsValidInteger">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid integer value. For multiline text fields, the integer value must be
            the only item in the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.IsValidNumber">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid numeric value. Valid numbers are integers or floating point numbers,
            negative and positive. For multiline text fields, the numeric value must be the
            only item in the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetFormattedText(PPJ.Runtime.SalString@,PPJ.Runtime.SalBoolean)">
            <summary>
            Copies the contents of a data field or table window column to a string. This function
            also lets you copy the format of the data.
            </summary>
            <param name="sText"></param>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetFormattedText(PPJ.Runtime.SalBoolean)">
            <summary>
            Copies the contents of a data field or table window column to a string. This function
            also lets you copy the format of the data.
            </summary>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetFormatCode">
            <summary>
            Returns the current format of a data field or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetFormatCode(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a data field's or table window column's format.
            </summary>
            <param name="nFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetInputMask(PPJ.Runtime.SalString@)">
            <summary>
            Gets the input mask of a data field or table window column.
            </summary>
            <param name="sMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetInputMask">
            <summary>
            Gets the input mask of a data field or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetFormat(PPJ.Runtime.SalString@)">
            <summary>
            Gets the picture format of a data field or table window column.
            </summary>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetFormat">
            <summary>
            Gets the picture format of a data field or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.IsValid">
            <summary>
            Validates the contents of a data field or table window column using the current profile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetInputMask(PPJ.Runtime.SalString)">
            <summary>
            Sets the input mask of a data field or table window column.
            </summary>
            <param name="sMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetFormat(PPJ.Runtime.SalString)">
            <summary>
            Sets the picture format of a data field or table window column.
            </summary>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetText(PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean)">
            <summary>
            Copies a string to a data field or table window column. After copying the string
            to the field, formats the string.
            </summary>
            <param name="sValue"></param>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetTextUnmasked(PPJ.Runtime.SalString@)">
            <summary>
            Unmasks the text from a masked edit control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetTextUnmasked">
            <summary>
            Unmasks the text from a masked edit control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.Validate">
            <summary>
            Validates and formats a data field's or table window column's contents.
            </summary>
            <param name="nValidate"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.Validate(PPJ.Runtime.SalNumber)">
            <summary>
            Validates and formats a data field's or table window column's contents.
            </summary>
            <param name="nValidate"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.SetDataLength(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a limit on the number of characters that a user can enter into a data field,
            multiline text field, or table window column.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDataField.GetDataLength">
            <summary>
            Returns the maximum length of a data field, multiline text field, or table window
            column.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.IsNull">
            <summary>
            Check if the datafield is empty.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.BackColor">
            <summary>
            Overrides the BackColor property to be able to install our
            ShouldSerializeBackColor() function.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.Label">
            <summary>
            Returns/Sets the label associated with this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.Text">
            <summary>
            Returns/Sets the text of the data field.
            This is overridden to remove the edit mask.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.SelectedText">
            <summary>
            Overrides the SelectedText property to take in consideration
            that the edit mask, if applied, may shorten the string returned
            by the Text property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.DateTime">
            <summary>
            DateTime value property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.Number">
            <summary>
            Number value property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.DataType">
            <summary>
            Value type of the text box control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.Format">
            <summary>
            Format string.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.EditMask">
            <summary>
            Indicates the edit mask to apply to the text while editing.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.CultureInfo">
            <summary>
            Returns/Sets the culture to use for this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.ShouldSerializeCultureInfo">
            <summary>
            Prevents the designer from serializing inherited CultureInfo.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.Watermark">
            <summary>
            Returns/Sets the watermark to use for this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.EnableSpellChecker">
            <summary>
            Enables/Disables the built-in spell checker.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDataField.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.BorderStyle">
            <summary>
            Border styles for the SalFrame control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalFrame">
            <summary>
            Frame control implementation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalFrame.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.#ctor">
            <summary>
            Constructs a new SalFrame control.
            This class cannot be used as second-base class.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.DrawControl(System.Drawing.Graphics)">
            <summary>
            Draws this control.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetPenColor">
            <summary>
            Returns the color to use to draw the border. If the control didn't set any color, always
            use ControlDark.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint event handler.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.OnResize(System.EventArgs)">
            <summary>
            Resize event handler.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Fires the internal PaintBackground event.
            This allows the handler component to take over the background painting
            of the form. This is primarily used to allow the SalQuickTabs control
            to paint transparent backgrounds.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.FireWindowActionsToChildren(System.Int32,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the children's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFrame.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFrame.RightToLeftLayout">
            <summary>
            Returns true when we need to inherit RightToLeftLayout.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFrame.DisplayRectangle">
            <summary>
            Overrides the DisplayRectangle property to support the internal padding.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFrame.EnableMouseEvents">
            <summary>
            Gets/Sets a property than enables the control to process mouse events.
            When set to false (default) the control is transparent to the mouse.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFrame.BorderStyle">
            <summary>
            Frame's border style.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFrame.BorderSize">
            <summary>
            Frame's border size.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFrame.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalGeneralWindow">
            <summary>
            General Window class.
            This class simply holds a list of MessageActions handlers.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalGeneralWindow._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGeneralWindow.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalGeneralWindow.ActionsManager">
            <summary>
            Returns the actions manager instance.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalGroupBox">
            <summary>
            GroupBox implementation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalGroupBox.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.#ctor">
            <summary>
            Constructs a new SalGroupBox object.
            This class cannot be used as second-base class.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.ProcessMnemonic(System.Char)">
            <summary>
            Processes menmonic keys to set the focus to the next control in the tab
            order when the group box doesn't have child controls and when is hidden.
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Fires the internal PaintBackground event.
            This allows the handler component to take over the background painting
            of the form. This is primarily used to allow the SalQuickTabs control
            to paint transparent backgrounds.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.OnVisibleChanged(System.EventArgs)">
            <summary>
            Get renderer when the control is becoming visible (TopLevelControl is set)
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetRenderer">
            <summary>
            Note: While fetching the renderer is a straightforward operation, we will cache the renderer once
            and return that to subsequent calls. If there is ever a possibility that renderers might change at runtime,
            this method should retrieve the renderer for each render request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.FireWindowActionsToChildren(System.Int32,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the children's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupBox.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalGroupBox.RightToLeft">
            <summary>
            #BugFix for .NET 2.0
            Must override RightToLeft to return No when the parent
            form has RightToLeftLayout turned on otherwise a bug in WinForms
            draws the text of the groupbox aligned to the wrong side.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalGroupBox.RightToLeftLayout">
            <summary>
            Returns true when we need to inherit RightToLeftLayout.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalGroupBox.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalGroupBox.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalGroupSeparator">
            <summary>
            SalGroupSeparator
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalGroupSeparator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalHorizontalScrollBar">
            <summary>
            Horizontal scrollbar implementation.
            <remarks>
            This derived class adjustes the Maximum property by adding LargeChange to allow the
            scroll thumb to reach the end of the range.
            See http://msdn.microsoft.com/en-us/library/system.windows.forms.scrollbar.maximum.aspx.
            </remarks>
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalHorizontalScrollBar._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalHorizontalScrollBar.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.#ctor">
            <summary>
            Constructs a new SalHorizontalScrollBar object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetModified(PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears the field edit flag for an editable data field, combo box, multiline
            text field, table window column, or picture.
            </summary>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.IsModified">
            <summary>
            Returns the setting of the Field Edit Flag for a data field, multiline field, combo
            box, table window's context row cell, or picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetDataType">
            <summary>
            Returns a data field's or table window column's data type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.Clear">
            <summary>
            Clears the value from a data field, multiline field, or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetLabel">
            <summary>
            Retrieves the window handle of the label (label control) that is associated with the hWndTarget parameter.
            There must be a mnemonic in that label, and it must immediately precede hWndTarget in the outline, or this function will fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.DisableWindowAndLabel">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            A label is the label control that immediately precedes the window in the outline.
            The label control must have a mnemonic. If the window contains text (for
            example, a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.EnableWindowAndLabel">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window in the
            outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.ShowWindowAndLabel">
            <summary>
            Makes a window and its associated label visible. A label is the label control that
            immediately precedes the window in the outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.HideWindowAndLabel">
            <summary>
            Hides a window and its associated label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetLabelText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of the associaetd label control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetLabelText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetLabelText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetScrollBarPosition(PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the current scroll bar value.
            </summary>
            <param name="ctrl"></param>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetScrollBarPosition">
            <summary>
            Returns the current scroll bar value.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.GetScrollBarRange(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a scroll bar's scroll range, line increment, and page increment.
            </summary>
            <param name="nMin"></param>
            <param name="nMax"></param>
            <param name="nLine"></param>
            <param name="nPage"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetScrollBarPosition(PPJ.Runtime.SalNumber)">
            <summary>
            Sets the scrollbar's value.
            </summary>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalHorizontalScrollBar.SetScrollBarRange(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a scroll bar's range, line increment, and page increment. When the scroll bar
            is created, assigns it these values: Minimum scroll position0 Maximum
            scroll position100 Line Increment1 Page Increment10 If the scroll bar's current
            position is outside the new range, its position changes to one within the new range.
            The range of a scroll bar is -32,767 to 32,767.
            </summary>
            <param name="nMin"></param>
            <param name="nMax"></param>
            <param name="nLine"></param>
            <param name="nPage"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalHorizontalScrollBar.Value">
            <summary>
            Returns/Sets the position of the scroll bar.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalHorizontalScrollBar.Maximum">
            <summary>
            Gets or sets the upper limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalHorizontalScrollBar.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalHorizontalScrollBar.Label">
            <summary>
            Returns/Sets the label associated with this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalHorizontalScrollBar.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.LineStyle">
            <summary>
            Line styles for the SalLine control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.LineType">
            <summary>
            Line types for the SalLine control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalLine">
            <summary>
            Line control implementation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalLine.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.#ctor">
            <summary>
            Constructs a new SalLine control.
            This class cannot be used as second-base class.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.DrawControl(System.Drawing.Graphics)">
            <summary>
            Draws this control.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the SalFrame control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.OnResize(System.EventArgs)">
            <summary>
            Resize event handler.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalLine.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalLine.EnableMouseEvents">
            <summary>
            Gets/Sets a property than enables the control to process mouse events.
            When set to false (default) the control is transparent to the mouse.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalLine.LineStyle">
            <summary>
            Line style.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalLine.LineSize">
            <summary>
            Line size.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalLine.LineType">
            <summary>
            Line type.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalLine.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalListBox">
            <summary>
            ListBox implementation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalListBox._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalListBox.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.#ctor">
            <summary>
            Constructs a SalListBox object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.OnReadOnlyChanged(System.EventArgs)">
            <summary>
            Called when the ReadOnly property has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.OnWmLButtonDown(System.Windows.Forms.Message@)">
            <summary>
            Processes WM_LBUTTONDOWN to enable automatic drag-drop mode.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetModified(PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears the field edit flag for an editable data field, combo box, multiline
            text field, table window column, or picture.
            </summary>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.IsModified">
            <summary>
            Returns the setting of the Field Edit Flag for a data field, multiline field, combo
            box, table window's context row cell, or picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetDataType">
            <summary>
            Returns a data field's or table window column's data type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.Clear">
            <summary>
            Clears the value from a data field, multiline field, or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetLabel">
            <summary>
            Retrieves the window handle of the label (label control) that is associated with the hWndTarget parameter.
            There must be a mnemonic in that label, and it must immediately precede hWndTarget in the outline, or this function will fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.DisableWindowAndLabel">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            A label is the label control that immediately precedes the window in the outline.
            The label control must have a mnemonic. If the window contains text (for
            example, a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.EnableWindowAndLabel">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window in the
            outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.ShowWindowAndLabel">
            <summary>
            Makes a window and its associated label visible. A label is the label control that
            immediately precedes the window in the outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.HideWindowAndLabel">
            <summary>
            Hides a window and its associated label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetLabelText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of the associaetd label control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetLabelText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetLabelText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.AddListItem(PPJ.Runtime.SalString)">
            <summary>
            Adds a string to a list box or combo box.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.ClearList">
            <summary>
            Deletes all entries from a list box or combo box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.DeleteListItem(PPJ.Runtime.SalNumber)">
            <summary>
            Deletes a list box or combo box entry.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetListSelectedItems(PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Returns an array of index numbers of selected list box entries.
            </summary>
            <param name="nSelectedArray"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.InsertListItem(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Inserts an entry into a list box or combo box at a specified position.
            </summary>
            <param name="nIndex"></param>
            <param name="sAdd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.PopulateList(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString)">
            <summary>
            Populates a list box or combo box with a result set. SalListPopulate overrides any
            settings made with SalListSetTabs. If the SELECT statement returns data from multiple
            columns, each column's data displayed in a list box is separated by tabs.
            However, due to a Microsoft Windows limitation, each column's data displayed in
            a combo box is separated by a single '|' character. There is no space between
            one column's data, the separator character, and another column's data.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.PopulateList(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Populates a list box or combo box with a result set. SalListPopulate overrides any
            settings made with SalListSetTabs. If the SELECT statement returns data from multiple
            columns, each column's data displayed in a list box is separated by tabs.
            However, due to a Microsoft Windows limitation, each column's data displayed in
            a combo box is separated by a single '|' character. There is no space between
            one column's data, the separator character, and another column's data.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetListItemsCount">
            <summary>
            Returns the number of list box or combo box entries.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetListSelectedItemsCount">
            <summary>
            Returns the number of selected entries in a multiple-selection list box. Specify
            single- or multiple-selection in the list box's customizer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetListSelectedIndex">
            <summary>
            Returns the index of the selected entry in a combo box or single-selection list box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetListItemState(PPJ.Runtime.SalNumber)">
            <summary>
            Determines whether the specified list box or combo box entry is selected.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetListItemText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Returns the text of the specified item.
            </summary>
            <param name="ctrl"></param>
            <param name="nIndex"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetListItemText(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the text of the specified item.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetListItemTextLength(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the length of a list box or combo box entry.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetListRedraw(PPJ.Runtime.SalNumber)">
            <summary>
            Redraws entries in a list box or combo box, or prevents them from being redrawn.
            </summary>
            <param name="bRedraw"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetListSelectedText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Finds and selects a combo box or single-selection list box entry.
            </summary>
            <param name="nIndexStart"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetListSelectedItems(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Selects or deselects a combo box or multiple-selection list box entry.
            </summary>
            <param name="nIndex"></param>
            <param name="bSelect"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetListSelectedIndex(PPJ.Runtime.SalNumber)">
            <summary>
            Selects or deselects a combo box or single-selection list box entry.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.SetListTabStops(PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Sets tabs in a list box.
            </summary>
            <param name="nTabStops"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.PopulateListFiles(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Populates a list box or combo box with a directory of files.
            </summary>
            <param name="ctrlPath"></param>
            <param name="sPathName"></param>
            <param name="nAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetListSelectedFile(PPJ.Runtime.SalString@)">
            <summary>
            Fetches the selected directory or file name from a list box or combo box.
            </summary>
            <param name="sFileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalListBox.GetListSelectedFile">
            <summary>
            Fetches the selected directory or file name from a list box or combo box.
            </summary>
            <returns></returns>
        </member>
        <member name="E:PPJ.Runtime.Windows.SalListBox.ReadOnlyChanged">
            <summary>
            Fired when the ReadOnly property is altered.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalListBox.IsMultiSelect">
            <summary>
            Returns true if the listbox control allows for multiselection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalListBox.ReadOnly">
            <summary>
            Returns/Sets the ReadOnly flag for the ListBox control.
            When the ListBox is ReadOnly, it can still get the focus and be scrolled.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalListBox.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalListBox.Label">
            <summary>
            Returns/Sets the label associated with this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalListBox.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.AddNewColumnDialog">
            <summary>
            Dialog to select the type of the column to add to the selected table window control.
            Shows all the available SalTableColumn types grouped by the containing assembly.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.AddNewColumnDialog.#ctor(System.IServiceProvider)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.AddNewColumnDialog.LoadColumnTypes">
            <summary>
            Loads all the known SalTableColumn types.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.AddNewColumnDialog.pbAdd_Click(System.Object,System.EventArgs)">
            <summary>
            Fire ColumnAdded when Add is clicked.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.AddNewColumnDialog.lvTypes_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            When a type is selected, enable the Add button and update the text showing the type's full name.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:PPJ.Runtime.Windows.Design.AddNewColumnDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.AddNewColumnDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.AddNewColumnDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.Design.AddNewColumnDialog.ColumnAdded">
            <summary>
            Fired when the Add button is pushed.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.AddNewColumnDialog.TypeItem">
            <summary>
            Specialized ListViewItem class that holds a reference to a Type.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.AddNewColumnDialog.ColumnAddedEventArgs">
            <summary>
            EventArgs for the ColumnAdded event. Carries the selected SalTableColumn type.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.AddNewColumnDialog.ColumnAddedHandler">
            <summary>
            Delegate for the ColumnAdded event.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.PPJTypeDescriptorFilter">
            <summary>
            This filter is installed in VisualStudio designer to intercept control properties
            and assign the default value to properties initialized in the base class.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.PPJTypeDescriptorFilter.#ctor(System.ComponentModel.Design.ITypeDescriptorFilterService,System.ComponentModel.Design.IDesignerHost)">
            <summary>
            Contructs a new filter and saves the previously installed filter.
            Design filters need to be chained.
            </summary>
            <param name="prevFilter"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.PPJTypeDescriptorFilter.surface_Unloaded(System.Object,System.EventArgs)">
            <summary>
            Handles the DesignSurface.Unloaded event to reset the local
            cache of inherited properties.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.PPJTypeDescriptorFilter.Install(System.ComponentModel.IComponent)">
            <summary>
            Installs this type descriptor filter as the current ITypeDescriptorFilterService.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.PPJTypeDescriptorFilter.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
            <summary>
            Here we change all the PropertyDescriptor instances to become
            InheritedPropertyDescriptor to make VS designer use the base class value
            of the property as the default value. Otherwise, by default, VS designer
            uses the value that is originally set in the base control's class.
            
            TD developers are use to setting a property like the BackColor at the class
            level and treat it as the default value for all derived classes. Without
            this filter, VS designer duplicates the value set at the base class level
            therefore breaking the inheritance.
            </summary>
            <param name="component"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.InheritedPropertyDescriptor">
            <summary>
            Custom implementation of the InheritedPropertyDescriptor class. It's used
            to fix VS designer inadequate handling of inherited properties.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalFormMainMenuSerializer">
            <summary>
            Serializer for SalFormMainMenu controls.
            Used to remove duplicated entried from base classes, otherwise
            Visual Studio designer chokes.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalFormMainMenuSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            Implementation for the Deserialize method.
            Removes duplicate menu entries from the container and then calls the default deserializer.
            </summary>
            <param name="manager"></param>
            <param name="codeObject"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalFormMainMenuSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            Implementation for the Serialize method.
            Calls the default serializer.
            </summary>
            <param name="manager"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalFormTypeSerializer">
            <summary>
            TypeCodeSerializer for SalForm. This is the first serializer instantiated by the
            designer loader in Visual Studio. We use it to detect the type name of the form being
            designed so that the CreateTableWindow() can correctly override the type.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalFormTypeSerializer.FindClass(EnvDTE.CodeElements,System.String)">
            <summary>
            Finds the table windows's inner class.
            </summary>
            <param name="elements"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalFrameDesigner">
            <summary>
            Specialized designer for the salFrame control.
            Prevents controls from becoming children of the frame when the controls
            are dragged across it. This designer changes behavior depending on how the
            frame is set up:
            	- If the frame doesn't have any child control, it prevents controls from becoming children of the frame (PPJ mode)
            	- If the frame has child controls, it will behave like a regular .NET frame (.NET mode)
            	- Controls are always allowed to be dropped on the frame and  become childred of the frame (all modes)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.Design.SalFrameDesigner.Initialize(System.ComponentModel.IComponent)" -->
        <member name="T:PPJ.Runtime.Windows.Design.SalGroupBoxDesigner">
            <summary>
            Specialized designer for the SalGroupBox control.
            Prevents controls from becoming children of the groupbox when the controls
            are dragged across it. This designer changes behavior depending on how the
            groupbox is set up:
            	- If the groupbox doesn't have any child control, it prevents controls from becoming children of the groupbox (PPJ mode)
            	- If the groupbox has child controls, it will behave like a regular .NET groupbox (.NET mode)
            	- Controls are always allowed to be dropped on the groupbox and  become childred of the groupbox (all modes)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.Design.SalGroupBoxDesigner.Initialize(System.ComponentModel.IComponent)" -->
        <member name="T:PPJ.Runtime.Windows.Design.SalListControlSerializer">
            <summary>
            Customized serializer for PPJ list controls (SalComboBox, SalListBox and SalTableColumn).
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalListControlSerializer.MoveSortLineUp(System.CodeDom.CodeStatementCollection,System.Int32)">
            <summary>
            Searches for the Sort = true|false property assignment  line and moves it
            up at the specified index.
            </summary>
            <param name="stmts"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalListControlSerializer.InsertItemsClear(System.CodeDom.CodeStatementCollection)">
            <summary>
            Searches for the first Items.Add or Items.AddRange call and inserts a new
            line Items.Clear() to clear the collection before adding the items.
            
            Returns the index of the Items.Clear() line or -1 if there is no call.
            </summary>
            <param name="stmts"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalNamedPropertiesEditor">
            <summary>
            Editor for the NamedProperties property on all PPJ controls.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalNamedPropertiesEditor.#ctor(System.Type)">
            <summary>
            Default constructor.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalNamedPropertiesEditor.CreateCollectionForm">
            <summary>
            Creates the default editor dialog.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalNamedPropertiesEditor.CreateCollectionItemType">
            <summary>
            Returns the type of the items being edited by the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalNamedPropertiesEditor.CreateInstance(System.Type)">
            <summary>
            Creates a new item.
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalNamedPropertiesEditor.GetItems(System.Object)">
            <summary>
            Creates a collection of editable items from the original property.
            </summary>
            <param name="editValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalNamedPropertiesEditor.SetItems(System.Object,System.Object[])">
            <summary>
            Returns the new property created from the collection of editable items.
            </summary>
            <param name="editValue"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalNamedPropertiesEditor.SafeCast(System.Object)">
            <summary>
            Casts the object to SalNamedProperties. If the cast
            fails, throws an InvalidCastException explaining that it's
            a bug in VS.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalNamedPropertiesEditor.EditableEntry">
            <summary>
            Editable entry for the SalNamedProperty editor.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalNamedPropertiesSerializer">
            <summary>
            CodeDom serializer for the SalNamedProperties collection.
            It's necessary to change the default serializer to generate/parse
            the NamedProperties.Put() syntax instead of using the standard
            NamedProperties.Add(), because in the class hierachy we may
            assign duplicate properties and the Add() method would throw an exception.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalNamedPropertiesSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            Serializes the SalNamedProperties collection using the Put method to avoid
            duplicate entries exceptions.
            </summary>
            <param name="manager"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalNamedPropertiesSerializer.GetOriginalValue(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns the original (inherited) collection.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalQuickTabsBindEditor">
            <summary>
            Design time editor for the SalQuicTabs.TabSetup property.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsBindEditor.CreateSelector">
            <summary>
            Creates the dropdown tree control used to select the tab names.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsBindEditor.LoadTabNames(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Load the tab names from the SalQuickTabs control.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsBindEditor.SafeCast(System.Object)">
            <summary>
            Casts the object to SalQuickTabs.
            If the cast fails, throws an InvalidCastException explaining that it's a bug in VS.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalQuickTabsBindEditor.SelectedTabNames">
            <summary>
            Returns/Sets the names of the tabs that the control is bound to.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalQuickTabsDesigner">
            <summary>
            Specialized designer for the SalQuickTabs control:
            	- Allows the selection of the active tab
            	- Prevents controls from becoming children of the tab control
            	- Automatically binds controls dropped or added to the tab control to the active tab.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Designer initialization.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsDesigner.Dispose(System.Boolean)">
            <summary>
            Disconnects the event handlers from the parent form.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsDesigner.GetHitTest(System.Drawing.Point)">
            <summary>
            Allows the active tab to be changed.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsDesigner.OnLoadComplete(System.Object,System.EventArgs)">
            <summary>
            Attach to the form's ControlAdded event to bind dropped controls.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsDesigner.service_ComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
            <summary>
            Binds control dropped on the form to the active tab if they are
            contained in the tab's page rectangle.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsDesigner.EditTabs(System.Object,System.EventArgs)">
            <summary>
            Starts the tabs editor.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsDesigner.BindControl(System.Windows.Forms.Control)">
            <summary>
            Binds the specified control to the currently active tab, if the control
            fits entirely in the tab control. If the control is already bound
            to a tab, the binding is not changed.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalQuickTabsEditor">
            <summary>
            Editor for the TabSetup property of the SalQuickTabs control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsEditor.#ctor(System.Type)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsEditor.CreateCollectionForm">
            <summary>
            Creates the default editor dialog.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsEditor.CreateCollectionItemType">
            <summary>
            Returns the type of the items being edited by the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsEditor.CreateInstance(System.Type)">
            <summary>
            Creates a new item.
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsEditor.GetItems(System.Object)">
            <summary>
            Creates a collection of editable items from the original property.
            </summary>
            <param name="editValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsEditor.ParseTabsSetup(System.String)">
            <summary>
            Parses the TabsSetup string.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalQuickTabsEditor.SetItems(System.Object,System.Object[])">
            <summary>
            Returns the new property created from the collection of editable items.
            </summary>
            <param name="editValue"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalQuickTabsEditor.EditableEntry">
            <summary>
            Editable entry for the SalNamedProperty editor.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalQuickTabsEditor.EditableEntryConverter">
            <summary>
            Type converter for the EditableProperty class used to set the order
            of the properties in the PropertGrid.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalRibbonBarChildFormEditor">
            <summary>
            Design time editor for the SalFormRibbonBar.ChildForm property.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalRibbonBarChildFormEditor.CreateSelector">
            <summary>
            Creates the dropdown tree control used to select the type name.
            </summary>
            <param name="editorService"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalRibbonBarChildFormEditor.LoadFormNames(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Load all the known form types into the selector drop-down.
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalRibbonBarChildFormEditor.SelectedFormName">
            <summary>
            Returns/Sets the full name of the type of the selected form.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalTableColumnDesigner">
            <summary>
            Specialized designer for SalTableColumn controls.
            Allows the column's position to be moved using special
            arrow glyphs drawn on th column, and to be resized horizontally.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Designer initialization.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.selectionService_SelectionChanging(System.Object,System.EventArgs)">
            <summary>
            When the column is selected in the design mode, scroll it into
            view and install our special event binder to handle events in child table class.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.InitializeNewComponent(System.Collections.IDictionary)">
            <summary>
            Initialize the new columns properties. Fail if the parent is not valid.
            </summary>
            <param name="defaultValues"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.SetPositionFromDropLocation(System.Drawing.Point)">
            <summary>
            Returns the column position corresponding to the specified coordinates.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.CanBeParentedTo(System.ComponentModel.Design.IDesigner)">
            <summary>
            A SalTableColumn can be a child of a SalTableWindow or a SalFormTableWindow only.
            </summary>
            <param name="parentDesigner"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.GetGlyphs(System.Windows.Forms.Design.Behavior.GlyphSelectionType)">
            <summary>
            Returns the glyphs used by the designer.
            </summary>
            <param name="selectionType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.GetMessageActionsHandlerName(System.Object)">
            <summary>
            Returns the name of the handler for the MessageActions event if the handler
            is in the nested table class.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.AddColumn(System.Object,System.EventArgs)">
            <summary>
            Starts the add-new-column dialog.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.DeleteColumn(System.Object,System.EventArgs)">
            <summary>
            Deletes not inherited columns.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.System#ComponentModel#Design#IEventBindingService#CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
            <summary>
            Implementation of IEvenBindingService to show the event handlers for MessageActions
            that are attached in the child table class.
            </summary>
            <param name="component"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.SelectionRules">
            <summary>
            A SalTableColumns can be resized only horizotally.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.InheritanceAttribute">
            <summary>
            Returns the inheritance type for this column.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.SnapLines">
            <summary>
            Returns the valid snap lines for the column.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.ColumnBounds">
            <summary>
            Returns the rectangle for the grid column.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.Grid">
            <summary>
            Returns the underlying grid.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.IsLastColumn">
            <summary>
            Returns true if the column being designed is the last column.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.TableControlDesigner">
            <summary>
            Returns the parent child table designer.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.TableClassDesigner">
            <summary>
            Returns the parent table class designer.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.MoveColumnGlyph">
            <summary>
            Draws the move glyphs using bitmaos built-in the System.Design assembly.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.MoveColumnBehavior">
            <summary>
            Handles the move glyphs.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalTableColumnDesigner.NestedMessageActionsEventPropertyDescriptor">
            <summary>
            Special property descriptor used to display the name of the attached MessageActions event handler
            inside the child table class.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner">
            <summary>
            Designer for classes deribed from SalTableWindow.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Designer initialization.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.CanParent(System.Windows.Forms.Control)">
            <summary>
             Can only parent SalTableColumn controls.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.table_ControlAdded(System.Object,System.Windows.Forms.ControlEventArgs)">
            <summary>
            When a column is added to the table control, make sure that we
            are showing design time rows.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.grid_AfterRowColChange(System.Object,C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Make sure that there isn't any cell with the focus.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.grid_BeforeScroll(System.Object,C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Remove the columns selection when scrolling.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.CreateToolCore(System.Drawing.Design.ToolboxItem,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new child column when the tool item is dropped on the designer.
            </summary>
            <param name="tool"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="hasLocation"></param>
            <param name="hasSize"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.CreateNewColumn(System.Type,System.Int32,System.Int32)">
            <summary>
            Creates a new child columns and adds it to the designer.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.SetPositionFromDropLocation(PPJ.Runtime.Windows.SalTableColumn,System.Int32,System.Int32)">
            <summary>
            Returns the column position corresponding to the specified coordinates.
            </summary>
            <param name="column"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.GenerateNewColumnName(System.String)">
            <summary>
            Creates a new column name unique in the columns collection.
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.GetHitTest(System.Drawing.Point)">
            <summary>
            Allows the table window to scroll the internal columns.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Selects the child column in design mode.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.OnPaintAdornments(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the inherited glyphs.
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.PreFilterProperties(System.Collections.IDictionary)">
            <summary>
            Installs our shadow properties.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.EnsureGridRows">
            <summary>
            Makes sure the grid shows some rows.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.DeleteColumn(PPJ.Runtime.Windows.SalTableColumn)">
            <summary>
            Removes the specified column from the table and the container.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.AddColumn(System.Object,System.EventArgs)">
            <summary>
            Initiates the dialog to select the type of the new column.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.Size">
            <summary>
            Shadows the Size properties to redirect the setting to the ClientSize.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableWindowClassDesigner.InheritedGlyph">
            <summary>
            Returns the inherited glyph bitmap.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner">
            <summary>
            Specialized designer for the SalTableWindow control.
            Allows inner columns to be selected in design mode.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Designer initialization.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.table_ControlAdded(System.Object,System.Windows.Forms.ControlEventArgs)">
            <summary>
            When a column is added to the table control, make sure that we
            are showing design time rows.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.grid_AfterRowColChange(System.Object,C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Make sure that there isn't any cell with the focus.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.grid_BeforeScroll(System.Object,C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Remove the columns selection when scrolling.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.surface_Flushed(System.Object,System.EventArgs)">
            <summary>
            When the designer "flushes" the controls to the serializer, we regenerate the inner
            child table class.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.LoadInheritedColumnsToSerialize">
            <summary>
            LoadInheritedColums to be used by PostFilterProperties to add properties to the table class for inherited columns. 
            For not nested tables these properties needs to be added before the column is initialized with original implementation this gave a 
            moment 22 situation. So now the logic first call LoadInheritedColumnsToSerialize and then the original LoadInheritedColumns is later 
            called to initiate the inheritence attributes correctly.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.CanParent(System.Windows.Forms.Control)">
            <summary>
            Can parent on table columns.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.PostFilterProperties(System.Collections.IDictionary)">
            <summary>
            Adds child columns as properties.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.CreateToolCore(System.Drawing.Design.ToolboxItem,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates new child objects.
            </summary>
            <param name="tool"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="hasLocation"></param>
            <param name="hasSize"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.GetHitTest(System.Drawing.Point)">
            <summary>
            Allows the table window to scroll the internal columns.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Selects the child column in design mode.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.OnPaintAdornments(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the inherited glyphs.
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.GetColumnInheritanceAttribute(PPJ.Runtime.Windows.SalTableColumn)">
            <summary>
            Returns true if the specified column is defined in 
            one of the base classes.
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.AddInheritedColumn(PPJ.Runtime.Windows.SalTableColumn,System.ComponentModel.InheritanceAttribute)">
            <summary>
            Saves the inherited columns.
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.EnsureGridRows">
            <summary>
            Makes sure that he grid shows some rows.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.EnableChildColumnsEditor">
            <summary>
            Returns true if the editor for child columns should be enabled.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.CanSerializeChildColumns(System.ComponentModel.IComponent)">
            <summary>
            Tests the version of the assembly to enable the nested table window designer/serializer.
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.CreateNewColumn(System.Type,System.Int32,System.Int32)">
            <summary>
            Creates a new child columns and adds it to the designer.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.InitializeNewCustomColumn(PPJ.Runtime.Windows.SalTableColumn,System.Int32,System.Int32)">
            <summary>
            Inititates a new column in the same way as CreateNewColumn does
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.SetPositionFromDropLocation(PPJ.Runtime.Windows.SalTableColumn,System.Int32,System.Int32)">
            <summary>
            Returns the column position corresponding to the specified coordinates.
            </summary>
            <param name="column"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.GenerateNewColumnName(System.String)">
            <summary>
            Creates a new column name unique in the columns collection.
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.GenerateUniqueColumnName(PPJ.Runtime.Windows.SalTableColumn,System.String)">
            <summary>
            Generates a unique column name from a given one.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.DeleteColumn(PPJ.Runtime.Windows.SalTableColumn)">
            <summary>
            Removes the specified column from the table and the container.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.AddColumn(System.Object,System.EventArgs)">
            <summary>
            Initiates the dialog to select the type of the new column.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.AdjustLanguageFileEntries(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Finds the *.lng file, by scanning the structure upwards from the current csproj file until "source" is found, establishing the component root.
            If then a "*server\translation\component.lng" is found, all column paths that were re-serialized will be automatically replaced inside it as well.
            The log message tells the result (and details).
            </summary>
            <param name="alteredColumns"></param>
            <param name="nameSpace"></param>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.IsInherited(System.ComponentModel.Component)">
            <summary>
            Returns true if the component is inherited from a base class.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.IsNestedClass">
            <summary>
            Gets if the table class is nested or not.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.IsNestedClassDerived">
            <summary>
            Gets if the nested table class is derived or not.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.InheritedGlyph">
            <summary>
            Returns the inherited glyph bitmap.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.ActionLists">
            <summary>
            Returns the actions supported by the designer:
            	LinesPerRow
            	AllowRowSizing
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.IsVB">
            <summary>
            Returns true if the designer is running in a VB project.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.AddColumnActionList">
            <summary>
            Actions for adding a new column.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.SetPropertiesActionList">
            <summary>
            Actions for setting common table properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.SetPropertiesActionList.LinesPerRow">
            <summary>
            Sets/Gets the editable property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.SetPropertiesActionList.AllowRowSizing">
            <summary>
            Sets/Gets the editable property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Design.SalTableWindowControlDesigner.SetPropertiesActionList.ReadOnly">
            <summary>
            Sets/Gets the editable property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalTableWindowSerializer">
            <summary>
            Serializer for SalTableWindow controls.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            Implementation for the Deserialize method.
            Creates a design-time instance of the SalTableWindow control
            using the CreateTableWindow() method.
            </summary>
            <param name="manager"></param>
            <param name="codeObject"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            Implementation of the Serialize method.
            Serialies SalTableWindow controls using the (Type)CreateTableWindow(Type) notation.
            </summary>
            <param name="manager"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.PushService(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
            <summary>
            Pushes this instance as the current ITypeDescriptorFilterService and IReferenceService.
            Used to add the child columns as properties to the TypeDescriptor and to fix an apparent
            bug in VS where the name of nested controls is cached in IReferenceService and is not updated.
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.PopService(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
            <summary>
            Restores the previous ITypeDescriptorFilterService and IReferenceService.
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.GenerateCreateTableExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            Creates the CreateTableWindow() CodeDom expression.
            </summary>
            <param name="manager"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.DeserializeTableWindowControl(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Windows.Forms.Control,System.CodeDom.CodeStatementCollection)">
            <summary>
            Creates an instance of the child table window in the designer.
            It deserialize the (Type)CreateTableWindow(Type) syntax.
            </summary>
            <param name="manager"></param>
            <param name="stmts"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.CreateTableWindowControl(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Windows.Forms.Control,System.CodeDom.CodeAssignStatement)">
            <summary>
            Create the instance of the SalTableColumn control that has to be loaded in the designer.
            </summary>
            <param name="manager"></param>
            <param name="owner"></param>
            <param name="assignStatement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.UpdateRenamedColumns(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,PPJ.Runtime.Windows.SalTableWindow)">
            <summary>
            Updates the name of the columns that are inherited but renamed in the derived
            table inner class. This is needed to preserve the inherited name at design time
            in the container form, otherwise the designer will serialize the original name.
            </summary>
            <param name="manager"></param>
            <param name="table"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.LoadInheritedColumns(System.ComponentModel.Design.IDesignerHost,PPJ.Runtime.Windows.SalTableWindow)">
            <summary>
            Loads the columns that are inherited from the control's class.
            </summary>
            <param name="host"></param>
            <param name="thisTable"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.LoadReflectedColumns(System.Type,System.Boolean)">
            <summary>
            Returns the field info for all the table columns members.
            </summary>
            <param name="tableType"></param>
            <param name="inherited"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.DeserializeNestedColumns(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,PPJ.Runtime.Windows.SalTableWindow)">
            <summary>
            Dynamically creates/deletes table columns to synchronize the instance of the table
            control with the serialized columns definitions that have not been compiled yet.
            </summary>
            <param name="manager"></param>
            <param name="table"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.UpdateColumns(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,PPJ.Runtime.Windows.SalTableWindow)">
            <summary>
            Deletes the columns that are not defined in the serialized code and
            created the columns that are defined in the serialized code and not present in the
            columns collection.
            </summary>
            <param name="manager"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.SerializeChildClass(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,PPJ.Runtime.Windows.SalTableWindow,System.Collections.ArrayList)">
            <summary>
            Regenerates the code inside the InitializeComponent method for the inner table class.
            </summary>
            <param name="manager"></param>
            <param name="table"></param>
            <param name="editsCache"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.FindChildClass(EnvDTE.ProjectItem,System.String)">
            <summary>
            Finds or creates the child table windows' inner class declaration.
            </summary>
            <param name="projectItem"></param>
            <param name="tableTypeName"></param>
            <param name="tableTypeOwnerName"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.FindOrCreateInitializeComponent(EnvDTE.CodeClass,System.CodeDom.Compiler.CodeDomProvider)">
            <summary>
            Finds or creates the InitializeComponent method.
            </summary>
            <param name="tableClass"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.FindElement(System.Object,System.String,EnvDTE.vsCMElement)">
            <summary>
            Recursively find the requested element in the container.
            </summary>
            <param name="container"></param>
            <param name="name"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.GenerateColumnsDeclarations(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,EnvDTE.CodeClass,PPJ.Runtime.Windows.SalTableWindow)">
            <summary>
            Regenerates the columns variables declarations in the child table class.
            </summary>
            <param name="manager"></param>
            <param name="tableClass"></param>
            <param name="table"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.LoadColumns(EnvDTE.CodeClass)">
            <summary>
            Loads existing column variable declarations from the specified class.
            </summary>
            <param name="tableClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.GenerateInitializeComponent(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,EnvDTE.CodeFunction,PPJ.Runtime.Windows.SalTableWindow)">
            <summary>
            Replaces the body of the existing InitializeComponent.
            </summary>
            <param name="manager"></param>
            <param name="tableInitComponent"></param>
            <param name="table"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.IsInherited(System.ComponentModel.Component)">
            <summary>
            Returns true if the component is inherited from a base class.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.GenerateCode(System.CodeDom.Compiler.CodeDomProvider,System.CodeDom.CodeStatementCollection)">
            <summary>
            Generates the source code for the collection of statements using the default
            code generator for the project.
            </summary>
            <param name="provider"></param>
            <param name="stmts"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.GenerateInitializeComponentStatements(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,PPJ.Runtime.Windows.SalTableWindow)">
            <summary>
            Generates the CodCom statements for the new InitializeComponent method.
            </summary>
            <param name="manager"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.GenerateNewExpression(PPJ.Runtime.Windows.SalTableColumn,System.CodeDom.CodeStatementCollection)">
            <summary>
            Generates the new object expression for the columns creation code.
            </summary>
            <param name="col"></param>
            <param name="stmts"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.GeneratePropertyStatements(PPJ.Runtime.Windows.SalTableColumn,System.String,System.CodeDom.CodeStatementCollection)">
            <summary>
            Generates the properties assignment statements for the specified column.
            </summary>
            <param name="col"></param>
            <param name="stmts"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.GenerateControlsAddStatement(PPJ.Runtime.Windows.SalTableColumn,System.CodeDom.CodeStatementCollection)">
            <summary>
            Generates the Controls.Add() statements for the specified column.
            </summary>
            <param name="col"></param>
            <param name="stmts"></param>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.CacheEntry">
            <summary>
            Class used to store cached components changes. Every time a child column is added, renamed, or
            deleted in the designer, the transaction is cached in memory. Cached transactions are reloaded
            when deserializing the child table class.
            
            We have to do it this way becasue the deserializer in VS cannot possibly read the code in the child
            table class. The cached edits are cleared as soon as the project is recompiled.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.SalTableWindowSerializer.TableColumnInfo">
            <summary>
            Reflection class that wraps a SalTableColumn member.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Design.TableColumnPropertyDescriptor">
            <summary>
            PropertyDescriptor for table columns. It reads and writes the column control's properties
            without having to define a public property for each column.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalRibbonBarMDI">
            <summary>
            Top level MDI form with ribbon.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalRibbonBarBase">
            <summary>
            Base class for all RibbonBar forms.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalRibbonBarBase._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalRibbonBarBase.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Window procedure dispatcher.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.WmMouseWheel(System.Windows.Forms.Message@)">
            <summary>
            Redirects WM_MOUSEWHEEL to the child ClientArea control, when present.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.Show(System.Windows.Forms.Control)">
            <summary>
            Shows the form.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.ShowDialog(System.Windows.Forms.Control)">
            <summary>
            Shows the modal dialog.
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetVisibleCore(System.Boolean)">
            <summary>
            Overrides the default behavior to avoid the re-creation
            of the underlying window handle when the form is an MDI child.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.CreateForm">
            <summary>
            Creates the handle for the form and all the child controls.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.CreateControls(System.Windows.Forms.Control)">
            <summary>
            Ensures that all child controls, including childred of children, are
            created even if they are not visible.
            </summary>
            <param name="controls"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.CreateHandleInternal">
            <summary>
            Creates the handle for the form. MDI child forms are treated
            differentely to be able to create them hidden.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SendSamCreate">
            <summary>
            Sends SAM_Create to the form and to all child controls.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SendSamCreateComplete">
            <summary>
            Sends SAM_CreateComplete to all child TableWindow controls and to the form.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.ShowInternal(System.Boolean)">
            <summary>
            Shows/Hides the form using either the SDK for mdi child forms or the framework
            for regular forms.
            </summary>
            <param name="show"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.CreateTableWindow(System.Type)">
            <summary>
            Creates an instance of the inner child table window.
            </summary>
            <param name="tableType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetControls">
            <summary>
            Returns all the child controls at all level orderd by Tabindex.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.LoadControls(System.Windows.Forms.Control,System.Collections.IList)">
            <summary>
            Iterates all the controls and their children and loads them into
            the target list in TabIndex order.
            </summary>
            <param name="controls"></param>
            <param name="list"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.LoadLabelsAndGroups(System.Windows.Forms.Control)">
            <summary>
            Binds labels to controls and defines the 
            groups of radio/option buttons.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.LoadLabels(System.Collections.ICollection)">
            <summary>
            Fills the map containing the association of controls
            and their label.
            </summary>
            <param name="controls"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.DefineRadioGroups(System.Collections.ICollection)">
            <summary>
            Groups the radio buttons together with the group index
            and checks the first radio button of each group.
            
            Radio buttons are separated in groups whenever a non-radio
            control is found following a radio button.
            </summary>
            <param name="controls"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.FindAcceleratorButton(System.Windows.Forms.Keys)">
            <summary>
            Returns the button registered with the specified accelerator key.
            The button with the hightest TabIndex has the precedence.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.ScaleCore(System.Single,System.Single)">
            <summary>
            Disables .NET 1.1 scaling.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.InitializeAutoScaling">
            <summary>
            Saves the initial scale size.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.PerformFontAutoScaling">
            <summary>
            Scales the form and all the child controls using the 
            TD compatible algorithm.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.Scale(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Scales the form and all child controls.
            </summary>
            <param name="oldScale"></param>
            <param name="newScale"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.InstallTypeDescriptorFilter">
            <summary>
            Installs the custom properties filter. It's used to modify the propery
            descriptors for all the components being desing on a PPJ form in order to
            correctly reproduce the inheritance of properties. VS doesn't support
            properties inheritance propertly.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetState(PPJ.Runtime.Windows.SalFormState)">
            <summary>
            Returns the requested state.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetState(PPJ.Runtime.Windows.SalFormState,System.Boolean)">
            <summary>
            Sets the specified state.
            </summary>
            <param name="state"></param>
            <param name="flag"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.BeginUpdate">
            <summary>
            Freezes screen updates to the form.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.EndUpdate">
            <summary>
            Enables screen updates to the form.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.InitializeComponent">
            <summary>
            Required method for Designer support.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Process command keys.
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Processes dialog keys.
            This override takes care of:
            	- converting Enter to Tab
            	- selecting radio buttons in the same group index on arrows
            	- processing default button, hidden or in child forms
            	- processing accelerators
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.ProcessArrowKey(System.Windows.Forms.Keys)">
            <summary>
            Processes the arrow keys to move the focus to the next control
            in a group.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.ProcessAccelerators(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Executes the accelerator associated with the specified key.
            </summary>
            <param name="msg"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SendSamHelp">
            <summary>
            Sends SAM_Help to the target form.
            If the target is an MdiParent, send SAM_Help to the active MdiChild.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.ProcessTabKey(System.Boolean)">
            <summary>
            Selects the next control in the tab order.
            </summary>
            <param name="forward"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.OnFontChanged(System.EventArgs)">
            <summary>
            Resets the scaling factor when the font changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Fires the internal PaintBackground event.
            This allows the handler component to take over the background painting
            of the form. This is primarily used to allow the SalQuickTabs control
            to paint transparent backgrounds.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Updates the application skin to match the RibbonBar visual style.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SalApplication_SkinChanged(System.Object,System.EventArgs)">
            <summary>
            When the application skins changes, update the RibbonBar visual style accordingly.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.PPJ#Runtime#Windows#ISalForm#GetState(PPJ.Runtime.Windows.SalFormState)">
            <summary>
            Returns the requested state.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.PPJ#Runtime#Windows#ISalForm#SetState(PPJ.Runtime.Windows.SalFormState,System.Boolean)">
            <summary>
            Sets the specified state.
            </summary>
            <param name="state"></param>
            <param name="flag"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.PPJ#Runtime#Windows#ISalForm#GetLabel(System.Windows.Forms.Control)">
            <summary>
            Returns the label associated with the specified control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.PPJ#Runtime#Windows#ISalForm#SetLabel(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Assigned the label to the specified control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.PPJ#Runtime#Windows#ISalForm#RegisterAccelerator(System.Windows.Forms.Button,System.Windows.Forms.Keys)">
            <summary>
            Registers the accelerator key for the pushbutton control.
            </summary>
            <param name="ctrl"></param>
            <param name="key"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.PPJ#Runtime#Windows#ISalForm#RemoveAccelerator(System.Windows.Forms.Button)">
            <summary>
            Uunregisters the accelerator key for the pushbutton control.
            </summary>
            <param name="ctrl"></param>
            <param name="key"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.DrawMenuBar">
            <summary>
            Redraws the menu bar for a given form window or top-level table window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.EndDialog(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys a modal dialog box and returns control to the caller of SalModalDialog.
            </summary>
            <param name="nReturn"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetDefaultButton">
            <summary>
            Returns the handle of the default push button on a form window or dialog box. The
            default push button is the one that has the focus by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.ShowToolBar(PPJ.Runtime.SalBoolean)">
            <summary>
            Shows or hides the tool bar on a top-level or MDI window.
            </summary>
            <param name="bShow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetStatusBarText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Gets the text displayed in the status bar of a top-level or MDI window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetStatusBarText(PPJ.Runtime.SalNumber)">
            <summary>
            Gets the text displayed in the status bar of a top-level or MDI window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetStatusBarText(PPJ.Runtime.SalString)">
            <summary>
            Displays specified text in the status bar of a top-level or MDI window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.ShowStatusBar(PPJ.Runtime.SalBoolean)">
            <summary>
            Shows or hides the status bar on a top-level or MDI window.
            </summary>
            <param name="bShow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.FireWindowActionsToChildren(System.Int32,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the children's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarBase.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonBarBase.AutoScaleBaseDpi">
            <summary>
            Returns/Sets the DPI used to design this form.
            This is the base DPI scale and it will be used to scale the form.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonBarBase.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonBarBase.IconName">
            <summary>
            Icon name. The image is loaded from the embedded resources.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonBarBase.CultureInfo">
            <summary>
            Returns/Sets the culture to use for this form.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonBarBase.ShouldSerializeCultureInfo">
            <summary>
            Prevents the designer from serializing inherited CultureInfo.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonBarBase.PPJ#Runtime#Windows#ISalForm#ReturnValue">
            <summary>
            Dialog return value
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonBarBase.PPJ#Runtime#Windows#ISalForm#SavedOwner">
            <summary>
            Returns the owner saved while disposing the form.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarMDI.OnMdiCreateAutomaticForms">
            <summary>
            Automatic MDI child forms are created in the implementation
            of this method in the application.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarMDI.ShouldSerializeIcon">
            <summary>
            Controls the serialization of the image stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarMDI.CreateForm">
            <summary>
            Overrides sending of SAM_Create to create the automatic child forms.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarMDI.MDIArrangeIcons">
            <summary>
            Arranges minimized child window icons in an MDI window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarMDI.MDICascade">
            <summary>
            Cascades all non-iconized child windows of an MDI window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarMDI.MDITile(PPJ.Runtime.SalBoolean)">
            <summary>
            Tiles all non-iconized child windows of an MDI window. Windows that are not sizable
            will not be tiled.
            </summary>
            <param name="bPosition"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonBarMDI.Icon">
            <summary>
            Overrides the default Image property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonBarMDI.TabbedMdi">
            <summary>
            The tabbed Mdi manager component.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.C1RibbonBarEx">
            <summary>
            Empty extension class used to preload the embedded C1 license and 
            suppress the creation of the license.licx file.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalRibbonStatusBar">
            <summary>
            Status bar for all top level forms with the ribbon.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.ISalAccessory">
            <summary>
            Accessories controls (toolbar, statusbar and client area) implement 
            this interface.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.ISalAccessory.Create">
            <summary>
            Indicates if the accessory component should be created at runtime.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.ISalAccessory.AccessoryType">
            <summary>
            Returns the type of accessory control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonStatusBar.Text">
            <summary>
            Status text.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonStatusBar.ShowKeyboardStatus">
            <summary>
            Enables or disables the display of the default keyboard panels on the status bar (NUM|CAPS|SCRL).
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonStatusBar.ShowStatusText">
            <summary>
            Enables or disables the display of the default status text panel.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonStatusBar.Create">
            <summary>
            Determines whether the accessory control will be created at runtime.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalRibbonBarForm">
            <summary>
            Top level form with ribbon.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarForm.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarForm.ShouldSerializeIcon">
            <summary>
            Controls the serialization of the image stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarForm.CreateChildControl">
            <summary>
            Creates the internal hosted child form component if specified
            in this.ChildForm.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRibbonBarForm.AttachChildComponent(System.Windows.Forms.Control)">
            <summary>
            Makes the specified component a child of this form and shows it
            in the client area between the RibbonBar and StatusBar.
            </summary>
            <param name="child"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonBarForm.ChildForm">
            <summary>
            Gets or sets the name of the child form to create at runtime.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonBarForm.ChildControl">
            <summary>
            Gets or sets the child control to be displayed in the ribbon bar form.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRibbonBarForm.Icon">
            <summary>
            Overrides the default Image property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Skins.SalSkinner">
            <summary>
            Integration of Skin-Soft's VisualStyler component.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Skins.SalSkinner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Skins.SalSkinner.InitializeVisualStyler">
            <summary>
            Creates a valid instance of the VisualStyler component and loads the
            configuration settings from the App.config file.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Skins.SalSkinner.GetLicense">
            <summary>
            Retrieves the embedded VisualStyler license object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Skins.SalSkinner.LoadAppConfig(PPJ.Runtime.Windows.Skins.SalSkinnerConfiguration)">
            <summary>
            Loads the configuration settings saved in the application's config file.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Skins.SalSkinner.LoadSkinFile(System.String)">
            <summary>
            Loads the specified skin file.
            <remarks>When loading a sking file, the skinning of the application is enabled.</remarks>
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Skins.SalSkinner.LoadSkinResource(System.String)">
            <summary>
            Loads the specified skin file from the application's embedded resources.
            <remarks>When loading a sking file, the skinning of the application is enabled.</remarks>
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Skins.SalSkinner.LoadSkinResource(System.Reflection.Assembly,System.String)">
            <summary>
            Loads the specified skin file from the specified assembly's embedded resources.
            <remarks>When loading a sking file, the skinning of the application is enabled.</remarks>
            </summary>
            <param name="assembly"></param>
            <param name="name"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Skins.SalSkinner.ApplySkin(System.Windows.Forms.Form)">
            <summary>
            Enables skinning for the form.
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Skins.SalSkinner.ApplySkin(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Enables skinning for the specified control and child controls.
            </summary>
            <param name="control"></param>
            <param name="childControls"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Skins.SalSkinner.RemoveSkin(System.Windows.Forms.Form)">
            <summary>
            Disables skinning for the form.
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Skins.SalSkinner.RemoveSkin(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Disables skinning for the specified control and child controls.
            </summary>
            <param name="control"></param>
            <param name="childControls"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Skins.SalSkinner.PaintBackground(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Registers the control to have its background painted
            by the specified parent when BackColor = Transparent.
            </summary>
            <param name="control"></param>
            <param name="parent"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Skins.SalSkinner.EnableCustomPaint(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Registers the control to receive WM_PAINT messages
            to enable custom painting.
            </summary>
            <param name="control"></param>
            <param name="enable"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Skins.SalSkinner.EnableCustomBackgroundPaint(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Registers the control to receive WM_ERASEBKGND messages
            to enable custom painting.
            </summary>
            <param name="control"></param>
            <param name="enable"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Skins.SalSkinner.GetSysColor(System.Int32)">
            <summary>
            Returns the skinned system color.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.Skins.SalSkinner.VisualStyler">
            <summary>
            Returns the wrapped instance of the VisualStyler component.
            Can be used to set advanced properties using the component directly.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Skins.SalSkinner.Enabled">
            <summary>
            Enables/Disables the skinning of the entire application.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Skins.SalSkinner.SkinFullName">
            <summary>
            Returns the full name of last loaded skin file/resource.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Skins.SalSkinnerConfiguration">
            <summary>
            Loads the SalSkinner configuration settings from the applications config file.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Spell.SpellCheckerLineStyle">
            <summary>
            Spell Checker line style.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Spell.SpellChecker">
             <summary>
             Spell checker and highlighter engine.
            
             Uses the hunspell DLLs to load standard hunspell dictionaries
             and draws the underline marker in any control derived from TextBoxBase, ComboBox, or ISalEditControl.
             
             <remarks>
            		This class is capable of spelling and highlighting errors is TextBox, ComboBox, RichEdit, SalDataField,
            		SalMultilineField, and SalTableColum (when in edit mode).
             
            		Dictionaries are usually loaded from two files: .aff and .dic files. The dictionary files must be
            		present in the same directory of the applicaction being executed. In alternative, dictionaries can also
            		be loaded from embedded resources or any other storage type using SpellChecker.LoadDictionary() methods.
            		
            		To download additional dictionaries go here: http://extensions.services.openoffice.org/en/dictionaries
            		Download the file for the language you need, change the extension from OXT to ZIP, from the zip archive
            		extract the two .aff and .dic files. Make sure that the name follows the standard [lang]-[COUNTRY].
             </remarks>
             
             <example>
            		To enable spell checking in a control, use:
             
            			SpellChecker sc = new SpellChecker(this.textBox1);
             
            		To use dictionaries directly, use:
             
            			SpellChecker.Dictionary dict = SpellChecker.GetDictionary("en-US");
            			boolcorrectWord = dict.Spell("Hello");
             </example>
             </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.Spell.SpellChecker.#ctor(System.Windows.Forms.Control,System.Globalization.CultureInfo)">
            <summary>
            Creates and initializes a new instance of SpellChecker bound
            to the specified control.
            </summary>
            <param name="control"></param>
            <param name="culture"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Spell.SpellChecker.#ctor(System.Windows.Forms.Control,System.String)">
            <summary>
            Creates and initializes a new instance of SpellChecker bound
            to the specified control.
            </summary>
            <param name="control"></param>
            <param name="language"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Spell.SpellChecker.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates and initializes a new instance of SpellChecker bound
            to the specified control.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Spell.SpellChecker.FindOrLoadDictionary(System.Globalization.CultureInfo)">
            <summary>
            Finds a preloaded dictionary, or loads a new one, that matches the specified culture.
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Spell.SpellChecker.FindOrLoadDictionary(System.String)">
            <summary>
            Finds a preloaded dictionary, or loads a new one, that matches the specified culture.
            </summary>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Spell.SpellChecker.ThreadWorker(System.Object)">
            <summary>
            Spelling thread. Checks one queued control every 500ms.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Spell.SpellChecker.GetDictionary(System.String)">
            <summary>
            Returns an instance of Hunspell initialized with the specified dictionary.
            
            If the dictionary is not preloaded, it will attempt to load it from
            aff and dict files located in the same 
            </summary>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Spell.SpellChecker.GetDictionary(System.Globalization.CultureInfo)">
            <summary>
            Returns an instance of Hunspell initialized with the specified dictionary.
            
            If the dictionary is not preloaded, it will attempt to load it from
            aff and dict files located in the same 
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.Spell.SpellChecker.LoadDictionary(System.Globalization.CultureInfo,System.String,System.String)">
            <summary>
            Preloads the specified dictionary files.
            </summary>
            <param name="culture"></param>
            <param name="affFile"></param>
            <param name="dictFile"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Spell.SpellChecker.LoadDictionary(System.Globalization.CultureInfo,System.IO.Stream,System.IO.Stream)">
            <summary>
            Preloads the dictionary files from streams.
            <remarks>This method allows loading dictionaries from embedded resources.</remarks>
            </summary>
            <param name="culture"></param>
            <param name="affFile"></param>
            <param name="dictFile"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Spell.SpellChecker.LoadDictionary(System.String,System.String,System.String)">
            <summary>
            Preloads the specified dictionary files.
            </summary>
            <param name="language"></param>
            <param name="affFile"></param>
            <param name="dictFile"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Spell.SpellChecker.LoadDictionary(System.String,System.IO.Stream,System.IO.Stream)">
            <summary>
            Preloads the dictionary files from streams.
            <remarks>This method allows loading dictionaries from embedded resources.</remarks>
            </summary>
            <param name="language"></param>
            <param name="affFile"></param>
            <param name="dictFile"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Spell.SpellChecker.AddWords(System.Globalization.CultureInfo,System.Collections.ICollection)">
            <summary>
            Adds the specified list of words to the preloaded dictionary.
            </summary>
            <param name="culture"></param>
            <param name="words"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Spell.SpellChecker.AddWords(System.String,System.Collections.ICollection)">
            <summary>
            Adds the specified list of words to the preloaded dictionary.
            </summary>
            <param name="language"></param>
            <param name="words"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.Spell.SpellChecker.CheckSyntax">
            <summary>
            Checks the syntax of the edit control and saves all errors
            in  the errors list. The painting procedure will take care
            of drawing the errors highlighting lines.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Spell.SpellChecker.Language">
            <summary>
            Sets the language used by this instance of the SpellChecker.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Spell.SpellChecker.LineStyle">
            <summary>
            Line style used to highlight the spelling errors.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Spell.SpellChecker.ControlSubclass">
            <summary>
            Subclass for TextBoxBase control.
            Used to detect changes and paint requests.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Spell.SpellChecker.Error">
            <summary>
            Saves spelling error instances.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Spell.SpellChecker.Dictionary">
            <summary>
            Provides a publicly usable instance of Hunspell with a preloaded
            dictionary.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Spell.SpellChecker.Hunspell">
            <summary>
            Interface to the Hunspell DLLs.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.Spell.SpellCheckerEventHandler">
            <summary>
            Event handler for all SpellChecker events.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:PPJ.Runtime.Windows.Spell.SpellCheckerEventArgs">
            <summary>
            Args for SpellChecker events.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Spell.SpellCheckerEventArgs.Word">
            <summary>
            Returns the word that was spelled incorrectly.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Spell.SpellCheckerEventArgs.Language">
            <summary>
            Returns the lauguage code.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Spell.SpellCheckerEventArgs.NewWord">
            <summary>
            Sets the word to replace the incorrect word.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Spell.SpellCheckerEventArgs.Suggestions">
            <summary>
            List of suggested replacement words.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.Spell.SpellCheckerEventArgs.Handled">
            <summary>
            Indicates that the code has handled the event.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.C1FlexGridEx">
            <summary>
            Extended FlexGrid class.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.C1FlexGridEx.AdjustEditorBounds">
            <summary>
            #BugFix: FlexGrid doesn't use margins to calculate the bounds of the editor control
            resulting in a visible "jump" of the text being edited
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.C1FlexGridEx.GetMergedRange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Overrides GetMergedRange to allow the SalTableWindow class to override the method.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="clip"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.C1FlexGridEx.GetDataDisplay(System.Int32,System.Int32,System.Drawing.Image@,C1.Win.C1FlexGrid.CheckEnum@)">
            <summary>
            Force the display of the checkbox column uncheckedas  when the value is null.
            This behavior was changed in the flexgrid starting from .611.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="img"></param>
            <param name="chk"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.C1FlexGridEx.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" -->
        <member name="M:PPJ.Runtime.Windows.C1FlexGridEx.ToAsciiCharacter(System.Int32)">
            <summary>
            Convert virtual key to ASCII char
            </summary>
            <param name="uVirtKey"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.C1FlexGridEx.FocusRowSize">
            <summary>
            Enables/Disables the focus frame around the current row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.C1FlexGridEx.CustomDrawFocusRectangle">
            <summary>
            Enables/Disables the custom focus frame drawing around the current row.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.WindowActionsEventArgs">
            <summary>
            Arguments for the WindowActionsEvent.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.WindowActionsEventArgs.#ctor(System.Windows.Forms.Message)">
            <summary>
            Constructs a new SalMessage object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.WindowActionsEventArgs.#ctor(System.Windows.Forms.Control,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Constructs a new SalMessage object.
            </summary>
            <param name="handle"></param>
            <param name="msgCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.WindowActionsEventArgs.#ctor(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Constructs a new SalMessage object.
            </summary>
            <param name="handle"></param>
            <param name="msgCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.WindowActionsEventArgs.Return">
            <summary>
            Message return value. When set, the flag HasReturnValue is also
            flipped to true.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.WindowActionsEventArgs.HasReturnValue">
            <summary>
            Returns true if the return value was set.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.WindowActionsEventArgs.Handled">
            <summary>
            Returns/Sets the handled flag.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.WindowActionsEventArgs.WParam">
            <summary>
            Returns the wParam associated with the message.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.WindowActionsEventArgs.LParam">
            <summary>
            Returns the lParam associated with the message.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.WindowActionsEventArgs.ActionType">
            <summary>
            Returns the message code.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.WindowActionsEventArgs.hWnd">
            <summary>
            Returns the target window handle.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.WindowActionsEventArgs.NotificationCode">
            <summary>
            Returns the notification code from the WM_COMMAND message (hi word of wParam).
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.WindowActionsEventArgs.NotificationId">
            <summary>
            Returns the notification id from the WM_COMMAND message (low word of wParam).
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.WindowActionsEventHandler">
            <summary>
            Delegate handler for the MessageActions event raised by
            SAL controls.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalMessage">
            <summary>
            SalMessage is passed to the message actions handler and 
            virtual functions. It wraps the message code and the messages
            parameters. It is automatically cast to int and can be used
            as is in the switch statement.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMessage.#ctor(System.Windows.Forms.Message)">
            <summary>
            Constructs a new SalMessage object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMessage.#ctor(System.Windows.Forms.Control,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Constructs a new SalMessage object.
            </summary>
            <param name="handle"></param>
            <param name="msgCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMessage.#ctor(PPJ.Runtime.Windows.WindowActionsEventArgs)">
            <summary>
            Constructs a new SalMessage instance from the newer WindowsActionsEventArgs.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMessage.#ctor(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Constructs a new SalMessage object.
            </summary>
            <param name="handle"></param>
            <param name="msgCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMessage.Return">
            <summary>
            Message return value. When set, the flag HasReturnValue is also
            flipped to true.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMessage.HasReturnValue">
            <summary>
            Returns true if the return value was set.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMessage.Handled">
            <summary>
            Returns/Sets the handled flag.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMessage.WParam">
            <summary>
            Returns the wParam associated with the message.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMessage.LParam">
            <summary>
            Returns the lParam associated with the message.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMessage.Code">
            <summary>
            Returns the message code.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMessage.hWnd">
            <summary>
            Returns the target window handle.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMessage.NotificationCode">
            <summary>
            Returns the notification code from the WM_COMMAND message (hi word of wParam).
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMessage.NotificationId">
            <summary>
            Returns the notification id from the WM_COMMAND message (low word of wParam).
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalMessageHandler">
            <summary>
            Delegate handler for the MessageActions event raised by
            SAL controls.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalMultilineField">
            <summary>
            MultilineField implementation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalMultilineField._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalMultilineField.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.#ctor">
            <summary>
            Constructs a SalMultilineField object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.OnWmSetFocus(System.Windows.Forms.Message@)">
            <summary>
            #BugFix for .NET 1.1 and 2.0
            When the control gains the focus it must select the entire content unless the
            focus is gained because of form activation or mouse clicks. WinForms doesn't do it
            and selected the entire content only once and only if the mouse is not pressed.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.OnWmLButtonDown(System.Windows.Forms.Message@)">
            <summary>
            Processes WM_LBUTTONDOWN to enable automatic drag-drop mode.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.IsOverSelectedText">
            <summary>
            Returns true if the mouse is over selected text.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.ShouldSerializeBackColor">
            <summary>
            Prevents the designer from serializing default colors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.InitializeSpellChecker">
            <summary>
            Initialize the spell checker engine.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetModified(PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears the field edit flag for an editable data field, combo box, multiline
            text field, table window column, or picture.
            </summary>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.IsModified">
            <summary>
            Returns the setting of the Field Edit Flag for a data field, multiline field, combo
            box, table window's context row cell, or picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetDataType">
            <summary>
            Returns a data field's or table window column's data type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.Clear">
            <summary>
            Clears the value from a data field, multiline field, or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetLabel">
            <summary>
            Retrieves the window handle of the label (label control) that is associated with the hWndTarget parameter.
            There must be a mnemonic in that label, and it must immediately precede hWndTarget in the outline, or this function will fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.DisableWindowAndLabel">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            A label is the label control that immediately precedes the window in the outline.
            The label control must have a mnemonic. If the window contains text (for
            example, a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.EnableWindowAndLabel">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window in the
            outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.ShowWindowAndLabel">
            <summary>
            Makes a window and its associated label visible. A label is the label control that
            immediately precedes the window in the outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.HideWindowAndLabel">
            <summary>
            Hides a window and its associated label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetLabelText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of the associaetd label control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetLabelText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetLabelText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.IsEmpty">
            <summary>
            Verifies whether a data field, multiline text field, or table window column is null
            or empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.IsValidDateTime">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid date/time value. For multiline text fields, the date/time value must
            be the only item in the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.IsValidDecimal(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid decimal value. For multiline text fields, the decimal value must be
            the only item in the field.
            </summary>
            <param name="nPrecision"></param>
            <param name="nScale"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.IsValidInteger">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid integer value. For multiline text fields, the integer value must be
            the only item in the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.IsValidNumber">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid numeric value. Valid numbers are integers or floating point numbers,
            negative and positive. For multiline text fields, the numeric value must be the
            only item in the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetFormattedText(PPJ.Runtime.SalString@,PPJ.Runtime.SalBoolean)">
            <summary>
            Copies the contents of a data field or table window column to a string. This function
            also lets you copy the format of the data.
            </summary>
            <param name="sText"></param>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetFormattedText(PPJ.Runtime.SalBoolean)">
            <summary>
            Copies the contents of a data field or table window column to a string. This function
            also lets you copy the format of the data.
            </summary>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetFormatCode">
            <summary>
            Returns the current format of a data field or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetFormatCode(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a data field's or table window column's format.
            </summary>
            <param name="nFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetInputMask(PPJ.Runtime.SalString@)">
            <summary>
            Gets the input mask of a data field or table window column.
            </summary>
            <param name="sMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetInputMask">
            <summary>
            Gets the input mask of a data field or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetFormat(PPJ.Runtime.SalString@)">
            <summary>
            Gets the picture format of a data field or table window column.
            </summary>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetFormat">
            <summary>
            Gets the picture format of a data field or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.IsValid">
            <summary>
            Validates the contents of a data field or table window column using the current profile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetInputMask(PPJ.Runtime.SalString)">
            <summary>
            Sets the input mask of a data field or table window column.
            </summary>
            <param name="sMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetFormat(PPJ.Runtime.SalString)">
            <summary>
            Sets the picture format of a data field or table window column.
            </summary>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetText(PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean)">
            <summary>
            Copies a string to a data field or table window column. After copying the string
            to the field, formats the string.
            </summary>
            <param name="sValue"></param>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetTextUnmasked(PPJ.Runtime.SalString@)">
            <summary>
            Unmasks the text from a masked edit control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetTextUnmasked">
            <summary>
            Unmasks the text from a masked edit control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.Validate">
            <summary>
            Validates and formats a data field's or table window column's contents.
            </summary>
            <param name="nValidate"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.Validate(PPJ.Runtime.SalNumber)">
            <summary>
            Validates and formats a data field's or table window column's contents.
            </summary>
            <param name="nValidate"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.SetDataLength(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a limit on the number of characters that a user can enter into a data field,
            multiline text field, or table window column.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMultilineField.GetDataLength">
            <summary>
            Returns the maximum length of a data field, multiline text field, or table window
            column.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMultilineField.BackColor">
            <summary>
            Overrides the BackColor property to be able to install our
            ShouldSerializeBackColor() function.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMultilineField.CreateParams">
            <summary>
            #BugFix for .NET 1.1 and 2.0
            Overrides the CreateParams property to turn off the ES_AUTOVSCROLL flag
            for multiline fields without scroll bars.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMultilineField.Label">
            <summary>
            Returns/Sets the label associated with this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMultilineField.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMultilineField.Text">
            <summary>
            Returns/Sets the text of the multiline field.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMultilineField.CultureInfo">
            <summary>
            Returns/Sets the culture to use for this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMultilineField.EnableSpellChecker">
            <summary>
            Enables/Disables the built-in spell checker.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMultilineField.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalNativeControl">
            <summary>
            Wraps a non .NET control handle.
            This class is used to let the framwork handle
            controls that are created using Windows SDK directly.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNativeControl.#ctor(System.IntPtr)">
            <summary>
            Wraps a native window handle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNativeControl.CreateHandle">
            <summary>
            Never create the handle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNativeControl.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Implements SetBoundsCore to set the size and location of the native window.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="specified"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNativeControl.SetVisibleCore(System.Boolean)">
            <summary>
            Show/Hide the control.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNativeControl.Invalidate">
            <summary>
            Invalidates the control and forces a repaint.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNativeControl.OnEnabledChanged(System.EventArgs)">
            <summary>
             Applys the Enabled flag to the native control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalNativeControl.SetWindowStyle(System.Int32,System.Boolean)">
            <summary>
            Sets or removes the specified Window style.
            </summary>
            <param name="style"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalNativeControl.Handle">
            <summary>
            Retuns the native handle.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalNativeControl.Font">
            <summary>
            Returns the control's font.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalNativeControl.Parent">
            <summary>
            Returns the parent control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.OptionButtonStyle">
            <summary>
            Types of option buttons.
            
            	Radio = Radio button
            	Check = Check button
            	Palette = Radio button without focus
            		
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalOptionButton">
            <summary>
            Implementation of the OptionButton control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.ISalPictureControl">
            <summary>
            SAL Controls that display a picture implement this interface.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalPictureControl.TransparentColor">
            <summary>
            Returns/Sets the transparent color
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalPictureControl.Image">
            <summary>
            Returns/Sets the image.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.ISalRadioButton">
            <summary>
            SAL Controls that behave like a radio button implement this interface.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalRadioButton.GroupIndex">
            <summary>
            Returns/Sets the group index the control belongs to.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalRadioButton.IsCheckButton">
            <summary>
            Returns true if the control behaves like a checkbox button.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.ISalRadioButton.Checked">
            <summary>
            Returns/Sets the checked property.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalOptionButton._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalOptionButton.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.#ctor">
            <summary>
            Constructs a SalOptionRadioButton object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetImage(System.Drawing.Image)">
            <summary>
            Sets the image.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.UpdateCurrentImage">
            <summary>
            Updates the currently displayed image.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.ProcessMnemonic(System.Char)">
            <summary>
            Overrides the default implementation to allow for mnemonics when the 
            button does not receive the focus because it's hidden.
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.ShouldSerializeImage">
            <summary>
            Controls the serialization of the image stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.ShouldSerializeImagePressed">
            <summary>
            Controls the serialization of the image stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetModified(PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears the field edit flag for an editable data field, combo box, multiline
            text field, table window column, or picture.
            </summary>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.IsModified">
            <summary>
            Returns the setting of the Field Edit Flag for a data field, multiline field, combo
            box, table window's context row cell, or picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetDataType">
            <summary>
            Returns a data field's or table window column's data type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.Clear">
            <summary>
            Clears the value from a data field, multiline field, or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetLabel">
            <summary>
            Retrieves the window handle of the label (label control) that is associated with the hWndTarget parameter.
            There must be a mnemonic in that label, and it must immediately precede hWndTarget in the outline, or this function will fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.DisableWindowAndLabel">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            A label is the label control that immediately precedes the window in the outline.
            The label control must have a mnemonic. If the window contains text (for
            example, a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.EnableWindowAndLabel">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window in the
            outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.ShowWindowAndLabel">
            <summary>
            Makes a window and its associated label visible. A label is the label control that
            immediately precedes the window in the outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.HideWindowAndLabel">
            <summary>
            Hides a window and its associated label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetLabelText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of the associaetd label control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetLabelText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetLabelText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.IsChecked">
            <summary>
            Determines whether a radio button is set or a check box is checked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.ClearImage">
            <summary>
            Deletes the contents of a picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetImageDescription(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves a description of a picture's contents.
            </summary>
            <param name="sDesc"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetImageDescription(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves a description of a picture's contents.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetImageBytes(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@)">
            <summary>
            Copies the contents of a picture to a string.
            </summary>
            <param name="sImageBytes"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetImageString(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Copies the contents of a picture to a string.
            </summary>
            <param name="nFormat"></param>
            <param name="sPict"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.GetImageString(PPJ.Runtime.SalNumber)">
            <summary>
            Return the contents of a picture into a string.
            </summary>
            <param name="nFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetImageResource(PPJ.Runtime.SalResource,PPJ.Runtime.SalNumber)">
            <summary>
            Inserts a resource into a picture.
            </summary>
            <param name="tResource"></param>
            <param name="nFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetImageFile(PPJ.Runtime.SalString)">
            <summary>
            Inserts a file's contents into a picture.
            </summary>
            <param name="sFileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetImageHandle(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the picture image of a picture window with the handle of a bitmap (HBITMAP)
            or icon (HICON). Usually, HBITMAPs and HICONs are loaded from DLLs.
            </summary>
            <param name="nType"></param>
            <param name="nHandle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetImageBytes(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Inserts the contents of a picture to an image without the image header.
            </summary>
            <param name="sImageBytes"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalOptionButton.SetImageString(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Inserts the contents of a string into a picture.
            </summary>
            <param name="nFormat"></param>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalOptionButton.AutoCheck">
            <summary>
            Hide the AutoCheck property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalOptionButton.Checked">
            <summary>
            Returns/Sets the checked state of the check box control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalOptionButton.Appearance">
            <summary>
            Hide the Appearance property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalOptionButton.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalOptionButton.ButtonStyle">
            <summary>
            Returs/Sets the style of the option button.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalOptionButton.TransparentColor">
            <summary>
            Returns/Sets the transparent color.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalOptionButton.ImageName">
            <summary>
            Image name. Name of the image to load from the embedded resources.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalOptionButton.ImagePressedName">
            <summary>
            Image name. Name of the image to load from the embedded resources.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalOptionButton.Image">
            <summary>
            Overrides the default Image property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalOptionButton.ImagePressed">
            <summary>
            Image to use when the button is pressed.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalOptionButton.Label">
            <summary>
            Returns/Sets the label associated with this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalOptionButton.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.ImageStorage">
            <summary>
            Storage options for the SalPicture control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalPicture">
            <summary>
            Picture implementation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalPicture._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalPicture.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.#ctor">
            <summary>
            Constructs a SalPicture object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.LoadImage(System.Reflection.Assembly)">
            <summary>
            Loads the specified image into the control.
            </summary>
            <param name="callingAssembly"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.ClearImage(System.Windows.Forms.Control)">
            <summary>
            Deletes the contents of a picture.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetImageDescription(System.Windows.Forms.Control,PPJ.Runtime.SalString@,System.Int32)">
            <summary>
            Retrieves a description of a picture's contents.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.SalPicture.GetImageBlob(System.Windows.Forms.Control,System.Drawing.Imaging.ImageFormat)" -->
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetEncoder(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Returns the image encoder to use for the specified format.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetImageType(System.Windows.Forms.Control)">
            <summary>
            Returns the raw type of the image.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetImageFromBlob(System.Byte[],System.Int32)">
            <summary>
            Converts the blob to an image.
            </summary>
            <param name="blob"></param>
            <param name="imageType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetImage(System.Windows.Forms.Control,System.Drawing.Image)">
            <summary>
            Assigns the image to the picture control.
            </summary>
            <param name="ctrl"></param>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetImageString(System.Windows.Forms.Control,PPJ.Runtime.SalString,System.Int32)">
            <summary>
            Assigns the image to the picture control.
            </summary>
            <param name="ctrl"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetImageString(System.Windows.Forms.Control,PPJ.Runtime.SalBinary,System.Int32)">
            <summary>
            Assigns the image to the picture control.
            </summary>
            <param name="ctrl"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetImage(System.Windows.Forms.Control)">
            <summary>
            Retrieves the control's image object
            </summary>
            <param name="ctrl"></param>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetImageBytes(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the bytes for the image in the picture control.
            </summary>
            <param name="buffer"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetImageBytes(System.Windows.Forms.Control,PPJ.Runtime.SalBinary@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the bytes for the image in the picture control.
            </summary>
            <param name="sImageBytes"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetImageString(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Copies the contents of a picture to a string.
            </summary>
            <param name="ctrl"></param>
            <param name="format"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetImageString(System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBinary@)">
            <summary>
            Copies the contents of a picture to a string.
            </summary>
            <param name="ctrl"></param>
            <param name="format"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetImageResource(System.Windows.Forms.Control,PPJ.Runtime.SalResource,System.Int32)">
            <summary>
            Sets the image in a control using the Sal resource object.
            </summary>
            <param name="ctrl"></param>
            <param name="salRes"></param>
            <param name="imageType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetImageFit(System.Windows.Forms.Control,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the fit for a picture.
            </summary>
            <param name="hWndPict">The handle (or name) of a picture.</param>
            <param name="nFit">The type of fit: PIC_FitBestFit PIC_FitScale PIC_FitSizeToFit</param>
            <param name="nScaleWidth">The width scaling percentage if nFit is PIC_FitScale.</param>
            <param name="nScaleHeight">The height scaling percentage if nFit is PIC_FitScale.</param>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetImageFile(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets the image from a file
            </summary>
            <param name="ctrl"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetImageHandle(System.Windows.Forms.Control,System.IntPtr,System.Int32)">
            <summary>
            Sets the image in a control using a native handle.
            </summary>
            <param name="ctrl"></param>
            <param name="handle"></param>
            <param name="imageType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.MakeTransparent(System.Drawing.Image,System.Drawing.Color)">
            <summary>
            Makes a transparent image.
            </summary>
            <param name="image"></param>
            <param name="transparentColor"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetImageDescription(System.Drawing.Image)">
            <summary>
            Returns the Gypta:[descr] string description of an image format.
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetDescriptionLength(System.Byte[])">
            <summary>
            Detects the image description at the beginning on the blob.
            </summary>
            <param name="blob"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.UpdateImage">
            <summary>
            Updates the displayed image by applying the scaling factor and sizing mode.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.OnWmLButtonDown(System.Windows.Forms.Message@)">
            <summary>
            Processes WM_LBUTTONDOWN to enable automatic drag-drop mode.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetModified(PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears the field edit flag for an editable data field, combo box, multiline
            text field, table window column, or picture.
            </summary>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.IsModified">
            <summary>
            Returns the setting of the Field Edit Flag for a data field, multiline field, combo
            box, table window's context row cell, or picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetDataType">
            <summary>
            Returns a data field's or table window column's data type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.Clear">
            <summary>
            Clears the value from a data field, multiline field, or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetLabel">
            <summary>
            Retrieves the window handle of the label (label control) that is associated with the hWndTarget parameter.
            There must be a mnemonic in that label, and it must immediately precede hWndTarget in the outline, or this function will fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.DisableWindowAndLabel">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            A label is the label control that immediately precedes the window in the outline.
            The label control must have a mnemonic. If the window contains text (for
            example, a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.EnableWindowAndLabel">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window in the
            outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.ShowWindowAndLabel">
            <summary>
            Makes a window and its associated label visible. A label is the label control that
            immediately precedes the window in the outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.HideWindowAndLabel">
            <summary>
            Hides a window and its associated label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetLabelText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of the associaetd label control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetLabelText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetLabelText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.ClearImage">
            <summary>
            Deletes the contents of a picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetImageDescription(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves a description of a picture's contents.
            </summary>
            <param name="sDesc"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetImageDescription(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves a description of a picture's contents.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetImageBytes(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@)">
            <summary>
            Copies the contents of a picture to a string.
            </summary>
            <param name="sImageBytes"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetImageString(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Copies the contents of a picture to a string.
            </summary>
            <param name="nFormat"></param>
            <param name="sPict"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.GetImageString(PPJ.Runtime.SalNumber)">
            <summary>
            Return the contents of a picture into a string.
            </summary>
            <param name="nFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetImageResource(PPJ.Runtime.SalResource,PPJ.Runtime.SalNumber)">
            <summary>
            Inserts a resource into a picture.
            </summary>
            <param name="tResource"></param>
            <param name="nFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetImageFile(PPJ.Runtime.SalString)">
            <summary>
            Inserts a file's contents into a picture.
            </summary>
            <param name="sFileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetImageFit(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the fit for a picture.
            </summary>
            <param name="nFit"></param>
            <param name="nScaleWidth"></param>
            <param name="nScaleHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetImageHandle(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the picture image of a picture window with the handle of a bitmap (HBITMAP)
            or icon (HICON). Usually, HBITMAPs and HICONs are loaded from DLLs.
            </summary>
            <param name="nType"></param>
            <param name="nHandle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetImageBytes(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Inserts the contents of a picture to an image without the image header.
            </summary>
            <param name="sImageBytes"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPicture.SetImageString(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Inserts the contents of a string into a picture.
            </summary>
            <param name="nFormat"></param>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPicture.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPicture.ImageStorage">
            <summary>
            SalPicture storage.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPicture.TransparentColor">
            <summary>
            Transparent color.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPicture.ImageName">
            <summary>
            Image name. Name of the image to load from the embedded resources.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPicture.Image">
            <summary>
            Overrides the default Image property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPicture.ScaleWidth">
            <summary>
            Returns/Sets the horizontal scaling value.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPicture.ScaleHeight">
            <summary>
            Returns/Sets the vertical scaling value.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPicture.Label">
            <summary>
            Returns/Sets the label associated with this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPicture.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalPushbutton">
            <summary>
            Pushbutton implementation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalPushbutton._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalPushbutton.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.#ctor">
            <summary>
            Constructs a SalPushbutton object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.RegisterAccelerator">
            <summary>
            Registers the accelerator key with all the parent forms.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.RemoveAccelerator">
            <summary>
            Unregisters the accelerator from the parent forms.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.ProcessMnemonic(System.Char)">
            <summary>
            Overrides the default implementation to allow for mnemonics when the 
            pushbutton does not receive the focus because it's placed on a toolbar
            and when the pushbutton is hidden.
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.PerformClick">
            <summary>
            Triggers the OnClick event.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.ResizeImage(System.Drawing.Image,System.Single)">
            <summary>
            method for resizing an image
            </summary>
            <param name="img">the image to resize</param>
            <param name="percentage">Percentage of change (i.e 1.5 for 150% scaling</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.ShouldSerializeImage">
            <summary>
            Controls the serialization of the image stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetModified(PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears the field edit flag for an editable data field, combo box, multiline
            text field, table window column, or picture.
            </summary>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.IsModified">
            <summary>
            Returns the setting of the Field Edit Flag for a data field, multiline field, combo
            box, table window's context row cell, or picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetDataType">
            <summary>
            Returns a data field's or table window column's data type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.Clear">
            <summary>
            Clears the value from a data field, multiline field, or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetLabel">
            <summary>
            Retrieves the window handle of the label (label control) that is associated with the hWndTarget parameter.
            There must be a mnemonic in that label, and it must immediately precede hWndTarget in the outline, or this function will fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.DisableWindowAndLabel">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            A label is the label control that immediately precedes the window in the outline.
            The label control must have a mnemonic. If the window contains text (for
            example, a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.EnableWindowAndLabel">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window in the
            outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.ShowWindowAndLabel">
            <summary>
            Makes a window and its associated label visible. A label is the label control that
            immediately precedes the window in the outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.HideWindowAndLabel">
            <summary>
            Hides a window and its associated label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetLabelText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of the associaetd label control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetLabelText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetLabelText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetDefaultButton">
            <summary>
            Sets the default push button of a form window or dialog box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.ClearImage">
            <summary>
            Deletes the contents of a picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetImageDescription(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves a description of a picture's contents.
            </summary>
            <param name="sDesc"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetImageDescription(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves a description of a picture's contents.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetImageBytes(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@)">
            <summary>
            Copies the contents of a picture to a string.
            </summary>
            <param name="sImageBytes"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetImageString(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Copies the contents of a picture to a string.
            </summary>
            <param name="nFormat"></param>
            <param name="sPict"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.GetImageString(PPJ.Runtime.SalNumber)">
            <summary>
            Return the contents of a picture into a string.
            </summary>
            <param name="nFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetImageResource(PPJ.Runtime.SalResource,PPJ.Runtime.SalNumber)">
            <summary>
            Inserts a resource into a picture.
            </summary>
            <param name="tResource"></param>
            <param name="nFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetImageFile(PPJ.Runtime.SalString)">
            <summary>
            Inserts a file's contents into a picture.
            </summary>
            <param name="sFileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetImageHandle(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the picture image of a picture window with the handle of a bitmap (HBITMAP)
            or icon (HICON). Usually, HBITMAPs and HICONs are loaded from DLLs.
            </summary>
            <param name="nType"></param>
            <param name="nHandle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetImageBytes(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Inserts the contents of a picture to an image without the image header.
            </summary>
            <param name="sImageBytes"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPushbutton.SetImageString(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Inserts the contents of a string into a picture.
            </summary>
            <param name="nFormat"></param>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPushbutton.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPushbutton.TransparentColor">
            <summary>
            Transparent color.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPushbutton.ImageName">
            <summary>
            Image name. Name of the image to load from the embedded resources.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPushbutton.Image">
            <summary>
            Overrides the default Image property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPushbutton.AcceleratorKey">
            <summary>
            Keyboard shortcut for choosing a menu item or pressing a push button.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPushbutton.Label">
            <summary>
            Returns/Sets the label associated with this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPushbutton.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalRadioButton">
            <summary>
            RadioButton implementation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalRadioButton._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalRadioButton.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.#ctor">
            <summary>
            Constructs a SalRadioButton object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.ProcessMnemonic(System.Char)">
            <summary>
            Overrides the default implementation to allow for mnemonics when the 
            button does not receive the focus because it's hidden.
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetModified(PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears the field edit flag for an editable data field, combo box, multiline
            text field, table window column, or picture.
            </summary>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.IsModified">
            <summary>
            Returns the setting of the Field Edit Flag for a data field, multiline field, combo
            box, table window's context row cell, or picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetDataType">
            <summary>
            Returns a data field's or table window column's data type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.Clear">
            <summary>
            Clears the value from a data field, multiline field, or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetLabel">
            <summary>
            Retrieves the window handle of the label (label control) that is associated with the hWndTarget parameter.
            There must be a mnemonic in that label, and it must immediately precede hWndTarget in the outline, or this function will fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.DisableWindowAndLabel">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            A label is the label control that immediately precedes the window in the outline.
            The label control must have a mnemonic. If the window contains text (for
            example, a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.EnableWindowAndLabel">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window in the
            outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.ShowWindowAndLabel">
            <summary>
            Makes a window and its associated label visible. A label is the label control that
            immediately precedes the window in the outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.HideWindowAndLabel">
            <summary>
            Hides a window and its associated label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.SetLabelText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of the associaetd label control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetLabelText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.GetLabelText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalRadioButton.IsChecked">
            <summary>
            Determines whether a radio button is set or a check box is checked.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRadioButton.AutoCheck">
            <summary>
            Hide the AutoCheck property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRadioButton.Checked">
            <summary>
            Returns/Sets the checked state of the radio button control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRadioButton.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRadioButton.AllowHtml">
            <summary>
            Allows the text to contain simple html tags.
            <remarks>Supported tags: b, u, i, br</remarks>
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRadioButton.Label">
            <summary>
            Returns/Sets the label associated with this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalRadioButton.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalUserControl">
            <summary>
            UserControl adapted to support the PPJ Framework.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalUserControl._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalUserControl.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalUserControl.m_salWindowType">
            <summary>
            SAL control type
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.#ctor">
            <summary>
            Default constructor.
            Uses TYPE_CustControl.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.#ctor(System.Int32)">
            <summary>
            Constructs the control emulating any SAL control type TYPE_*.
            </summary>
            <param name="salType"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Fires the internal PaintBackground event.
            This allows the handler component to take over the background painting
            of the form. This is primarily used to allow the SalQuickTabs control
            to paint transparent backgrounds.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalUserControl.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalUserControl.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalVerticalScrollBar">
            <summary>
            VerticalScrollBar implementation.
            <remarks>
            This derived class adjustes the Maximum property by adding LargeChange to allow the
            scroll thumb to reach the end of the range.
            See http://msdn.microsoft.com/en-us/library/system.windows.forms.scrollbar.maximum.aspx.
            </remarks>
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalVerticalScrollBar._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalVerticalScrollBar.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.#ctor">
            <summary>
            Constructs a new SalVerticalScrollBar object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetModified(PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears the field edit flag for an editable data field, combo box, multiline
            text field, table window column, or picture.
            </summary>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.IsModified">
            <summary>
            Returns the setting of the Field Edit Flag for a data field, multiline field, combo
            box, table window's context row cell, or picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetDataType">
            <summary>
            Returns a data field's or table window column's data type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.Clear">
            <summary>
            Clears the value from a data field, multiline field, or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetLabel">
            <summary>
            Retrieves the window handle of the label (label control) that is associated with the hWndTarget parameter.
            There must be a mnemonic in that label, and it must immediately precede hWndTarget in the outline, or this function will fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.DisableWindowAndLabel">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            A label is the label control that immediately precedes the window in the outline.
            The label control must have a mnemonic. If the window contains text (for
            example, a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.EnableWindowAndLabel">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window in the
            outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.ShowWindowAndLabel">
            <summary>
            Makes a window and its associated label visible. A label is the label control that
            immediately precedes the window in the outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.HideWindowAndLabel">
            <summary>
            Hides a window and its associated label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetLabelText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of the associaetd label control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetLabelText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetLabelText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetScrollBarPosition(PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the current scroll bar value.
            </summary>
            <param name="ctrl"></param>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetScrollBarPosition">
            <summary>
            Returns the current scroll bar value.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.GetScrollBarRange(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a scroll bar's scroll range, line increment, and page increment.
            </summary>
            <param name="nMin"></param>
            <param name="nMax"></param>
            <param name="nLine"></param>
            <param name="nPage"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetScrollBarPosition(PPJ.Runtime.SalNumber)">
            <summary>
            Sets the scrollbar's value.
            </summary>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalVerticalScrollBar.SetScrollBarRange(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a scroll bar's range, line increment, and page increment. When the scroll bar
            is created, assigns it these values: Minimum scroll position0 Maximum
            scroll position100 Line Increment1 Page Increment10 If the scroll bar's current
            position is outside the new range, its position changes to one within the new range.
            The range of a scroll bar is -32,767 to 32,767.
            </summary>
            <param name="nMin"></param>
            <param name="nMax"></param>
            <param name="nLine"></param>
            <param name="nPage"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalVerticalScrollBar.Value">
            <summary>
            Returns/Sets the position of the scroll bar.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalVerticalScrollBar.Maximum">
            <summary>
            Gets or sets the upper limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalVerticalScrollBar.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalVerticalScrollBar.Label">
            <summary>
            Returns/Sets the label associated with this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalVerticalScrollBar.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalDialogBox">
            <summary>
            Summary description for SalDialogBox.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalForm">
            <summary>
            Base class for Sal forms.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalForm._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalForm.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.#ctor">
            <summary>
            Constructs a SalForm object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Window procedure dispatcher.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.UpdateChildZOrder(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            #BugFix for .NET WinForms
            Replacement for Control.UpdateChildZOrder(). Looks like Microsoft forgot to add the 0x10 (SWP_NOACTIVATE) flag
            when bringing the form on top using SetWindowPos in Control.OnWmCreate()->UpdateChildZOrder(), causing WM_ACTIVATE to
            be generated while processing WM_CREATE.
            </summary>
            <param name="parent"></param>
            <param name="ctl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.WmMouseWheel(System.Windows.Forms.Message@)">
            <summary>
            Redirects WM_MOUSEWHEEL to the child ClientArea control, when present.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.WmSetFocus(System.Windows.Forms.Message@)">
            <summary>
            Set the focus to the first child control when the embedded form
            is focused. WinForms implementation doesn't do this.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.DefWndProc(System.Windows.Forms.Message@)">
            <summary>
            Override the default window procedure to be able to create
            hidden mdi child forms. For some unknown reason the .NET framwork
            forces MDI children to be visible.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.Show(System.Windows.Forms.Control)">
            <summary>
            Shows the form.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ShowAsChild(System.Windows.Forms.Control,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Shows the form as child control.
            </summary>
            <param name="parent"></param>
            <param name="rect"></param>
            <param name="border"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ShowAsChild(System.Windows.Forms.Control,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Shows the form as child control.
            </summary>
            <param name="parent"></param>
            <param name="rect"></param>
            <param name="border"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ShowDialog(System.Windows.Forms.Control)">
            <summary>
            Shows the modal dialog.
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetOwner(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Returns the owner control to be used for creating the form or the dialog.
            Applies CTD's strange rules:
            
            	- if the parent is a form, the owner is the form
            	- if the parent is a mdi child form, the owner is the mdi parent
            	- if the parent is a child form, the owner is the top level control
            	- if the parent is a child control, the owner is the top level control
            	
            	Additionally, if ultimately the rules above result in null, the owner
            	is reverted to the specified parent. This is not CTD behavior, but it's
            	needed for apps that use embedded forms as owners of dialogs/forms.
            </summary>
            <param name="parent"></param>
            <param name="forDialogBox"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetVisibleCore(System.Boolean)">
            <summary>
            Overrides the default behavior to avoid the re-creation
            of the underlying window handle when the form is an MDI child.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.CreateForm">
            <summary>
            Creates the handle for the form and all the child controls.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.CreateControls(System.Windows.Forms.Control)">
            <summary>
            Ensures that all child controls, including childred of children, are
            created even if they are not visible.
            </summary>
            <param name="controls"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.CreateHandleInternal">
            <summary>
            Creates the handle for the form. MDI child forms are treated
            differentely to be able to create them hidden.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SendSamCreate">
            <summary>
            Sends SAM_Create to the form and to all child controls.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SendSamCreateComplete">
            <summary>
            Sends SAM_CreateComplete to all child TableWindow controls and to the form.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ShowInternal(System.Boolean)">
            <summary>
            Shows/Hides the form using either the SDK for mdi child forms or the framework
            for regular forms.
            </summary>
            <param name="show"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.FreezeMdiClient(System.Boolean)">
            <summary>
            Disables/Enables drawing in the mdi client.
            see: http://support.microsoft.com/default.aspx?scid=kb;en-us;70080
            </summary>
            <param name="freeze"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.Select(System.Boolean,System.Boolean)">
            <summary>
            Selects the next control in the tab order.
            </summary>
            <param name="directed"></param>
            <param name="forward"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.CreateTableWindow(System.Type)">
            <summary>
            Creates an instance of the inner child table window.
            </summary>
            <param name="tableType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetControls">
            <summary>
            Returns all the child controls at all level orderd by Tabindex.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.LoadControls(System.Windows.Forms.Control,System.Collections.IList)">
            <summary>
            Iterates all the controls and their children and loads them into
            the target list in TabIndex order.
            </summary>
            <param name="controls"></param>
            <param name="list"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.LoadLabelsAndGroups(System.Windows.Forms.Control)">
            <summary>
            Binds labels to controls and defines the 
            groups of radio/option buttons.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.LoadLabels(System.Collections.ICollection)">
            <summary>
            Fills the map containing the association of controls
            and their label.
            </summary>
            <param name="controls"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.DefineRadioGroups(System.Collections.ICollection)">
            <summary>
            Groups the radio buttons together with the group index
            and checks the first radio button of each group.
            
            Radio buttons are separated in groups whenever a non-radio
            control is found following a radio button.
            </summary>
            <param name="controls"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.FindAcceleratorButton(System.Windows.Forms.Keys)">
            <summary>
            Returns the last valid button registered with the specified accelerator key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ScaleCore(System.Single,System.Single)">
            <summary>
            Disables .NET 1.1 scaling.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.InitializeAutoScaling">
            <summary>
            Saves the initial scale size.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.PerformFontAutoScaling">
            <summary>
            Scales the form and all the child controls using the 
            TD compatible algorithm.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.Scale(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Scales the form and all child controls.
            </summary>
            <param name="oldScale"></param>
            <param name="newScale"></param>
            <param name="scaleMode"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.InstallTypeDescriptorFilter">
            <summary>
            Installs our custom properties filter. It's used to modify the property
            descriptors for all the components being desing on a PPJ form in order to
            correctly reproduce the inheritance of properties.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetState(PPJ.Runtime.Windows.SalFormState)">
            <summary>
            Returns the requested state.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetState(PPJ.Runtime.Windows.SalFormState,System.Boolean)">
            <summary>
            Sets the specified state.
            </summary>
            <param name="state"></param>
            <param name="flag"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.BeginUpdate">
            <summary>
            Freezes screen updates to the form.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.EndUpdate">
            <summary>
            Enables screen updates to the form.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ValidateDeactivatedFormAsync">
            <summary>
            Performs the deferred validation of the deactivated form.
            It must be executed asynchronously otherwise we cannot reactivate the form
            if the validation fails.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.FindControlToValidate(System.Windows.Forms.Form)">
            <summary>
            Returns the control that may need to be validated.
            When the active control is a table window, returns the 
            active column control.
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Process command keys.
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Processes dialog keys.
            This override takes care of:
            	- converting Enter to Tab
            	- selecting radio buttons in the same group index on arrows
            	- processing default button, hidden or in child forms
            	- processing accelerators
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ProcessArrowKey(System.Windows.Forms.Keys)">
            <summary>
            Processes the arrow keys to move the focus to the next control
            in a group.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ProcessAccelerators(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Executes the accelerator associated with the specified key.
            </summary>
            <param name="msg"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SendSamHelp">
            <summary>
            Sends SAM_Help to the target form.
            If the target is an MdiParent, send SAM_Help to the active MdiChild.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ProcessTabKey(System.Boolean)">
            <summary>
            Selects the next control in the tab order.
            </summary>
            <param name="forward"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.HandleTabKeyWithToolBar(System.Boolean)">
            <summary>
            we process the tab key navigation when the form has a SalFormToolBar control to
            enforce tabbing within the form and within the toolbar without setting in/out the toolbar
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.InvokeSelect(System.Windows.Forms.Control,System.Boolean,System.Boolean)">
            <summary>
            Need to call protecetd Select(true, forward) to activate controls hosted inside
            UserControl.
            </summary>
            <param name="ctrl"></param>
            <param name="directed"></param>
            <param name="forward"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.FindAcceptButton(System.Windows.Forms.Control)">
            <summary>
            Finds the default button in the specified form or nested forms.
            First checks if the form or child forms have an active control that is a button, second
            looks for the AcceptButton in the form and child embedded forms.
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.FindAcceptButton(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Finds the default button in the specified form or nested forms.
            </summary>
            <param name="parent"></param>
            <param name="active"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.OnFontChanged(System.EventArgs)">
            <summary>
            Resets the scaling factor when the font changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Fires the internal PaintBackground event.
            This allows the handler component to take over the background painting
            of the form. This is primarily used to allow the SalQuickTabs control
            to paint transparent backgrounds.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.OnWmLButtonDown(System.Windows.Forms.Message@)">
            <summary>
            Processes WM_LBUTTONDOWN to enable automatic drag-drop mode.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.PPJ#Runtime#Windows#ISalForm#GetState(PPJ.Runtime.Windows.SalFormState)">
            <summary>
            Returns the requested state.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.PPJ#Runtime#Windows#ISalForm#SetState(PPJ.Runtime.Windows.SalFormState,System.Boolean)">
            <summary>
            Sets the specified state.
            </summary>
            <param name="state"></param>
            <param name="flag"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.PPJ#Runtime#Windows#ISalForm#GetLabel(System.Windows.Forms.Control)">
            <summary>
            Returns the label associated with the specified control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.PPJ#Runtime#Windows#ISalForm#SetLabel(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Assigned the label to the specified control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.PPJ#Runtime#Windows#ISalForm#RegisterAccelerator(System.Windows.Forms.Button,System.Windows.Forms.Keys)">
            <summary>
            Registers the accelerator key for the pushbutton control.
            </summary>
            <param name="ctrl"></param>
            <param name="key"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.PPJ#Runtime#Windows#ISalForm#RemoveAccelerator(System.Windows.Forms.Button)">
            <summary>
            Uunregisters the accelerator key for the pushbutton control.
            </summary>
            <param name="ctrl"></param>
            <param name="key"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.DrawMenuBar">
            <summary>
            Redraws the menu bar for a given form window or top-level table window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.EndDialog(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys a modal dialog box and returns control to the caller of SalModalDialog.
            </summary>
            <param name="nReturn"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetDefaultButton">
            <summary>
            Returns the handle of the default push button on a form window or dialog box. The
            default push button is the one that has the focus by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ShowToolBar(PPJ.Runtime.SalBoolean)">
            <summary>
            Shows or hides the tool bar on a top-level or MDI window.
            </summary>
            <param name="bShow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetStatusBarText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Gets the text displayed in the status bar of a top-level or MDI window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetStatusBarText(PPJ.Runtime.SalNumber)">
            <summary>
            Gets the text displayed in the status bar of a top-level or MDI window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetStatusBarText(PPJ.Runtime.SalString)">
            <summary>
            Displays specified text in the status bar of a top-level or MDI window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ShowStatusBar(PPJ.Runtime.SalBoolean)">
            <summary>
            Shows or hides the status bar on a top-level or MDI window.
            </summary>
            <param name="bShow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.FireWindowActionsToChildren(System.Int32,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the children's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ConvertMenuToContextMenuStripInternal(System.Windows.Forms.ContextMenu,System.Windows.Forms.Control,System.Type)">
            <summary>
            Called just before the ContextMenu is about to be shown, making it possible to convert the ContextMenu
            into a ContextMenuStrip instead.
            </summary>
            <param name="contextMenu"></param>
            <param name="owner"></param>
            <param name="menuType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.ConvertMenuToContextMenuStrip(System.Windows.Forms.ContextMenu,System.Windows.Forms.Control,System.Type)">
            <summary>
            Called just before the ContextMenu is about to be shown, making it possible to convert the ContextMenu
            into a ContextMenuStrip instead.
            </summary>
            <param name="contextMenu"></param>
            <param name="owner"></param>
            <param name="menuType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.TraceControls">
            <summary>
            Writes trace information of form controls
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalForm.AutoScaleBaseDpi">
            <summary>
            Returns/Sets the DPI used to design this form.
            This is the base DPI scale and it will be used to scale the form.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalForm.CreateParams">
            <summary>
            Overrides the CreateParams property to ensure that the
            correct Windows style is used when the form is a child form
            and the border is the FixedSingle border.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalForm.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalForm.IconName">
            <summary>
            Icon name. The image is loaded from the embedded resources.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalForm.CultureInfo">
            <summary>
            Returns/Sets the culture to use for this form.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalForm.ShouldSerializeCultureInfo">
            <summary>
            Prevents the designer from serializing inherited CultureInfo.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalForm.PPJ#Runtime#Windows#ISalForm#ReturnValue">
            <summary>
            Dialog return value
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalForm.PPJ#Runtime#Windows#ISalForm#SavedOwner">
            <summary>
            Returns the owner saved while disposing the form.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalForm.UseIFSThemeing">
            <summary>
            Gets or sets a value indication whether this window and it's child controls
            should be themed and custom painted or not.
            Note: Themeing of child controls is not controlled by this class, it simply provides information
            that child controls are expected to use in determining whether to theme themselves or not.
            </summary>
            <value>
            True if this form (and its child controls) are themed, false otherwise.
            </value>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalForm.DesignTimeClientRectangle">
            <summary>
            Gets the designtime client rectrangle
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalForm.MdiFreezer">
            <summary>
            Implementation of the MDI freeze technique used to create hidden MdiChild forms without
            filckering, see: http://support.microsoft.com/default.aspx?scid=kb;en-us;70080
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.MdiFreezer.#ctor(System.Windows.Forms.MdiClient)">
            <summary>
            Creates a new instance of the MdiFreezer class.
            This class freezes the MdiClient area of the Mdi form in order to
            create hidden mdi child forms.
            </summary>
            <param name="mdiClient"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.MdiFreezer.Dispose">
            <summary>
            Disposes the MdiFreezer instance.
            Restores the WindowState of the active MdiChild and enables drawing
            in the MdiParent form.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.MdiFreezer.AddRef(System.Windows.Forms.Form)">
            <summary>
            Creates or retrieves the instance of MdiFreezer that is associated
            with the MdiClient for the specified MdiParent form.
            </summary>
            <param name="mdiParent"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalForm.MdiFreezer.Release(System.Windows.Forms.Form)">
            <summary>
            Decreases the reference counter for the instance of MdiFreezer
            associated with the MdiClient for the specified MdiParent form.
            When the count reaches zero, the MdiFreezer is disposed and drawing
            in the MdiParent form is restored.
            </summary>
            <param name="mdiParent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDialogBox.#ctor">
            <summary>
            Constructs a new SalDialogBox object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalDialogBox.ShouldSerializeIcon">
            <summary>
            Controls the serialization of the image stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalDialogBox.Icon">
            <summary>
            Overrides the default Image property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalFormState">
            <summary>
            Internal form states. Used to syncronize form creation.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalFormClientArea">
            <summary>
            Replicates SAL form's client area when accessories are enabled.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalFormClientArea.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalFormClientArea.sendingWMSize">
            <summary>
            This flag is added as a quick and very ugly solution to the problem that multiple WM_Size
            messages are sent to a form window with enabled accessories.
            The member is used by the ApplicationForms.cResize class and can be removed
            once the resize logic is replaced with standard anchoring.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormClientArea.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the parent form.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormClientArea.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Fires the internal PaintBackground event.
            This allows the handler component to take over the background painting
            of the form. This is primarily used to allow the SalQuickTabs control
            to paint transparent backgrounds.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormClientArea.OnWmLButtonDown(System.Windows.Forms.Message@)">
            <summary>
            Processes WM_LBUTTONDOWN to enable automatic drag-drop mode.
            </summary>
            <param name="m"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormClientArea.RightToLeftLayout">
            <summary>
            Returns true when we need to inherit RightToLeftLayout.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormClientArea.Create">
            <summary>
            Determines whether the accessory control will be created at runtime.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalFormStatusBar">
            <summary>
            Status bar for all top level forms.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormStatusBar.Text">
            <summary>
            Status text.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormStatusBar.ShowKeyboardStatus">
            <summary>
            Enables or disables the display of the default keyboard panels on the status bar (NUM|CAPS|SCRL).
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormStatusBar.ShowStatusText">
            <summary>
            Enables or disables the display of the default status text panel.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormStatusBar.Create">
            <summary>
            Determines whether the accessory control will be created at runtime.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalFormTableWindow">
            <summary>
            Top level table window implementation.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalFormTableWindow.tableWindow">
            <summary>
            Wrapped table window control that takes the entire
            client area.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.#ctor">
            <summary>
            Constructs a SalFormWindow object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.GetMergedRange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Overrides GetMergedRange to allow the SalTableWindow class to override the method.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="clip"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Window procedure dispatcher, overloaded to restore the 
            inner table window as the active control.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.ShouldSerializeIcon">
            <summary>
            Controls the serialization of the image stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.AnyRows(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Determines whether any rows in the specified table window match certain flags.
            </summary>
            <param name="nFlagsOn"></param>
            <param name="nFlagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.ClearSelection">
            <summary>
            Deselects all rows of a table window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.ColumnAverage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Computes the average of all column values or only specified column values in a table
            window.
            </summary>
            <param name="nColumnID"></param>
            <param name="nFlagsOn"></param>
            <param name="nFlagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.ColumnSum(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Computes the sum of all column values or only specified column values in a table
            window.
            </summary>
            <param name="nColumnID"></param>
            <param name="nFlagsOn"></param>
            <param name="nFlagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.CopyRows(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Copies the contents of the specified table window rows to the Clipboard in text format.
            </summary>
            <param name="nFlagsOn"></param>
            <param name="nFlagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.CreateColumn(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Creates a table window column of string data type at runtime.
            </summary>
            <param name="table"></param>
            <param name="nColumnPos"></param>
            <param name="nDispWidth"></param>
            <param name="nMaxChars"></param>
            <param name="sTitle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.CreateColumnEx(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a table window column using a given data type at runtime.
            Allowed types are DT_String, DT_Number and DT_DateTime
            </summary>
            <param name="table"></param>
            <param name="nColumnPos"></param>
            <param name="nDispWidth"></param>
            <param name="sTitle"></param>
            <param name="nMaxChars"></param>
            <param name="nDatatype"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.DefineRowHeader(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Defines the appearance and behavior of a table window's row header.
            </summary>
            <param name="sTitle"></param>
            <param name="nWidth"></param>
            <param name="nFlags"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.DefineSplitWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Splits a table window horizontally.
            </summary>
            <param name="nRowsLowerHalf"></param>
            <param name="bDragAdjust"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.QuerySplitWindow(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalBoolean@)">
            <summary>
            Specifies how a table window is split horizontally.
            </summary>
            <param name="nRowsLowerHalf"></param>
            <param name="bDragAdjust"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.DeleteRow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Deletes a row from a table window but not from the database.
            </summary>
            <param name="nRow"></param>
            <param name="nFlag"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.DeleteSelected(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Applies a SQL DELETE statement to all table window rows with the ROW Selected flag.
            </summary>
            <param name="hSql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.DeleteSelected(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL DELETE statement to all table window rows with the ROW Selected flag.
            </summary>
            <param name="hSql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.DestroyColumns">
            <summary>
            Destroys all automatic columns created by SalTblCreateColumn or SalTblPopulate at
            runtime. This function only works on table windows that contain only automatic
            columns.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.DoDeletes(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Applies a SQL DELETE statement to all table window rows that have nFlagsOn flags.
            </summary>
            <param name="hSql"></param>
            <param name="nFlagsOn"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.DoDeletes(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL DELETE statement to all table window rows that have nFlagsOn flags.
            </summary>
            <param name="hSql"></param>
            <param name="nFlagsOn"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.DoInserts(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean)">
            <summary>
            Applies a SQL INSERT statement to all the rows in a table window that have the ROW New flag.
            </summary>
            <param name="hSql"></param>
            <param name="bClearFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.DoInserts(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL INSERT statement to all the rows in a table window that have the ROW New flag.
            </summary>
            <param name="hSql"></param>
            <param name="bClearFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.DoUpdates(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean)">
            <summary>
            Applies a SQL UPDATE statement to all table window rows with the Row Edited flag.
            </summary>
            <param name="hSql"></param>
            <param name="bClearFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.DoUpdates(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL UPDATE statement to all table window rows with the Row Edited flag.
            </summary>
            <param name="hSql"></param>
            <param name="bClearFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.FetchRow(PPJ.Runtime.SalNumber)">
            <summary>
            Sends a SAM_FetchRow message to a table window if the row you specify is not currently
            in the table window cache.
            </summary>
            <param name="nRow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.FindNextRow(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Scans forward in a table looking for a row whose flags match those specified.
            </summary>
            <param name="nRow"></param>
            <param name="nFlagsOn"></param>
            <param name="nFlagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.FindPrevRow(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Scans backward in a table looking for a row whose flags match those specified.
            </summary>
            <param name="nRow"></param>
            <param name="nFlagsOn"></param>
            <param name="nFlagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.GetColumnText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Gets data from a column of a table window's context row.
            </summary>
            <param name="nColumnID"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.GetColumnText(PPJ.Runtime.SalNumber)">
            <summary>
            Gets data from a column of a table window's context row.
            </summary>
            <param name="nColumnID"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.GetColumnWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Gets the handle of a table window column.
            </summary>
            <param name="nCol"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.InsertRow(PPJ.Runtime.SalNumber)">
            <summary>
            Inserts a new blank row into a table window.
            </summary>
            <param name="nRow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.KillCellEdit">
            <summary>
            Takes a row out of edit mode and selects the row. This causes the row to receive
            both SAM_Validate and SAM_KillFocus messages.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.SalFormTableWindow.KillFocusRow" -->
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.HitTest(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalWindowHandle@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the part of the table window located at a given coordinate.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <param name="nRow"></param>
            <param name="hWndCol"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.PasteRows">
            <summary>
            Pastes the contents of the Clipboard to the specified table window. Assumes
            the Clipboard data is in text format with cells delimited by tab characters and
            rows delimited by end-of-line characters. Inserts the new rows into the
            table window without overwriting existing rows, and converts the data to the
            data types of the corresponding table window columns.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.Populate(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Compiles, binds, and executes a SQL SELECT statement, then fetches the rows of the
            result set and populates a table window with them.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <param name="nMethod"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.Populate(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Compiles, binds, and executes a SQL SELECT statement, then fetches the rows of the
            result set and populates a table window with them.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <param name="nMethod"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.Populate(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString)">
            <summary>
            Compiles, binds, and executes a SQL SELECT statement, then fetches the rows of the
            result set and populates a table window with them.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <param name="nMethod"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.Populate(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Compiles, binds, and executes a SQL SELECT statement, then fetches the rows of the
            result set and populates a table window with them.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <param name="nMethod"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.GetContextRow">
            <summary>
            Returns a table window's current context row. Before sending a SAM_FetchRow message,
            automatically sets the context row so that assignments made while processing
            the message reference the correct row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.QueryFocusCell(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalWindowHandle@)">
            <summary>
            Identifies the cell in a table window with the focus.
            </summary>
            <param name="nRow"></param>
            <param name="hWndCol"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.GetLinesPerRow(PPJ.Runtime.SalNumber@)">
            <summary>
            Retrieves the height of a row in lines.
            </summary>
            <param name="nLines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.GetLinesPerRow">
            <summary>
            Retrieves the height of a row in lines.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.GetLockedColumns">
            <summary>
            Retrieves the number of locked table window columns.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.GetRowFlags(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Queries a row's flags.
            </summary>
            <param name="nRow"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.QueryRowHeader(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalWindowHandle@)">
            <summary>
            Gets a table window's row header definition.
            </summary>
            <param name="sTitle"></param>
            <param name="nMaxTitle"></param>
            <param name="nWidth"></param>
            <param name="nFlags"></param>
            <param name="hWndCol"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.QueryScroll(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a table window's current scroll position and range. The scroll position is
            the row number of the row that is currently at the top of the window. You set
            the table window range with SalTblSetRange and changes it when you insert
            or delete rows from the table window.
            </summary>
            <param name="nPosition"></param>
            <param name="nMinRange"></param>
            <param name="nMaxRange"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.GetTableFlags(PPJ.Runtime.SalNumber)">
            <summary>
            Tests the state of a table window's flags.
            </summary>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.QueryVisibleRange(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the current range of visible rows in a table window.
            </summary>
            <param name="nMinRange"></param>
            <param name="nMaxRange"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.ResetTable">
            <summary>
            Clears a table window by discarding all rows from the table window cache and setting
            the table range to 0, -1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.ScrollRow(PPJ.Runtime.SalNumber,System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Scrolls a table window to the specified row and column.
            </summary>
            <param name="nRow"></param>
            <param name="column"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.ScrollRow(PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Scrolls a table window to the specified row and column.
            </summary>
            <param name="nRow"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.SetColumnText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Assigns data to a column of a table window's context row.
            </summary>
            <param name="nColumnID"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.SetContextRow(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a table window's context row. Setting the context row does not send a SAM_FetchRow
            message. If the row is not currently in memory, creates a new row
            in memory and sets its cell values to null.
            </summary>
            <param name="nRow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.SetFlagsAnyRows(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets or clears row flags.
            </summary>
            <param name="nFlags"></param>
            <param name="bSet"></param>
            <param name="nFlagsOn"></param>
            <param name="nFlagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.SetFocusCell(PPJ.Runtime.SalNumber,System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the focus to the specified table window cell (row and column). Puts
            the table window into edit mode and lets the user select a portion of the data in
            the cell.
            </summary>
            <param name="nRow"></param>
            <param name="column"></param>
            <param name="nEditMin"></param>
            <param name="nEditMax"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.SetFocusRow(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a table window's focus frame row.
            </summary>
            <param name="nRow"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.SetLinesPerRow(PPJ.Runtime.SalNumber)">
            <summary>
            Sets the height of a row in lines.
            </summary>
            <param name="nLines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.SetLockedColumns(PPJ.Runtime.SalNumber)">
            <summary>
            Sets the number of locked table window columns.
            </summary>
            <param name="nLockedColumns"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.SetRange(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Defines the minimum and maximum rows (range) of a table.
            </summary>
            <param name="nMin"></param>
            <param name="nMax"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.SetRow(PPJ.Runtime.SalNumber)">
            <summary>
            Sets the focus to the first, last, next, or previous row in a table window.
            </summary>
            <param name="nRowPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.SetRowFlags(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears a table window row's flags.
            </summary>
            <param name="nRow"></param>
            <param name="nFlags"></param>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.SetTableFlags(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears a table window's flags.
            </summary>
            <param name="nFlags"></param>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormTableWindow.SortRows(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sorts the rows of a table window based on the values in one of the
            table window's columns.
            </summary>
            <param name="nColumnID"></param>
            <param name="nOrder"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.Item(System.Int32)">
            <summary>
            Returns the table column object with the specified column ID.
            The ID is 1-based.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.Item(System.String)">
            <summary>
            Returns the table column object with the specified name.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.LinesPerRow">
            <summary>
            Number of lines per row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.AllowRowSizing">
            <summary>
            Allow row sizing.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.Columns">
            <summary>
            Returns the collection of columns.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.ReadOnly">
            <summary>
            Returns/Sets the ReadOnly flag. When the ReadOnly flag is true
            the entire TableWindow control cannot be edited. However, the Mouse, scrolling and
            the Keyboard are still active.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.AllowSorting">
            <summary>
            Enables/Disables automatic sorting on table columns.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.ShowCursor">
            <summary>
            Enables/Disables the arrow icon on the current row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.ShowFocusRow">
            <summary>
            Enables/Disables the focus frame around the current row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.FocusRowStyle">
            <summary>
            Enables/Disables the focus frame around the current row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.ExtendLastColumn">
            <summary>
            Enables/Disables the extension of the last column to fill the grid.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.Trimming">
            <summary>
            Defines how to trim the content that doesn't fit the width of the cell.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.UseVisualStyles">
            <summary>
            Enables/Disabled drawing of columns and rows headers using the 
            current visual style theme renderer.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.ShowCellLabels">
            <summary>
            Gets or sets whether the grid should display labels over cells whose contents are partially hidden.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.AllowAutoEditing">
            <summary>
            Enables/Disables AutoEditing mode. When this mode is on, the grid 
            automatically enters edit mode when a cell is selected.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.RowSizingStyle">
            <summary>
            Keeps all rows of the same height.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.AllowFiltering">
            <summary>
            Enables/Disables the excel-style filtering feature.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.Icon">
            <summary>
            Overrides the default Image property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormTableWindow.TableWindow">
            <summary>
            Returns the internal table window control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalFormToolBar">
            <summary>
            Replicates Team Developer's fixed toolbar.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalFormToolBar.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormToolBar.Appearance">
            <summary>
            Returns/Sets a value that determines the appearance of the toolbar.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormToolBar.UseVisualStyleBackColor">
            <summary>
            Returns/Sets a value that determines if the toolbar paints the background using
            visual styles, if supported.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormToolBar.Create">
            <summary>
            Determines whether the accessory control will be created at runtime.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalFormWindow">
            <summary>
            Top level form window implementation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormWindow.ShouldSerializeIcon">
            <summary>
            Controls the serialization of the image stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalFormWindow.Icon">
            <summary>
            Overrides the default Image property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalMDIWindow">
            <summary>
            Top level MDI window implementation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMDIWindow.#ctor">
            <summary>
            Constructs a SalMDIWindow object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMDIWindow.OnMdiCreateAutomaticForms">
            <summary>
            Automatic MDI child forms are created in the implementation
            of this method in the application.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMDIWindow.ShouldSerializeIcon">
            <summary>
            Controls the serialization of the image stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMDIWindow.CreateForm">
            <summary>
            Overrides sending of SAM_Create to create the automatic child forms.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMDIWindow.MDIArrangeIcons">
            <summary>
            Arranges minimized child window icons in an MDI window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMDIWindow.MDICascade">
            <summary>
            Cascades all non-iconized child windows of an MDI window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMDIWindow.MDITile(PPJ.Runtime.SalBoolean)">
            <summary>
            Tiles all non-iconized child windows of an MDI window. Windows that are not sizable
            will not be tiled.
            </summary>
            <param name="bPosition"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMDIWindow.Icon">
            <summary>
            Overrides the default Image property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMDIWindow.TabbedMdi">
            <summary>
            The tabbed Mdi manager component.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.AccessoryType">
            <summary>
            Indicates the type of accessory.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.ISalMenu">
            <summary>
            All Sal menu types implement this interface.
            It is used to let the framework query for common properties like the StatusText.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.ISalMenu.Update">
            <summary>
            Updates the menu item and all subitems recursively.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.ISalMenu.Owner">
            <summary>
            Gets/Sets the form that owns the menu item. That is the context form.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalContextMenu">
            <summary>
            Implementation of contextual menu.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalContextMenu.#ctor(System.Windows.Forms.MenuItem)">
            <summary>
            Create a new SalContextMenu and initialize it with all the menu items in the
            specified menu object.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalContextMenu.UpdateItems">
            <summary>
            Updates all child menu items.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalFormMainMenu">
            <summary>
            Same as MainMenu. It's declared simply for naming consistency.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormMainMenu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Process shortcut keys here because .NET is not capable or
            handling duplicated shortcuts on disabled menu items.
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalFormMainMenu.FindMenuItem(System.Windows.Forms.Menu.MenuItemCollection,System.Windows.Forms.Shortcut)">
            <summary>
            Finds the first enabled MenuItem with the specified shortcut.
            </summary>
            <param name="items"></param>
            <param name="shortcut"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalMenuColumn">
            <summary>
            SalMenuColumn.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalMenuRow">
            <summary>
            SalMenuRow.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalMenuItem">
            <summary>
            Implementation of SalMenuItem.
            Extends the default MenuItem in .NET to support
            SAL menu events and to support fonts and images.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMenuItem.#ctor">
            <summary>
            Constructs a new SalMenuItem.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMenuItem.Dispose(System.Boolean)">
            <summary>
            Release resources associated with this menu item.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMenuItem.MergeMenu">
            <summary>
            Overrides the MergeMenu method to duplicate event handlers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMenuItem.CloneMenu">
            <summary>
            Overrides the CloneMenu method to duplicate event handlers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalMenuItem.ShouldSerializeImage">
            <summary>
            Controls the serialization of the image stream.
            </summary>
            <returns></returns>
        </member>
        <member name="E:PPJ.Runtime.Windows.SalMenuItem.MenuActions">
            <summary>
            MenuActions event.
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.SalMenuItem.EnabledWhen">
            <summary>
            EnabledWhen event.
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.SalMenuItem.CheckedWhen">
            <summary>
            CheckedWhen event.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMenuItem.MenuID">
            <summary>
            Returns the internal menu ID assigned to the menu item.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMenuItem.Font">
            <summary>
            Returns/Sets the font for the menu item.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMenuItem.ImageNormal">
            <summary>
            Returns/Sets the image to paint next to menu items.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMenuItem.Image">
            <summary>
            Returns/Sets the image to paint next to menu items.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMenuItem.ImageSelected">
            <summary>
            Returns/Sets the image to paint next to selected menu items.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMenuItem.StatusText">
            <summary>
            The status text to display in the status bar when the menu item is selected.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalMenuItem.ImageName">
            <summary>
            Image name. Name of the image to load from the embedded resources.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalMenuActionsHandler">
            <summary>
            Delegate handler for the MenuActions event raised by
            SAL menu items.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalMenuEnabledWhenHandler">
            <summary>
            Delegate handler for the MenuEnabledWhen event raised by
            SAL menu items.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalMenuCheckedWhenHandler">
            <summary>
            Delegate handler for the MenuCheckedWhen event raised by
            SAL menu items.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalMenuSeparator">
            <summary>
            Summary description for SalMenuSeparator.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalPopupMenu">
            <summary>
            Implementation for Popup menu items.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPopupMenu.#ctor">
            <summary>
            Constructs a new SalPopupMenu.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPopupMenu.OnInitializeMenu">
            <summary>
            NamedMenu initialization.
            This must NOT be called when the menu is constructed
            using the Activator by the framework.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPopupMenu.Dispose(System.Boolean)">
            <summary>
            Release resources associated with this menu item.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPopupMenu.ShouldInitialize">
            <summary>
            Prevents the NameMenu class from re-creating all the child menu items
            when the menu is being merged, otherwise we get duplicate menu items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPopupMenu.MergeMenu">
            <summary>
            Overrides the MergeMenu method to duplicate event handlers
            and to disable the default initializer in named menu classes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalPopupMenu.CloneMenu">
            <summary>
            Overrides the CloneMenu method to duplicate event handlers
            and to disable the default initializer in named menu classes.
            </summary>
            <returns></returns>
        </member>
        <member name="E:PPJ.Runtime.Windows.SalPopupMenu.EnabledWhen">
            <summary>
            EnabledWhen event.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPopupMenu.IsParent">
            <summary>
            Force the popup menu to be a popup menu.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalPopupMenu.StatusText">
            <summary>
            The status text to display in the status bar when the menu item is selected.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalWindowsMenu">
            <summary>
            Implemenation of Windows Menu
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindowsMenu.#ctor">
            <summary>
            Constructs the SalWindowsMenu.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindowsMenu.OnInitializeMenu">
            <summary>
            NamedMenu initialization.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindowsMenu.Dispose(System.Boolean)">
            <summary>
            Release resources associated with this menu item.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindowsMenu.CallOnInitializeMenu">
            <summary>
            Invokes the OnInitializeMenu virtual method.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindowsMenu.ShouldInitialize">
            <summary>
            Prevents the MdiList menu from getting re-initialized when it is created
            when merging or when being shows, otherwise we get duplicate entries and
            recursed window items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindowsMenu.MergeMenu">
            <summary>
            Overrides the MergeMenu method to duplicate event handlers
            and to disable the default initializer in named menu classes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindowsMenu.CloneMenu">
            <summary>
            Overrides the CloneMenu method to duplicate event handlers
            and to disable the default initializer in named menu classes.
            </summary>
            <returns></returns>
        </member>
        <member name="E:PPJ.Runtime.Windows.SalWindowsMenu.EnabledWhen">
            <summary>
            EnabledWhen event.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindowsMenu.StatusText">
            <summary>
            The status text to display in the status bar when the menu item is selected.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.PrintForm">
            <summary>
            Encapsulates the form printing functionality.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.#ctor(System.Windows.Forms.Form)">
            <summary>
            Creates a PrintForm object initialized with the specified Form.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.Preview">
            <summary>
            Prints the entire specified form to a preview form.
            </summary>
            <param name="frm">
            The Form that will be printed.
            </param>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.Print">
            <summary>
            Prints the entire specified form to the current printer.
            </summary>
            <param name="frm">
            The Form that will be printed.
            </param>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.GeneratePrintingOffsets(System.Drawing.Rectangle)">
            <summary>
            Calculates pagination based on the contents of the form for the specified margins.
            </summary>
            <remarks>
            Each point represents the upper-left corner to where the printing rectangle
            will be set
            </remarks>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawForm(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
            Draws the Form on the specified Graphics object at the specified offset.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawControls(System.Windows.Forms.Control,System.Boolean,System.Drawing.Point,System.Drawing.Graphics,System.Boolean)">
            <summary>
            Recursively draws the contents of the specified Form to the
            specified graphics object using the specified offset location.
            </summary>
            <param name="ctrl"></param>
            <param name="rightToLeftLayout"></param>
            <param name="offset"></param>
            <param name="g"></param>
            <param name="skipHidden"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.SendSAM_Print(System.Windows.Forms.Control,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Sends the SAM_Print message.
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawText(System.Windows.Forms.Control,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the text of the control
            </summary>
            <param name="c"></param>
            <param name="r"></param>
            <param name="g"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawImage(System.Windows.Forms.Control,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the image of the control
            </summary>
            <param name="c"></param>
            <param name="r"></param>
            <param name="g"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawRect(System.Windows.Forms.Control,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the rectangle of the control
            </summary>
            <param name="c"></param>
            <param name="r"></param>
            <param name="g"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawSalFrame(PPJ.Runtime.Windows.SalFrame,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws SalFrame control
            </summary>
            <param name="frm"></param>
            <param name="r"></param>
            <param name="g"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawSalLine(PPJ.Runtime.Windows.SalLine,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws SalLine control
            </summary>
            <param name="frm"></param>
            <param name="r"></param>
            <param name="g"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawGroupBox(System.Windows.Forms.GroupBox,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the specified GroupBox on the specified graphics object at the
            specified location.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawTextBox(System.Windows.Forms.TextBox,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the specified TextBox on the specified graphics object at the
            specified location.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawComboBox(System.Windows.Forms.ComboBox,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the specified ComboBox on the specified graphics object at the
            specified location.
            </summary>
            <param name="cbo"></param>
            <param name="r"></param>
            <param name="g"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawListBox(System.Windows.Forms.ListBox,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws a ListBox control.
            </summary>
            <param name="lbx"></param>
            <param name="r"></param>
            <param name="g"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawLabel(System.Windows.Forms.Label,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the specified Label on the specified graphics object at the
            specified location.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawButton(System.Windows.Forms.Button,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the specified Button on the specified graphics object at the
            specified location.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawCheckBox(System.Windows.Forms.CheckBox,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the specified CheckBox on the specified graphics object at the
            specified location.
            </summary>
            <remarks>
            The size of the CheckBox itself is hard-coded here and was determined by
            using a graphics program.
            </remarks>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawRadioButton(System.Windows.Forms.RadioButton,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the specified RadioButton on the specified graphics object at the
            specified location.
            </summary>
            <remarks>
            The size of the RadioButton itself is hard-coded here and was determined by
            using a graphics program.
            </remarks>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawVertScrollBar(System.Windows.Forms.Control,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the scrollbar control.
            </summary>
            <param name="x"></param>
            <param name="r"></param>
            <param name="g"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawHorizScrollBar(System.Windows.Forms.Control,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the scrollbar control.
            </summary>
            <param name="c"></param>
            <param name="r"></param>
            <param name="g"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawPictureBox(System.Windows.Forms.PictureBox,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws a picture control.
            </summary>
            <param name="pic"></param>
            <param name="r"></param>
            <param name="g"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawSalTableWindow(PPJ.Runtime.Windows.SalTableWindow,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws SalTableWindow control
            </summary>
            <param name="frm"></param>
            <param name="r"></param>
            <param name="g"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.PrintForm.DrawGrid(C1.Win.C1FlexGrid.C1FlexGrid,System.Drawing.Rectangle,System.Drawing.Graphics)">
            <summary>
            Draws the grid control.
            </summary>
            <param name="grid"></param>
            <param name="r"></param>
            <param name="g"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.PrintForm.ShowBorder">
            <summary>
            Returns/Sets the ShowBorder property. When true, the form is printed with a thin border.
            Otherwise the form is printed without a border.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Internet.FtpEventHandler">
            <summary>
            Ftp events delegate handler
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Internet.FtpEventArgs">
            <summary>
            FtpEvent arguments.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Internet.SalFtpClient">
            <summary>
            FTP implementation used to support SalQuickFtp.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="server"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="server"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="port"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.Connect">
            <summary>
            Connect and login to the remote server.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.Close">
            <summary>
            Close the FTP connection.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.GetFileList(System.String)">
            <summary>
            Return a string array containing the remote directory's file list.
            </summary>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.GetFileInfo(System.String)">
            <summary>
            Returns a FileSystemInfo array. 
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.GetFileSize(System.String)">
            <summary>
            Return the size of a file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.Download(System.String)">
            <summary>
            Download a file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.Download(System.String,System.Boolean)">
            <summary>
            Download a file.
            </summary>
            <param name="fileName"></param>
            <param name="resume"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.Download(System.String,System.String)">
            <summary>
            Download a file to a local file name.
            </summary>
            <param name="remFileName"></param>
            <param name="locFileName"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.Download(System.String,System.String,System.Boolean)">
            <summary>
            Download a file to a local file name.
            </summary>
            <param name="fileName"></param>
            <param name="localFileName"></param>
            <param name="resume"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.Upload(System.String)">
            <summary>
            Upload a file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.Upload(System.String,System.Boolean)">
            <summary>
            Upload a file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.Upload(System.String,System.String)">
            <summary>
            Upload a file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.Upload(System.String,System.String,System.Boolean)">
            <summary>
            Upload a file.
            </summary>
            <param name="fileName"></param>
            <param name="resume"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.DeleteFile(System.String)">
            <summary>
            Delete a file from the remote FTP server.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.RenameFile(System.String,System.String)">
            <summary>
            Rename a file on the remote FTP server.
            </summary>
            <param name="oldFileName"></param>
            <param name="newFileName"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.MakeDir(System.String)">
            <summary>
            Create a directory on the remote FTP server.
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.RemoveDir(System.String)">
            <summary>
            Delete a directory on the remote FTP server.
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.ChangeDir(System.String)">
            <summary>
            Change the current working directory on the remote FTP server.
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.GetCurDir">
            <summary>
            Returns the current directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.ReadResponse(System.Int32[])">
            <summary>
            Reads the next response code from the connected socket
            and validates against the specified codes.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.ReadResponse">
            <summary>
            Reads the next response code from the connected socket.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.SendCommand(System.String,System.Int32[])">
            <summary>
            
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.ConnectDataReader">
            <summary>
            Creates a new StreamReader bound to an incoming data socket.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.ConnectDataSocket">
            <summary>
            Open a new data socket.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.Cleanup">
            <summary>
            Close and release the socket.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.FireStatusUpdate(PPJ.Runtime.Internet.SalFtpClient.FtpStatus)">
            <summary>
            Generates the StatusUpdate event and returns the event args.
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Internet.SalFtpClient.Server">
            <summary>
            Name of the FTP server.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Internet.SalFtpClient.Port">
            <summary>
            Server port number. The default is 21.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Internet.SalFtpClient.User">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Internet.SalFtpClient.Password">
            <summary>
            User password.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Internet.SalFtpClient.BinaryMode">
            <summary>
            Returns/Sets binary mode transfer.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Internet.SalFtpClient.Connected">
            <summary>
            Returns true if the connection to the server is established.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.FtpResponse.#ctor">
            <summary>
            Cannot create an empty response
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.FtpResponse.#ctor(System.String)">
            <summary>
            Create a new response from a ftp message string
            </summary>
            <param name="message"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Internet.SalFtpClient.FtpFileInfo.#ctor(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Internet.SalFtpClient.FtpFileInfo.ParseWinNT(System.String)" -->
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.FtpFileInfo.ParseUnix(System.String)">
            <summary>
            Parses the file information using Unix format
             Unix:    "drwxr-xr-x    4 ftp      ftp          4096 Feb 21 11:06 pub"
            		  "drwxr-xr-x    4 ftp      ftp          4096 Feb 21  2005 pub"
            </summary>
            <param name="ftpLine"></param>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalFtpClient.FtpFileInfo.ParseUnixDate(System.String)">
            <summary>
            Parses the date/time info from the Unix formatted LIST result.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Internet.SalFtpClient.FtpFileInfo.Name">
            <summary>
            Returns the name of the file.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Internet.SalFtpClient.FtpFileInfo.Length">
            <summary>
            Returns the size of the file.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Internet.SalFtpClient.FtpFileInfo.DateModified">
            <summary>
            Returns the date the file was last modified.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Internet.SalFtpClient.FtpFileInfo.IsDirectory">
            <summary>
            Returns true if the file is a directory.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Internet.SalFtpClient.FtpException.ErrorCode">
            <summary>
            Returns the error code.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Internet.HttpEventHandler">
            <summary>
            Http events delegate handler
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Internet.HttpEventArgs">
            <summary>
            HttpEvent arguments.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Internet.SalHttpClient">
            <summary>
            HTTP implementation used to support SalQuickHTTP.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalHttpClient.GetPage(System.String)">
            <summary>
            Returns the HTML page from the url request.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalHttpClient.GetPageSize(System.String)">
            <summary>
            Returns the size of the HTML page from the url request.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Internet.SalHttpClient.FireStatusUpdate(PPJ.Runtime.Internet.SalHttpClient.HttpStatus)">
            <summary>
            Generates the StatusUpdate event and returns the event args.
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Internet.SalHttpClient.Agent">
            <summary>
            User agent.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Internet.SalHttpClient.Proxy">
            <summary>
            Proxy.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Internet.SalHttpClient.HttpException.ErrorCode">
            <summary>
            Returns the error code.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickFTP">
            <summary>
            FTP Control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Prevent the size from being changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.HandleFtpException(PPJ.Runtime.Internet.SalFtpClient.FtpException)">
            <summary>
            Logs the FtpException and returns the negative error code.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.EnumDirectories(PPJ.Runtime.SalString,PPJ.Runtime.SalArray{PPJ.Runtime.SalString})">
            <summary>
            Obtain an array of directory names based on a search path specified.
            </summary>
            <param name="sSearch"></param>
            <param name="sDirs"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.WriteFile(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Writes information to an open file on an FTP server.
            </summary>
            <param name="hFile"></param>
            <param name="sBuffer"></param>
            <param name="nBufferSize"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.OpenFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Opens a file on an FTP server.
            </summary>
            <param name="sRemoteFile"></param>
            <param name="nFlags"></param>
            <param name="bFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.CloseFile(PPJ.Runtime.SalNumber)">
            <summary>
            Closes an open file.
            </summary>
            <param name="hFile"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.GetCurrentDirectory(PPJ.Runtime.SalString@)">
            <summary>
            Retrieve the current directory on the FTP server.
            </summary>
            <param name="sDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.PutFile(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean,PPJ.Runtime.SalNumber)">
            <summary>
            Copies a file from a local machine to an FTP server.  If nContext is greater than zero,
            an asynchronous process is started and status messages are sent to the window.
            The nContext argument uniquely identifies the asynchronous process and is passed
            into the status messages through wParam.
            </summary>
            <param name="sLocalFile"></param>
            <param name="sRemoteFile"></param>
            <param name="bBinaryTransfer"></param>
            <param name="nContext"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.ReadFile(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Read information from an open file residing on an FTP server.
            </summary>
            <param name="hFile"></param>
            <param name="sBuffer"></param>
            <param name="nBufferSize"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.GetFile(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean,PPJ.Runtime.SalNumber)">
            <summary>
            Copies a file from an FTP server to the local machine.  If nContext is greater than zero, 
            an asynchronous process is started and status messages are send to the window.
            The nContext argument uniquely identifies the asynchronous process and is passed 
            into the status messages in wParam.
            </summary>
            <param name="sRemoteFile"></param>
            <param name="sLocalFile"></param>
            <param name="bTransferBinary"></param>
            <param name="nContext"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.FindFirstFileInfo(PPJ.Runtime.SalString,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalDateTime@,PPJ.Runtime.SalDateTime@,PPJ.Runtime.SalDateTime@,PPJ.Runtime.SalNumber@)">
            <summary>
            Obtain the first file found and related file information within a specified search path.
            </summary>
            <param name="sSearchFile"></param>
            <param name="sFileName"></param>
            <param name="nAttributes"></param>
            <param name="dtCreationTime"></param>
            <param name="dtLastAccessTime"></param>
            <param name="dtLastWriteTime"></param>
            <param name="nFileSize"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.FindFirstFile(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Obtain the first file found within a specified search path.
            </summary>
            <param name="sSearchFile"></param>
            <param name="sReturnFileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.Disconnect">
            <summary>
            Disconnects the current connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.Connect(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Establish communication with an FTP server under the user and password
            specified. If the user name is null, the anonymous user is connected.
            </summary>
            <param name="sServerName"></param>
            <param name="nServerPort"></param>
            <param name="sUserName"></param>
            <param name="sPassword"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.SetCurrentDirectory(PPJ.Runtime.SalString)">
            <summary>
            Changes to a different working directory on an FTP server.
            </summary>
            <param name="sDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.RemoveDirectory(PPJ.Runtime.SalString)">
            <summary>
            Delete a specified directory on an FTP server.
            </summary>
            <param name="sDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.EnumFiles(PPJ.Runtime.SalString,PPJ.Runtime.SalArray{PPJ.Runtime.SalString}@)">
            <summary>
            Obtain an array of file names based on a search path specified.
            </summary>
            <param name="sSearchFile"></param>
            <param name="saFileNames"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.FindNextFile(PPJ.Runtime.SalString@)">
            <summary>
            Obtain the next file name that resides within the search path of the previous FindFirstFile call.
            </summary>
            <param name="sFileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.EnumFilesInfo(PPJ.Runtime.SalString,PPJ.Runtime.SalArray{PPJ.Runtime.SalString},PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber},PPJ.Runtime.SalArray{PPJ.Runtime.SalDateTime},PPJ.Runtime.SalArray{PPJ.Runtime.SalDateTime},PPJ.Runtime.SalArray{PPJ.Runtime.SalDateTime},PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Obtain an array of file names and all related file information based on a search path specified.
            </summary>
            <param name="sSearchFile"></param>
            <param name="saFileNames"></param>
            <param name="naAttributes"></param>
            <param name="dtaCreationTimes"></param>
            <param name="dtaLastAccessTimes"></param>
            <param name="dtaLastWriteTimes"></param>
            <param name="naFileSizes"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.FindNextFileInfo(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalDateTime@,PPJ.Runtime.SalDateTime@,PPJ.Runtime.SalDateTime@,PPJ.Runtime.SalNumber@)">
            <summary>
            Obtain the next file name and related file information that resides within the search path
            of the previous FindFirstFileInfo call.
            </summary>
            <param name="sFileName"></param>
            <param name="nAttributes"></param>
            <param name="dtCreationTime"></param>
            <param name="dtLastAccessTime"></param>
            <param name="dtLastWriteTime"></param>
            <param name="nFileSize"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.DeleteFile(PPJ.Runtime.SalString)">
            <summary>
            Deletes the specified file on the FTP server.
            </summary>
            <param name="sRemoteFile"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.RenameFile(PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Rename a file on an FTP server.
            </summary>
            <param name="sOldRemoteFile"></param>
            <param name="sNewRemoteFile"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.CreateDirectory(PPJ.Runtime.SalString)">
            <summary>
            Creates a directory on the FTP server.
            </summary>
            <param name="sDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.GetLastErrorMessage">
            <summary>
            Returns the message of the last error that was handled by the class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickFTP.GetLastErrorCode">
            <summary>
            Returns the code of the last error that was handled by the class.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickFTP.FtpClient">
            <summary>
            Returns the single instance og the ftp client. It is created when it's needed.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickFTP.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickFTP.Password">
            <summary>
            
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickFTP.AppName">
            <summary>
            
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickFTP.ServerName">
            <summary>
            
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickFTP.ServerPort">
            <summary>
            
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickHTTP">
            <summary>
            HTTP Control
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTTP.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTTP.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTTP.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Prevent the size from being changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTTP.HandleHttpException(PPJ.Runtime.Internet.SalHttpClient.HttpException)">
            <summary>
            Logs the HttpException and returns the negative error code.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTTP.SetProxy(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Establish communication with an HTTP server through a proxy.
            </summary>
            <param name="sProxyName"></param>
            <param name="nProxyPort"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTTP.SetSource(PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            
            </summary>
            <param name="sHttpUrl"></param>
            <param name="sHttpSource"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTTP.GetSource(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            
            </summary>
            <param name="sHttpUrl"></param>
            <param name="sHttpSource"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTTP.EnumImages(PPJ.Runtime.SalArray{PPJ.Runtime.SalString})">
            <summary>
            Extracts the images from the html page.
            </summary>
            <param name="sImages"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTTP.GetPageTitle(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Returns the title of the html page.
            </summary>
            <param name="sHttpSource"></param>
            <param name="sHttpTitle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTTP.GetSourceSize(PPJ.Runtime.SalString)">
            <summary>
            
            </summary>
            <param name="sHttpUrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTTP.EnumLinks(PPJ.Runtime.SalArray{PPJ.Runtime.SalString},PPJ.Runtime.SalArray{PPJ.Runtime.SalString})">
            <summary>
            Exracts the links from the html page.
            </summary>
            <param name="sLinks"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTTP.HttpClient">
            <summary>
            Returns the single instance og the http client. It is created when it's needed.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTTP.Source">
            <summary>
            
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTTP.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTTP.AppName">
            <summary>
            
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTTP.Url">
            <summary>
            
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.QO">
            <summary>
            QuickObjects constants.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.TABSM_First">
            <summary>
            High level messages
            NOTE: These messages are provided for backward compatibility.  This version of QuickTabs
            also calls late bound functions in the parent form or dialog box when an event occurs.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.TABSM_Create">
            <summary>
            In the actions of a tab frame, use this message instead of
            SAM_Create to insure proper tab frame initialization.
            TabCreate( hWnd ) is the equivalent late bound function call.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.TABSM_UserRequest">
            <summary>
            Indicates that user is attempting to change the current tab by clicking, tabbing or some other user action.
            wParam - Index of the selected tab
            lParam - Not used
            NOTE: Call CancelMode() to deny the user's request.
            TabUserRequest( nTab ) is the equivalent late bound function call.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.TABSM_TabActivateStart">
            <summary>
            Indicates that a tab has been activated.
            wParam - Index of the selected tab
            lParam - Not used
            This message is sent before child windows are shown.
            TabActivateStart( nTab ) is the equivalent late bound function call.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.TABSM_TabActivateFinish">
            <summary>
            Indicates that a tab has been activated.
            wParam - Index of the selected tab
            lParam - Not used
            This message is sent after the child windows have been shown.
            TabActivateFinish is the equivalent late bound function call.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.TABS_DrawWin95">
            <summary>
            Draw styles
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.PAGEM_Start">
            <summary>
            Messages sent to form pages
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.PAGEM_Initialize">
            <summary>
            The form page has just been created
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.PAGEM_Apply">
            <summary>
            Information in the form is to be applied.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.PAGEM_Activate">
            <summary>
            The form page is about to be shown
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.PAGEM_Deactivate">
            <summary>
            The form page has just been hidden
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.TTM_DisplayToolTip">
            <summary>
            Tooltips message.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.QOM_Base">
            <summary>
            QuickObjects messages
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.STATUS_LoadFailed">
            <summary>
            HTML, HTTP and FTP status codes
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.WEBN_UpdateRetrieval">
            <summary>
            Event notification codes.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.FTP_AttribReadOnly">
            <summary>
            FTP EnumFiles attributes
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.FTP_OpenRead">
            <summary>
            FTP OpenFile flags
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.FTPOPTION_ConnectTimeout">
            <summary>
            FTP options
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.IQ_MAX_PATH">
            <summary>
            Max path
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.QO.ERROR_NotConnected">
            <summary>
            Error Codes
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickTabs">
            <summary>
            Tab frame window class.  Instances of this class
            should be created as children of cQuickTabsForm objects
            or cQuickTabsDialog objects.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetControlTabPages(System.Windows.Forms.Control)">
            <summary>
            Returns the names of the tab pages that the control is
            associated to. The list if names is separated by a semicolon.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetControlTabPagesOriginal(System.Windows.Forms.Control)">
            <summary>
            Returns the value that was stored before the control entered designe mode.
            
            This is used by the PPJTypeDescriptorFilter and InheritedPropertyDescriptor to 
            detect inherited values.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SetControlTabPages(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets the tab pages associated to child control.
            The list is separated by a semicolon.
            </summary>
            <param name="control"></param>
            <param name="tabNames"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.LoadTabsSetup(System.String)">
            <summary>
            Parses the TabsSetup string and creates the initial tab pages
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.CreateNewTabPage(System.String,System.String,System.String)">
            <summary>
            Creates a new tab page and applies the default styles.
            </summary>
            <param name="name"></param>
            <param name="label"></param>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SendTabmCreate">
            <summary>
            Sends the TABSM_Create message
            </summary>
            <param name="tab"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SendTabmTabActivateStart(System.Int32)">
            <summary>
            Sends the TABSM_TabActivateStart message
            </summary>
            <param name="tab"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SendTabmTabActivateFinish(System.Int32)">
            <summary>
            Sends the TABSM_TabActivateFinish message
            </summary>
            <param name="tab"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SendTabmUserRequest(System.Int32)">
            <summary>
            Sends the TABSM_UserRequest message
            </summary>
            <param name="tab"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.FireDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Fires the DrawItem event.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.FireDrawControl(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Fires the DrawControl event.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SetRedraw(System.Boolean)">
            <summary>
            Freezes redrawing of the tab control.
            </summary>
            <param name="redraw"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.ProcessKeys(System.Windows.Forms.Keys)">
            <summary>
            Handles keys to change the selected tab.
            </summary>
            <param name="keyData"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Process WM_DESTROY to clear the pages collection
            to avoid destroying the form pages more than once.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.PaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Delegates the painting of the background to the tab control when the
            rectangle to paint is within the display area of the tab pages.
            This is needed to render the background of transparent controls
            using the visual style back color or the same back color of the tab page.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.OnSAM_Print(System.Object,PPJ.Runtime.Windows.WindowActionsEventArgs)">
            <summary>
            Prints the tab control.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.Add(PPJ.Runtime.SalBoolean)">
            <summary>
            Append a tab. Redraw is optional
            Return an index
            </summary>
            <param name="bRedraw"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.Insert(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Insert a tab at a location. Redraw is optional.
            Return TRUE or FALSE.
            </summary>
            <param name="nIndex"></param>
            <param name="bRedraw"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.Delete(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Delete a tab at a location.  Redraw is optional.
            Return TRUE or FALSE.
            </summary>
            <param name="nIndex"></param>
            <param name="bRedraw"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SetName(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Associate a name with a tab
            </summary>
            <param name="nIndex"></param>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SetLabel(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean)">
            <summary>
            Set the label displayed on a tab.
            Redraw is optional.
            </summary>
            <param name="nIndex"></param>
            <param name="sLabel"></param>
            <param name="bRedraw"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SetImage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalResource)">
            <summary>
            Sets the image to associate with the tab.
            </summary>
            <param name="nIndex"></param>
            <param name="tResource"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SetImage(PPJ.Runtime.SalNumber,System.Drawing.Image)">
            <summary>
            Sets the image to associate with the tab.
            </summary>
            <param name="nIndex"></param>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SetImage(PPJ.Runtime.SalNumber,System.Drawing.Icon)">
            <summary>
            Sets the icon to associate with the tab.
            </summary>
            <param name="nIndex"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetLabelAndResource(PPJ.Runtime.SalString,System.String@,PPJ.Runtime.SalResource@)">
            <summary>
            Extracts the name of the resource from the label text.
            The name of the resource is delimited by suqare brackets: General[resGenBitmap].
            This syntax is supported by XSal2 extensions in Team Developer.
            </summary>
            <param name="sLabel"></param>
            <param name="labelText"></param>
            <param name="resource"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetName(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Get the name associated with a tab
            </summary>
            <param name="nIndex"></param>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetLabel(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Get the label displayed on a tab
            </summary>
            <param name="nIndex"></param>
            <param name="sLabel"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.Clear(PPJ.Runtime.SalBoolean)">
            <summary>
            Clear all tabs from the frame.
            Redraw is optional.
            </summary>
            <param name="bRedraw"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.BringToTop(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Activate a tab
            </summary>
            <param name="nIndex"></param>
            <param name="bRedraw"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetTop">
            <summary>
            Get the index of the active tab
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetClicked">
            <summary>
            Get the index of the tab being clicked.
            This should only be called during a
            click notification.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetCount">
            <summary>
            Get the count of tabs
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.Next">
            <summary>
            Activate the next tab
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.Prev">
            <summary>
            Activate the previous tab
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.FindName(PPJ.Runtime.SalString)">
            <summary>
            Find a tab give a tab name
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.FindLabel(PPJ.Runtime.SalString)">
            <summary>
            Find a tab give a tab label
            </summary>
            <param name="sLabel"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.CancelMode">
            <summary>
            Cancel a user action.  This can
            be called when processing a TABSM_ message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.Redraw">
            <summary>
            Arranges tabs on the frame and repaints.
            Call after adding tabs or clearing with a FALSE
            redraw flag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.ShowSiblings">
            <summary>
            Show or hide child windows based on the current tab
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.ShowSiblings(System.Int32)">
            <summary>
            Show or hide child windows based on the specified tab
            </summary>
            <param name="tabIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.ShowCurrentPage(System.Int32)">
            <summary>
            Show or hide form pages based on the specified tab
            </summary>
            <param name="tabIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.Enable(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Enable or disable a tab
            </summary>
            <param name="nIndex"></param>
            <param name="bEnable"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.IsEnabled(PPJ.Runtime.SalNumber)">
            <summary>
            Indicate whether a tab is enabled
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetContentsRect(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Get the area available for child controls.  Coordinates
            are relative to the parent window.
            </summary>
            <param name="nLeft"></param>
            <param name="nTop"></param>
            <param name="nRight"></param>
            <param name="nBottom"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetContentsRectPixels(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Get the area available for child controls.  Coordinates
            are relative to the parent window.
            </summary>
            <param name="nLeftPixels"></param>
            <param name="nTopPixels"></param>
            <param name="nRightPixels"></param>
            <param name="nBottomPixels"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetContentsBorderRect(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Get the area between the contents rect and the edge of the tab frame. For
            example nLeft will indicate the width of the left border, nTop will indicate the
            combined height of the top border and tab area.
            </summary>
            <param name="nLeft"></param>
            <param name="nTop"></param>
            <param name="nRight"></param>
            <param name="nBottom"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetRowCount">
            <summary>
            Retrieve the number rows of tabs
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.ShowWindow(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Use this function instead of SalShowWindow because it works properly
            with the class function HideWindow
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.ShowWindowAndLabel(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Use this function instead of SalShowWindowAndLabel because it works properly
            with the class function HideWindowAndLabel.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.ShowControlInternal(System.Windows.Forms.Control)">
            <summary>
            Shows the control if it's associated with the current tab.
            </summary>
            <param name="ctrl"></param>
            <param name="show"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.HideWindow(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Use this function instead of SalHideWindow. This function will keep the window
            hidden as tabs are selected. Use the class function ShowWindow to undo the affect
            of this function.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.IsWindowVisible(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Returns if the specified control is considered to be visible
            by the tab control and will be shown when the associated tab is selected.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.HideWindowAndLabel(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Use this function instead of SalHideWindowAndLabel. This function will keep the window
            hidden as tabs are selected. Use the class function ShowWindowWindowAndLabel to
            undo the affect of this function.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetMarginRect(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Get the margins defined for a tiled-to-parent tabbed frame
            </summary>
            <param name="nLeft"></param>
            <param name="nTop"></param>
            <param name="nRight"></param>
            <param name="nBottom"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.FindTabFrame(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Finds the tab frame window on a form or dialog box
            </summary>
            <param name="hWndForm"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.IndexFromPoint(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Get the tab, if any, under a given point (in pixels).  A negative number is returned if the point
            is not over a tab.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SendMsgToAssociated(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Send a message to all child windows associated with a tab
            </summary>
            <param name="nIndex"></param>
            <param name="nMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SendMsgToAssociatedAndChildren(System.Collections.ArrayList,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Add all child controls, recursively, to the collection.
            </summary>
            <param name="controls"></param>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.IsAssociatedWithTab(PPJ.Runtime.SalNumber,PPJ.Runtime.SalWindowHandle)">
            <summary>
            Indicate whether a child window is associated with a tab
            </summary>
            <param name="nIndex"></param>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.ApplyFormPageChanges">
            <summary>
            Apply changes to all pages.
            Call this function to cause the PAGEM_ApplyChanges message to be sent to all form pages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SetPageSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Defines the location and size of form pages.
            </summary>
            <param name="nLeft"></param>
            <param name="nTop"></param>
            <param name="nRight"></param>
            <param name="nBottom"></param>
            <param name="bResize"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SetPageSize(System.Drawing.Rectangle,PPJ.Runtime.SalBoolean)">
            <summary>
            Defines the location and size of form pages.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.ResizePages">
            <summary>
            Resize all pages.
            Call this function to resize all form pages.
            The active page is resized first.
            The return value is TRUE or FALSE.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.ResizePages(System.Drawing.Rectangle)">
            <summary>
            Resize all pages.
            Call this function to resize all form pages.
            The active page is resized first.
            The return value is TRUE or FALSE.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.AddPage(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalWindowHandle)">
            <summary>
            Add a page.
            Call this function to add a page to the page list.
            The page window will not be created until the page is activated.
            The return value is TRUE or FALSE.
            </summary>
            <param name="sTag"></param>
            <param name="sForm"></param>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.CreatePage(PPJ.Runtime.SalString)">
            <summary>
            Create a page window.
            This function to causes the page window to be created.
            Typically it is not necessary to call this function because SetCurrentPage
            will take care of creating the page window.
            The page window will not be shown until SetCurrentPage is called.
            </summary>
            <param name="sTag"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.CreatePageWindowAsChild(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates the form as a child of the tabs control.
            </summary>
            <param name="formName"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.DestroyPage(PPJ.Runtime.SalString)">
            <summary>
            Destroy a page window.
            Call this function to destroy a page window.
            The page is not removed from the list.  The page window can be recreated..
            The return value is TRUE or FALSE.
            </summary>
            <param name="sTag"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.ClearPages">
            <summary>
            Clear all pages.
            Call this function to remove all entries from the page list and destroy any existing windows.
            The return value is TRUE of FALSE.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SetCurrentPage(PPJ.Runtime.SalString)">
            <summary>
            Activates a page.
            Causes the form page associated to the specified tab to be created and/or shown.
            The current form page will be hidden.
            </summary>
            <param name="sTag"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetPageWindow(PPJ.Runtime.SalString)">
            <summary>
            Get the window of a page.
            Call this function to get the Window Handle of a page.
            The return value is the Window Handle of the page.  hWndNULL is returned if the page window has not been created.
            </summary>
            <param name="sTag"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.ReloadTabs">
            <summary>
            Reloads the original tabs configuration.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SetWorkspaceBoundary(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Define the boundaries of the workspace so that a tiled-to-parent tab 
            frame won't be resized smaller than this boundary.
            </summary>
            <param name="nMinWidth"></param>
            <param name="nMinHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.FindPage(PPJ.Runtime.SalString)">
            <summary>
            Returns the FormPage instance associated to the specified tab name.
            </summary>
            <param name="sTag"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.__SendInitializeMessage(System.Windows.Forms.Control)">
            <summary>
            Let a page form initialize itself
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.__SendApplyMessage(System.Windows.Forms.Control)">
            <summary>
            Let a page form apply its changes
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.__SendActivateMessage(System.Windows.Forms.Control)">
            <summary>
            Let a page form know that it is being show
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.__SendDeactivateMessage(System.Windows.Forms.Control)">
            <summary>
            Let a page form know that it has been hidden
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.ShowTab(System.Int32)">
            <summary>
            Shows the indicated tab page with all the associated
            controls and/or the associated form page.
            </summary>
            <param name="tabIndex"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.InitializeFormPages">
            <summary>
            Generates the PAGEM_Initialize event for all forms that are bound to tab pages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.AddPage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Adds a tab page at a valid tabset index position.
            </summary>
            <param name="pageIndex"></param>
            <param name="pageName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.AddPageEx(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Adds a tab page at a valid tabset index position. You can include an image and a tooltip.
            </summary>
            <param name="pageIndex"></param>
            <param name="pageName"></param>
            <param name="imageFile"></param>
            <param name="tooltip"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.AssociateChild(PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Associates a child to a tab page.
            </summary>
            <param name="pageIndex"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.AttachWindow(PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Assigns a child window created at runtime to the specified tab page as its container window. 
            You can programmatically create a Form Window or Dialog Box as child and assign it to a tab page by using this function.
            </summary>
            <param name="pageIndex"></param>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.DetachWindow(PPJ.Runtime.SalNumber)">
            <summary>
            Detaches a child window from the specified tab control.
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.DisassociateChild(PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Disassociates a child with a tab page.
            </summary>
            <param name="pageIndex"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SetActivePage(PPJ.Runtime.SalNumber)">
            <summary>
            Activates a tab specified by a particular tab index.
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetActivePage">
            <summary>
            Gets the current active tab page. 
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetTooltip(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Gets the tooltip text from the specified indexed tab page on the specified tab control.
            </summary>
            <param name="pageIndex"></param>
            <param name="tooltip"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SetTooltip(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Sets the tooltip text on the specified tab page. Tooltip text appears only on tab selector, not on a tab container window.
            </summary>
            <param name="pageIndex"></param>
            <param name="tooltip"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.EnablePage(PPJ.Runtime.SalNumber)">
            <summary>
            Enables a tab page
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.DisablePage(PPJ.Runtime.SalNumber)">
            <summary>
            Disables a tab page.
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetPageIndex(PPJ.Runtime.SalString)">
            <summary>
            Gets the tab page index as specified by the tab name.
            </summary>
            <param name="pageName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.RemovePage(PPJ.Runtime.SalNumber)">
            <summary>
            Removes a tab page.
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.RenamePage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Renames a tab page.
            </summary>
            <param name="control"></param>
            <param name="pageIndex"></param>
            <param name="pageName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SetPageTitle(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Sets the title of the specified tab page.
            </summary>
            <param name="pageIndex"></param>
            <param name="pageTitle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetPageName(PPJ.Runtime.SalNumber)">
            <summary>
            ets the name of the tab page (not the title that appears on the tab page at runtime).
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetPageTitle(PPJ.Runtime.SalNumber)">
            <summary>
            Gets the tab page title as specified by the tab index.
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.GetPageWindow(PPJ.Runtime.SalNumber)">
            <summary>
            Gets the window handle of the specified tab page.
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.ShowPage(PPJ.Runtime.SalNumber)">
            <summary>
            Shows a tab page
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.HidePage(PPJ.Runtime.SalNumber)">
            <summary>
            Hides a tab page.
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.PageCount">
            <summary>
            Returns the number of tab pages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.Update">
            <summary>
            Updates the Tab bar after a SalTabAssociateChild or SalTabDisassociateChild is called. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.op_Explicit(PPJ.Runtime.SalWindowHandle)~PPJ.Runtime.Windows.QO.SalQuickTabs">
            <summary>
            Fully qualified expressions operator.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.FromHandle(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Returns the control associated with the handle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.FromControl(System.Windows.Forms.Control)">
            <summary>
            Casts the control to a SalQuickTabs.
            </summary>
            <param name="control"></param>
        </member>
        <member name="E:PPJ.Runtime.Windows.QO.SalQuickTabs.SelectedIndexChanged">
            <summary>
            Fired when the selected tab has changed.
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.QO.SalQuickTabs.SelectedIndexChanging">
            <summary>
            Fired when the selected tab is about to change.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.Ready">
            <summary>
            Gets/Sets the ready flag to indicate that the SalQuickTabs
            control is fully created and ready to dispatch messages.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.SelectedIndex">
            <summary>
            Returns/Sets the currently selected tab.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.SelectedTab">
            <summary>
            Returns/Sets the selected tab page.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.TabControl">
            <summary>
            Returns the wrapped tab control
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.TabPages">
            <summary>
            Returns the collection of tab pages.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.PageRectangle">
            <summary>
            Returns the display area of the tab pages.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.UseThemedPainting">
            <summary>
            Flag to be used to Enable/Disable themed painting
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.TabSetup">
            <summary>
            Initial Tab pages collection. Each tab is defined using a string property
            formatted as: {Name=Name0;Label=Label0;Form=FormClass0}{...}
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.Alignment">
            <summary>
            Gets or sets the area of the control (for example, along the top) where the tabs are aligned.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.Appearance">
             <summary>
            Gets or sets the visual appearance of the control's tabs.
             </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.Multiline">
            <summary>
            Indicates if more than one row of tabs is allowed.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.SizeMode">
            <summary>
            Indicates how tabs sized.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.RightToLeftLayout">
            <summary>
            Indicates whether the layout of the control is right-to-left when the RightToLeft property is set to Yes.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.ItemSize">
            <summary>
            Reflects the tab´s size
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.UseVisualStyleBackColor">
            <summary>
            Returns/Sets a value that determines if the tab pages paints the background using
            visual styles, if supported.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.VisualStyleBackColor">
            <summary>
            Color that should be used if visual styles is enabled.
            Current implementation of the tab control will not paint transparency 
            correct as the controls is not bound to the tab page itself but have the 
            form window as parent. 
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.ImageList">
            <summary>
            Returns/Sets the image list to use to display images on child tabs.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.DrawMode">
            <summary>
            Returns/Sets the way the tab control is drawn.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickTabs.FormPage">
            <summary>
            Keeps the binding between tab names and forms.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickTabs.TabAssoc">
            <summary>
            Maintains the association between control and tab pages
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl">
            <summary>
            Overrides the TabControl class to be able to 
            control and eventually cancel tab selection.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overrides the message procedure to process the TCN_SELCHANGING notification.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.GetTabRect(System.Int32)">
            <summary>
            Returns the bounding rectangle for a specified tab in this tab control.
            </summary>
            <param name="index">Index of the tab</param>
            <returns>Bounds of the specified tab.</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.CanChangeTab(System.Int32)">
            <summary>
            Fires the SelectedIndexChanging event, and if the
            code sets the Cancel member to false, returns false.
            </summary>
            <param name="tab"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Selects the next/previous tab using the keyboard.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.ProcessKeyEvents(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Selects the next/previous tab using the keyboard.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.GetNextValidTab(System.Int32)">
            <summary>
            Returns the next valid (enabled) tab.
            </summary>
            <param name="tab"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.GetPreviousValidTab(System.Int32)">
            <summary>
            Returns the previous valid (enabled) tab.
            </summary>
            <param name="tab"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.GetFirstValidTab">
            <summary>
            Returns the first valid (enabled) tab.
            </summary>
            <param name="tab"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.GetLastValidTab">
            <summary>
            Returns the last valid (enabled) tab.
            </summary>
            <param name="tab"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.GetTabFromPoint(System.Drawing.Point)">
            <summary>
            Returns the tab page at the specified coordinates.
            </summary>
            <param name="point">Screen coordinates</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.RemoveAllTabs">
            <summary>
            Removes all tabs from the control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.RemoveTab(System.Int32)">
            <summary>
            Removes the specified tab.
            </summary>
            <param name="tab"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.GetClickedTab">
            <summary>
            Returns the currently clicked tab.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.ProcessMnemonic(System.Char)" -->
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.FireTabCollectionChanged">
            <summary>
            Fires the TabCollectionChanged event
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Fires TabCollectionChanged when a new tab is added.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Fires TabCollectionChanged when a tab is removed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Draws the tab label using the memonics
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.DrawTabText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Color,System.Drawing.Rectangle,System.Windows.Forms.DrawItemState,System.Drawing.StringFormat,System.Windows.Forms.TextFormatFlags)">
            <summary>
            Draws the name of the tab page.
            </summary>
            <param name="g"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="brush"></param>
            <param name="foreColor"></param>
            <param name="rect"></param>
            <param name="state"></param>
            <param name="format"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.PrintControl(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
            Draws the tab control for printing.
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.PrintTabText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Rectangle,System.Windows.Forms.DrawItemState,System.Drawing.StringFormat)">
            <summary>
            Draws the name of the tab page.
            </summary>
            <param name="g"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="brush"></param>
            <param name="rect"></param>
            <param name="state"></param>
            <param name="format"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabControl.CustomDraw">
            <summary>
            Turns on/off the custom drawing event.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickTabs.TabCancelEventHandler">
            <summary>
            Delegate for the SelectedIndexChanging event.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickTabs.TabCancelEventArgs">
            <summary>
            Args for the SelectedIndexChanging event.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickTabs.FndSalTabControl">
            <summary>
            Overrides SalTabControl to provide IFS's own themed TabControl paint logic.
            Also supports themeing of display elements.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.FndSalTabControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Show the hover cursors on the tab headers
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.FndSalTabControl.OnVisibleChanged(System.EventArgs)">
            <summary>
            Get renderer when the control is becoming visible (TopLevelControl is set)
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.FndSalTabControl.OnMouseLeave(System.EventArgs)">
            <summary>
            Show the hover cursors on the tab headers
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.FndSalTabControl.FndSalTabControl_DrawControl(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Custom Paint, hooked on the DrawControl event controlled by the SalQuickTabs object.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:PPJ.Runtime.Windows.QO.SalQuickTabs.FndSalTabControl.managedBackBuffer">
            <summary>
            Since the managed DoubleBuffering is not working correctly when used together with RTL (RightToLeft) mirroring
            options, we need to manually handle the buffering to avoid flickering during rendering.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.FndSalTabControl.GetRenderer">
            <summary>
            Note: While fetching the renderer is a straightforward operation, we will cache the renderer once
            and return that to subsequent calls. If there is ever a possibility that renderers might change at runtime,
            this method should retrieve the renderer for each render request.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.FndSalTabControl.MouseInsideBounds">
            <summary>
            Returns true if the mouse cursor is currently inside the bounds of the control
            exceeding others like scrollers
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.FndSalTabControl.HeaderRectangle">
            <summary>
            Gets the bounds of the "tab header" (i.e. the area where the names of tab pages appear).
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabPageCollection">
            <summary>
            Manages the collection of tab pagese and keeps it in synch with
            the visible tabs in the inner tab control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabPage">
            <summary>
            Extended TabPage. Supports the disabled flag, mnemonics and bound forms. 
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabPage.#ctor(PPJ.Runtime.Windows.QO.SalQuickTabs)">
            <summary>
            Creates a new TabPage object
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabPage.#ctor(PPJ.Runtime.Windows.QO.SalQuickTabs,System.String,System.String,System.String)">
            <summary>
            Creates a new TabPage object
            </summary>
            <param name="name"></param>
            <param name="label"></param>
            <param name="form"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabPage.RemoveMnemonic(System.String)" -->
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabPage.SetVisibleInternal(System.Boolean)">
            <summary>
            Updates the visibility of the TabPage by removing it or adding it back
            in the TabControl real tab pages collection.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabPage.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Implements WM_NCHITEST to make the tab page is transparent to the mouse
            </summary>
            <param name="m"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabPage.Form">
            <summary>
            Form property
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabPage.Label">
            <summary>
            Returns the orignal label text with the mnemonics.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabPage.Text">
            <summary>
            Overrides the text property to remove the mnemonics.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabPage.Enabled">
            <summary>
            Returns/Sets the enabled property for the tab page.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickTabs.SalTabPage.Visible">
            <summary>
            Hides/Shows the tab page.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickTabsDialog">
            <summary>
            Dialog Box window parent of a tab frame.  This
            class allows editing of the properties of child windows
            identifying their associated tab.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickTabsParentDialog">
            <summary>
            Specializes the generic SalQuickTabsParent class into a dialog box
            implementation. This class should be used when the ported code
            extends cQuickTabsParent directly. Using this class avoids the creation
            of multiple inheritance constructs.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickTabsParent">
            <summary>
            Defines late bound functions in QuickTabs parent Form or Dialog Box that
            will be called when an event occurs in the tab control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParent.__TabCreate(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Indicates that a tab has been created.
            This function is called when the tab control receives SAM_Create.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParent.__TabActivateStart(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Indicates that a tab has been activated.
            This function is called before the child windows have been shown
            </summary>
            <param name="hWnd"></param>
            <param name="nTab"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParent.__TabActivateFinish(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Indicates that a tab has been activated.
            This function is called after the child windows have been shown
            </summary>
            <param name="hWnd"></param>
            <param name="nTab"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParent.__TabUserRequest(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Indicates that user is attempting to change the current tab by clicking,
             tabbing or some other user action.
            NOTE: Call CancelMode() to deny the user's request
            </summary>
            <param name="hWnd"></param>
            <param name="nTab"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParent.__TabFrameResize(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Indicates that the size of the tab frame may have changed
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParent.__TabSetFormPageSize(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Define the page size for child forms created on the tab frame.
            This function can be overriden in the tab form or tab dialog box
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParent.op_Explicit(PPJ.Runtime.SalWindowHandle)~PPJ.Runtime.Windows.QO.SalQuickTabsParent">
            <summary>
            Fully qualified expressions operator.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParent.FromHandle(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Returns the control associated with the handle.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParentDialog.#ctor">
            <summary>
            Constructs the class to be a dialog box.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParentDialog.PPJ#Runtime#Windows#ISalWindow#GetWindowType">
            <summary>
            Override the GetType() method of ISalWindow to return
            TYPE_DialogBox. Otherwise we will return TYPE_FormWindow since
            SalQuickTabsParent is derived from SalFormWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParentDialog.TabCreate(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Indicates that a tab has been created.
            This function is called when the tab control receives SAM_Create.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParentDialog.TabActivateStart(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Indicates that a tab has been activated.
            This function is called before the child windows have been shown
            </summary>
            <param name="hWnd"></param>
            <param name="nTab"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParentDialog.TabActivateFinish(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Indicates that a tab has been activated.
            This function is called after the child windows have been shown
            </summary>
            <param name="hWnd"></param>
            <param name="nTab"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParentDialog.TabUserRequest(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Indicates that user is attempting to change the current tab by clicking,
             tabbing or some other user action.
            NOTE: Call CancelMode() to deny the user's request
            </summary>
            <param name="hWnd"></param>
            <param name="nTab"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParentDialog.TabFrameResize(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Indicates that the size of the tab frame may have changed
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParentDialog.TabSetFormPageSize(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Define the page size for child forms created on the tab frame.
            This function can be overriden in the tab form or tab dialog box
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsDialog.#ctor">
            <summary>
            Dialog Box window parent of a tab frame.  This
            class allows editing of the properties of child windows
            identifying their associated tab.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsDialog.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Processes Control+Tab to change the current tab also when the focus
            is on a different control.
            
            Doesn't process Accept and Cancel buttons on hidden controls. PPJ controls 
            should process mnemonics when hidden unless they are hidden because they are
            bound to a tab page.
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsDialog.ProcessMnemonic(System.Char)">
            <summary>
            Takes over processing mnemonics.
            PPJ controls should process mnemonics when hidden unless they are hidden
            because they are bound to a tab page.
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsDialog.op_Explicit(PPJ.Runtime.SalWindowHandle)~PPJ.Runtime.Windows.QO.SalQuickTabsDialog">
            <summary>
            Fully qualified expressions operator.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsDialog.FromHandle(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Returns the control associated with the handle.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickTabsForm">
            <summary>
            Form window with a tab frame.  In addition to
            containing a built in tab frame.  This class also
            has the smarts to manage other child windows
            on the form so that they can be associated with
            specific tabs.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickTabsParentForm">
            <summary>
            Specializes the generic SalQuickTabsParent class into a form
            implementation. This class should be used when the ported code
            extends cQuickTabsParent directly. Using this class avoids the creation
            of multiple inheritance constructs.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParentForm.TabCreate(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Indicates that a tab has been created.
            This function is called when the tab control receives SAM_Create.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParentForm.TabActivateStart(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Indicates that a tab has been activated.
            This function is called before the child windows have been shown
            </summary>
            <param name="hWnd"></param>
            <param name="nTab"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParentForm.TabActivateFinish(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Indicates that a tab has been activated.
            This function is called after the child windows have been shown
            </summary>
            <param name="hWnd"></param>
            <param name="nTab"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParentForm.TabUserRequest(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Indicates that user is attempting to change the current tab by clicking,
             tabbing or some other user action.
            NOTE: Call CancelMode() to deny the user's request
            </summary>
            <param name="hWnd"></param>
            <param name="nTab"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParentForm.TabFrameResize(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Indicates that the size of the tab frame may have changed
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsParentForm.TabSetFormPageSize(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Define the page size for child forms created on the tab frame.
            This function can be overriden in the tab form or tab dialog box
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsForm.#ctor">
            <summary>
            Form window with a tab frame.  In addition to
            containing a built in tab frame.  This class also
            has the smarts to manage other child windows
            on the form so that they can be associated with
            specific tabs.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsForm.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Processes Control+Tab to change the current tab also when the focus
            is on a different control.
            
            Doesn't process Accept and Cancel buttons on hidden controls. PPJ controls 
            should process mnemonics when hidden unless they are hidden because they are
            bound to a tab page.
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsForm.ProcessMnemonic(System.Char)">
            <summary>
            Takes over processing mnemonics.
            PPJ controls should process mnemonics when hidden unless they are hidden
            because they are bound to a tab page.
            </summary>
            <param name="charCode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsForm.op_Explicit(PPJ.Runtime.SalWindowHandle)~PPJ.Runtime.Windows.QO.SalQuickTabsForm">
            <summary>
            Fully qualified expressions operator.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickTabsForm.FromHandle(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Returns the control associated with the handle.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickToolTip">
            <summary>
            Generic base class to add tooltip support to controls.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalToolTipManager">
            <summary>
            Class for managing tool tips.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalToolTipManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalToolTipManager.#ctor(System.Object)">
            <summary>
            Multiple inheritance constructor.
            </summary>
            <param name="derived"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalToolTipManager.AddTool(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Associate a tip with a control.  The control can be any type of window.
            </summary>
            <param name="ctrl"></param>
            <param name="sTip"></param>
            <param name="sStatus"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalToolTipManager.AddTool(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean)">
            <summary>
            Associate a tip with a control.  The control can be any type of window.
            </summary>
            <param name="ctrl"></param>
            <param name="sTip"></param>
            <param name="sStatus"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalToolTipManager.AddToolEx(System.Windows.Forms.Control,PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean,PPJ.Runtime.SalNumber)">
            <summary>
            Associate a tip with a control.  The control can be any type of window.
            </summary>
            <param name="ctrl"></param>
            <param name="sTip"></param>
            <param name="sStatus"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalToolTipManager.SetStatusText(System.Windows.Forms.Control,PPJ.Runtime.SalString)">
            <summary>
            Change the text displayed on the status bar
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalToolTipManager.DeleteTool(System.Windows.Forms.Control)">
            <summary>
            Stop displaying a control tip for a window
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalToolTipManager.IsTool(System.Windows.Forms.Control)">
            <summary>
            Indicate whether this window has been added as a control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalToolTipManager.SetTipText(System.Windows.Forms.Control,PPJ.Runtime.SalString)">
            <summary>
            Change the text displayed as a tip.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalToolTipManager.GetStatusText(System.Windows.Forms.Control)">
            <summary>
            Get the status text defined for a control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalToolTipManager.GetTipText(System.Windows.Forms.Control)">
            <summary>
            Get the tip text defined for a control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalToolTipManager.OnShow(PPJ.Runtime.Windows.ToolTips.ToolTipEventArgs)">
            <summary>
            Updates the status bar text when the tooltip is shown.
            </summary>
            <param name="tool"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalToolTipManager.OnNeedText(PPJ.Runtime.Windows.ToolTips.ToolTipEventArgs)">
            <summary>
            Sends the message registered with the control
            and updates the tooltip text.
            </summary>
            <param name="tool"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalToolTipManager.OnPop(PPJ.Runtime.Windows.ToolTips.ToolTipEventArgs)">
            <summary>
            Clears the status bar text when the tooltip is popped.
            </summary>
            <param name="tool"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalToolTipManager.ToolTip">
            <summary>
            Returns the single tooltips instance used by SalToolTipManager.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalToolTipManager.ToolData">
            <summary>
            Additional data stored with each control registered with the tooltip control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTip.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTip.#ctor(PPJ.Runtime.Windows.ISalWindow)">
            <summary>
            Multiple Inheritance Constructor
            </summary>
            <param name="derived"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTip.SalQuickToolTip_MessageActions(System.Object,PPJ.Runtime.Windows.WindowActionsEventArgs)">
            <summary>
            Message Actions
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTip.OnCreateQuickToolTip">
            <summary>
            "Virtual" function called when the SAM_Create message
            is received by the tool tip general window class.  This function loads the tool tip from properties.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTip.TooltipText">
            <summary>
            Returns/Sets the tooltip text.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTip.TooltipStatus">
            <summary>
            Returns/Sets the tooltip status text.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox">
            <summary>
            Checkbox with tool tip support
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.AddTool(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.SetTipText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.SetStatusText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.GetTipText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.DeleteTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.GetStatusText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.IsTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.SetStatusText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.SetTipText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.GetTipText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.DeleteTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.GetStatusText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.IsTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.TooltipText">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipCheckBox.TooltipStatus">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable">
            <summary>
            Child table window with tool tip support
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableWindow">
            <summary>
            Table Window Control
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableWindowBase">
            <summary>
            Table Window Implementation
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.#cctor">
            <summary>
            Static constructor, initializes basic stuff for the control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.#ctor">
            <summary>
            Constructs a SalTableWindow object.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.SetContextRow(System.Int32)">
            <summary>
            Sets the table window's context row.
            </summary>
            <param name="rowNum">The row number of the new context row.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.LoadSystemBitmaps">
            <summary>
            Loads the default row header bitmaps.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.AttachEventHandlers(PPJ.Runtime.Windows.C1FlexGridEx)">
            <summary>
            Attaches all the event handlers.
            It's in a separate function becasue we attach only after the handle has
            been created.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.SubclassGrid(C1.Win.C1FlexGrid.C1FlexGrid)">
            <summary>
            Subclasses the grid and removes the control's border.
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.AddColumn(PPJ.Runtime.Windows.SalTableColumn)">
            <summary>
            Adds a new column to the inner grid. The new column is
            initialized with all the column properties and the columns
            collection is arranged to fit the new column's position.
            </summary>
            <param name="colCtrl"></param>
            <returns>Position</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.DeleteColumn(PPJ.Runtime.Windows.SalTableColumn)">
            <summary>
            Removes the grid column and releases the SalTableColumn object.
            The entry in the columns collection is freed but it's not reusable
            to maintain a consistent ID numbering.
            </summary>
            <param name="colCtrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.ResetColumnsCollection">
            <summary>
            Forces the re-creation of the column collection
            next time it's needed.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetTableColumn(C1.Win.C1FlexGrid.Column)">
            <summary>
            Returns the SalTableColumn object associated with the
            specified FlexGrid column.
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetTableColumnFromIndex(System.Int32)">
            <summary>
            Returns the SalTableColumn object at the specified position.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetTableColumnFromName(System.String)">
            <summary>
            Returns the SalTableColumn object with the specified naem.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetTableColumnFromId(System.Int32)">
            <summary>
            Returns the SalTableColumn object with the specified ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetTableRow(C1.Win.C1FlexGrid.Row)">
            <summary>
            Returns the SalTableRow object associated with the
            FlexGrid row.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetTableRowCurrent">
            <summary>
            Returns the current (context) SalTableRow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetTableRowFromContext(System.Int32)">
            <summary>
            Returns the SalTableRow at the specified context row.
            </summary>
            <param name="rowNum"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetTableRowFromIndex(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32)">
            <summary>
            Returns the SalTableRow object at the specified row index.
            </summary>
            <param name="grid"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.TestMask(System.Int32,System.Int32)">
            <summary>
            Returns true if the specified flags contains at least one of the bit
            set in the mask.
            </summary>
            <param name="mask"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.TestRowHeaderFlags(System.Int32)">
            <summary>
            Returns true if the specified row header flags are all set.
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.TestTableFlags(System.Int32)">
            <summary>
            Returns true if the specified table flags are all set.
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.TestRowFlags(PPJ.Runtime.Windows.SalTableRow,System.Int32,System.Int32)">
            <summary>
            Returns true if the row flags match the on|off masks.
            </summary>
            <param name="flags"></param>
            <param name="maskOn"></param>
            <param name="maskOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.MoveColumn(System.Int32,System.Int32)">
            <summary>
            Moves a column.
            </summary>
            <param name="startPos"></param>
            <param name="targetPos"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.SetFlags(System.Int32,System.Boolean)">
            <summary>
            Sets or clears table window flags.
            </summary>
            <param name="flags"></param>
            <param name="on"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.SelectFullRow(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32)">
            <summary>
            Highlights the entire row.
            </summary>
            <param name="grid"></param>
            <param name="row"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.IsValidRow(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32)">
            <summary>
            Returns true if the row is valid in the current grid.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.IsValidCol(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32)">
            <summary>
            Returns true if the col is valid in the current grid.
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.IsValidContextRow(System.Int32)">
            <summary>
            Returns true if the context row is a valid row.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.CanMoveCell">
            <summary>
            Returns true if the current cell can be changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.CanEditCell(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.Int32)">
            <summary>
            Returns true if the specific cell can be edited.
            </summary>
            <param name="grid"></param>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.SetFocusCellStyle(C1.Win.C1FlexGrid.C1FlexGrid,System.Boolean)">
            <summary>
            Alters the look of the focused cell. When the cell is not editable
            it is shown with a solid border.
            </summary>
            <param name="grid"></param>
            <param name="editable"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetContextRowFromCode(System.Int32)">
            <summary>
            Translates row codes (TBL_MinRow, TBL_MaxRow, etc) to a valid context row.
            </summary>
            <param name="rowCode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.TranslateRowContext(System.Int32,System.Int32@,C1.Win.C1FlexGrid.C1FlexGrid@)">
            <summary>
            Translates the context row number to a row index and grid control.
            </summary>
            <param name="rowIndex"></param>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.TranslateRowIndex(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32)">
            <summary>
            Transforms the row index to a context row.
            </summary>
            <param name="grid"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.ApplyFlags(System.Int32)">
            <summary>
            Updates the appearance of the grid applying all table flags.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.InitializeColPositions">
            <summary>
            Updates the position of the columns according to the Position property
            </summary>
            <param name="col"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.UpdateRowHeaders">
            <summary>
            Updates the row header bitmap or text for all rows in the grid.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.UpdateRowHeader(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32)">
            <summary>
            Updates the row header for the specified row.
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.UpdateRowHeader(PPJ.Runtime.Windows.SalTableRow)">
            <summary>
            Updates the row header bitmap or text for a single row in the grid.
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.SetModified(PPJ.Runtime.Windows.SalTableColumn,System.Boolean)">
            <summary>
            Sets the modified flag for the current cell.
            </summary>
            <param name="col"></param>
            <param name="on"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.IsModified(PPJ.Runtime.Windows.SalTableColumn)">
            <summary>
            Returns true if the current cell is modified.
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetClipString(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Serializes the selected cells into a clipboard string.
            </summary>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <param name="colDel"></param>
            <param name="rowDel"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.CreateSplitGrid(System.Int32,System.Boolean)">
            <summary>
            Creates the splitter and split grid, syncronizes the columns
            and attaches all the events necessary to manager the split grid.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.DestroySplitGrid">
            <summary>
            Destroyes the split grid and the splitter control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.InitializeSplitGrid">
            <summary>
            Creates the splitter and split grid, syncornizes the columns
            and attaches all the events necessary to manager the ssplit grid.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.UpdateSplitterPosition">
            <summary>
            Updates the position of the splitter to adjust for the presence of the horizontal
            scrollbar.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.UpdateScrollBarsVisibility">
            <summary>
            Forces a visible vertical scroll bar on both grids when either the 
            main grid or the split grid have a vertical scroll bar.
            It's necessary to keep the horizontal scrolling in synch.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.ClearSelectedRowsAndColumns">
            <summary>
            Unselectes all selected rows and columns for both grids.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.ClearSelectedRows">
            <summary>
            Unselects all selected rows from both grids.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.ClearSelectedRows(C1.Win.C1FlexGrid.RowCollection)">
            <summary>
            Unselects all selected rows.
            </summary>
            <param name="rows"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.ClearSelectedColumns">
            <summary>
            Unselects all selected columns.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.SelectColumn(System.Int32,System.Boolean)">
            <summary>
            Flips the selection of the specified column
            </summary>
            <param name="col"></param>
            <param name="multiple"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.SelectRowsOnMouseClick(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Selects/Deselects rows on mouse clicks.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.SelectRowsOnKeyboardAction(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Selects/Deselects rows on keyboard actions.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.SelectRows(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Selects a range of rows.
            </summary>
            <param name="grid"></param>
            <param name="startRow"></param>
            <param name="endRow"></param>
            <param name="select"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetRows(C1.Win.C1FlexGrid.C1FlexGrid)">
            <summary>
            Returns the row collection from the grid.
            This is a safe call and throws an exception if the grid
            has been disposed. Otherwide the grid throws a generic NullReferenceException.
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetCols(C1.Win.C1FlexGrid.C1FlexGrid)">
            <summary>
            Returns the column collection from the grid.
            This is a safe call and throws an exception if the grid
            has been disposed. Otherwide the grid throws a generic NullReferenceException.
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.UpdateRowsHeight(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32)">
            <summary>
            Updates the height all the rows.
            </summary>
            <param name="grid"></param>
            <param name="height"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.ClearUnusedStyles">
            <summary>
            Frees unused styles.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetRowStyle(System.Int32)">
            <summary>
            Returns the CellStyle object for the specified row.
            </summary>
            <param name="row">Context row</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetRowStyleNew(System.Int32)">
            <summary>
            Returns or creates the CellStyle object for the specified row.
            </summary>
            <param name="row">Context row</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetRowHeaderStyle(System.Int32)">
            <summary>
            Returns the CellStyle for the fixed cells for the specified row.
            </summary>
            <param name="row">Context row</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetRowHeaderStyleNew(System.Int32)">
            <summary>
            Returns or creates the CellStyle for the fixed cells for the specified row.
            </summary>
            <param name="row">Context row</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetColStyle(PPJ.Runtime.Windows.SalTableColumn)">
            <summary>
            Returns the CellStyle object for the specified column.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetColStyleNew(PPJ.Runtime.Windows.SalTableColumn)">
            <summary>
            Returns or creates the CellStyle object for the specified column.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetColHeaderStyle(PPJ.Runtime.Windows.SalTableColumn)">
            <summary>
            Returns the CellStyle object for the fixed cells in the specified column.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetColHeaderStyleNew(PPJ.Runtime.Windows.SalTableColumn)">
            <summary>
            Returns or creates the CellStyle object for the fixed cells in the specified column.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetCellStyle(PPJ.Runtime.Windows.SalTableColumn,System.Int32)">
            <summary>
            Returns the CellStyle object for the specified cell.
            </summary>
            <param name="column"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.GetCellStyleNew(PPJ.Runtime.Windows.SalTableColumn,System.Int32)">
            <summary>
            Returns or creates the CellStyle object for the specified cell.
            The CellStyle is guaranteed not to be one of the cached CellStyle instances.
            </summary>
            <param name="column"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.OnMouseMove(C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Show the column-move cursor when the mouse
            moves close to the bottom edge of the column header
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.OnMouseUp(C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Toggle CheckBox columns on mouse up, like in CTD.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.OnBeforeMouseDown(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.BeforeMouseDownEventArgs)">
            <summary>
            Process OnMouseDown before it reaches the inner grid to:
            	- suppress toggling of check boxes on mouse down
            	- select the entire row when clicking on row header
            	- select the column when clicking on the column header
            	- select multiple rows if control or shift is down
            	- prevent moving the focus cell if not validated
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.OnClickCell(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.BeforeMouseDownEventArgs,C1.Win.C1FlexGrid.HitTestInfo)">
            <summary>
            Generates mouse selection events when clicking on the current cell
            because OnAfterRowColChange is not generated when clicking on the same cell.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
            <param name="ht"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.OnClickCheckBox(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.BeforeMouseDownEventArgs,C1.Win.C1FlexGrid.HitTestInfo)">
            <summary>
            Prevents the checkbox column from being flipped on mouse down.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
            <param name="ht"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.OnClickRowHeader(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.BeforeMouseDownEventArgs,C1.Win.C1FlexGrid.HitTestInfo)">
            <summary>
            Selects the entire row when clicking on the row header.
            Need to select col = 0 to remove the focus frame from the cell.
            
            Generates mouse selection events when clicking on the current row
            because OnAfterRowColChange is not generated when clicking on the same row.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
            <param name="ht"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.OnClickColumnHeader(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.BeforeMouseDownEventArgs,C1.Win.C1FlexGrid.HitTestInfo)">
            <summary>
            Selects the entire column and stops the grid from setting the focus cell
            if column selection mode is enabled.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
            <param name="ht"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.OnChildGridWndProc(System.Windows.Forms.NativeWindow,C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.Message@)">
            <summary>
            Receives all the Windows messages from the inner flexgrid control
            before they are processed by the grids WndProc.
            
            All the messages are dispatched to the MessageActions handler.
            
            This function returns true if the message is processed and should not
            be dispatched to the default window procedure.
            </summary>
            <param name="sender"></param>
            <param name="grid"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.OnChildWmMouseMove(C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.Message@)">
            <summary>
            Suppress the selection of the active cell when the mouse is moved
            on the grid under some conditions. Otherwise we may get a series
            of salection changes when the user moves the mouse and the application
            changes the selection while processing events.
            </summary>
            <param name="grid"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.IsMessageBox(System.IntPtr)">
            <summary>
            Returns true if the handle refers to a MessageBox
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.IsOnColumnMoveArea(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.HitTestInfo)">
            <summary>
            Returns true if the hittest result is on the column header area used to move the column.
            </summary>
            <param name="grid"></param>
            <param name="ht"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.OnChildEditWndProc(System.Windows.Forms.NativeWindow,System.Windows.Forms.Control,System.Windows.Forms.Message@)">
            <summary>
            Receives all windows messages from the cell editor control
            before they are processed by the control's WndProc.
            
            Returns true to indicate that the message has been handled
            and the control's WndProc should not process it.
            </summary>
            <param name="sender"></param>
            <param name="edit"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Process command keys.
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.AllowSorting">
            <summary>
            Enables/Disables automatic sorting on table columns.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.ShowCursor">
            <summary>
            Enables/Disables the arrow icon on the current row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.ShowFocusRow">
            <summary>
            Enables/Disables the focus frame around the current row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.FocusRowStyle">
            <summary>
            Enables/Disables the focus frame around the current row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.ExtendLastColumn">
            <summary>
            Enables/Disables the extension of the last column to fill the grid.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.Trimming">
            <summary>
            Defines how to trim the content that doesn't fit the width of the cell.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.BackColor">
            <summary>
            Returns/Sets the back color for the control.
            When the color is empty it defaults to Windows default color
            instead of returning the parent's color.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.UseVisualStyles">
            <summary>
            Enables/Disabled drawing of columns and rows headers using the 
            current visual style theme renderer.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.ShowCellLabels">
            <summary>
            Gets or sets whether the grid should display labels over cells whose contents are partially hidden.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.MainGrid">
            <summary>
            Returns the main grid control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.SplitGrid">
            <summary>
            Returns the split grid control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.Splitter">
            <summary>
            Returns the splitter control between the main grid and the split grid.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.CurrentGrid">
            <summary>
            Returns the current grid control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.CurrentRow">
            <summary>
            Returns the current row index in the current grid control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.DefaultRowHeaderImages">
            <summary>
            Returns the collection of images used to show row flags on the row header.
            The collection contains DictionaryEntry items where the key is the
            flags to test and the value is the image object.
            Row flags are tested in the order they are found in the list.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.RowHeaderImages">
            <summary>
            Returns the collection of images used to show row flags on the row header.
            The collection contains DictionaryEntry items where the key is the
            flags to test and the value is the image object.
            Row flags are tested in the order they are found in the list.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.MinRow">
            <summary>
            Returns/sets the minimum row in the grid.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.IsEmbedded">
            <summary>
            Returns true if the SalTableWindow control is embedded
            and the columns are owned/parented by the container.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.ActionType">
            <summary>
            Returns/Sets the current action that changed the cell selection.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.AnchorRow">
            <summary>
            Returns the current anchor row used when dragging the mouse to 
            select multiple rows.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.Columns">
            <summary>
            Returns the collection of columns.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.Rows">
            <summary>
            Returns the collection of rows in the main grid.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.SplitRows">
            <summary>
            Returns the collection of rows in the split grid.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.TableFlags">
            <summary>
            Returns/Sets table flags. TBL_Flag_*
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.RowHeader">
            <summary>
            Returns the column used as the row header.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.ColHeader">
            <summary>
            Returns the row used as the col header.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.RowHeaderFlags">
            <summary>
            Returns/Sets row header flags. TBL_RowHdr_*
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.RowHeaderTitle">
            <summary>
            Returns/Sets the row header title.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.RowHeaderWidth">
            <summary>
            Returns/Sets the row header width.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.RowHeaderTitleAlign">
            <summary>
            Indicates how the row header title should be aligned.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.ContextRow">
            <summary>
            Returns/Sets the context row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.FocusRow">
            <summary>
            Returns/Sets the focus row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.Redraw">
            <summary>
            Enables/Disables redrawing for the control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.DefaultRowHeight">
            <summary>
            Returns/Sets the defult height of new rows.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.DisableSelectionEvents">
            <summary>
            Enables/Disables processing of selection events.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.DisableEditEvents">
            <summary>
            Enables/Disables processing of selection events.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.RowHeaderMirrorCol">
            <summary>
            Returns/Sets the column used to update the row headers.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindowBase.ActiveColumn">
            <summary>
            Returns the currectly focused column. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableWindowBase.ChangeCellAction">
            <summary>
            Types of actions that can change the current cell.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableWindowBase.FlexGridSubclass">
            <summary>
            Subclasses the child grid control to dispatch Windows messages to the
            container control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableWindowBase.FlexGridEditSubclass">
            <summary>
            Subclass the cell edit control to dispatch windows messages
            to the container control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindowBase.FlexGridEditSubclass.OnChildWndProc(System.Windows.Forms.NativeWindow,System.Windows.Forms.Message@)">
            <summary>
            Receives messages from the inner edit control
            in a combobox cell-editor and dispatches to the parent control.
            </summary>
            <param name="sender"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableWindowBase.FlexGridEditSubclass.EditCtrlSubclass">
            <summary>
            Subclass the combobox edit control to dispatch windows messages
            to the container control.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalTableWindow._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalTableWindow.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.#ctor">
            <summary>
            Constructs a SalTableWindow control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.#ctor(PPJ.Runtime.Windows.SalWindow)">
            <summary>
             Constructs an embedded SalTableWindow control.
            </summary>
            <param name="salWndHost"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.UpdateLinesPerRow">
            <summary>
            Updates all the rows to match the LinesPerRow property.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetMergedRange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Overrides GetMergedRange to allow the SalTableWindow class to override the method.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="clip"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FromControl(System.Windows.Forms.Control)">
            <summary>
            Casts the control to SalTableWindow. If the control
            is an instance of SalFormTableWindow, returns the inner
            table control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DispatchKeyboardMessage(System.Windows.Forms.Message@)">
            <summary>
            Dispatch the keyboard message to the active child grid.
            Our table window container may have the focus and/or may receive
            keyboard messages from the user code which need to be processed
            by the child grid.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetModified(PPJ.Runtime.Windows.SalTableColumn,System.Boolean)">
            <summary>
            Turns on the table-wide edited flag.
            </summary>
            <param name="col"></param>
            <param name="on"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetColumnFromId(System.Int32)">
            <summary>
            Gets the table window column control with the specified id.
            </summary>
            <param name="colId">The column identifier.</param>
            <returns>SalTableColumn</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetColumnFromPos(System.Int32)">
            <summary>
            Gets the table window column control at the specified position.
            </summary>
            <param name="colPos">The column position.</param>
            <returns>SalTableColumn</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.AutoSizeCols(System.Int32,System.Int32,System.Int32)">
            <summary>
            Autosizes the specified column.
            </summary>
            <param name="colStart"></param>
            <param name="colEnd"></param>
            <param name="extraSpace"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.AutoSizeColsInternal(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.Int32)">
            <summary>
            #BugFix: FlexGrid resizes adds some padding (about 12px) to the size of columns resized
            usign the text in the header and doesn't resize empty columns.
            </summary>
            <param name="grid"></param>
            <param name="col"></param>
            <param name="extraSpace"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FireSamSetFocus(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.Int32)">
            <summary>
            Sends SAM_SetFocus to the column (if it's editable) and to the table.
            </summary>
            <param name="grid"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FireSamSetFocus(PPJ.Runtime.Windows.SalTableColumn,System.Int32,System.Int32)">
            <summary>
            Sends SAM_SetFocus to the column (if it's editable) and to the table.
            </summary>
            <param name="col"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FireSamKillFocus(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.Int32)">
            <summary>
            Sends SAM_KillFocus to the column (if it's editable) and to the table.
            </summary>
            <param name="grid"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FireSamKillFocus(PPJ.Runtime.Windows.SalTableColumn,System.Int32,System.Int32)">
            <summary>
            Sends SAM_KillFocus to the column (if it's editable) and to the table.
            </summary>
            <param name="col"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FireSamAnyEdit(C1.Win.C1FlexGrid.C1FlexGrid)">
            <summary>
            Send SAM_AnyEdit to the current column.
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FireWindowActions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends the SAL message to the table.
            </summary>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FireWindowActions(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends the SAL message to the column and the table.
            </summary>
            <param name="col"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FireWindowActions(PPJ.Runtime.Windows.SalTableColumn,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends the SAL message to the column and the table.
            </summary>
            <param name="col"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DestroyAutomaticColumns">
            <summary>
            Removes the automatic columns that may have been created by a previous
            SalTblPopulate call. If the table contains any automatic columns, all 
            columns are destroyed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.CreateAutomaticColumns(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Creates automatic columns from the sql result set.
            </summary>
            <param name="hSql"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnDrawCell(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.OwnerDrawCellEventArgs)">
            <summary>
            Implements custom drawing features that are not available in the standard flexgrid component
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Don't validate the TableWindow control if the current cell is not validated.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnChildGridWndProc(System.Windows.Forms.NativeWindow,C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.Message@)">
            <summary>
            Receives all the Windows messages from the inner flexgrid control
            before they are processed by the grids WndProc.
            
            All the messages are dispatched to the MessageActions handler.
            
            This function returns true if the message is processed and should not
            be dispatched to the default window procedure.
            </summary>
            <param name="sender"></param>
            <param name="grid"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnWmCommand(System.Windows.Forms.NativeWindow,C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.Message@)">
            <summary>
            Handles WM_COMMAND to generate SAM_AnyEdit and SAM_DropDown events.
            </summary>
            <param name="sender"></param>
            <param name="grid"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnWmLButtonDblClk(System.Windows.Forms.NativeWindow,C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.Message@)">
            <summary>
            Handles WM_LBUTTONDBLCLK to generate SAM_DoubleClick when clicking on a
            check box column on the checkbox area within the cell.
            </summary>
            <param name="sender"></param>
            <param name="grid"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.AutoStartDragMode(C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.Message@)">
            <summary>
            Attempts to automatically initiate drag mode if the control responds to SAM_DragCanAutoStart.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnChildEditWndProc(System.Windows.Forms.NativeWindow,System.Windows.Forms.Control,System.Windows.Forms.Message@)">
            <summary>
            Receives all windows messages from the cell editor control
            before they are processed by the control's WndProc.
            
            Returns true to indicate that the message has been handled
            and the control's WndProc should not process it.
            </summary>
            <param name="sender"></param>
            <param name="edit"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ProcessMouseMessage(C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.Message)">
            <summary>
            Dispatch the mouse message to the column or to the
            table control.
            </summary>
            <param name="grid"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ProcessKeyboardMessage(C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.Message)">
            <summary>
            Dispatch the keyboard message to the current column or to the
            table control. If the message is not handled, processes standard key combinations.
            </summary>
            <param name="grid"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ProcessRight(C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.Keys)">
            <summary>
            Process the Right key.
            If the cell text is selected, pressing the Right key should
            result in the same action as if having pressed the Tab key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ProcessSpace(C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.Keys)">
            <summary>
            Process the Space key.
            Toggles the selection of the current row if no cell has the focus.
            </summary>
            <param name="grid"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ProcessEsc(C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.Keys)">
            <summary>
            Process the Escape key.
            Removes the focus cell and selects the current row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ProcessTab(C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.Keys)">
            <summary>
            Process the Tab key.
            Selects the next editable cell. If at last cell, generates
            SAM_EndCellTab and process the return value from the application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ProcessReturn(C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.Keys)">
            <summary>
            Process the Return key.
            If MapEnterToTab is on, generate a tab key press.
            Otherwise it performs a click on the default button on the parent form.
            </summary>
            <param name="grid"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ProcessIns(C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.Keys)">
            <summary>
            Process the Ins key.
            Switches from edit mode in the first editable cell to terminating the edit mode
            and selecting the entire row.
            </summary>
            <param name="grid"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ProcessCtrlEnd(C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.Keys)">
            <summary>
            Process the Ctrl+End key to force the grid to fetch the entire result set.
            </summary>
            <param name="grid"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ProcessClipboard(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32)">
            <summary>
            Paste to the focus cell.
            </summary>
            <param name="grid"></param>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SelectNextEditableCell(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.Int32)">
            <summary>
            Selects the next editable cell.
            Wraps to the previous row if necessary.
            </summary>
            <param name="grid"></param>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SelectPrevEditableCell(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.Int32)">
            <summary>
            Selects the previous editable cell.
            Wraps to the previous row if necessary.
            </summary>
            <param name="grid"></param>
            <param name="row"></param>
            <param name="col"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.IsLastCell(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.Int32)">
            <summary>
            Returns true if the specified cell is the last one in the grid.
            </summary>
            <param name="grid"></param>
            <param name="col"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetNextEditableCell(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32@,System.Int32@)">
            <summary>
            Returns the next editable col/row.
            If the last cell is reached, it wraps to the first cell in the next row.
            </summary>
            <param name="grid"></param>
            <param name="col"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetPrevEditableCell(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32@,System.Int32@)">
            <summary>
            Returns the previous editable col/row.
            If the first cell is reached, it wraps to the last cell in the previous row.
            </summary>
            <param name="grid"></param>
            <param name="col"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.CanTabInto(C1.Win.C1FlexGrid.Row)">
            <summary>
            Returns true if can tab into the row.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.CanTabInto(C1.Win.C1FlexGrid.Column)">
            <summary>
            Returns true if can tab into the column.
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnBeforeMouseDown(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.BeforeMouseDownEventArgs)">
            <summary>
            Saves the hit test before the flexgrid can collapse a node and scroll the content down.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnMouseDown(C1.Win.C1FlexGrid.C1FlexGrid,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Sends :	
            		SAM_Click
            		SAM_DoubleClick
            		SAM_CaptionDoubleClick
            		SAM_ColumnSelectClick
            		SAM_CornerClick
            		SAM_CornerDoubleClick
            		SAM_RowHeaderClick
            		SAM_RowHeaderDoubleClick
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnLeaveEdit(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Prevents the user from leaving the cell by pressing Esc if it contains
            an invalid value.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnValidateEdit(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.ValidateEditEventArgs)">
            <summary>
            Validates the current column.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnBeforeRowColChange(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Sends SAM_KillFocus and SAM_RowValidate when the current
            cell is about to change.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnAfterRowColChange(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Sends SAM_RowSetContext, SAM_SetFocus and SAM_Click
            when the current row or column is changed.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.StartAutoEditing(C1.Win.C1FlexGrid.C1FlexGrid)">
            <summary>
            Starts editing mode on the current cell.
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnRowChangeValidate(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Validates the row by generating the SAM_RowValidate event on the table control.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnButtonClick(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Generate SAM_Click when the edit button is clicked.
            This is not CTD standard, it's an extension for 
            CellType.Button.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnChangeEdit(C1.Win.C1FlexGrid.C1FlexGrid,System.EventArgs)">
            <summary>
            Generate SAM_AnyEdit when editing a cell.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnResize(C1.Win.C1FlexGrid.C1FlexGrid,System.EventArgs)">
            <summary>
            Fetches rows in the visible range when the table control is resized.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnAfterScroll(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.RangeEventArgs)">
            <summary>
            Fetches rows in the visible range when the main grid is scrolled.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnFontChanged(System.EventArgs)">
            <summary>
            Adjusts dimensions when the font changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnHandleCreated(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.CorrectAccessibilityData">
            <summary>
            TEIEEFW-7266
            Solves the problem with control based child tables having their column attributes set AFTER being connected the grids Controls collection.
            This leads to Accessibility problems since the columns can not be correctly idenfitied using automation tools.
            Column Name (and other attributes) is set normally set after the column is attached to the grid, which forces us to update the already
            connected grids and their Name attribute a little bit later to get the Accessibility logic right. /Rakuse
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.UpdateColHeaders">
            <summary>
            Updates the height of the column headers
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.OnAfterResizeRow(C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.RowColEventArgs)">
            <summary>
            Updates the size of all  the rows in the specified grid.
            </summary>
            <param name="grid"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.AnyRows(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Determines whether any rows in the specified table window match certain flags. If
            you set flagsOn to zero (0) and flagsOff to zero (0), SalTblAnyRows returns TRUE
            if the table window contains any rows at all, regardless of their flags.
            </summary>
            <param name="flagsOn">The flags that the row should have. You can combine ROW * flags using the OR (|) operator.</param>
            <param name="flagsOff">The flags that the row should not have. You can combine ROW * flags using the OR (|) operator.</param>
            <returns>true if any</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ClearSelection">
            <summary>
            Deselects all rows of a table window.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.CopyRows(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Copies the contents of the specified table window rows to the Clipboard in text format.
            In the Clipboard, columns are delimited by TAB characters and rows are delimited
            by end-of-line characters. Set flagsOn to zero (0) and flagsOff to zero
            (0) to copy the entire table.
            </summary>
            <param name="flagsOn">The flags that the row should have. You can combine ROW* flags using the OR (|) operator. NflagsOff Number. The flags that the row should not have. You can combine ROW* flags using the OR (|) operator.</param>
            <param name="flagsOff">The flags that the row should have. You can combine ROW* flags using the OR (|) operator.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ColumnAverage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Computes the average of all column values or only specified column values in a table
            window.
            </summary>
            <param name="columnId"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ColumnSum(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Computes the sum of all column values or only specified column values in a table
            window.
            </summary>
            <param name="columnId"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.CreateColumn(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Creates a table window column of string data type at runtime. When you return to
            design mode, destroys the column.
            </summary>
            <param name="colPos">The Column Position</param>
            <param name="dispWidth">The display width of the column in pixels.</param>
            <param name="maxChars">The maximum number of characters that the column can contain.</param>
            <param name="title">The column title.</param>
            <returns>Column ID</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.CreateColumnEx(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a table window column using a given data type at runtime.
            Allowed types are DT_String, DT_Number and DT_DateTime
            </summary>
            <param name="table"></param>
            <param name="columnPos"></param>
            <param name="dispWidth"></param>
            <param name="title"></param>
            <param name="maxChars"></param>
            <param name="dataType"></param>
            <returns>Column ID</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.CreateColumn(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.Windows.DataType)">
            <summary>
            Creates a table window column of string data type at runtime. When you return to
            design mode, destroys the column.
            </summary>
            <param name="colPos">The Column Position</param>
            <param name="dispWidth">The display width of the column in pixels.</param>
            <param name="maxChars">The maximum number of characters that the column can contain.</param>
            <param name="title">The column title.</param>
            <param name="dataType">The SAL data type constant.</param>
            <returns>Column ID</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DefineRowHeader(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Defines the appearance and behavior of a table window's row header. The row header
            is a non-editable area on the left edge of a table window that displays information
            that stays displayed even when a user scrolls horizontally. A typical use
            of a row header is the display of row numbers.
            </summary>
            <param name="title">The title of the row header column.</param>
            <param name="width">The width of the row header in pixels.</param>
            <param name="flags">The row header attributes. You can combine these flags using the OR (|) operator. Possible values include: TBLRow Hde marke eidts Tbls share ocoler Tbla hdar Visiilbe. TBL RowHdr Visible TBL RowHdr MarkEdits TBL RowHdr ShareColor TBL RowHdr Sizable</param>
            <param name="column">The column that the row header mirrors. Whatever displays in the row header. If colId is 0, the row header is blank.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DefineSplitWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Splits a table window horizontally.
            </summary>
            <param name="rows"></param>
            <param name="resize"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.QuerySplitWindow(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalBoolean@)">
            <summary>
            Returns the current configuration of the split table.
            </summary>
            <param name="nRowsLowerHalf"></param>
            <param name="bDragAdjust"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DeleteRow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Deletes a row from a table window but not from the database.
            </summary>
            <param name="rowNum">The number of the row to delete.</param>
            <param name="flag">A constant used to coordinate a delete from the table window with a with a delete from a database result set. This parameter can be one of these values: TBL_Adjust, TBL_NoAdjust</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DeleteSelected(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Applies a SQL DELETE statement to all table window rows with the ROW Selected flag.
            </summary>
            <param name="hSql">Sql handle with the prepared DELETE statement</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DeleteSelected(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL DELETE statement to all table window rows with the ROW Selected flag.
            </summary>
            <param name="hSql">Sql handle with the prepared DELETE statement</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DestroyColumns">
            <summary>
            Destroys all automatic columns created by SalTblCreateColumn or SalTblPopulate at
            runtime. This function only works on table windows that contain only automatic
            columns.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DoDeletes(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalNumber)">
            <summary>
            Applies a SQL DELETE statement to all table window rows that have nFlagsOn flags.
            </summary>
            <param name="hSql">Sql handle with the prepared DELETE statement</param>
            <param name="flagsOn">uses row flags to determine which rows to delete. You can specify either of these flags: ROW Mark Deleted ROW Selected</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DoDeletes(PPJ.Runtime.Sql.SalSqlHandle,System.Int32,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL DELETE statement to all table window rows that have nFlagsOn flags.
            </summary>
            <param name="hSql">Sql handle with the prepared DELETE statement</param>
            <param name="flagsOn">uses row flags to determine which rows to delete. You can specify either of these flags: ROW Mark Deleted ROW Selected</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DoInserts(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean)">
            <summary>
            Applies a SQL INSERT statement to all the rows in a table window that have the ROW_New flag.
            </summary>
            <param name="hSql">Sql handle with the prepared INSERT statement</param>
            <param name="clearFlags">Whether to reset the ROW New flag. If TRUE, clears the ROW New flag of each inserted row; if FALSE, does not clear the ROW New flag of each inserted row. This is useful for error handling; if an error occurs, you can rollback the transaction and try again.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DoInserts(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL INSERT statement to all the rows in a table window that have the ROW_New flag.
            </summary>
            <param name="hSql">Sql handle with the prepared INSERT statement</param>
            <param name="clearFlags">Whether to reset the ROW New flag. If TRUE, clears the ROW New flag of each inserted row; if FALSE, does not clear the ROW New flag of each inserted row. This is useful for error handling; if an error occurs, you can rollback the transaction and try again.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DoUpdates(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean)">
            <summary>
            Applies a SQL UPDATE statement to all table window rows with the Row_Edited flag.
            </summary>
            <param name="hSql">Sql handle with the prepared UPDATE statement</param>
            <param name="clearFlags">If TRUE, clears the Row Edited flag of each changed row; if FALSE, does not clear the Row Edited flag of each changed row. This is useful for error handling; if an error occurs, you can roll back the transaction and try again.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DoUpdates(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalBoolean,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Applies a SQL UPDATE statement to all table window rows with the Row_Edited flag.
            </summary>
            <param name="hSql">Sql handle with the prepared UPDATE statement</param>
            <param name="clearFlags">If TRUE, clears the Row Edited flag of each changed row; if FALSE, does not clear the Row Edited flag of each changed row. This is useful for error handling; if an error occurs, you can roll back the transaction and try again.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FetchRow(PPJ.Runtime.SalNumber)">
            <summary>
            Sends a SAM_FetchRow message to a table window if the specified row
            has not been already fetched.
            </summary>
            <param name="rowNum">The row number.</param>
            <returns>Result</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FetchRowInternal(System.Int32,PPJ.Runtime.Windows.SalTableRow@)">
            <summary>
            Sends SAM_FetchRow and SAM_FetchRowDone if the row has not been fetched.
            </summary>
            <param name="rowNum"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FetchRowsInRange">
            <summary>
            Fetches all the rows in the visible range + slack.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SendSamFetchMessage(PPJ.Runtime.Windows.SalTableRow)">
            <summary>
            Sends SAM_FetchRow and SAM_FetchRowDone if the row has not been fetched.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FetchAll">
            <summary>
            Fetch all rows.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FindNextRow(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Scans forward in a table looking for a row whose flags match those specified.
            </summary>
            <param name="rowNum">The row at which to begin the search; the search starts on row + 1.</param>
            <param name="flagsOn">The flags the row should have.</param>
            <param name="flagsOff">The flags the row should not have.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FindNextRowInternal(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the first row with the specified flags.
            </summary>
            <param name="rows"></param>
            <param name="start"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FindPrevRow(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Scans backward in a table looking for a row whose flags match those specified.
            </summary>
            <param name="rowNum">The row at which to begin the search; the search starts on row - 1.</param>
            <param name="flagsOn">The flags the row should have</param>
            <param name="flagsOff">The flags the row should not have.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FindPrevRowInternal(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Returns the previous row with the specified flags.
            </summary>
            <param name="rowNum"></param>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetColumnText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Gets data from a column of a table window's context row.
            </summary>
            <param name="table"></param>
            <param name="colId"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetColumnText(PPJ.Runtime.SalNumber)">
            <summary>
            Gets data from a column of a table window's context row.
            </summary>
            <param name="table"></param>
            <param name="colId"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetColumnWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Gets the handle of a table window column.
            </summary>
            <param name="nCol"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.InsertRow(PPJ.Runtime.SalNumber)">
            <summary>
            Inserts a new blank row into a table window.
            </summary>
            <param name="rowNum">The row number of the new row.</param>
            <returns>New row number</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.KillCellEdit">
            <summary>
            Ends edit mode in the current cell.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.KillFocusRow">
            <summary>
            Turns off the table window's focus frame.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.HitTest(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalWindowHandle@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the part of the table window located at a given coordinate.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="row"></param>
            <param name="col"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.PasteRows">
            <summary>
            Pastes the contents of the Clipboard to the specified table window. Assumes
            the Clipboard data is in text format with cells delimited by tab characters and
            rows delimited by end-of-line characters. Inserts the new rows into the
            table window without overwriting existing rows, and converts the data to the
            data types of the corresponding table window columns.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.Populate(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Populates the table window with the result of the select.
            </summary>
            <param name="hSql"></param>
            <param name="select"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.Populate(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Populates the table window with the result of the select.
            </summary>
            <param name="hSql"></param>
            <param name="select"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetContextRow">
            <summary>
            Returns a table window's current context row. Before sending a SAM_FetchRow message,
            automatically sets the context row so that assignments made while processing
            the message reference the correct row.
            </summary>
            <returns>Context row</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.QueryFocusCell(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalWindowHandle@)">
            <summary>
            Identifies the cell in a table window with the focus.
            </summary>
            <param name="rowNum">Focus row</param>
            <param name="column">Focus column</param>
            <returns>SalTableColumn</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetLinesPerRow(PPJ.Runtime.SalNumber@)">
            <summary>
            Retrieves the height of a row in lines.
            </summary>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetLinesPerRow">
            <summary>
            Retrieves the height of a row in lines.
            </summary>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetLockedColumns">
            <summary>
            Retrieves the number of locked table window columns. Locked table window columns
            do not scroll horizontally; they are fixed to the left side of the table window.
            All other columns appear to scroll under the locked columns.
            </summary>
            <returns>Number of locked columns</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetRowFlags(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Queries a row's flags.
            </summary>
            <param name="rowNum">The row number of the row whose flags you want to test.</param>
            <param name="flags">The row flags to test for. You can combine ROW* flags using the OR (|) operator.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.QueryRowHeader(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalWindowHandle@)">
            <summary>
            Gets a table window's row header definition. The row header is a non-editable area
            on the left edge of a table window that displays information that you do not want
            to scroll off the screen as the user scrolls horizontally. A typical use is
            the display of row numbers.
            </summary>
            <param name="title">The title of the row header.</param>
            <param name="maxTitle">The maximum length of the title.</param>
            <param name="width">The width of the row header in pixels.</param>
            <param name="flags">Row header attributes. Specify one of these: TBL_RowHdr_MarkEdits TBL_RowHdr_ShareColor TBL_RowHdr_Sizable TBL_RowHdr_Visible</param>
            <param name="column">The column that the row header mirrors.</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.QueryScroll(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a table window's current scroll position and range. The scroll position is
            the row number of the row that is currently at the top of the window. You set
            the table window range with SalTblSetRange and changes it when you insert
            or delete rows from the table window.
            </summary>
            <param name="position">The scroll position.</param>
            <param name="minRange">The minimum table range.</param>
            <param name="maxRange">The maximum table range.</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetTableFlags(PPJ.Runtime.SalNumber)">
            <summary>
            Tests the state of a table window's flags.
            </summary>
            <param name="flags">The table flags to test. You can combine TBL * flags using the OR (|) operator.</param>
            <returns>True if any of the flags indicated by nFlags are set and FALSE otherwise.</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.QueryVisibleRange(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the current range of visible rows in a table window.
            </summary>
            <param name="minRange">The first visible row.</param>
            <param name="maxRange">The last visible row.</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ResetTable">
            <summary>
            Clears a table window by discarding all rows from the table window cache and setting
            the table range to 0, -1.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ResetTableInternal">
            <summary>
            Clears a table window by discarding all rows from the table window cache and setting
            the table range to 0, -1.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ScrollRow(PPJ.Runtime.SalNumber,System.Windows.Forms.Control)">
            <summary>
            Scrolls a table window to the specified row and column.
            </summary>
            <param name="rowNum">The number of the row to scroll to. If you specify -1, only the column scrolls into view.</param>
            <param name="column">The table window column to scroll into view. If you specify 0, only the row scrolls into view.</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ScrollRow(PPJ.Runtime.SalNumber,System.Windows.Forms.Control,PPJ.Runtime.SalNumber)">
            <summary>
            Scrolls a table window to the specified row and column.
            </summary>
            <param name="rowNum">The number of the row to scroll to. If you specify -1, only the column scrolls into view.</param>
            <param name="column">The table window column to scroll into view. If you specify 0, only the row scrolls into view.</param>
            <param name="flags">The position of the scroll row. Specify one of these: TBL_AutoScroll, TBL_ScrollBottom, TBL_ScrollTop.</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetContextRow(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a table window's context row. Setting the context row does not send a SAM_FetchRow
            message. If the row is not currently in memory, creates a new row
            in memory and sets its cell values to null.
            </summary>
            <param name="rowNum">The row number of the new context row.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetColumnText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Assigns data to a column of a table window's context row.
            </summary>
            <param name="columnId"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetFlagsAnyRows(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets or clears row flags.
            </summary>
            <param name="flags">The flags to change. You can combine flag values using the OR (|) operator.</param>
            <param name="on">Whether to set (TRUE) or clear (false) the specified flags.</param>
            <param name="flagsOn">The flags that the rows should have. You can combine flag values using the OR (|) operator. Set flagsOn to zero (0) and flagsOff to zero (0) to specify all rows.</param>
            <param name="flagsOff">The flags that the rows should not have. You can combine flag values using the OR (|) operator. Set flagsOn to zero (0) and flagsOff to zero (0) to specify all rows.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetFocusRow(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a table window's focus frame row.
            </summary>
            <param name="rowNum">The row number of the row to which to apply the focus frame.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetFocusCell(PPJ.Runtime.SalNumber,System.Windows.Forms.Control,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the focus to the specified table window cell (row and column). Puts
            the table window into edit mode and lets the user select a portion of the data in
            the cell.
            </summary>
            <param name="rowNum">The row that receives the edit focus.</param>
            <param name="column">The handle (or name) of the column that receives the edit focus.</param>
            <param name="editMin">The position of the left-most character. When used with nEditMax, this parameter lets the user select a portion of the cell text. nEditMin must be less than or equal to nEditMax. To select all the characters in a cell, specify zero (0) for this parameter and -1 for nEditMax.</param>
            <param name="editMax">The position of the right-most character. When used with nEditMin, this parameter lets the user select a portion of the cell text. nEditMax must be greater than or equal to nEditMin. To select all the characters in a cell, specify -1 for this parameter and zero (0) for nEditMin.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetLinesPerRow(PPJ.Runtime.SalNumber)">
            <summary>
            Sets the height of a row in lines.
            </summary>
            <param name="table"></param>
            <param name="nLines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetFocusCellEditor(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Selects the text in the edit control.
            </summary>
            <param name="editor"></param>
            <param name="editMin"></param>
            <param name="editMax"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetLockedColumns(PPJ.Runtime.SalNumber)">
            <summary>
            Sets the number of locked columns.
            </summary>
            <param name="locked"></param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetRange(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Defines the minimum and maximum rows (range) of a table.
            </summary>
            <param name="min">The lower boundary of the table window.</param>
            <param name="max">The upper boundary of the table window. Setting nMin and nMax: nMin must be less than or equal to nMax. You can specify an empty table with the range 0, -1. You can specify a dynamic range with the values zero (0) TBLMaxRow , . determines the higher boundary when the application returns TBL_NoMoreRows from a SAM_FetchRow message, or from the return of the SAM_FetchDone message.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetRow(PPJ.Runtime.SalNumber)">
            <summary>
            Sets the focus to the first, last, next, or previous row in a table window.
            </summary>
            <param name="rowPos">The position of the focus row. Specify one of these values: TBL_SetFirstRow TBL_SetLastRow BL_SetNextRow TBL_SetPrevRow</param>
            <returns>rowNum</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetRowFlags(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears a table window row's flags.
            </summary>
            <param name="rowNum">The row number of the row whose flags you want to set or clear.</param>
            <param name="flags">The row flags. You can combine any of the ROW* flags using the OR (|) operator.</param>
            <param name="on">Whether to set (TRUE) or clear (false) the specified flags.</param>
            <returns>bool</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetTableFlags(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears a table window's flags.
            </summary>
            <param name="flags">The table flags. You can combine any of the TBL_* flags using the OR (|) operator.</param>
            <param name="on">Whether to set (TRUE) or clear (false) the specified flags.</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SortRows(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sorts the rows of a table window based on the values in one of the
            table window's columns.
            </summary>
            <param name="colId"></param>
            <param name="order">TBL SortDecreasing or TBL_SortIncreasing</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetNextColumn(PPJ.Runtime.Windows.SalTableColumn,System.Boolean)">
            <summary>
            Returns the next column in the columns collection in order of ID.
            </summary>
            <param name="prev"></param>
            <param name="forward"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.FireWindowActionsToChildren(System.Int32,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the children's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.DisableWindowAndLabel">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            A label is the label control that immediately precedes the window in the outline.
            The label control must have a mnemonic. If the window contains text (for
            example, a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.EnableWindowAndLabel">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window in the
            outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.SetLabelText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of the associaetd label control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetLabelText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.GetLabelText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.ShowWindowAndLabel">
            <summary>
            Makes a window and its associated label visible. A label is the label control that
            immediately precedes the window in the outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.HideWindowAndLabel">
            <summary>
            Hides a window and its associated label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TraceTableRow(System.String,System.IntPtr,System.Int32,PPJ.Runtime.Windows.SalTableColumnCollection)">
            <summary>
            Writes table row information to trace
            </summary>
            <param name="TableName"></param>
            <param name="Handle"></param>
            <param name="Row"></param>
            <param name="Columns"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TraceTableColumns(System.String,System.IntPtr,PPJ.Runtime.Windows.SalTableColumnCollection)">
            <summary>
            Writes information about created columns to trace
            </summary>
            <param name="TableName"></param>
            <param name="Handle"></param>
            <param name="Columns"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.Item(System.Int32)">
            <summary>
            Returns the table column object with the specified column ID.
            The ID is 1-based.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.Item(System.String)">
            <summary>
            Returns the table column object with the specified name.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.LinesPerRow">
            <summary>
            Number of lines per row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.AllowRowSizing">
            <summary>
            Allow row sizing.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.CultureInfo">
            <summary>
            Returns/Sets the culture to use for this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.ShouldSerializeCultureInfo">
            <summary>
            Prevents the designer from serializing inherited CultureInfo.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.ReadOnly">
            <summary>
            Returns/Sets the ReadOnly flag. When the ReadOnly flag is true
            the entire TableWindow control cannot be edited. However, the Mouse, scrolling and
            the Keyboard are still active.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.AllowAutoEditing">
            <summary>
            Enables/Disables AutoEditing mode. When this mode is on, the grid 
            automatically enters edit mode when a cell is selected.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.RowSizingStyle">
            <summary>
            Keeps all rows of the same height.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.AllowFiltering">
            <summary>
            Enables/Disables the excel-style filtering feature.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.CellContextMenu">
            <summary>
            Returns/Sets the context menu to use with the cell editor control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.CellContextMenuStrip">
            <summary>
            Returns/Sets the context menu to use with the cell editor control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.BackgroundFillInterval">
            <summary>
            Fill interval for the background filler, in milliseconds.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.BackgroundFillRows">
            <summary>
            Number of rows to load on each interval
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.IsEmbedded">
            <summary>
            Returns true if the SalTableWindow control is embedded
            and the columns are owned/parented by the container.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.EditValidated">
            <summary>
            Returns/Sets a flag that indicates if the current editor is validated.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.Label">
            <summary>
            Returns/Sets the label associated with this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible. 
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableWindow.TableFiller">
            <summary>
            This class manages table filling functions.
            It fills the table rows from a sql DataSet or DataReader, or fills new rows 
            created by setting the table range. Operates only on the main grid.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.#ctor(PPJ.Runtime.Windows.SalTableWindow)">
            <summary>
            Constructs a new table filler. There is only one 
            instance of this class for each table control.
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.Reset">
            <summary>
            Crears up all members.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.FillRange(System.Int32)">
            <summary>
            Fills the table range. If the number of rows is not dynamic (-1)
            all the rows are created immediatly.
            </summary>
            <param name="maxRows"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.FillAll(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Fills the table from the entire result set or data set.
            </summary>
            <param name="hSql"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.FillNormal(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Fills the visible rows only. More rows will be filled as they become visible.
            </summary>
            <param name="hSql"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.FillBackground(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Fills the visible rows and starts a timer to load the rest in the background.
            </summary>
            <param name="hSql"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.FillToRow(System.Int32)">
            <summary>
            Fills rows until the requested row number is reached.
            </summary>
            <param name="rowNum"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.FillVisibleRows">
            <summary>
            Fills all visible rows.
            </summary>
            <param name="rowNum"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.OnFillBackgroundTimer(System.Object,System.EventArgs)">
            <summary>
            Called by the background timer to fill the next row.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.FillNextRow">
            <summary>
            Loads the next row in the table window.
            Redirects the call to FillNextRowRange() or FillNextRowSql().
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.FillNextRowRange">
            <summary>
            Fetches the next row in the row range set using SalTblSetRange.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.FillNextRowSql">
            <summary>
            Fetches the next row in the result set or data set and
            fills the columns in the next table row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.ConvertValue(System.Object,System.Int32)">
            <summary>
            Parses Date/Time and Number strings that are returned as invariant formatted strings from
            the database. If the parsing fails, the value is returned unchanged.
            </summary>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.PrepareForSqlFilling(PPJ.Runtime.Sql.SalSqlHandle)">
            <summary>
            Prepares the filler instance for populating the table control as necessary.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.GetLastRow">
            <summary>
            Returns the last row in the main grid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.CreateAllRows">
            <summary>
            Creates all grid rows up to the maximum number specified.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.SendSamCountRows">
            <summary>
            Sends SAM_CountRows to get the maximum number of rows from the application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableWindow.TableFiller.m_table_HandleDestroyed(System.Object,System.EventArgs)">
            <summary>
            Reset the filler when the table is destroyed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableWindow.TableFiller.Busy">
            <summary>
            Returns true if the filler is busy filling.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableWindow.TableFiller.FillMode">
            <summary>
            Table filling modes
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.AddTool(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.SetTipText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.SetStatusText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.GetTipText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.DeleteTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.GetStatusText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.IsTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.SetStatusText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.SetTipText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.GetTipText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.DeleteTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.GetStatusText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.IsTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.TooltipText">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipChildTable.TooltipStatus">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox">
            <summary>
            ComboBox with tool tip support
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.AddTool(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.SetTipText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.SetStatusText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.GetTipText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.DeleteTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.GetStatusText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.IsTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.SetStatusText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.SetTipText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.GetTipText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.DeleteTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.GetStatusText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.IsTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.TooltipText">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipComboBox.TooltipStatus">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField">
            <summary>
            Datafield with tool tip support
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.AddTool(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.SetTipText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.SetStatusText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.GetTipText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.DeleteTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.GetStatusText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.IsTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.SetStatusText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.SetTipText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.GetTipText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.DeleteTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.GetStatusText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.IsTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.TooltipText">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipDataField.TooltipStatus">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar">
            <summary>
            Horizontal scroll bar with tool tip support
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.AddTool(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.SetTipText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.SetStatusText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.GetTipText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.DeleteTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.GetStatusText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.IsTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.SetStatusText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.SetTipText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.GetTipText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.DeleteTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.GetStatusText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.IsTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.TooltipText">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipHScrollBar.TooltipStatus">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox">
            <summary>
            Listbox with tool tip support
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.AddTool(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.SetTipText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.SetStatusText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.GetTipText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.DeleteTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.GetStatusText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.IsTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.SetStatusText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.SetTipText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.GetTipText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.DeleteTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.GetStatusText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.IsTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.TooltipText">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipListBox.TooltipStatus">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField">
            <summary>
            Multiline field with tool tip support
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.AddTool(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.SetTipText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.SetStatusText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.GetTipText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.DeleteTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.GetStatusText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.IsTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.SetStatusText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.SetTipText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.GetTipText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.DeleteTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.GetStatusText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.IsTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.TooltipText">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipMultilineField.TooltipStatus">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton">
            <summary>
            Option check button with tool tip support
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.AddTool(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.SetTipText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.SetStatusText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.GetTipText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.DeleteTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.GetStatusText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.IsTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.SetStatusText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.SetTipText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.GetTipText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.DeleteTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.GetStatusText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.IsTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.TooltipText">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipOptionButton.TooltipStatus">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture">
            <summary>
            Picture with tool tip support
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.AddTool(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.SetTipText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.SetStatusText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.GetTipText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.DeleteTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.GetStatusText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.IsTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.SetStatusText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.SetTipText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.GetTipText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.DeleteTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.GetStatusText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.IsTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.TooltipText">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipPicture.TooltipStatus">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton">
            <summary>
            Pushbutton with tool tip support
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.AddTool(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.SetTipText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.SetStatusText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.GetTipText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.DeleteTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.GetStatusText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.IsTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.SetStatusText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.SetTipText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.GetTipText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.DeleteTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.GetStatusText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.IsTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.TooltipText">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipPushButton.TooltipStatus">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton">
            <summary>
            Pushbutton with tool tip support
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.AddTool(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.SetTipText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.SetStatusText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.GetTipText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.DeleteTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.GetStatusText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.IsTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.SetStatusText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.SetTipText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.GetTipText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.DeleteTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.GetStatusText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.IsTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.TooltipText">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipRadioButton.TooltipStatus">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow">
            <summary>
            Pushbutton with tool tip support
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.AddTool(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.SetTipText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.SetStatusText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.GetTipText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.DeleteTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.GetStatusText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.IsTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.SetStatusText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.SetTipText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.GetTipText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.DeleteTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.GetStatusText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.IsTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.TooltipText">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipTableWindow.TooltipStatus">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar">
            <summary>
            Pushbutton with tool tip support
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.AddTool(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.SetTipText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.SetStatusText(PPJ.Runtime.SalWindowHandle,PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.GetTipText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.DeleteTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.GetStatusText(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.IsTool(PPJ.Runtime.SalWindowHandle)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.SetStatusText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.SetTipText(PPJ.Runtime.SalString)">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.GetTipText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.DeleteTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.GetStatusText">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.IsTool">
            <summary>
            Multiple Inheritance: Wrapper function.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.TooltipText">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickToolTipVScrollBar.TooltipStatus">
            <summary>
            Multiple Inheritance: Wrapper property.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.ToolTips.ToolTip">
            <summary>
            ToolTip control implementation.
            Wraps the ToolTip control from the Common Controls library.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.OnShow(PPJ.Runtime.Windows.ToolTips.ToolTipEventArgs)">
            <summary>
            Fires the Show event.
            </summary>
            <param name="tool"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.OnNeedText(PPJ.Runtime.Windows.ToolTips.ToolTipEventArgs)">
            <summary>
            Fires the NeedText event.
            </summary>
            <param name="tool"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.OnPop(PPJ.Runtime.Windows.ToolTips.ToolTipEventArgs)">
            <summary>
            Fires the Pop event.
            </summary>
            <param name="tool"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.AddTool(System.Windows.Forms.Control,System.String,System.Object,System.Int32)">
            <summary>
            Registers a control with the tooltip manager.
            </summary>
            <param name="ctrl"></param>
            <param name="tip"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.DeleteTool(System.Windows.Forms.Control)">
            <summary>
            Removes the control from the tooltip manager.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.GetToolInfo(System.Windows.Forms.Control)">
            <summary>
            Returns the ToolTipInfo associated with the control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.IsTool(System.Windows.Forms.Control)">
            <summary>
            Returns true if the control has been added as a tooltip tool.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.SetToolTip(System.Windows.Forms.Control,System.String)">
            <summary>
            Changes the ToolTipInfo associated with the control.
            </summary>
            <param name="ctrl"></param>
            <param name="tip"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.ShowTip(System.Windows.Forms.Control,System.String,System.Drawing.Point)">
            <summary>
            Shows the tooltip at the requested coordinates.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <param name="pos"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.HideTip(System.Windows.Forms.Control)">
            <summary>
            Hides the tooltip control.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.CalcToolTipRect(System.String,System.Drawing.Point)">
            <summary>
            Returns the rectangle to be used to show the tooltip.
            </summary>
            <param name="text"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.SetDelayTime(System.Int32,System.Int32)">
            <summary>
            Alters the delay times.
            </summary>
            <param name="type"></param>
            <param name="time"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.GetDelayTime(System.Int32)">
            <summary>
            Returns the delay times.
            </summary>
            <param name="type"></param>
            <param name="time"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.GetMaxWidth">
            <summary>
            Returns the maximum width.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.SetMaxWidth(System.Int32)">
            <summary>
            Sets the maximum width.
            </summary>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.SetBackColor(System.Drawing.Color)">
            <summary>
            Sets the background color.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.SetTextColor(System.Drawing.Color)">
            <summary>
            Sets the text color.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.CreateHandle">
            <summary>
            Creates the control
            </summary>
            <param name="cp"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.RecreateHandle">
            <summary>
            Destroys and recreates the handle and re-registers
            all the tools with the new tooltip control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.CreateTOOLINFO(System.IntPtr,System.Int32)">
            <summary>
            Creates and fills a TOOLINFO structure.
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.AddDelTOOL(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Sends TTM_ADDTOOL or TTM_DELTOOL for the specified control.
            </summary>
            <param name="ctrl"></param>
            <param name="flags"></param>
            <param name="delete"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.GetInfo(System.Windows.Forms.Control)">
            <summary>
            Returns the ToolTipInfo associated with the control
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.AddInfo(System.Windows.Forms.Control,System.String,System.Object)">
            <summary>
            Adds the ToolTipInfo associated to the control
            </summary>
            <param name="ctrl"></param>
            <param name="tip"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.RemoveInfo(System.Windows.Forms.Control)">
            <summary>
            Removes the ToolTipInfo associated with the control.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Window procedure to process tooltips notifications.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.WmNotify(System.Windows.Forms.Message@)">
            <summary>
            Processes WM_NOTIFY messages from the tooltip window.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.WmNotifyPop(PPJ.Runtime.Windows.SDK.CommonControls.NMHDR@)">
            <summary>
            Processes the TTN_POP notification.
            </summary>
            <param name="nmhdr"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.WmNotifyShow(PPJ.Runtime.Windows.SDK.CommonControls.NMHDR@)">
            <summary>
            Processes the TTN_SHOW notification.
            </summary>
            <param name="nmhdr"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.WmNotifyNeedText(PPJ.Runtime.Windows.SDK.CommonControls.TOOLTIPTEXT@)">
            <summary>
            Processes the TTN_NEEDTEXT notification.
            </summary>
            <param name="nmhdr"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.ToolTips.ToolTip.ctrl_HandleDestroyed(System.Object,System.EventArgs)">
            <summary>
            When the controls are destroyed they are removed from the
            collection of registered tooltip controls.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.ToolTips.ToolTip.Baloon">
            <summary>
            Enables/Disables the baloon style for tooltips.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.ToolTips.ToolTip.InitialDelay">
            <summary>
            Returns/Sets the initial delay timer
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.ToolTips.ToolTip.AutoPopDelay">
            <summary>
            Returns/Sets the automatic pop delay timer.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.ToolTips.ToolTip.ReshowDelay">
            <summary>
            Returns/Sets the reshow delay timer.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.ToolTips.ToolTip.MaxWidth">
            <summary>
            Returns/Sets the maximum width for the tooltip.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.ToolTips.ToolTip.Visible">
            <summary>
            Returns true if the tooltip is currently visible.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.ToolTips.ToolTip.BackColor">
            <summary>
            Returns/Sets the background color for the tooltip.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.ToolTips.ToolTip.TextColor">
            <summary>
            Returns/Sets the text color for the tooltip.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.ToolTips.ToolTipInfo">
            <summary>
            Contains the tooltip text and status text for the
            control that is managed by the tooltip manager.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.ToolTips.ToolTipHandler">
            <summary>
            ToolTip events delegate
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.ToolTips.ToolTipEventArgs">
            <summary>
            ToolTip events arguments
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.Unsupported.cSWTabs">
            <summary>
            These classes are not supported and skipped by the translator
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.QO.SalQuickHTML">
            <summary>
            Web Browser Control
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.EnumLinks(PPJ.Runtime.SalArray{PPJ.Runtime.SalString},PPJ.Runtime.SalArray{PPJ.Runtime.SalString})">
            <summary>
            Retrieves all links for a page
            </summary>
            <param name="sLinks"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.GetSource(PPJ.Runtime.SalString@)">
            <summary>
            Obtains the HTML for a specified page.
            </summary>
            <param name="sHTML"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.GetCurrentURL(PPJ.Runtime.SalString@)">
            <summary>
            Returns the URL for the page.
            </summary>
            <param name="sURL"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.GetPageTitle(PPJ.Runtime.SalString@)">
            <summary>
            Returns the page title.
            </summary>
            <param name="sTitle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.GetStatus">
            <summary>
            Returns the status code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.GoHome">
            <summary>
            Displays the page specified by the HomePage property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.GoSearch">
            <summary>
            Displays the page specified by the SearchPage property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.PageCancel">
            <summary>
            Cancels loading the current page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.PageLoad(PPJ.Runtime.SalString)">
            <summary>
            Loads a specified page.
            </summary>
            <param name="sURL"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.PageBackward">
            <summary>
            Displays the previous page from the history list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.PageForward">
            <summary>
            Displays the next page from the history list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.PageReload">
            <summary>
            Reloads the current page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.SetSource(PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Sets the source text to display
            </summary>
            <param name="sPath"></param>
            <param name="sSource"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.QO.SalQuickHTML.PageOpen">
            <summary>
            Opens a local html page.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:PPJ.Runtime.Windows.QO.SalQuickHTML.AllowBrowserDrop" -->
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.LoadImages">
            <summary>
             Flag to determine if images are loaded and displayed.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.LinkColor">
            <summary>
            Color of the hyperlink text.
            </summary>		
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.LinkFollowedColor">
            <summary>
            Color of hyperlink text that has been followed by the user.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.ProxyPort">
            <summary>
            Identifies the proxy port.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.BrowserName">
            <summary>
            The HTTP User-Agent header field to determine what type of Web
            client is making the request.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.FromName">
            <summary>
            Name that appears in the HTTP header From field.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.HomePage">
            <summary>
            Specified which URL page to load when the GoHome() function is executed.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.SearchPage">
            <summary>
            Specified which URL page to load when GoSearch() function is executed.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.PageURL">
            <summary>
            The URL of the currently visible page.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.ProxyServerName">
            <summary>
            Identifies the proxy server name.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.UserName">
            <summary>
            Identifies the user name for basic authentication to a page.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.UserPassword">
            <summary>
            Identifies the password for basic authentication to a page.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.SaveDirectory">
            <summary>
            The default directory for downloads and saved files.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.ShowToolbar">
            <summary>
            Shows/Hides the toolbar.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.ShowToolbarOpen">
            <summary>
            Shows/Hides the open toolbar button.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.ShowToolbarHome">
            <summary>
            Shows/Hides the home toolbar button.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.ShowToolbarBack">
            <summary>
            Shows/Hides the back toolbar button.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.ShowToolbarForward">
            <summary>
            Shows/Hides the forward toolbar button.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.ShowToolbarSearch">
            <summary>
            Shows/Hides the search toolbar button.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.ShowToolbarStop">
            <summary>
            Shows/Hides the stop toolbar button.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.ShowToolbarRefresh">
            <summary>
            Shows/Hides the refresh toolbar button.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.ShowToolbarCut">
            <summary>
            Shows/Hides the cut toolbar button.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.ShowToolbarCopy">
            <summary>
            Shows/Hides the copy toolbar button.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.ShowToolbarPaste">
            <summary>
            Shows/Hides the paste toolbar button.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.ShowStatusBar">
            <summary>
            Shows/Hides the statusbar.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.ShowAddressBar">
            <summary>
            Shows/Hides the address bar.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.Toolbar">
            <summary>
            Returns the toolbar control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.AddressBar">
            <summary>
            Returns the address bar control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.Statusbar">
            <summary>
            Returns the statusbar control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.QO.SalQuickHTML.WebBrowser">
            <summary>
            Returns the inner WebBrowser control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalApplication">
            <summary>
            Base class for SAL applications.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.#ctor(System.String[])">
            <summary>
            Constructs a new SalApplication instance and processes the startup
            arguments.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.Run(System.String[])">
             <summary>
             Main method to startup a SAL application. The SAL application
             class that extends SalApplication should call this method in the
             application's Main method.
             
             Example:
             
             <code>
             public static int Main(string[] args)
             {
            		return new PortedSalApplication().Run(args);
             }
             </code>
            
             </summary>
             <param name="args"></param>
             <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.EnableVisualStyles">
            <summary>
            Enables XP visual styles.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.OnApplicationStartup(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Application.Idle event.
            This method is called when the message loop is empty
            and the application enters the idle state.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.OnApplicationExit(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Application.ApplicationExit event.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.OnApplicationIdleKick(System.Object,System.EventArgs)">
            <summary>
            Event handler for the Application.Idle event.
            Used to dispatch messages to the windows registered for the idle kick.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.SaveStartupArgs(System.String[])">
            <summary>
            Saves the startup arguments in the Sys.strArgArray
            system variable.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.ProcessStartupArgs(System.String[])">
            <summary>
            Detects application switches:
            	/xp						= turns on XP visual styles
            	/noxp					= turns off XP visual styles
            	/visualstyles=on|off	= turns on XP visual styles (same as /xp)
            	/noxp					= turns off XP visual styles
            	/log=filename			= enables exceptions and messages logging to [application].log
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.AddForm(System.Windows.Forms.Form)">
            <summary>
            Increase the reference count for the
            application object. It is called every time
            a new SalForm is created.
            </summary>
            <returns>Updated reference count</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.form_HandleDestroyed(System.Object,System.EventArgs)">
            <summary>
            Automatically remove the forms from the forms collection when it's destroyed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.RemoveForm(System.Windows.Forms.Form)">
            <summary>
            Decreases the reference count for the application object.
            When the count drops to zero (or below if there is a bug), the
            application exits. It is called everytime a Sal form is destroyed.
            
            This should emulate SAL application's behavior with respect
            to top level windows. When the last form is destroyed the app exits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.DelayDispose(System.IDisposable)">
            <summary>
            Queue the object to be disposed at the next idle notification.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.OnAppStartup">
            <summary>
            Corresponds to SAM_AppStartup
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.OnAppCreateAutomaticForms">
            <summary>
            Forms that have the AutomaticallyCreate property set to true
            are created in the implementation of this function.
            This is called after OnAppStartup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.OnAppExit">
            <summary>
            Corresponds to SAM_AppExit
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.OnSqlError(PPJ.Runtime.Sql.SalSqlError)">
            <summary>
            Corresponds to SAM_SqlError
            </summary>
            <param name="Error"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.OnUnhandledException(System.Threading.Thread,System.Threading.ThreadExceptionEventArgs)">
            <summary>
            Unhandled exception event.
            </summary>
            <param name="thread"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.OnThreadException(System.Object,System.Threading.ThreadExceptionEventArgs)">
            <summary>
            Receives unhandled exceptions from window procedures.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.CallOnSqlError(PPJ.Runtime.Sql.SalSqlError)">
            <summary>
            Invokes the OnSqlError handler function
            </summary>
            <param name="Error"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.Disable">
            <summary>
            Disables input to all open forms. Use SalAppDisable and SalAppEnable when
            there are multiple applications running simultaneously and you want to control which
            application receives user input.
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.Enable">
            <summary>
            Enables input to all open forms that were disabled by SalAppDisable. Use SalAppDisable
            and SalAppEnable when there are multiple applications running simultaneously
            and you want to control which application receives user input.
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.Find(System.String,System.Boolean)">
            <summary>
            Finds a visible top-level window for the specified application.
            its window handle.
            </summary>
            <param name="name"></param>
            <param name="activate"></param>
            <returns>hWnd</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.GetProfileInt(System.String,System.String,System.UInt32,System.String)">
            <summary>
            Retrieves the integer value of an entry in the specified section of an initialization
            file or registry.
            </summary>
            <param name="section"></param>
            <param name="entry"></param>
            <param name="defaultValue"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.GetProfileString(System.String,System.String,System.String,PPJ.Runtime.SalString@,System.String)">
            <summary>
            Retrieves the string value of an entry in the specified section of an initialization
            file or registry.
            </summary>
            <param name="section"></param>
            <param name="entry"></param>
            <param name="defaultValue"></param>
            <param name="value"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.LoadApp(System.String,System.String)">
            <summary>
            Starts an application.
            </summary>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.LoadAppInternal(System.String,System.Int32,System.Boolean,System.Boolean,System.Int32@)">
            <summary>
            Starts an application, then waits for it to exit before returning control to the
            original application.
            </summary>
            <param name="command"></param>
            <param name="mode"></param>
            <param name="disable"></param>
            <param name="wait"></param>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.LoadAppAndWait(System.String,System.Int32,PPJ.Runtime.SalNumber@)">
            <summary>
            Starts an application, then waits for it to exit before returning control to the
            original application.
            </summary>
            <param name="name"></param>
            <param name="mode"></param>
            <param name="retCode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.LoadAppAndProcessMsgs(System.String,System.Int32,PPJ.Runtime.SalNumber@)">
            <summary>
            Starts an application, then waits for it to exit before returning control to the original application.
            However, the original application can continue to process messages.
            </summary>
            <param name="name"></param>
            <param name="mode"></param>
            <param name="retCode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.SetProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            Set the value of an entry in the specified section of an initialization file or registry.
            All profile information is stored as string, so if you want to store an
            integer it must be converted to a string first. Then it can be retrieved as an
            integer using the SalGetProfileInt- Function .
            </summary>
            <param name="sSection">The section heading.</param>
            <param name="sEntry">The entry whose associated value is being set.</param>
            <param name="sValue">The value of sEntry.</param>
            <param name="sFileName">The name of the initialization file or company name depending on the settings made using the SalUseRegistry function. If you are searching for an INI file and do not specify the full path, searches for the file in the Windows subdirectory.</param>
            <returns>bOk</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.SalApplication.UseRegistry(System.Boolean,System.String)" -->
        <member name="M:PPJ.Runtime.Windows.SalApplication.IdleKick">
            <summary>
            Generate an idle cicle.
            </summary>
            <returns>bOk</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.IdleRegister(System.Windows.Forms.Control,System.Int32,System.Int32,System.Int32)">
            <summary>
            Registers a control to receive the specified message when there is an idle state.
            </summary>
            <param name="ctrl"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.IdleUnregister(System.Windows.Forms.Control)">
            <summary>
            Stops sending idle messages to a control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.Pause(System.Int32)">
            <summary>
            Pauses the application for the specified number of milliseconds
            while dispatching messages.
            </summary>
            <param name="usec"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.StartTrace(System.Int32,System.String,System.Boolean)">
            <summary>
            Allows tracing to begin.
            </summary>
            <param name="outputType"></param>
            <param name="traceFile"></param>
            <param name="clear"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.EndTrace">
            <summary>
            Stops all tracing. Any calls to SalTrace() occurring after SalEndTrace() will be ignored.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.Trace(System.Int32,System.String)">
            <summary>
            Outputs a string to the trace output target selected earlier in the SalStartTrace function. 
            Note that if tracing is not already activated, this function will return TRUE even though no trace action is taken.
            When writing to the event log, the severity level is kept in numeric form. When writing to any other output target, it is translated into a tex string such as "Warning".
            </summary>
            <param name="nSeverity"></param>
            <param name="sTextToWrite"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.SalApplication.UseEventLog(System.Boolean,System.Boolean)" -->
        <member name="M:PPJ.Runtime.Windows.SalApplication.Quit">
            <summary>
            Forces the termination of the application.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.Exit">
            <summary>
            Calls Application.Exit after forcing garbage collection.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.TerminateProcess">
            <summary>
            Terminates the current process immediately.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.CloseAllForms">
            <summary>
            Closes all the forms registered with the application.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.FireSkinChanged">
            <summary>
            Fires the SkinChanged event.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.ApplySkin(System.Windows.Forms.Form)">
            <summary>
            Enables skinning for the form.
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.ApplySkin(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Enables skinning for the control.
            </summary>
            <param name="control"></param>
            <param name="children"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.RemoveSkin(System.Windows.Forms.Form)">
            <summary>
            Disables skinning for the form.
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.RemoveSkin(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Disables skinning for the control.
            </summary>
            <param name="control"></param>
            <param name="children"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.LoadSkinFile(System.String)">
            <summary>
            Loads the specified skin file.
            <remarks>When loading a skin file, skinning is enabled automatically.</remarks>
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.LoadSkinResource(System.String)">
            <summary>
            Loads the specified skin file from the application's embedded resources.
            <remarks>When loading a skin file, skinning is enabled automatically.</remarks>
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalApplication.LoadSkinResource(System.Reflection.Assembly,System.String)">
            <summary>
            Loads the specified skin file from the assembly's embedded resources.
            <remarks>When loading a skin file, skinning is enabled automatically.</remarks>
            </summary>
            <param name="assembly"></param>
            <param name="name"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.DefaultPrinterSettings">
            <summary>
            Returns the default printer settings.
            This is set by SalPrt
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.XPStyle">
            <summary>
            Enables disables XP visual styles.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.VisualStyles">
            <summary>
            Enables disables Windows visual styles.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.FormsScaleFactor">
            <summary>
            Global autoscaling factor used for all forms in the application.
            It is empty by default. In which case the standard scaling is used.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.Title">
            <summary>
            Returns the title of the application loaded from
            the AssemblyTitle attribute;
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.CompanyName">
            <summary>
            Returns the company of the application loaded from
            the AssemblyCompany attribute;
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.Version">
            <summary>
            Returns the version of the framework.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.ApplicationType">
            <summary>
            Returns the type of the application.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.ThreadModel">
            <summary>
            Returns the threading model.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.UseCompatibleTextRendering">
            <summary>
            Returns the value of the internal property Control.UseCompatibleTextRendering.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.Instance">
            <summary>
            Returns the instance of the application
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.TopLevelForms">
            <summary>
            Returns a list of all top-level forms that belong to this application.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.Quitting">
            <summary>
            Returns true if the application is terminating becasue Quit() was called.
            </summary>
        </member>
        <member name="E:PPJ.Runtime.Windows.SalApplication.SkinChanged">
            <summary>
            Fired when the loaded skin changes.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.VisualStyler">
            <summary>
            Returns the thread-safe instance of the VisualStyler component.
            <remarks>VisualStyler can be used directly to set advanced properties.</remarks>
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.SalSkinner">
            <summary>
            Creates a new thread-safe instance of the skinner engine integration component.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalApplication.SkinApplication">
            <summary>
            Enables/Disables the skinning of the entire application.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalApplication.MainWindowFinder">
            <summary>
            Replaces the window finder in .NET ProcessManager because it is buggy and does not
            return the handle of .NET forms because it tests for the GW_OWNER to be Zero while
            .NET forms always have an owner. When the owner is null, .NET sets the ParkingWindow
            as the owner.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalEditMask">
            <summary>
            All functionality to apply and remove edit masks from
            an input string is encapsulated in this class.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.#ctor(System.String)">
            <summary>
            Construct a new instance with a specified mask.
            </summary>
            <param name="mask"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.MaskText(System.String)">
            <summary>
            Masks the input string.
            </summary>
            <param name="pValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.MaskControl(System.Windows.Forms.TextBoxBase)">
            <summary>
            Masks the text in the edit control.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.MaskControl(System.Windows.Forms.ComboBox)">
            <summary>
            Masks the text in the editable combobox control.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.IsValidChar(System.Char,System.Int32)">
            <summary>
            Returns true if the specified char is valid
            against the mask at the specified position.
            </summary>
            <param name="c"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.UnmaskText(System.String)">
            <summary>
            Strips the mask from the input string.
            <param name="text"></param>
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.SetText(System.Windows.Forms.Control,System.String)">
            <summary>
            Updates the text in the control preserving the modified flag.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.IsMaskChar(System.Char)">
            <summary>
            Returns true if the character is a mask symbol.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.ApplyMaskToChar(System.Char,System.Char)">
            <summary>
            Applies the mask to the input char. If the char
            is invalid, returns '\0'.
            </summary>
            <param name="textChar"></param>
            <param name="maskChar"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.ParseMask(System.String)">
            <summary>
            Splits the mask into an array of strings where the mask chars
            are grouped together and separated from the additional chars.
            </summary>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.ApplyMaskInternal(System.String)">
            <summary>
            Applies the mask to the specified text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.ApplyMaskInternal(System.String,System.Int32@)">
            <summary>
            Applies the mask to the specified text.
            </summary>
            <param name="text"></param>
            <param name="caret">Original caret position. The value is updated with the new adjusted position.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.RemoveMaskInternal(System.String,System.Boolean)">
            <summary>
            Unmasks the specified text.
            </summary>
            <param name="text"></param>
            <param name="keepLast"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.RemoveMaskInternal(System.String,System.Boolean,System.Int32@)">
            <summary>
            Unmasks the specified text.
            </summary>
            <param name="text"></param>
            <param name="keepEdges"></param>
            <param name="caret">Original caret position. The value is updated with the new adjusted position.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.ProcessBackspace(System.Windows.Forms.TextBoxBase)">
            <summary>
            Deletes the previous filler (non-mask) characters
            when processing the backspace.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalEditMask.ProcessBackspace(System.Windows.Forms.ComboBox)">
            <summary>
            Deletes the previous filler (non-mask) characters
            when processing the backspace.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalEditMask.Mask">
            <summary>
            Returns/Sets the edit mask
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalEditMask.MaxLength">
            <summary>
            Returns the max length of the field using this edit mask.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalEditMask.KeepMask">
            <summary>
            Returns true if the mask should be kept.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalEditMask.IsEmpty">
            <summary>
            Returns true if the edit mask is empty.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalEditMask.IsUpdating">
            <summary>
            Returns true if the class is currently updating the text in a control.
            It's used to avoid re-entering OnTextChanged.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalNamedProperties">
            <summary>
            Collection of named properties for SAL controls.
            Keeps two hashmaps in order to preserve the case of the original keys
            when serializing and deserializing but to be case-insensitive when searching
            or adding properties.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalWindow">
            <summary>
            Delegate class for Sal windows functionality.
            Since we cannot inherit from .NET controls and from our class we
            need to implement all common functionality here and then delegate calls
            using method wrappers.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Scale(System.Drawing.Size)">
            <summary>
            Scales the input with the current dpi scale factor
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Scale(System.Drawing.Point)">
            <summary>
            Scales the input with the current dpi scale factor
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Scale(System.Int32)">
            <summary>
            Scales the input with the current dpi scale factor
            </summary>
            <param name="value">Value to be scaled</param>
            <returns>Scaled value</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.#cctor">
            <summary>
            Static constructor. Initializes shared even handlers.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.#ctor(PPJ.Runtime.Windows.ISalWindow)">
            <summary>
            Creates a new instance of SalWindow and saves the control
            that is bound to this instance.
            </summary>
            <param name="salWnd"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.InitializeControl">
            <summary>
            Hooks up all the events necessary for SalWindow to handle the control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.OnDisposed(System.Object,System.EventArgs)">
            <summary>
            Stops dispatching events when the control is disposed.
            This also fixes a memory leak with context menus: .NET does not
            call Dispose() on the ContextMenu which is leaked to allCreatedMenuItems.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.DefaultWndProc(System.Windows.Forms.Message@)">
            <summary>
            Dispatch the message to the default .NET implementation.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.op_Implicit(System.Windows.Forms.Control)~PPJ.Runtime.Windows.SalWindow">
            <summary>
            Automatically casts a control to a SalWindow instance.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ProcessWndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes windows messages for SAL controls.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.DispatchThenProcess(System.Windows.Forms.Message@)">
            <summary>
            Dispatch the message to MessageActions and then process in the WndProc.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ProcessThenDispatch(System.Windows.Forms.Message@)">
            <summary>
            Process in WndProc first (to give .NET a chance to update the control's properties) and then 
            dispatch to MessageActions.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.WmNcCreate(System.Windows.Forms.Message@)">
            <summary>
            Detect design mode on WM_NCCREATE, before any other
            message gets dispatched.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.WmClose(System.Windows.Forms.Message@)">
            <summary>
            Process WM_CLOSE by sending SAM_Close first to the application.
            SAM_Close is exactly the same as WM_CLOSE (only message in CTD) so we
            don't dispatch the original Windows message.
            
            Additionally CTD destroys a child controls that receives WM_CLOSE, while
            .NET (and Windows in general) doesn't. So here we translated WM_CLOSE to WM_DESTROY
            if it is sent to a child control.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.WmDestroy(System.Windows.Forms.Message@)">
            <summary>
            WM_DESTROY must be processed before the .NET framework, otherwise
            all the members of the controls instance are cleared in the
            OnHandleDestroyed handler.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.WmSetFocus(System.Windows.Forms.Message@)">
            <summary>
            WM_SETFOCUS and WM_KILLFOCUS need to be handled here because the .NET
            framework does not keep track of the wParam (window losing and gaining the focus).
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.WmKillFocus(System.Windows.Forms.Message@)">
            <summary>
            WM_SETFOCUS and WM_KILLFOCUS need to be handled here because the .NET
            framework does not keep track of the wParam (window losing and gaining the focus).
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.WmContextMenu(System.Windows.Forms.Message@)">
            <summary>
            WM_CONTEXTMENU is translated to SAM_ContextMenu. If the form
            does not process SAM_ContextMenu, the default ContextMenu .NET implementation is invoked.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.WmReflectedCommand(System.Windows.Forms.Message@)">
            <summary>
            Dispatches the reflected WM_COMMAND as SAM_CustControlCmd
            messages to SalCustomControl controls.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.WmReflectedNotify(System.Windows.Forms.Message@)">
            <summary>
            Dispatches the reflected WM_COMMAND as SAM_CustControlCmd
            messages to SalCustomControl controls.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.WmReflectedScroll(System.Windows.Forms.Message@)">
            <summary>
            Dispatches the reflected WM_HSCROLL and WM_VSCROLL
            messages to the target ScrollBar controls.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FireWindowActions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Fires the WindowActions event.
            </summary>
            <param name="msgCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FireWindowActions(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Fires the WindowActions event.
            </summary>
            <param name="msgCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.InvokeWindowActions(PPJ.Runtime.Windows.WindowActionsEventArgs,PPJ.Runtime.Windows.SalContext,System.Int32)">
            <summary>
            Dispatches the message to the MessageActions event handlers.
            </summary>
            <param name="args"></param>
            <param name="context"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ShouldDispatch(System.Int32)">
            <summary>
            Returns true if the message should be dispatched.
            Messages are not dispatched if:
            	- message dispatching is disabled
            	- the control has not registered handlers
            	- the control is disposed
            	- the message is not handled by the control's handlers
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsNotHandled(System.Int32)">
            <summary>
            Returns true if the message is in the ignore list.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetNotHandled(System.Int32)">
            <summary>
            Saves the message into the ignore list and keeps the
            list sorted to speed up the IsNotHandled binary search.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.AddMessageActions(System.Delegate)">
            <summary>
            Adds the specified handler to the list of delegates registered
            to received the MessageActions event.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.RemoveMessageActions(System.Delegate)">
            <summary>
            Removes the specified handler from the list.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.AddMessageActions(PPJ.Runtime.Windows.ISalWindow)">
            <summary>
            Adds the handlers from the target window to the 
            list of delegates registered to received the MessageActions event.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.AddWindowActions(System.Delegate)">
            <summary>
            Adds the specified handler to the list of delegates registered
            to handle the WindowActions event.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.AddWindowActions(PPJ.Runtime.Windows.ISalWindow)">
            <summary>
            Adds the handlers from the target window to the 
            list of delegates registered to received the WindowActions event.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.RemoveWindowActions(System.Delegate)">
            <summary>
            Removes the specified handler from the list.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetActionsManager(PPJ.Runtime.Windows.ISalWindow)">
            <summary>
            Returns the actions manager for the specfied control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetMousePositionFromLParam(System.IntPtr)">
            <summary>
            Converts Windows' LParam value to the corresponding signed X,Y mouse coordinates.
            </summary>
            <param name="lParam"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FireWindowActions(System.Windows.Forms.Control,System.Int32,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches a Sal messages directly to the control's WindowActions handlers.
            </summary>
            <param name="ctrl"></param>
            <param name="msgCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SendSalMessage(System.Windows.Forms.Control,System.Int32,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches a Sal messages directly to the control's WindowActions handlers.
            </summary>
            <param name="ctrl"></param>
            <param name="msgCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetLabel(System.Windows.Forms.Control)">
            <summary>
            Finds the Label assigned the specified control.
            Labels are assigned at startup using the TabIndex preeceding the control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetLabel(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Changes the Label assigned to the specified control.
            </summary>
            <param name="ctrl"></param>
            <param name="label"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FindLabelInternal(System.Windows.Forms.Control)">
            <summary>
            Finds the Label control with TabIndex less than the specified
            control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.OnValidate(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Performs validation by sending SAM_Validate.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ShouldValidate(System.Windows.Forms.Control)">
            <summary>
            Returns true if the edit control should be validated. The control
            should not be validated when:
            	- it's not an edit control
            	- it's not modified
            	- it's already validated
            	- it's a non-editable combobox
            </summary>
            <param name="edit"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsParentFormActive(System.Windows.Forms.Control)">
            <summary>
            Returns true if the parent form is currently active.
            This is used to fix a bug (or bad design) of .NET validation.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsTopLevelFormActive(System.Windows.Forms.Control)">
            <summary>
            Returns true if the top-level form is currently active.
            This is used to fixa bug (or bad design) of .NET validation.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FindTopForm(System.Windows.Forms.Control)">
            <summary>
            Returns the parent top-level form for the specified control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Validate(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Validates the specified control by sending SAM_Validate.
            </summary>
            <param name="edit"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ValidateInternal(System.Windows.Forms.Control,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sends SAM_Validate and processes the return value.
            </summary>
            <param name="edit"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ShowInvalidDataMsgBox(PPJ.Runtime.ISalEditControl)">
            <summary>
            Display the invalid data type message box.
            </summary>
            <param name="editCtrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsDeferredClick(System.Windows.Forms.Control)">
            <summary>
            Returns true if the validation has been triggered by a click
            on a button. In which case the click on the button is deferred
            in case the validation pops a message box and causes the button
            to lose the click.
            </summary>
            <param name="btn"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FormUnitsToPixels(System.Windows.Forms.Control,System.Boolean,System.Single,System.Single,System.Int32@,System.Int32@)">
            <summary>
            Performs the conversion from form units to pixels relative to the specified control
            </summary>
            <param name="ctrl"></param>
            <param name="useOwnFont"></param>
            <param name="unitsX"></param>
            <param name="unitsY"></param>
            <param name="pixelsX"></param>
            <param name="pixelsY"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.PixelsToFormUnits(System.Windows.Forms.Control,System.Boolean,System.Int32,System.Int32,System.Single@,System.Single@)">
            <summary>
            Performs the conversion from pixels to form units relative to the specified control.
            </summary>
            <param name="ctrl"></param>
            <param name="useOwnFont"></param>
            <param name="pixelsX"></param>
            <param name="pixelsY"></param>
            <param name="unitsX"></param>
            <param name="unitsY"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.PixelsToFormUnits(System.Drawing.Size,System.Int32,System.Int32,System.Single@,System.Single@)">
            <summary>
            Performs the conversion from pixels to form units using the specified scale.
            </summary>
            <param name="scale"></param>
            <param name="pixelsX"></param>
            <param name="pixelsY"></param>
            <param name="unitsX"></param>
            <param name="unitsY"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FormUnitsToPixels(System.Drawing.Size,System.Single,System.Single,System.Int32@,System.Int32@)">
            <summary>
            Performs the conversion from units to pixels using the specified scale.
            </summary>
            <param name="scale"></param>
            <param name="unitsX"></param>
            <param name="unitsY"></param>
            <param name="pixelsX"></param>
            <param name="pixelsY"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetAutoScaleSize(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Calculates the scale to convert units/pixels for the specified control.
            </summary>
            <param name="ctrl"></param>
            <param name="useOwnFont"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetFontScaleSize(System.Drawing.Font)">
            <summary>
            Retrieves the average size of the specified font.
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ScaleForm(System.Windows.Forms.Form,System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Scales the form using a TD compatible scaling algorithm.
            The .NET Framework is not very good at scaling...
            </summary>
            <param name="form"></param>
            <param name="oldScale"></param>
            <param name="newScale"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ScaleControl(System.Windows.Forms.Control,System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Scales the control and the child controls by converting the pixels
            bounds back to form units and then to pixels again using the new scale.
            This technique aligns the scaled controls with the form units used in the application.
            </summary>
            <param name="ctrl"></param>
            <param name="oldScale"></param>
            <param name="newScale"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ScalePadding(System.Windows.Forms.Control,System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Scales the padding of the control.
            </summary>
            <param name="ctrl"></param>
            <param name="oldScale"></param>
            <param name="newScale"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Scale(System.Drawing.Size,System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Scales the specified pixels by converting to form units first and then
            back to pixels using the new scaling factor.
            </summary>
            <param name="oldScale"></param>
            <param name="newScale"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Scale(System.Drawing.Point,System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Scales the specified pixels by converting to form units first and then
            back to pixels using the new scaling factor.
            </summary>
            <param name="oldScale"></param>
            <param name="newScale"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CreateWindowInternal(System.Type,System.Object[])">
            <summary>
            Creates an instance of the specified class by invoking the constructor with
            the matching number of parameters. The parameter types are adjusted to match
            the constructor parameters. This is used to created forms and dialogs using Sal
            functions.
            </summary>
            <param name="t"></param>
            <param name="parent"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.DoClipboardCommand(System.Int32)">
            <summary>
            Executes the requested clipboard message.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CanDoClipboardCommand(System.Int32)">
            <summary>
            Checks if the requested clipboard command is available.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CanCut(System.Windows.Forms.Control)">
            <summary>
            Returns true if the control can process the WM_CUT or WM_CLEAR clipboard commands
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CanCopy(System.Windows.Forms.Control)">
            <summary>
            Returns true if the control can process the WM_COPY clipboard commands
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CanPaste(System.Windows.Forms.Control)">
            <summary>
            Returns true if the control can process the WM_PASTE clipboard commands
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ClipboardHasData(System.String)">
            <summary>
            Returns true if the clipboard contains data compatible with the requested format.
            </summary>
            <param name="dataFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsEditControl(System.Windows.Forms.Control)">
            <summary>
            Returns true if the control is an editable control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetCultureInfo(System.Windows.Forms.Control)">
            <summary>
            Returns the culture associated with the specified control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.TranslateControl(System.Windows.Forms.Control)">
            <summary>
            Translate the parent control into a valid control instance:
            	- if the ClientArea is passed returns the form
            	- if a second base visual class is passed, returns the instance
            	- if a embedded TableWindow control is passed, returns the parent TableWindowForm
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetDerivedInstance(System.Windows.Forms.Control)">
            <summary>
            Drill down to the derived instance.
            It is used to get to the very last class that inherits
            the parameter as a second base class.
            </summary>
            <param name="salWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.TranslateFocus(System.IntPtr)">
            <summary>
            If the focus is in the inner grid control, return the handle of the wrapper SalTableWindow control. 
            If the focus is in the edit control used to edit cells, return the handle of the
            SalTableColumn control.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.TranslateFocus(System.Windows.Forms.Control)">
            <summary>
            If the focus is in the inner grid control, return the handle of the wrapper SalTableWindow control. 
            If the focus is in the edit control used to edit cells, return the handle of the
            SalTableColumn control.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CreateContextNamedMenu(System.Type)">
            <summary>
            Creates a ContextMenu object and copies all the menu items in the
            specified menu type.
            </summary>
            <param name="menuType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FindNamedMenu(System.Windows.Forms.Control,System.String)">
            <summary>
            Finds the specified name menu following .NET and CTD rules, in the following order:
            	- if the name is fully qualified, search the assemblies
            	- control's parent form named menus
            	- application named menus
            </summary>
            <param name="owner"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FindMenuOwner(System.Windows.Forms.Menu)">
            <summary>
            Returns the control that owns the menu item.
            </summary>
            <param name="menu"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FindMenuContext(System.Windows.Forms.Menu)">
            <summary>
            Returns the context in which the code associated to the menu item should run in.
            </summary>
            <param name="menu"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.HasAccessories(System.Windows.Forms.Control)">
            <summary>
            Returns true if the form has the accessories panels.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetFormState(System.Windows.Forms.Form,PPJ.Runtime.Windows.SalFormState)">
            <summary>
            Returns the form state.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetFormState(System.Windows.Forms.Form,PPJ.Runtime.Windows.SalFormState,System.Boolean)">
            <summary>
            Sets the closing flag to true.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsFormClosedOrClosing(System.Windows.Forms.Form)">
            <summary>
            Returns true if the form is closed or being closed.
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsValidating(System.Object)">
            <summary>
            Returns true if the specified control is being validated.
            e.g. we are inside SAM_Validate message.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsValidating">
            <summary>
            Returns true if any control is being validated.
            e.g. we are inside SAM_Validate message.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetDisposed(PPJ.Runtime.Windows.SalWindow)">
            <summary>
            Sets the creating flag to true.
            </summary>
            <param name="salWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsReadyToDispatch(PPJ.Runtime.Windows.SalWindow)">
            <summary>
            Returns true if the control can process messages
            dispatched to MessageActions.
            </summary>
            <param name="salWnd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetToolBar(System.Windows.Forms.Control)">
            <summary>
            Returns the SalToolbar control.
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetStatusBar(System.Windows.Forms.Control)">
            <summary>
            Returns the SalStatusBar control.
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetClientArea(System.Windows.Forms.Control)">
            <summary>
            Returns the SalClientArea panel.
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FindAccessory(System.Windows.Forms.Control,PPJ.Runtime.Windows.AccessoryType)">
            <summary>
            Returns the accessory control of the requested type.
            </summary>
            <param name="ctrl"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetMdiClient(System.Windows.Forms.Control)">
            <summary>
            Returns the MDI client area of the MDI container.
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.OnRadioButtonChecked(PPJ.Runtime.ISalRadioButton)">
            <summary>
            Checks the clicked radiobutton and updates 
            the radio buttons in the same group.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetSafeHandle(System.Windows.Forms.Control)">
            <summary>
            Returns the window handle of the control.
            If the control is disposed, or the handle is not created, it avoids
            creating the handle, which would cause a mess in the .NET library.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FromHandle(PPJ.Runtime.SalWindowHandle,System.Type)">
            <summary>
            Retrieves the control associated with the handle and
            casts it to the target type. If the target type is a
            second-base class in multiple inheritance tree, uses
            reflection to cast the control to the second-base instance.
            </summary>
            <param name="handle"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsSalMessage(System.Int32)">
            <summary>
            Returns true if the message is a known SAM message.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetSalMessageName(System.Int32)">
            <summary>
            Returns the name of a SAM message.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetMessageName(System.Int32)">
            <summmary>
            Returns the name of a windows message		/// 
            </summmary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsMouseMessage(System.Int32)">
            <summary>
            Returns true if the message code is a mouse or a keyboard message.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsKeyboardMessage(System.Int32)">
            <summary>
            Returns true if the message code is a mouse or a keyboard message.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsScrollBarVisible(System.Windows.Forms.Control,System.Windows.Forms.ScrollBars)">
            <summary>
            Returns true if the requested scrollbar is visible on the control.
            </summary>
            <param name="control"></param>
            <param name="bars"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetTextWithMask(System.Windows.Forms.Control)">
            <summary>
            Returns the text from the control keeping the input mask.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetTextWithoutMask(System.Windows.Forms.Control)">
            <summary>
            Returns the text from the control removing the input mask.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetKeyboardState">
            <summary>
            Returns the keyboard state buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetSortedControls(System.Windows.Forms.Control)">
            <summary>
            Returns the collection of controls sorted by the TabIndex.
            </summary>
            <param name="controls"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsMultiSelect(System.Windows.Forms.SelectionMode)">
            <summary>
            Returns true if the selection mode is multi.
            </summary>
            <param name="selMode"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ProcessMultiCharSelectionKeyPress(PPJ.Runtime.ISalListControl,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Processes key press events from the ListBox and the ComboBox controls to
            simulate the multi-char selection feature where list items are selected
            incrementally while pressing keys on the keyboard.
            </summary>
            <param name="list"></param>
            <param name="args"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.selTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Selection timer procedure. Used to reset the multi-char selection buffer.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CanCut">
            <summary>
            Returns true of the selection in the control with the focus can be cut.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CanCopy">
            <summary>
            Returns true of the selection in the control with the focus can be copied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CanPaste">
            <summary>
            Returns true if there is the control with the focus can paste the 
            text in the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CanUndo">
            <summary>
            Returns true if the control with the focus can undo the last edit operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Clear">
            <summary>
            Deletes the selection in the control with the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Copy">
            <summary>
            Copies the selection from the control with the focus to the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CopyString(System.String)">
            <summary>
            Copies the text to the clipboard.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Cut">
            <summary>
            Deletes the selected from the control with the focus and places it in the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Paste">
            <summary>
            Pastes the text in the clipboard to the control with the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.PasteString(System.String@)">
            <summary>
            Pastes the contents of the Clipboard into the specified string in text format.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Undo">
            <summary>
            Undoes the last edit in the control with the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.AddListItem(System.Windows.Forms.Control,System.String)">
            <summary>
            Adds a string to the list control.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ClearList(System.Windows.Forms.Control)">
            <summary>
            Deletes all entries from the list control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.DeleteListItem(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Deletes a list box or combo box entry.
            </summary>
            <param name="ctrl"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.InsertListItem(System.Windows.Forms.Control,System.Int32,System.String)">
            <summary>
            Inserts an entry into a list box or combo box at a specified position.
            </summary>
            <param name="ctrl"></param>
            <param name="index"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ListGetMultiSelect(System.Windows.Forms.Control)">
            <summary>
            Returns an array of index numbers of selected list box entries.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetListSelectedItems(System.Windows.Forms.Control,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Fills the target array with the indexes of the selected entries in the listbox.
            </summary>
            <param name="ctrl"></param>
            <param name="nSelectedArray"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.PopulateList(System.Windows.Forms.Control,PPJ.Runtime.Sql.SalSqlHandle,System.String)">
            <summary>
            Populates a list box or combo box with a result set.
            </summary>
            <param name="ctrl"></param>
            <param name="hSql"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.PopulateList(System.Windows.Forms.Control,PPJ.Runtime.Sql.SalSqlHandle,System.String,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Populates a list box or combo box with a result set.
            </summary>
            <param name="ctrl"></param>
            <param name="hSql"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetListItemsCount(System.Windows.Forms.Control)">
            <summary>
            Returns the number of list box or combo box entries.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetListSelectedItemsCount(System.Windows.Forms.Control)">
            <summary>
            Returns the number of selected entries in a multiple-selection list box.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetListSelectedIndex(System.Windows.Forms.Control)">
            <summary>
            Returns the index of the selected entry in a combo box or single-selection list box.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetListItemState(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Determines whether the specified list box or combo box entry is selected.
            </summary>
            <param name="ctrl"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetListItemTextLength(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Returns the length of a list box or combo box entry.
            </summary>
            <param name="ctrl"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetListItemText(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Returns an entry in the list box or combo box.
            </summary>
            <param name="ctrl"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetListItemText(System.Windows.Forms.Control,System.Int32,PPJ.Runtime.SalString@)">
            <summary>
            Returns an entry in the list box or combo box.
            </summary>
            <param name="ctrl"></param>
            <param name="index"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.SalWindow.SetListRedraw(System.Windows.Forms.Control,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.SalWindow.SetListSelectedText(System.Windows.Forms.Control,System.Int32,System.String)" -->
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetListSelectedItems(System.Windows.Forms.Control,System.Int32,System.Boolean)">
            <summary>
            Selects or deselects a combo box or multiple-selection list box entry.
            </summary>
            <param name="ctrl"></param>
            <param name="index"></param>
            <param name="select"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetListSelectedIndex(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Selects or deselects a combo box or single-selection list box entry.
            If the listbox is multiselect using -1 as the index value selects all items, while
            using any other invalid index value deselects all items. For normal listbox, using -1
            always deselects all items.
            </summary>
            <param name="ctrl"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetListTabStops(System.Windows.Forms.Control,PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Sets tabs in a list box. List boxes use tabs to align columns of data.
            </summary>
            <param name="ctrl"></param>
            <param name="tabs"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ListSetTabStops(System.Windows.Forms.Control,System.Collections.IList)">
            <summary>
            Sets tab stops in a list box or combo box control.
            </summary>
            <param name="ctrl"></param>
            <param name="tabStops"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CreateTabStopsArray(System.Windows.Forms.Control,System.Collections.IList)">
            <summary>
            Converts the form units array to dialog-box units, removes duplicates
            and sorts the array.
            </summary>
            <param name="tabStops"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.PopulateListFiles(System.Windows.Forms.Control,System.Windows.Forms.Control,PPJ.Runtime.SalString@,System.Int32)">
            <summary>
            Populates a list box or combo box with a directory of files.
            </summary>
            <param name="ctrl"></param>
            <param name="ctrlPath"></param>
            <param name="sPathName"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetListSelectedFile(System.Windows.Forms.Control,PPJ.Runtime.SalString@)">
            <summary>
            Fetches the selected directory or file name from a list box or combo box.
            </summary>
            <param name="ctrl"></param>
            <param name="sPathName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetListSelectedFile(System.Windows.Forms.Control)">
            <summary>
            Fetches the selected directory or file name from a list box or combo box.
            </summary>
            <param name="ctrl"></param>
            <param name="sPathName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.BringToTop(System.Windows.Forms.Control)">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Center(System.Windows.Forms.Control)">
            <summary>
            Centers a window relative to the parent, or the owner, or the screen.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Clear(System.Windows.Forms.Control)">
            <summary>
            Clears the value from a data field, multiline field, or table window column.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CreateWindow(System.Type,System.Windows.Forms.Control,System.Object[])">
            <summary>
            Creates modeless dialog boxes, MDI windows, form windows, and top-level table windows
            at runtime.
            </summary>
            <param name="type"></param>
            <param name="parent"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.SalWindow.CreateWindow(System.String,System.Windows.Forms.Control,System.Object[])" -->
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.SalWindow.CreateWindow(System.String,System.Windows.Forms.Control,System.Reflection.Assembly,System.Object[])" -->
        <member name="M:PPJ.Runtime.Windows.SalWindow.CreateWindow(System.Type,System.Windows.Forms.Control,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Object[])">
            <summary>
            Creates a form window, dialog box, or table window as a child of another form window,
            dialog box, or toolbar at runtime.
            </summary>
            <param name="type"></param>
            <param name="parent"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="flags"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CreateWindow(System.String,System.Windows.Forms.Control,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a form window, dialog box, or table window as a child of another form window,
            dialog box, or toolbar at runtime.
            </summary>
            <param name="typeName"></param>
            <param name="parent"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CreateWindow(System.String,System.Windows.Forms.Control,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Reflection.Assembly)">
            <summary>
            Creates a form window, dialog box, or table window as a child of another form window,
            dialog box, or toolbar at runtime.
            </summary>
            <param name="typeName"></param>
            <param name="parent"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="flags"></param>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Destroy(System.Windows.Forms.Control)">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.DisableWindow(System.Windows.Forms.Control)">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.DisableWindowAndLabel(System.Windows.Forms.Control)">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.EnableWindow(System.Windows.Forms.Control)">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.EnableWindowAndLabel(System.Windows.Forms.Control)">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window in the
            tab order.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.EndDialog(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Destroys a modal dialog box and returns control to the caller of SalModalDialog.
            </summary>
            <param name="dlg"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FindMember(System.Windows.Forms.Control,System.String)">
            <summary>
            Find a member in the specified control.
            Used as a helper functions to resolve unqualified references.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FindControl(System.Windows.Forms.Control,System.String)">
            <summary>
            Finds a member control in the specified control.
            Used as a helper functions to resolve unqualified references.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FindChild(System.Windows.Forms.Control,System.String)">
            <summary>
            Finds a child window of a given name in the specified window.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FindChild(System.Windows.Forms.Control,System.Type)">
            <summary>
            Finds a child window of a given type in the specified window.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FindChildInternal(System.Windows.Forms.Control,System.String,System.Type,System.Boolean)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetDefaultButton(System.Windows.Forms.Control)">
            <summary>
            Returns the default push button on a form window or dialog box.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetFirstChild(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Returns the first child window of the specified type.
            </summary>
            <param name="ctrl"></param>
            <param name="typeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetNextChild(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Returns the next child control in the tab order that matches a specified type.
            </summary>
            <param name="ctrl"></param>
            <param name="typeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetFirstMdiChildInternal(System.Windows.Forms.Form,System.Int32)">
            <summary>
            Returns the fist MdiChild form of the requested type.
            </summary>
            <param name="form"></param>
            <param name="typeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetNextMdiChildInternal(System.Windows.Forms.Form,System.Int32)">
            <summary>
            Returns the next MdiChild form of the requested type.
            </summary>
            <param name="form"></param>
            <param name="typeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetFirstChildColumnInternal(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Returns the first child table column in the table control.
            </summary>
            <param name="parent"></param>
            <param name="typeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetNextChildColumnInternal(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Returns the first child table column in the table control.
            </summary>
            <param name="column"></param>
            <param name="typeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetFirstChildInternal(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Returns the child with the lowest tab index.
            </summary>
            <param name="ctrl"></param>
            <param name="typeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetNextChildInternal(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Returns the next child control in the tab order.
            </summary>
            <param name="ctrl"></param>
            <param name="typeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetNextControlOfType(System.Windows.Forms.Control,System.Windows.Forms.Control,System.Int32)">
            <summary>
            Replacement for the Control.GetNextControl method. Finds the next control
            of the requested type, with the lowest TabIndex. Iterates nested containers
            that are not embedded forms or child tables.
            </summary>
            <param name="parent"></param>
            <param name="prev"></param>
            <param name="typeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CanGetNextChildDrillDown(System.Windows.Forms.Control)">
            <summary>
            Returns true if the child controls of the specified control can be iterated
            in a SalGetNextChild() loop.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsControlOfType(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Tests the type of the specified control using the mask.
            </summary>
            <param name="ctrl"></param>
            <param name="typeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetFocus">
            <summary>
            Returns the handle of the contorl with the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetControlName(System.Windows.Forms.Control)">
            <summary>
            Gets the name of a control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetControlName(System.Windows.Forms.Control,PPJ.Runtime.SalString@)">
            <summary>
            Returns the name of the specified control.
            </summary>
            <param name="ctrl"></param>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetLabelText(System.Windows.Forms.Control)">
            <summary>
            Retrieves the label text of a control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetLabelText(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Returns the text of the label associated to the specified control.
            </summary>
            <param name="ctrl"></param>
            <param name="maxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetLabelText(System.Windows.Forms.Control,PPJ.Runtime.SalString@,System.Int32)">
            <summary>
            Returns the text of the label associated to the specified control.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <param name="maxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetLocation(System.Windows.Forms.Control)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetSize(System.Windows.Forms.Control)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetState(System.Windows.Forms.Control)">
            <summary>
            Returns a window's current state.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetText(System.Windows.Forms.Control)">
            <summary>
            Retrieves the text of a control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetText(System.Windows.Forms.Control,PPJ.Runtime.SalString@,System.Int32)">
            <summary>
            Returns the string value of the specified control.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <param name="maxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetText(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Returns the string value of the specified control.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <param name="maxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.HideWindow(System.Windows.Forms.Control)">
            <summary>
            Hides a control. Returns false if the control is already hidden.
            </summary>
            <param name="ctrl"></param>
            <returns>True if the control was previously visible.</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.HideWindowAndLabel(System.Windows.Forms.Control)">
            <summary>
            Hides a control and its associated label.
            </summary>
            <param name="ctrl"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.SalWindow.Invalidate(System.Windows.Forms.Control)" -->
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsChecked(System.Windows.Forms.Control)">
            <summary>
            Determines whether a radio button is set or a check box is checked.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsEnabled(System.Windows.Forms.Control)">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsVisible(System.Windows.Forms.Control)">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.MessageBeep(System.Int32)">
            <summary>
            Plays a waveform sound that corresponds to a given system alert level.
            </summary>
            <param name="alert"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.MessageBox(System.Windows.Forms.Control,System.String,System.String,System.Int32)">
            <summary>
            Displays a message box and returns a number that indicates the user's response.
            </summary>
            <param name="owner"></param>
            <param name="text"></param>
            <param name="title"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ModalDialog(System.Type,System.Windows.Forms.Control,System.Object[])">
            <summary>
            Creates a modal dialog box.
            </summary>
            <param name="type"></param>
            <param name="owner"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ModalDialog(System.String,System.Windows.Forms.Control,System.Object[])">
            <summary>
            Creates a modal dialog box.
            </summary>
            <param name="typeName"></param>
            <param name="owner"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ModalDialogInternal(System.String,System.Windows.Forms.Control,System.Reflection.Assembly,System.Object[])">
            <summary>
            Creates a modal dialog box.
            </summary>
            <param name="typeName"></param>
            <param name="owner"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Move(System.Windows.Forms.Control,System.Drawing.PointF)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="offset"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetParent(System.Windows.Forms.Control)">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.PostMessage(System.Windows.Forms.Control,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Posts the specified message to a window by adding nMsg to handleReceiver's message
            queue.
            </summary>
            <param name="handle"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SendMessage(System.Windows.Forms.Control,System.Int32,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="handle"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FireWindowActionsToChildren(System.Windows.Forms.Control,System.Int32,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the children's
            WindowActions event handlers, without going through Windows message loop.
            </summary>
            <param name="ctrl"></param>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SendMessageToChildren(System.Windows.Forms.Control,System.Int32,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="form"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SendMessageToChildrenInternal(System.Windows.Forms.Control,System.Int32,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,System.Boolean)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="form"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="sendToMessageActions"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SendValidateMessage">
            <summary>
            Sends a SAM_Validate message to the object with the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SendValidateMessage(System.Windows.Forms.Control)">
            <summary>
            Sends a SAM_Validate message to the object with the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SendValidateMessage(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Sends a SAM_Validate message to the object with the focus.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SendSamFieldEdit(System.Windows.Forms.Control)">
            <summary>
            Sends the SAM_FieldEdit message to a control.
            If the control is a table column, sends the message to
            both the table and the column.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetDefaultButton(System.Windows.Forms.Control)">
            <summary>
            Sets the default push button of a form window or dialog box.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetLabelText(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets the label text of a control.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetLocation(System.Windows.Forms.Control,System.Drawing.PointF)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="ctrl"></param>
            <param name="pos"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetSize(System.Windows.Forms.Control,System.Drawing.SizeF)">
            <summary>
            Resizes a window.
            </summary>
            <param name="ctrl"></param>
            <param name="size"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetText(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets the text of a control to a specified string.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ShowWindow(System.Windows.Forms.Control)">
            <summary>
            Makes a control visible.
            </summary>
            <param name="ctrl"></param>
            <returns>True if the control was previously visible.</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ShowWindowAndLabel(System.Windows.Forms.Control)">
            <summary>
            Makes a control and its associated label visible.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.KillTimer(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Destroys an control's system timer.
            </summary>
            <param name="handle"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetTimer(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Creates a system timer for a given control.
            </summary>
            <param name="handle"></param>
            <param name="id"></param>
            <param name="millisec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Update(System.Windows.Forms.Control)">
            <summary>
            Forces the repaint of a control.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetClassName(System.Windows.Forms.Control)">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetProperty(System.Windows.Forms.Control,System.String)">
            <summary>
            Gets the value of a named property for a control.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetProperty(System.Windows.Forms.Control,System.String,PPJ.Runtime.SalString@)">
            <summary>
            Returns the value of the specified custom property.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetProperty(System.Windows.Forms.Control,System.String,System.String)">
            <summary>
            Sets the value of a named property for a control.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsDerivedFrom(System.Windows.Forms.Control,System.Type)">
            <summary>
            Returns true if a control is an instance of the class.
            </summary>
            <param name="ctrl"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SendClassMessage(System.Int32,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,System.Type)">
            <summary>
            Invokes the previous MessageAction handler in the chain of MessageAction handlers.
            Any base class before the specified current class that implements a MessageAction handler
            will be called.
            </summary>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="startType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SendClassMessageNamed(System.Int32,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,System.Type)">
            <summary>
            Invokes the MessageAction handler implemented in the specified target type.
            This function looks for the specified type in the list of MessageAction event handlers
            and invokes the handler only of the specific type, if it exists. Otherwise
            it throws an exception.
            </summary>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.WinHelp(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="ctrl"></param>
            <param name="file"></param>
            <param name="command"></param>
            <param name="index"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Yield(System.Windows.Forms.Control)">
            <summary>
            Processes messages in the message loop.
            This function replaces all SalYield* functions.
            It must be placed in the loop that block execution.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetWindowColor(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="ctrl"></param>
            <param name="colorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetSysColor(System.Int32)">
            <summary>
            Gets a system color.
            </summary>
            <param name="colorValue"></param>
            <returns>Color</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetWindowColor(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="ctrl"></param>
            <param name="colorIndex"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.TranslateSalColor(System.Int32)">
            <summary>
            Converts SAL colors to a .NET Color.
            </summary>
            <param name="colorValue"></param>
            <returns>Color</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.TranslateColor(System.Drawing.Color)">
            <summary>
            Converts .NET colors to the corresponding SAL color constant.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetContextMenu(System.Windows.Forms.Control,System.String,System.Int32)">
            <summary>
            Defines the context menu for a control.
            </summary>
            <param name="ctrl"></param>
            <param name="menuName"></param>
            <param name="flags"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetContextMenu(System.Windows.Forms.Control,System.Type,System.Int32)">
            <summary>
            Defines the context menu for a control.
            </summary>
            <param name="ctrl"></param>
            <param name="menuName"></param>
            <param name="flags"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.UpdateMainMenu(System.Windows.Forms.Form)">
            <summary>
            Updates the form's main menu.
            </summary>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.TrackPopupMenu(System.Windows.Forms.Control,System.String,System.Int32,System.Drawing.Point)">
            <summary>
            Shows context popup menu at runtime.
            </summary>
            <param name="ctrl"></param>
            <param name="menuName"></param>
            <param name="flags"></param>
            <param name="pos"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.TrackPopupMenu(System.Windows.Forms.Control,System.Type,System.Int32,System.Drawing.Point)">
            <summary>
            Shows context popup menu at runtime.
            </summary>
            <param name="ctrl"></param>
            <param name="menuName"></param>
            <param name="flags"></param>
            <param name="pos"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ContextMenuStrip_Closed(System.Object,System.Windows.Forms.ToolStripDropDownClosedEventArgs)">
            <summary>
            Event fired when the menu is closed. First then, the standard Centura context menu can be disposed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetCursor(System.Windows.Forms.Control,System.Windows.Forms.Cursor,System.Int32)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="cursor"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetCursor(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="cursorId">Specify one of these system-supplied cursors: CURSOR_Arrow CURSOR_Cross CURSOR_IBeam CURSOR_Icon CURSOR_Size CURSOR_SizeNESW CURSOR_SizeNS CURSOR_SizeNWSE CURSOR_SizeWE CURSOR_UpArrow CURSOR_Wait</param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetCursor(System.Windows.Forms.Control,System.String,System.Int32)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="ctrl"></param>
            <param name="fileName">The name of a cursor or an icon file.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetCursor(System.Windows.Forms.Control,System.Byte[],System.Int32)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="image">The image of a cursor or an icon file.</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ClearCursor(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.WaitCursor(System.Boolean)">
            <summary>
            Displays or removes the hourglass cursor.
            </summary>
            <param name="wait"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.DialogChooseColor(System.Windows.Forms.Control,System.Int32@)">
            <summary>
            Displays the Windows Color dialog box where the user can either select an existing
            color or create a new one. See the Control Panel chapter in the Microsoft Windows'
            User's Guide for a detailed description of the Color dialog box.
            </summary>
            <param name="owner"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.DialogChooseFont(System.Windows.Forms.Control,System.String@,System.Single@,System.Int32@,System.Int32@)">
            <summary>
            Displays the Windows Font dialog box. This dialog lets the user choose a font name,
            size, enhancement, and display color, and so on. See the Control Panel chapter
            in the Microsoft Windows' User's Guide for a detailed description of the Font
            dialog box.
            </summary>
            <param name="owner"></param>
            <param name="name"></param>
            <param name="size"></param>
            <param name="enhancement"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.DialogOpenFile(System.Windows.Forms.Control,System.String,System.String,System.Int32,System.String,System.String,System.String@,System.Int32@)">
            <summary>
            Displays a Windows dialog box where the user can select a file to open.
            </summary>
            <param name="owner"></param>
            <param name="title"></param>
            <param name="filter"></param>
            <param name="filterIndex"></param>
            <param name="initialFileName"></param>
            <param name="initialFilePath"></param>
            <param name="selectedFile"></param>
            <param name="selectedIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.DialogSaveFile(System.Windows.Forms.Control,System.String,System.String,System.Int32,System.String,System.String,System.String@,System.Int32@)">
            <summary>
            Displays a Windows dialog box where the user can save a file.
            </summary>
            <param name="owner"></param>
            <param name="title"></param>
            <param name="filter"></param>
            <param name="filterIndex"></param>
            <param name="initialFileName"></param>
            <param name="initialFilePath"></param>
            <param name="selectedFile"></param>
            <param name="selectedIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.DragAcceptFiles(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Indicates whether a window can accept a file from Windows' File Manager.
            </summary>
            <param name="ctrl"></param>
            <param name="accept"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FindDropFilesTarget">
            <summary>
            Finds the target control for the file drop operation in the
            control's hiereachy. The first parent that has the DragAcceptFiles
            flag on, is the target.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetDragAcceptFiles(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the DragAcceptFiles flag on the specified control.
            </summary>
            <param name="ctrl"></param>
            <param name="accept"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetDragAcceptFiles(System.Windows.Forms.Control)">
            <summary>
            Returns the DragAcceptFiles flag on the specified control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetModified(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets or clears the field modified flag for an editable data field, combo box, multiline
            text field, table window column.
            </summary>
            <param name="ctrl"></param>
            <param name="modified"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetFocus(System.Windows.Forms.Control)">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetFocusAsync(System.Windows.Forms.Control)">
            <summary>
            Posts a custom message to the control to set the focus
            back to the target control asynchronously. This is used if
            the focus is switched by the application while a control is being
            validated. Cannot use BeginInvoke() because it kicks in too soon.
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetDataLength(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Sets a limit on the number of characters that a user can enter into a data field,
            multiline text field, or table window column.
            </summary>
            <param name="ctrl"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsEmpty(System.Windows.Forms.Control)">
            <summary>
            Verifies whether a data field, multiline text field, or table window column is null
            or empty.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsValidDateTime(System.Windows.Forms.Control)">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid date/time value.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsValidDecimal(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid decimal value.
            </summary>
            <param name="ctrl"></param>
            <param name="precision"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsValidInteger(System.Windows.Forms.Control)">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid integer value.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsValidNumber(System.Windows.Forms.Control)">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid numeric value..
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetFormattedText(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Returns the contents of a data field or table window column.
            </summary>
            <param name="ctrl"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetFormattedText(System.Windows.Forms.Control,PPJ.Runtime.SalString@,System.Boolean)">
            <summary>
            Returns the contents of a data field or table window column.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetInputMask(System.Windows.Forms.Control)">
            <summary>
            Gets the input mask of a data field or table window column.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetInputMask(System.Windows.Forms.Control,PPJ.Runtime.SalString@)">
            <summary>
            Gets the input mask of a data field or table window column.
            </summary>
            <param name="ctrl"></param>
            <param name="sMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetFormat(System.Windows.Forms.Control)">
            <summary>
            Gets the format of a data field or table window column.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetFormat(System.Windows.Forms.Control,PPJ.Runtime.SalString@)">
            <summary>
            Returns the format for the specified field.
            </summary>
            <param name="ctrl"></param>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ConvertSalFormatToString(System.Int32,System.Int32)">
            <summary>
            Converts SAL format constants to a default .NET format string.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ConvertStringToSalFormat(System.String,System.Int32)">
            <summary>
            Converts SAL format constants to a default .NET format string.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetFormatCode(System.Windows.Forms.Control)">
            <summary>
            Returns the current format of a data field or table window column.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetFormatCode(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Sets a data field's or table window column's format.
            </summary>
            <param name="?"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsValid(System.Windows.Forms.Control)">
            <summary>
            Validates the contents of a data field or table window column using the current profile.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsValidEditMask(System.String)">
            <summary>
            Validates the input mask of a data field or table window column.
            </summary>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetInputMask(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets the input mask of a data field or table window column.
            </summary>
            <param name="ctrl"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsValidFormat(System.String,System.Int32)">
            <summary>
            Validates a numeric or date/time picture format.
            </summary>
            <param name="format"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetFormat(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets the picture format of a data field or table window column.
            </summary>
            <param name="ctrl"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetFormattedText(System.Windows.Forms.Control,System.String,System.Boolean)">
            <summary>
            Copies a formatted string to a data field or table window column.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
            <param name="applyFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetTextUnmasked(System.Windows.Forms.Control)">
            <summary>
            Returns the unmasked content of a data field or table window column.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetTextUnmasked(System.Windows.Forms.Control,PPJ.Runtime.SalString@)">
            <summary>
            Retuns the unmasked content of the specified field.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.Validate(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Validates and formats a data field's or table window column's contents.
            </summary>
            <param name="ctrl"></param>
            <param name="showErrorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetDataType(System.Windows.Forms.Control)">
            <summary>
            Returns a data field's or table window column's data type (DT_*).
            </summary>
            <returns>DT_*</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetControlType(System.Windows.Forms.Control)">
            <summary>
            Returns the type of control (TYPE_*).
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetControlTypeInternal(System.Windows.Forms.Control)">
            <summary>
            Returns the type of the control either from the
            ISalWindow implementation or by translating the 
            control type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetDataLength(System.Windows.Forms.Control)">
            <summary>
            Returns the maximum length of a data field, multiline text field, or table window
            column.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsModified(System.Windows.Forms.Control)">
            <summary>
            Returns the setting of the modified flag for a data field, multiline field, combo
            box, table window's context row cell.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetProfile(System.Windows.Forms.Control)">
            <summary>
            Returns the code of the custom profile associated with the specified field.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetProfile(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Changes the custom profile of the specified field.
            </summary>
            <param name="ctrl"></param>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetProfileParameter(System.Windows.Forms.Control,System.Int32,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the requested parameter for the profile associated to the specified field.
            </summary>
            <param name="ctrl"></param>
            <param name="paramCode"></param>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetProfileParameter(System.Windows.Forms.Control,System.Int32,PPJ.Runtime.SalString@)">
            <summary>
            Returns the requested parameter for the profile associated to the specified field.
            </summary>
            <param name="ctrl"></param>
            <param name="paramCode"></param>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetProfileParameter(System.Windows.Forms.Control,System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Alters the specified parameter for the custom profile associated to the specified field.
            </summary>
            <param name="ctrl"></param>
            <param name="paramCode"></param>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetProfileParameter(System.Windows.Forms.Control,System.Int32,PPJ.Runtime.SalString)">
            <summary>
            Alters the specified parameter for the custom profile associated to the specified field.
            </summary>
            <param name="ctrl"></param>
            <param name="paramCode"></param>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CopyProfile(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Clones the specified profile into the custom profile associated to the specified field.
            </summary>
            <param name="ctrl"></param>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.TranslateProfile(System.Int32)">
            <summary>
            Translates CTD profile codes to the equivalent .NET CultureInfo.
            </summary>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetFont(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <param name="size"></param>
            <param name="enhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetFont(System.Drawing.Font,System.String@,System.Single@,System.Int32@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <param name="size"></param>
            <param name="enhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetFontNames">
            <summary>
            Gets the names of the screen or printer fonts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetFont(System.Windows.Forms.Control,System.String,System.Int32,System.Int32)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="ctrl"></param>
            <param name="name"></param>
            <param name="size"></param>
            <param name="style"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.CreateFont(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a Font object from the specified parameters.
            </summary>
            <param name="name"></param>
            <param name="size"></param>
            <param name="enhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.MDIArrangeIcons(System.Windows.Forms.Control)">
            <summary>
            Arranges minimized child window icons in an MDI window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.MDICascade(System.Windows.Forms.Control)">
            <summary>
            Cascades all non-iconized child windows of an MDI window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.MDITile(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Tiles all non-iconized child windows of an MDI window. Windows that are not sizable
            will not be tiled.
            </summary>
            <param name="ctrl"></param>
            <param name="vertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetScrollBarPosition(System.Windows.Forms.Control)">
            <summary>
            Returns the current scroll bar value.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetScrollBarPosition(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the current scroll bar value.
            </summary>
            <param name="ctrl"></param>
            <param name="nPos"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetScrollBarRange(System.Windows.Forms.Control,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a scroll bar's scroll range, line increment, and page increment.
            </summary>
            <param name="ctrl"></param>
            <param name="nMin"></param>
            <param name="nMax"></param>
            <param name="nLine"></param>
            <param name="nPage"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetScrollBarPosition(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Sets a scroll bar's position.
            </summary>
            <param name="ctrl"></param>
            <param name="pos"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetScrollBarRange(System.Windows.Forms.Control,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a scroll bar's range, line increment, and page increment.
            </summary>
            <param name="scrollBar"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="line"></param>
            <param name="page"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.PixelsToFormUnits(System.Windows.Forms.Control,System.Int32,System.Boolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            </summary>
            <param name="ctrl"></param>
            <param name="pixels"></param>
            <param name="vertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FormUnitsToPixels(System.Windows.Forms.Control,System.Single,System.Boolean)">
            <summary>
            Computes the number of pixels in the number form units.
            </summary>
            <param name="ctrl"></param>
            <param name="units"></param>
            <param name="vertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetStatusBarText(System.Windows.Forms.Control)">
            <summary>
            Gets the text displayed in the status bar of a top-level or MDI window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetStatusBarText(System.Windows.Forms.Control,PPJ.Runtime.SalString@,System.Int32)">
            <summary>
            Returns the text in the status bar for the specified form.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <param name="maxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.GetStatusBarText(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Returns the text in the status bar for the specified form.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <param name="maxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetStatusBarText(System.Windows.Forms.Control,System.String)">
            <summary>
            Updates the status bar of the top level form that owns the specified control.
            </summary>
            <param name="ctrl"></param>
            <param name="text"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FindStatusBar(System.Windows.Forms.Control)">
            <summary>
            Finds the status bar related to the control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.SetStatusBarText(System.Windows.Forms.Menu,System.String)">
            <summary>
            Updates the status bar of the form that owns the menu item.
            </summary>
            <param name="menu"></param>
            <param name="text"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ShowToolBar(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Shows or hides the tool bar on a top-level or MDI window.
            </summary>
            <param name="ctrl"></param>
            <param name="visible"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ShowStatusBar(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Shows or hides the status bar on a top-level or MDI window.
            </summary>
            <param name="ctrl"></param>
            <param name="visible"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.PrintForm(System.Windows.Forms.Control)">
            <summary>
            Prints a form window, table window, or dialog box, including its contents and row
            header flags.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.PreviewForm(System.Windows.Forms.Control)">
            <summary>
            Prints a form window, table window, or dialog box, including its contents and row
            header flags.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.OnDragEnter(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Sends SAM_DragEnter and updated the cursor if drop is disabled.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.OnDragLeave(System.Object,System.EventArgs)">
            <summary>
            Sends SAM_DragExit.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.OnDragOver(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Sends SAM_DragMove and updated the cursor if drop is disabled.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.OnDragDrop(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Sends SAM_DragDrop.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.OnGiveFeedback(System.Object,System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            Updates the cursor using the custom images stored using SalCursorSet().
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.OnQueryContinueDrag(System.Object,System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            Terminates drag mode.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.SalWindow.AutoStartDragMode(System.Windows.Forms.Control,System.Windows.Forms.Message@)" -->
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.SalWindow.AutoStartDragModeInternal(System.Windows.Forms.Control,System.Int32,System.Int32,System.Boolean@)" -->
        <member name="M:PPJ.Runtime.Windows.SalWindow.SendSamDragMessage(System.Int32)">
            <summary>
            Sends SAM_Drag messages to the target control 
            and notifies the drag source control.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.DragDropStart">
            <summary>
            Initiates drag-drop mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.DragDropStart(System.Drawing.Point,System.Object)">
            <summary>
            Initiates drag-drop mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.DragDropStartInternal(System.Drawing.Point,System.Object)">
            <summary>
            Initiates drag-drop mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.DragDropStop">
            <summary>
            Aborts drag mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.IsLocationOverSelectedText(System.Drawing.Point,System.IntPtr,System.Int32,System.Int32)">
            <summary>
             Uses EM_CHARFROMPOS to detect if the specified location is over a selected text block.
            </summary>
            <param name="handle"></param>
            <param name="selStart"></param>
            <param name="selLength"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FillGradient(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Color,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws a gradient background.
            </summary>
            <param name="g"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="bounds"></param>
            <param name="vertical"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.FillDoubleGradient(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draws a double gradient background.
            </summary>
            <param name="g"></param>
            <param name="start"></param>
            <param name="middle"></param>
            <param name="end"></param>
            <param name="bounds"></param>
            <param name="firstGradientSize"></param>
            <param name="secondGradientSize"></param>
            <param name="vertical"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.TraceWindowActions(PPJ.Runtime.Windows.WindowActionsEventArgs)">
            <summary>
            Write trace information for messages
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalWindow.enablePostMessageQueueing">
            <summary>
            Enables queueing of posted messages.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalWindow.forceNativePostMessageHandling">
            <summary>
            When true, forces the next message post to be run using the native posting logic without being queued.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalWindow.idlePostMessageDequeueingDisabled">
            <summary>
            Disable dequeueing of posted messages.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.EnablePostMessageQueueing">
            <summary>
            Enables queued version of PostMessage. This must be done per thread having
            a message pump.
            
            <remarks>
            The problem behind this funcationality is that the Enterprise Explorer
            keeps the UI thread running during server calls (in order to get good 
            responsiveness for the user). However, that makes message that are posted
            with PostMessage to be executed too early (and commonly, message handlers for 
            posted messages do database calls)
            
            The solution is to queue all posted messages and on the Application.Idle
            event dequeue and send the messages to the correct destinaion. When database
            calls are being made and Enterprise Explorer keeps the UI running, the 
            dequeueing could temporarily be disabled.
            </remarks>
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalWindow.ForceNativePostMessageHandling">
            <summary>
            Call this method to make the nest post message action to be run using the native posting logic,
            without being dequeued upon the Application_Idle event.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.SalWindow.DateTimeFormatCustomize(System.String)" -->
        <member name="P:PPJ.Runtime.Windows.SalWindow.DpiResolution">
            <summary>
            Returns the system's dpi resolution.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.CurrentDPI">
            <summary>
            Returns the system's dpi resolution.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.ScaleFactor">
            <summary>
            Returns the dpi scale factor.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.ProfessionalColors">
            <summary>
            Returns the shared instance of the ProfessionalColors table.
            This is used by components that want to use colors similar
            to WinForms toolstrip controls.
            
            <remarks>
            Currently we use it for SalFormToolBar, XSalToolbar, XSalSeparator, XSalToolbox.
            </remarks>
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.MapEnterToTab">
            <summary>
            Enables/Disables the mapping of the enter key to the tab key.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.KeepMask">
            <summary>
            Enables/Disables keeping the mask when reading the text from a masked edit control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:PPJ.Runtime.Windows.SalWindow.DragDropCursor" -->
        <member name="P:PPJ.Runtime.Windows.SalWindow.DisableDropCursor">
            <summary>
            Returns/Sets the cursor to use when the control
            disables drop operations.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.DragQueryFiles">
            <summary>
            Returns the collection of files that were dropped on the control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.DisableMessages">
            <summary>
            Enables/Disables the dispatching of Windows messages to the
            SAL MessageActions handler.
            
            This is used to suppress message dispatching when there is
            a potential recursive loop that will cause a stack overflow.
            For example, when setting the cursor .NET causes the WM_SETCURSOR
            message to be sent which might cause stack overflow if the
            function was originally called in response to WM_SETCURSOR.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.DefaultAutoScaleSize">
            <summary>
            Returns (and initializes) the system scale used to convert
            units/pixels for top-level forms.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.DpiScale">
            <summary>
            Returns the system's dpi scale factor.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.ScaleMode">
            <summary>
            Returns whether the ScaleForm() method is performing the
            scaling procedure because of a DPI or Font change.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.TabIndexComparer">
            <summary>
            Returns the instance of the SortControlsByTabIndex class
            used to sort controls by their tab index.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.ActionsManager">
            <summary>
            Returns the actions manager instance.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.DesignMode">
            <summary>
            Returns/Sets the DesignMode flag.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.DragSource">
            <summary>
            Returns the source control for the drag-drop operations.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.DragLocation">
            <summary>
            Returns the location of the mouse, in client's coordinates, when
            the drag-drop mode was initiated.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.DropTarget">
            <summary>
            Returns the drop target control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.DropLocation">
            <summary>
            Returns the location of the mouse (in client's coordinates), when
            the mouse was released the drag-drop operation terminated.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.DropDisabled">
            <summary>
            Enables/Disables drag-drop operations.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.IdlePostMessageDequeueingDisabled">
            <summary>
            Temporarily disable (true) or enable (false) dequeueing on posted messages.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalWindow.ForceSynchronousMode">
            <summary>
            Static member used to force the application using synchronous server calls.
            Controls like the VisSpinField, having a timer that pumps messages into the message loop,
            can make the application to hang if a ongoing asynchronous call is currently being executed.
            To fix that, all server calls can during that period be forced to be run synchronously by setting this
            member to true.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalWindow.SortedIntList">
            <summary>
            Fast custom sorted array class to keep track of the
            messages not to dispatch to the MessageActions handlers.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalWindow.WindowActionsManager">
            <summary>
            Manages the WindowActions handlers.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalWindow.ReferenceInfo">
            <summary>
            Wraps a reference to any object in the application.
            It's used by FindMember to return an unqualified dynamic reference to
            an object.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalWindow.SortControlsByTabIndex">
            <summary>
            TabIndex comparer class.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalWindow.PostMessageQueueItem">
            <summary>
            Contains the queued posted message with all parameters.
            It's a value type (struct) due to it's small nature and local usage.
            If discovered that a reference type has better performance, it should be
            a small change.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalWindow.ForcedSynchronousCalls">
            <summary>
            Disposable help class, to be used as a "using" statement wrapping logic that needs to have its
            database calls made synchronously. The class constructor will change the ForceSynchronousMode to true
            and always reset it back to false again once it's disposed.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SDK.CommonControls">
            <summary>
            Interface to common controls functions, constants and structures.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SDK.WinSDK">
            <summary>
            Contains all unsafe WinSDK methods.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.CellType">
            <summary>
            Cell types for SalTableColumn
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableColumn">
            <summary>
            Summary description for SalTableColumn.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalTableColumn._derived">
            <summary>
            Instance of the derived object that inherits this class
            as a second base in a multiple inheritance tree.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.SalTableColumn.m_salWindow">
            <summary>
            This is the basic implementation for all Sal controls.
            Every visual class uses SalWindow through delegation.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.#ctor">
            <summary>
            Constructs a new SalTableColumn.
            The SalTableColumn control is made inivisible by moving it outside of the 
            bounds of the parent SalTableWindow control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.#ctor(System.Boolean)">
            <summary>
            Constructs a new dynamic SalTableColumn.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.#ctor(System.String,System.Type,System.Int32)">
            <summary>
            Creates a new dynamic SalTableColumn and initializes it.
            </summary>
            <param name="name"></param>
            <param name="dataType"></param>
            <param name="maxLength"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.Average(System.Int32,System.Int32)">
            <summary>
            Computes the average of all column values or only specified column values in a table
            window. Use row flags constants to specify the rows to use in the computation.
            For example, you can choose to average only the values of modified rows.
            </summary>
            <param name="flagsOn">The flags that the row should have. You can combine ROW* flags using the OR (|) operator.</param>
            <param name="flagsOff">The flags that the row should not have. You can combine ROW* flags using the OR (|) operator:</param>
            <returns>Average</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.Sum(System.Int32,System.Int32)">
            <summary>
            Adds the values of the cells in the rows that match the specified flags.
            </summary>
            <param name="flagsOn"></param>
            <param name="flagsOff"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetFlags(System.Int32)">
            <summary>
            Returns true is the specified flags are set.
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetFlags(System.Int32,System.Boolean)">
            <summary>
            Sets or clears a table window column's flags.
            </summary>
            <param name="flags"></param>
            <param name="on"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetFlagsInternal(System.Int32,System.Boolean)">
            <summary>
            Sets or clears a table window column's flags.
            </summary>
            <param name="flags"></param>
            <param name="on"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.Sort(C1.Win.C1FlexGrid.SortFlags)">
            <summary>
            Sorts the column and shows the sort glyph.
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Redirect Windows message to the implementation object.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.DetectPercentage(System.String)">
            <summary>
            Returns true if the column contains a percentage value.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.FromGridCol(C1.Win.C1FlexGrid.Column)">
            <summary>
            Returns the instance of SalTableColumn bound to the grid column.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.FromControl(System.Windows.Forms.Control)">
            <summary>
            Returns the SalTableColumn instance from the specified control.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetId">
            <summary>
            Determines the column's ID. It is the index
            in the columns collection + 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.TestFlags(System.Int32,System.Int32)">
            <summary>
            Tests the flags indicated in the mask.
            </summary>
            <param name="flags"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.ApplyFlags(System.Int32,System.Int32)">
            <summary>
            Update the grid column using the column flags.
            </summary>
            <param name="col"></param>
            <param name="flags"></param>
            <param name="mask"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.ApplyFlags(C1.Win.C1FlexGrid.Column,System.Int32,System.Int32)">
            <summary>
            Update the grid column using the column flags.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.UpdateFlags">
            <summary>
            Update the columns flags from the grid column.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.IsEnabled(System.Windows.Forms.Control)">
            <summary>
            Returns the value of the enabled state (4) from the control's state field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.UpdateFormat">
            <summary>
            Applies the new format to all rows.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.UpdateFormat(C1.Win.C1FlexGrid.C1FlexGrid)">
            <summary>
            Applies the new format to all rows.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetCellText">
            <summary>
            Returns the text in the current cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetCellText(System.Int32)">
            <summary>
            Returns the text in the specified cell.
            </summary>
            <param name="row">row index, or -1 for current row</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetCellText(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.Boolean)">
            <summary>
            Returns the text in the specified cell.
            </summary>
            <param name="row">row index, or -1 for current row</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetCellText(System.String)">
            <summary>
            Sets the text in the current cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetCellText(System.Int32,System.String)">
            <summary>
            Sets the text in the specified cell.
            </summary>
            <param name="row">row index, or -1 for current row</param>
            <param name="text"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetCellText(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.String)">
            <summary>
            Sets the text in the specified cell.
            </summary>
            <param name="row">row index, or -1 for current row</param>
            <param name="text"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.NullValue(PPJ.Runtime.Windows.DataType)">
            <summary>
            Returns a null value consistent with the data type of the column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetCellValue(PPJ.Runtime.Windows.DataType)">
            <summary>
            Returns the value contained in the current cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetCellValue(System.Int32,PPJ.Runtime.Windows.DataType)">
            <summary>
            Returns the value contained in the specified cell.
            </summary>
            <param name="row">row index, or -1 for current row</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetCellValue(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,PPJ.Runtime.Windows.DataType)">
            <summary>
            Returns the value contained in the specified cell.
            </summary>
            <param name="row">row index, or -1 for current row</param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetCellValue(System.Object,PPJ.Runtime.Windows.DataType)">
            <summary>
            Stores the value in the current cell.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetCellValue(System.Int32,System.Object,PPJ.Runtime.Windows.DataType)">
            <summary>
            Stores the value in the specified cell.
            </summary>
            <param name="row">row index, or -1 for current row</param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetCellValue(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.Object,PPJ.Runtime.Windows.DataType)">
            <summary>
            Stores the value in the specified cell.
            </summary>
            <param name="row">row index, or -1 for current row</param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.ToStringCell(System.Object)">
            <summary>
            Converts the value to a string that can be assigned to a String cell.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.ToBinaryCell(System.Object)">
            <summary>
            Converts the binary value to a string that can be assigned to a String cell.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.ToNumberCell(System.Object)">
            <summary>
            Converts the value to a number and formats it to a string that 
            can be assigned to a Numeric cell.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.ToDateTimeCell(System.Object)">
            <summary>
            Converts the value to a DateTime and formats it to a string that 
            can be assigned to a Date cell.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.IsValidRow(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32)">
            <summary>
            Returns true if the row is valid in the current grid.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetCell">
            <summary>
            Returns the current cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetCell(System.Int32)">
            <summary>
            Returns the cell at the specified row.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.TransformCheckBoxValue(System.Object)">
            <summary>
            Returns the text corresponding to the check or unchecked state
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.TransformCheckBoxText(System.String)">
            <summary>
            Returns true if the text corresponds to the checked value
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.TransformDateTimePickerValue(System.Object)">
            <summary>
            Returns the string rappresentation of the date
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.TransformDateTimePickerText(System.String)">
            <summary>
            Returns the DateTime value of the string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.FormatNumber(PPJ.Runtime.SalNumber)">
            <summary>
            Formats a SalNumber value using the specified format.
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.FormatDateTime(PPJ.Runtime.SalDateTime)">
            <summary>
            Formats a SalDateTime value using the specified format.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetCellType(C1.Win.C1FlexGrid.Column)">
            <summary>
            Saves the cell type.
            </summary>
            <param name="gridCol"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetStandard(C1.Win.C1FlexGrid.Column)">
            <summary>
            Setup the cell to be edited with the standard editor.
            </summary>
            <param name="gridCol"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetComboBox(C1.Win.C1FlexGrid.Column)">
            <summary>
            Setup the cell to be edited using a combobox.
            </summary>
            <param name="gridCol"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetCheckBox(C1.Win.C1FlexGrid.Column)">
            <summary>
            Setup the cell to be edited usig a checkbox.
            </summary>
            <param name="gridCol"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetButton(C1.Win.C1FlexGrid.Column)">
            <summary>
            Setup the cell to show the ellipses button.
            </summary>
            <param name="gridCol"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetPopupBox(C1.Win.C1FlexGrid.Column)">
            <summary>
            Setup the cell to be edited using a multiline popup.
            </summary>
            <param name="gridCol"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetDateTimePicker(C1.Win.C1FlexGrid.Column)">
            <summary>
            Setup the cell to be edited using the date/time picker control.
            </summary>
            <param name="gridCol"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetupTextEditor(System.Windows.Forms.TextBox)">
            <summary>
            Initialize the textbox editor.
            </summary>
            <param name="tbox"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetupPopupEditor(System.Windows.Forms.TextBox)">
            <summary>
            Initialize the popup multiline editor.
            </summary>
            <param name="tbox"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetupComboBoxEditor(System.Windows.Forms.ComboBox)">
            <summary>
            Initialize the combobox cell editor.
            </summary>
            <param name="cbox"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetCharacterCasingOnComboBoxEditor(System.Windows.Forms.ComboBox,System.Windows.Forms.CharacterCasing)">
            <summary>
            Alters the style of the inner editor in the combobox control to change the
            casing style.
            </summary>
            <param name="cbox"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetBackColor(C1.Win.C1FlexGrid.Column,System.Drawing.Color)">
            <summary>
            Clears or assigns the backcolor to the style.
            </summary>
            <param name="style"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetForeColor(C1.Win.C1FlexGrid.Column,System.Drawing.Color)">
            <summary>
            Clears or assigns the forecolor to the style.
            </summary>
            <param name="style"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetFont(C1.Win.C1FlexGrid.Column,System.Drawing.Font)">
            <summary>
            Clears or assigns the font to the style.
            </summary>
            <param name="style"></param>
            <param name="value"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.DispatchMsgToEditControl(System.Windows.Forms.Message@)">
            <summary>
            Dispatches messages to the cell's edit control.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.DoClipboardCommand(System.Int32)">
            <summary>
            Executes the specified clipboard command on the current cell.
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.InitializeSpellChecker(System.Windows.Forms.Control)">
            <summary>
            Initialize the spell checker engine.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetColumnTitle(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Gets the title of a table window column.
            </summary>
            <param name="text"></param>
            <param name="maxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetColumnTitle(PPJ.Runtime.SalNumber)">
            <summary>
            Gets the title of a table window column.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.DefineCheckBoxColumn(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString,PPJ.Runtime.SalString)">
            <summary>
            Define a column as a check box.
            </summary>
            <param name="flags"></param>
            <param name="checkedValue"></param>
            <param name="uncheckedValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.DefineDropDownListColumn(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Define a column as a drop down list.
            </summary>
            <param name="flags"></param>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.DefinePopupEditColumn(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Define a column as a popup edit window.
            </summary>
            <param name="flags"></param>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.QueryCheckBoxColumn(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalString@,PPJ.Runtime.SalString@)">
            <summary>
            If the column is defined as a check box, this function retrieves information about
            the check box and returns TRUE. If it is not a check box, this function returns
            FALSE.
            </summary>
            <param name="flags"></param>
            <param name="checkedValue"></param>
            <param name="uncheckedValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetCellType(PPJ.Runtime.SalNumber@)">
            <summary>
            Indicates whether a column is a checkbox, drop down list, popup edit, or standard
            column.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetCellType">
            <summary>
            Indicates whether a column is a checkbox, drop down list, popup edit, or standard
            column.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetColumnFlags(PPJ.Runtime.SalNumber)">
            <summary>
            Tests the state of a table window column's flags.
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetColumnID">
            <summary>
            Gets a table window column's identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetColumnPosition">
            <summary>
            Gets a table window column's relative position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetColumnWidth(PPJ.Runtime.SalNumber@)">
            <summary>
            Returns the width (in form units) of a table window column.
            </summary>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetColumnWidth">
            <summary>
            Returns the width (in form units) of a table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.QueryDropDownListColumn(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            If the column is defined as a drop down list, this function retrieves information
            about the list and returns TRUE. If it is not a drop down list, this function returns
            FALSE.
            </summary>
            <param name="column"></param>
            <param name="nFlags"></param>
            <param name="nLines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.QueryPopupEditColumn(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            If the column is defined as a popup edit, this function retrieves information about
            the popup edit and returns TRUE. If it is not a popup edit, this function returns
            FALSE.
            </summary>
            <param name="flags"></param>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetCellTextColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Changes a table window cell's text color.
            </summary>
            <param name="color"></param>
            <param name="discardable"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetCellTextColor(PPJ.Runtime.SalNumber)">
            <summary>
            Changes a table window cell's text color.
            </summary>
            <param name="color"></param>
            <param name="discardable"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetColumnFlags(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears a table window column's flags.
            </summary>
            <param name="flags"></param>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetColumnPosition(PPJ.Runtime.SalNumber)">
            <summary>
            Moves a table window column to a new position.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetColumnTitle(PPJ.Runtime.SalString)">
            <summary>
            Sets the title of a table window column.
            </summary>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetColumnWidth(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a table window column's display width.
            </summary>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.BringWindowToTop">
            <summary>
            Brings a window to the top of all overlapping windows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CenterWindow">
            <summary>
            Centers a window. If the window is a top-level window, it centers it on the
            desktop. If the window is a child window, it centers it on top of its parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetContextMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetContextMenu(System.Type,PPJ.Runtime.SalNumber)">
            <summary>
            Defines a named popup menu that displays automatically when a window receives SAM_ContextMenu.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.DestroyWindow">
            <summary>
            Destroys a form window, a top-level table window, or a modeless dialog box created
            with SalCreateWindow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.DisableWindow">
            <summary>
            Disables keyboard and mouse input to a window. If the window contains text (for example,
            a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.EnableWindow">
            <summary>
            Enables keyboard and mouse input to a window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.FindChild(PPJ.Runtime.SalString)">
            <summary>
            This function finds a child window of a given name in the specified window.
            </summary>
            <param name="sWindowName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.FormUnitsToPixels(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of pixels in the number of form units. Form units
            are a unit of measurement used by functions which move and position 
            objects. Form units are computed using physical units (pixels) in conjunction
            with the window's font size.
            </summary>
            <param name="nFormUnits"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetFirstChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the first child window of the specified type. You can use this
            function to get the handles of MDI child windows.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetName(PPJ.Runtime.SalString@)">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="ctrl"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetName">
            <summary>
            Gets the name of an object.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetNextChild(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the handle of the next child window that matches a specified type.
            </summary>
            <param name="nTypeMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetControlType">
            <summary>
            Returns an object's type.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetLocation(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's current position on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetSize(PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Returns a window's size.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetWindowState">
            <summary>
            Returns a window's current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of a window.
            </summary>
            <param name="nMaxLen"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.HideWindow">
            <summary>
            Hides a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.InvalidateWindow">
            <summary>
            Causes a window to be repainted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.IsEnabled">
            <summary>
            Determines whether a window is enabled for mouse and keyboard input.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.IsVisible">
            <summary>
            Determines whether a window is currently visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.MoveWindow(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window a given number of form units on the X and Y axes relative to its current
            position.
            </summary>
            <param name="ctrl"></param>
            <param name="nXOffset"></param>
            <param name="nYOffset"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetParent">
            <summary>
            Returns the handle of an object's parent window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.PixelsToFormUnits(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Computes the number of form units based on the number of pixels.
            Form units are a unit of measurement used by functions that move and position objects.
            Form units are computed using physical units (pixels) in conjunction
            with a window's font sizes.
            </summary>
            <param name="nNumPixels"></param>
            <param name="bVertical"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.PostMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Posts the specified message to a window by adding nMsg to hWndReceiver's message
            queue.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.FireWindowActions(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Dispatches the specified message (Window Actions) directly to the control's
            WindowActions event handlers, without going through Windows message loop.
            </summary>        
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SendMessage(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends the specified message to a window. SalSendMsg does not return until the processing
            for the message is complete.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SendMessageToChildren(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sends a message to all child items of a form window, dialog box, table window, or
            MDI window.
            </summary>
            <param name="nMsg"></param>
            <param name="nMywParam"></param>
            <param name="nMylParam"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetFocus">
            <summary>
            Sets the focus to a specified window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetLocation(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Moves a window to a new position (x, y) on the X and Y axes.
            </summary>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetSize(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Resizes a window.
            </summary>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of a window.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.ShowWindow">
            <summary>
            Makes a window visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.KillTimer(PPJ.Runtime.SalNumber)">
            <summary>
            Destroys an object's system timer.
            </summary>
            <param name="nIDEvent"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetTimer(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates a system timer for a given object. When a timer event occurs, sends
            SAM_Timer messages to the object in specified intervals. Timers are a limited
            global resource. Your application must check the value returned by SalTimerSet
            to verify that the timer was created.
            </summary>
            <param name="nIDEvent"></param>
            <param name="nElapseMilliSec"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.TrackPopupMenu(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="sMenuName"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.TrackPopupMenu(System.Type,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Creates pop-up menus at runtime.
            </summary>
            <param name="menuType"></param>
            <param name="nFlags"></param>
            <param name="nX"></param>
            <param name="nY"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.UpdateWindow">
            <summary>
            Forces the update of a window.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetClassName">
            <summary>
            Return the name of a window's class as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString@)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetProperty(PPJ.Runtime.SalString)">
            <summary>
            Gets the value of a named property.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetProperty(PPJ.Runtime.SalString,PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets the value of a named property.
            </summary>
            <param name="sName"></param>
            <param name="sValue"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.IsDerivedFromClass(System.Type)">
            <summary>
            Determines whether a window is an instance of the specified class.
            </summary>
            <param name="tClass"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.WinHelp(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Starts the Windows help system.
            </summary>
            <param name="sFile"></param>
            <param name="nCommand"></param>
            <param name="nData"></param>
            <param name="sData"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.Yield">
            <summary>
            Processes messages for this control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetFont(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber@,PPJ.Runtime.SalNumber@)">
            <summary>
            Gets a window's font name, size, and enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetFont(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's font, font size, and font enhancements.
            </summary>
            <param name="sName"></param>
            <param name="nSize"></param>
            <param name="nEnhancement"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetWindowColor(PPJ.Runtime.SalNumber)">
            <summary>
            Gets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetWindowColor(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's color.
            </summary>
            <param name="nColorIndex"></param>
            <param name="nColor"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.ClearCursor(PPJ.Runtime.SalNumber)">
            <summary>
            Clears a window's cursor.
            </summary>
            <param name="ctrl"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetCursor(PPJ.Runtime.SalResourceCursor,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="tResource"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetCursor(System.Int32,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor.
            </summary>
            <param name="nResourceId"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetCursorFile(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets an application-defined cursor for the specified window. Use this function to
            set the cursor from an image stored in a file.
            </summary>
            <param name="sFile"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetCursor(PPJ.Runtime.SalString,PPJ.Runtime.SalNumber)">
            <summary>
            Sets a window's cursor from a string variable.
            </summary>
            <param name="sBlob"></param>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetModified(PPJ.Runtime.SalBoolean)">
            <summary>
            Sets or clears the field edit flag for an editable data field, combo box, multiline
            text field, table window column, or picture.
            </summary>
            <param name="bSet"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.IsModified">
            <summary>
            Returns the setting of the Field Edit Flag for a data field, multiline field, combo
            box, table window's context row cell, or picture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetDataType">
            <summary>
            Returns a data field's or table window column's data type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.Clear">
            <summary>
            Clears the value from a data field, multiline field, or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetLabel">
            <summary>
            Retrieves the window handle of the label (label control) that is associated with the hWndTarget parameter.
            There must be a mnemonic in that label, and it must immediately precede hWndTarget in the outline, or this function will fail.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.DisableWindowAndLabel">
            <summary>
            Disables keyboard and mouse input to a window and grays out its associated label.
            A label is the label control that immediately precedes the window in the outline.
            The label control must have a mnemonic. If the window contains text (for
            example, a push button), the text is grayed. If the window is a data field, it cannot
            receive the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.EnableWindowAndLabel">
            <summary>
            Enables keyboard and mouse input to a window and enables its associated label as
            well. A label is the label control that immediately precedes the window in the
            outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.ShowWindowAndLabel">
            <summary>
            Makes a window and its associated label visible. A label is the label control that
            immediately precedes the window in the outline.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.HideWindowAndLabel">
            <summary>
            Hides a window and its associated label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetLabelText(PPJ.Runtime.SalString)">
            <summary>
            Sets the text of the associaetd label control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetLabelText(PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="sText"></param>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetLabelText(PPJ.Runtime.SalNumber)">
            <summary>
            Retrieves the text of the label associated to a control. Important: The label control does not
            require a mnemonic for the functions listed above to operate.
            </summary>
            <param name="nMaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.IsEmpty">
            <summary>
            Verifies whether a data field, multiline text field, or table window column is null
            or empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.IsValidDateTime">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid date/time value. For multiline text fields, the date/time value must
            be the only item in the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.IsValidDecimal(PPJ.Runtime.SalNumber,PPJ.Runtime.SalNumber)">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid decimal value. For multiline text fields, the decimal value must be
            the only item in the field.
            </summary>
            <param name="nPrecision"></param>
            <param name="nScale"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.IsValidInteger">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid integer value. For multiline text fields, the integer value must be
            the only item in the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.IsValidNumber">
            <summary>
            Verifies whether a data field, multiline text field, or table window column contains
            a valid numeric value. Valid numbers are integers or floating point numbers,
            negative and positive. For multiline text fields, the numeric value must be the
            only item in the field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetFormattedText(PPJ.Runtime.SalString@,PPJ.Runtime.SalBoolean)">
            <summary>
            Copies the contents of a data field or table window column to a string. This function
            also lets you copy the format of the data.
            </summary>
            <param name="sText"></param>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetFormattedText(PPJ.Runtime.SalBoolean)">
            <summary>
            Copies the contents of a data field or table window column to a string. This function
            also lets you copy the format of the data.
            </summary>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetFormatCode">
            <summary>
            Returns the current format of a data field or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetFormatCode(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a data field's or table window column's format.
            </summary>
            <param name="nFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetInputMask(PPJ.Runtime.SalString@)">
            <summary>
            Gets the input mask of a data field or table window column.
            </summary>
            <param name="sMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetInputMask">
            <summary>
            Gets the input mask of a data field or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetFormat(PPJ.Runtime.SalString@)">
            <summary>
            Gets the picture format of a data field or table window column.
            </summary>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetFormat">
            <summary>
            Gets the picture format of a data field or table window column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.IsValid">
            <summary>
            Validates the contents of a data field or table window column using the current profile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetInputMask(PPJ.Runtime.SalString)">
            <summary>
            Sets the input mask of a data field or table window column.
            </summary>
            <param name="sMask"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetFormat(PPJ.Runtime.SalString)">
            <summary>
            Sets the picture format of a data field or table window column.
            </summary>
            <param name="sPicture"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetText(PPJ.Runtime.SalString,PPJ.Runtime.SalBoolean)">
            <summary>
            Copies a string to a data field or table window column. After copying the string
            to the field, formats the string.
            </summary>
            <param name="sValue"></param>
            <param name="bFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetTextUnmasked(PPJ.Runtime.SalString@)">
            <summary>
            Unmasks the text from a masked edit control.
            </summary>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetTextUnmasked">
            <summary>
            Unmasks the text from a masked edit control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.Validate">
            <summary>
            Validates and formats a data field's or table window column's contents.
            </summary>
            <param name="nValidate"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.Validate(PPJ.Runtime.SalNumber)">
            <summary>
            Validates and formats a data field's or table window column's contents.
            </summary>
            <param name="nValidate"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetDataLength(PPJ.Runtime.SalNumber)">
            <summary>
            Sets a limit on the number of characters that a user can enter into a data field,
            multiline text field, or table window column.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetDataLength">
            <summary>
            Returns the maximum length of a data field, multiline text field, or table window
            column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.AddListItem(PPJ.Runtime.SalString)">
            <summary>
            Adds a string to a list box or combo box.
            </summary>
            <param name="sName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.ClearList">
            <summary>
            Deletes all entries from a list box or combo box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.DeleteListItem(PPJ.Runtime.SalNumber)">
            <summary>
            Deletes a list box or combo box entry.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetListSelectedItems(PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Returns an array of index numbers of selected list box entries.
            </summary>
            <param name="nSelectedArray"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.InsertListItem(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Inserts an entry into a list box or combo box at a specified position.
            </summary>
            <param name="nIndex"></param>
            <param name="sAdd"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.PopulateList(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString)">
            <summary>
            Populates a list box or combo box with a result set. SalListPopulate overrides any
            settings made with SalListSetTabs. If the SELECT statement returns data from multiple
            columns, each column's data displayed in a list box is separated by tabs.
            However, due to a Microsoft Windows limitation, each column's data displayed in
            a combo box is separated by a single '|' character. There is no space between
            one column's data, the separator character, and another column's data.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.PopulateList(PPJ.Runtime.Sql.SalSqlHandle,PPJ.Runtime.SalString,PPJ.Runtime.Sql.WhenSqlErrorHandler)">
            <summary>
            Populates a list box or combo box with a result set. SalListPopulate overrides any
            settings made with SalListSetTabs. If the SELECT statement returns data from multiple
            columns, each column's data displayed in a list box is separated by tabs.
            However, due to a Microsoft Windows limitation, each column's data displayed in
            a combo box is separated by a single '|' character. There is no space between
            one column's data, the separator character, and another column's data.
            </summary>
            <param name="hSql"></param>
            <param name="sSelect"></param>
            <param name="errorHandler"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetListItemsCount">
            <summary>
            Returns the number of list box or combo box entries.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetListSelectedItemsCount">
            <summary>
            Returns the number of selected entries in a multiple-selection list box. Specify
            single- or multiple-selection in the list box's customizer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetListSelectedIndex">
            <summary>
            Returns the index of the selected entry in a combo box or single-selection list box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetListItemState(PPJ.Runtime.SalNumber)">
            <summary>
            Determines whether the specified list box or combo box entry is selected.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetListItemText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString@)">
            <summary>
            Returns the text of the specified item.
            </summary>
            <param name="ctrl"></param>
            <param name="nIndex"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetListItemText(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the text of the specified item.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetListItemTextLength(PPJ.Runtime.SalNumber)">
            <summary>
            Returns the length of a list box or combo box entry.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetListRedraw(PPJ.Runtime.SalNumber)">
            <summary>
            Redraws entries in a list box or combo box, or prevents them from being redrawn.
            </summary>
            <param name="bRedraw"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetListSelectedText(PPJ.Runtime.SalNumber,PPJ.Runtime.SalString)">
            <summary>
            Finds and selects a combo box or single-selection list box entry.
            </summary>
            <param name="nIndexStart"></param>
            <param name="sText"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetListSelectedItems(PPJ.Runtime.SalNumber,PPJ.Runtime.SalBoolean)">
            <summary>
            Selects or deselects a combo box or multiple-selection list box entry.
            </summary>
            <param name="nIndex"></param>
            <param name="bSelect"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetListSelectedIndex(PPJ.Runtime.SalNumber)">
            <summary>
            Selects or deselects a combo box or single-selection list box entry.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetListTabStops(PPJ.Runtime.SalArray{PPJ.Runtime.SalNumber})">
            <summary>
            Sets tabs in a list box.
            </summary>
            <param name="nTabStops"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.PopulateListFiles(System.Windows.Forms.Control,PPJ.Runtime.SalString@,PPJ.Runtime.SalNumber)">
            <summary>
            Populates a list box or combo box with a directory of files.
            </summary>
            <param name="ctrlPath"></param>
            <param name="sPathName"></param>
            <param name="nAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetListSelectedFile(PPJ.Runtime.SalString@)">
            <summary>
            Fetches the selected directory or file name from a list box or combo box.
            </summary>
            <param name="sFileName"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetListSelectedFile">
            <summary>
            Fetches the selected directory or file name from a list box or combo box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetUserCellData(System.Object@)">
            <summary>
            Gets the user data for the current cell.
            </summary>
            <returns>TRUE if the get was successfull, FALSE otherwise</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetUserCellData(System.Object)">
            <summary>
            Sets the user data for the current cell.
            </summary>
            <returns>TRUE if the set was successfull, FALSE otherwise</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.GetUserCellData(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.Object@)">
            <summary>
            Gets the user data for the current cell.
            </summary>
            <param name="row">row index, or -1 for current row</param>
            <returns>TRUE if the fetch was successfull, FALSE otherwise</returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.SetUserCellData(C1.Win.C1FlexGrid.C1FlexGrid,System.Int32,System.Object)">
            <summary>
            Sets the user data for the current cell.
            </summary>
            <param name="row">row index, or -1 for current row</param>
            <returns>TRUE if the set was successfull, FALSE otherwise</returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.Id">
            <summary>
            Unique column id.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.PositionInternal">
            <summary>
            Returns the position stored internally.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.Position">
            <summary>
            Column position.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.Width">
            <summary>
            Column Width.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.IsRowHeaderMirror">
            <summary>
            Returns/Sets a flag to mark this column as the mirror
            columns used to update the row headers. There can be only
            one mirror column.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.ParentTable">
            <summary>
            Returns the parent SalTableWindow control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.GridCol">
            <summary>
            Returns/Sets the underlying flexgrid column.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.SplitGridCol">
            <summary>
            Returns/Sets the underlying flexgrid column for the split grid.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.IsAutomatic">
            <summary>
            Returns true if the column has been automatically created.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.IsDynamic">
            <summary>
            Returns true if the column has been dynamically created.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.Flags">
            <summary>
            Returns/Sets the column flags on this column.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.Modified">
            <summary>
            Returns/Sets the modified flag on the current cell.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.Selected">
            <summary>
            Selects/Deselcts the column.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.IsNull">
            <summary>
            Check if the current cell is empty.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.DateTime">
            <summary>
            DateTime value property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.Number">
            <summary>
            Number value property.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.Text">
            <summary>
            Overrides the default text property to keep it in sync
            with the grid cell and to convert boolean vlues.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.BackColor">
            <summary>
            Returns/Sets the column's background color.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.Title">
            <summary>
            Column's title.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.DataType">
            <summary>
            Value type of the text box control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.AllowFiltering">
            <summary>
            Enables/Disables filtering on this column.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.Format">
            <summary>
            Format string.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.MaxLength">
            <summary>
            Maximum number of characters.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.ReadOnly">
            <summary>
            Controls whether the text in the cell can be changed.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.TextAlign">
            <summary>
            Indicates how the text should be aligned.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.TitleAlign">
            <summary>
            Indicates how the column header should be aligned.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CharacterCasing">
            <summary>
            Indicates if all characters should be left alone or
            converted to uppercase or lowercase.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.PasswordChar">
            <summary>
            Indicates the character to display for password input.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.PasswordText">
            <summary>
            Returns the text to use when displaying password-protected columns.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.EditMask">
            <summary>
            Indicates the edit mask to apply to the text.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.WordWrap">
            <summary>
            Indicates if lines are automatically word-wrapped for
            multiline cells.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CellColor">
            <summary>
            Returns/Sets th current cell background color
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.ColumnTextColor">
            <summary>
            Returns/Sets th current column background color
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CellTextColor">
            <summary>
            Returns/Sets th current cell text color
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CellType">
            <summary>
            Indicates the type of control used to edit the cell.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CheckBox">
            <summary>
            Defines the behaviour of the check box column.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.ComboBox">
            <summary>
            Defines the behaviour of the combo box column.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.PopupBox">
            <summary>
            Defines the behaviour of the poupup edit column.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.NamedProperties">
            <summary>
            Returns the collection of named properties.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CultureInfo">
            <summary>
            Returns/Sets the culture to use for this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.ShouldSerializeCultureInfo">
            <summary>
            Prevents the designer from serializing inherited CultureInfo.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.EnableSpellChecker">
            <summary>
            Enables/Disables the built-in spell checker.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CustomEditor">
            <summary>
            Returns/Sets the custom editor control used to edit cells.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.Label">
            <summary>
            Returns/Sets the label associated with this control.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.DesigntimeVisible">
            <summary>
            Returns true if the object was designed as visible. 
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CanStartEditing">
            <summary>
            FOR FRAMEWORK USAGE ONLY!
            The Fnd Framework overrides this to establish if the column can be
            set into "StartEditing" mode. /RAKUSE
            </summary>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableColumn.CellComboBox">
            <summary>
            Contains the combobox control to use in the cell.
            Each combobox column has it's own ComboBox control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.#ctor(PPJ.Runtime.Windows.SalTableColumn)">
            <summary>
            Constructs a new CellComboBox object and
            saves a reference to the parent column.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.Equals(System.Object)">
            <summary>
            Compares this object with another instance of the same class.
            Only serializable members are compared.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.FindString(System.String,System.Int32)">
            <summary>
            Finds the string in the combo list for dropdown columns.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.FindStringExact(System.String,System.Int32)">
            <summary>
            Finds the string in the combo list for dropdown columns.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.FindStringInternal(System.String,System.Collections.IList,System.Int32,System.Boolean)">
            <summary>
            Finds the string in the items list.
            </summary>
            <param name="str"></param>
            <param name="items"></param>
            <param name="startIndex"></param>
            <param name="exact"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.Clear">
            <summary>
            Removes all items.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.Add(System.Object)">
            <summary>
            Adds one item to the combobox.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.AddRange(System.Object[])">
            <summary>
            Adds a collection of items to the combobox.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.Delete(System.Int32)">
            <summary>
            Deletes the item at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a new item at the position specified.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.Find(System.Object)">
            <summary>
            Returns the index of the item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.GetComboBoxEditor">
            <summary>
            If the current drop-down cell is being edited, return the combobox control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.SyncLocalItems(System.Windows.Forms.ComboBox)">
            <summary>
            Reload all the items from the combo control.
            </summary>
            <param name="cbox"></param>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.Sorted">
            <summary>
            Indicates whether the content of the list is sorted.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.TabStops">
            <summary>
            Returns/Sets the tab stops values to set for the combobox.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.DropDownStyle">
            <summary>
            Controls the appearance and functionality of the combo box.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.Editable">
            <summary>
            When set to false and DropDownStyle is set to Simple, the drop down column
            is dropped automatically but the value is not editable in the cell.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.Items">
            <summary>
            The items in the combo box.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.SelectedIndex">
            <summary>
            Returs/sets the selected index in the combobox if the cell is a dropdown cell.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.SelectedItem">
            <summary>
            Returs/sets the selected item in the combobox if the cell is a dropdown cell.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.Item(System.Int32)">
            <summary>
            Indexer to the combo's items collection.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableColumn.CellComboBox.ItemsComparer">
            <summary>
            Comparer used to sort items using the same sorting rules as Winforms ComboBox.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableColumn.CellCheckBox">
            <summary>
            Contains the values defined for CheckBox columns.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellCheckBox.#ctor(PPJ.Runtime.Windows.SalTableColumn)">
            <summary>
            Constructs a new CellCheckBox object and
            saves a reference to the parent column.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellCheckBox.Equals(System.Object)">
            <summary>
            Compares this object with another instance of the same class.
            Only serializable members are compared.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CellCheckBox.IgnoreCase">
            <summary>
            Ignores the character case when comparing the check box values.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CellCheckBox.CheckedValue">
            <summary>
            Text value that corresponds to the checked cell.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CellCheckBox.UncheckedValue">
            <summary>
            Text value that corresponds to the unchecked cell.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableColumn.CellPopupBox">
            <summary>
            Contains the values defined for PopupEdit columns.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellPopupBox.#ctor(PPJ.Runtime.Windows.SalTableColumn)">
            <summary>
            Constructs a new CellPopupBox object and
            saves a reference to the parent column.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumn.CellPopupBox.Equals(System.Object)">
            <summary>
            Compares this object with another instance of the same class.
            Only serializable members are compared.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableColumn.CellPopupBox.Lines">
            <summary>
            Number of lines (vertical size) of the popup edit control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableColumn.ExpandableObjectConverter">
            <summary>
            Displays (class name) in the property grid.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableColumnCollection">
            <summary>
            Contains a collection of all the columns in a SalFormTableWindow form or SalTableWindow control.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableColumnCollection.LoadColumns(System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Loads the columns from the parent table control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableRow">
            <summary>
            Encapsulates SAL's properties for table window rows.
            Each FlexGrid row object is bound to an instance of this class.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableRow.#ctor(PPJ.Runtime.Windows.SalTableWindow,C1.Win.C1FlexGrid.C1FlexGrid,C1.Win.C1FlexGrid.Row)">
            <summary>
            Constructs a new instance of SalTableRow bound
            to the specified grid row.
            </summary>
            <param name="parent"></param>
            <param name="rowNum"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableRow.FromGridRow(C1.Win.C1FlexGrid.Row)">
            <summary>
            Returns the instance of SalTableRow bound to the grid row.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableRow.IsModified(System.Int32)">
            <summary>
            Returns true if the specified column has been edited.
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableRow.SetModified(System.Int32,System.Boolean)">
            <summary>
            Sets the edited flag for the specified column.
            </summary>
            <param name="col"></param>
            <param name="on"></param>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableRow.IsModifiedAny">
            <summary>
            Returns true if any column is edited.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableRow.Remove">
            <summary>
            Removes this row from the grid.
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableRow.SetFlags(System.Int32,System.Boolean)">
            <summary>
            Sets or removes a row flag.
            </summary>
            <param name="flags"></param>
            <param name="on"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.SalTableRow.TestFlags(System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:PPJ.Runtime.Windows.SalTableRow.ApplyFlags(System.Int32,System.Int32)" -->
        <member name="M:PPJ.Runtime.Windows.SalTableRow.UpdateFlags">
            <summary>
            Updates the flags from the grid row
            </summary>
        </member>
        <member name="M:PPJ.Runtime.Windows.SalTableRow.CanHideOrDelete">
            <summary>
            Terminates editing if this is the current row.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableRow.Deleted">
            <summary>
            Returns/Sets the deleted flag.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableRow.Visible">
            <summary>
            Returns/Sets the visible flag.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableRow.Enabled">
            <summary>
            Returns/Sets the enable flag for the row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableRow.Selected">
            <summary>
            Returns/Sets the selected flag.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableRow.Fetched">
            <summary>
            Returns/Sets the fetched flag.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableRow.Flags">
            <summary>
            Returns/Sets the row flags on this row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableRow.GridRow">
            <summary>
            Returns the grid row object associated to this row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableRow.ContextRow">
            <summary>
            Returns the context row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableRow.ParentTable">
            <summary>
            Returns the SalTableWindow control that contains the grid that contains this row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableRow.Grid">
            <summary>
            Returns the grid control that contains this row.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableRow.Tag">
            <summary>
            Returns/Sets a user-defined value.
            </summary>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableRow.Item(System.Int32)">
            <summary>
            Returns the column at the specified index and
            sets the current context row in the table window.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableRow.Item(System.String)">
            <summary>
            Returns the column with the specified name and
            sets the current context row in the table window.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:PPJ.Runtime.Windows.SalTableRow.Item(PPJ.Runtime.Windows.SalTableColumn)">
            <summary>
            Returns the specified column and
            sets the current context row in the table window.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="T:PPJ.Runtime.Windows.SalTableRowCollection">
            <summary>
            Collection of all the rows in the SalTableWindow control.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.RowsSizingStyle">
            <summary>
            Defines how to resize rows in the main and split grids in the
            SalTableWindow control.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.RowsSizingStyle.FreeSize">
            <summary>
            Each row is resized individually.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.RowsSizingStyle.SameSize">
            <summary>
            All rows are kept of the same size.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.RowsSizingStyle.SameSizeInMainGrid">
            <summary>
            All rows in the main grid are kept of the same size.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.RowsSizingStyle.SameSizeInSplitGrid">
            <summary>
            All rows in the split grid are kept of the same size.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.RowsSizingStyle.SameSizeInEachGrid">
            <summary>
            All rows in each grid are kept of the same size.
            </summary>
        </member>
        <member name="T:PPJ.Runtime.Windows.FocusRowStyle">
            <summary>
            Defines the style of the focus frame to draw around the
            active row in the table window control.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.FocusRowStyle.None">
            <summary>
            No focus frame.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.FocusRowStyle.Thin">
            <summary>
            Thin focus frame.
            </summary>
        </member>
        <member name="F:PPJ.Runtime.Windows.FocusRowStyle.Thick">
            <summary>
            Thick focus frame. This is similar to Gupta's focus frame.
            </summary>
        </member>
    </members>
</doc>
