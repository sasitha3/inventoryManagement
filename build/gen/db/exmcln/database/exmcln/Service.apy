-----------------------------------------------------------------------------
--
--  Logical unit: Service
--  Type:         Entity
--  Component:    EXMCLN
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- PRIVATE VIEW DEFINITIONS -------------------------------
-----------------------------------------------------------------------------

PROMPT Creating SERVICE view

CREATE OR REPLACE VIEW SERVICE AS
SELECT
       service_no                     service_no,
       description                    description,
       rowkey                         objkey,
       to_char(rowversion,'YYYYMMDDHH24MISS') objversion,
       rowid                          objid
FROM   service_tab
WITH   READ ONLY;

COMMENT ON TABLE SERVICE
   IS 'LU=Service^PROMPT=Service^MODULE=EXMCLN^';

COMMENT ON COLUMN SERVICE.service_no
   IS 'FLAGS=KMI-L^DATATYPE=NUMBER^PROMPT=Service No^';
COMMENT ON COLUMN SERVICE.description
   IS 'FLAGS=AMIUL^DATATYPE=STRING(1000)^PROMPT=Description^';


-----------------------------------------------------------------------------
-------------------- API PACKAGE IMPLEMENTATION -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating Service_API implementation

CREATE OR REPLACE PACKAGE BODY Service_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (service_no                     BOOLEAN := FALSE,
   description                    BOOLEAN := FALSE);


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Raise_Too_Many_Rows___ (
   service_no_ IN NUMBER,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   service_no_ IN NUMBER );

PROCEDURE Raise_Record_Exist___ (
   rec_ service_tab%ROWTYPE );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ service_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   service_no_ IN NUMBER );

PROCEDURE Raise_Record_Removed___ (
   service_no_ IN NUMBER );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN service_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   service_no_ IN NUMBER) RETURN service_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   service_no_ IN NUMBER) RETURN service_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN service_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   service_no_ IN NUMBER ) RETURN service_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   service_no_ IN NUMBER ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   service_no_ IN NUMBER );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY service_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN service_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN service_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN service_tab%ROWTYPE ) RETURN VARCHAR2;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN service_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN service_tab%ROWTYPE,
   newrec_ IN service_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Common___ (
   oldrec_ IN     service_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY service_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY service_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY service_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY service_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY service_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN     service_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY service_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     service_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY service_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY service_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN service_tab%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN service_tab%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN service_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY service_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN service_tab%ROWTYPE
IS
   
   FUNCTION Base (
      rowkey_ IN VARCHAR2 ) RETURN service_tab%ROWTYPE
   IS
      rec_ service_tab%ROWTYPE;
   BEGIN
      SELECT service_no
         INTO  rec_.service_no
         FROM  service_tab
         WHERE rowkey = rowkey_;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN rec_;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rec_.service_no, 'Get_Key_By_Rowkey');
   END Base;

BEGIN
   RETURN Base(rowkey_);
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
PROCEDURE Exist (
   service_no_ IN NUMBER )
IS
   
   PROCEDURE Base (
      service_no_ IN NUMBER )
   IS
   BEGIN
      IF (NOT Check_Exist___(service_no_)) THEN
         Raise_Record_Not_Exist___(service_no_);
      END IF;
   END Base;

BEGIN
   Base(service_no_);
END Exist;


--@IgnoreMissingSysinit
FUNCTION Exists (
   service_no_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      service_no_ IN NUMBER ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN Check_Exist___(service_no_);
   END Base;

BEGIN
   RETURN Base(service_no_);
END Exists;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   service_no_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      service_no_ IN NUMBER ) RETURN VARCHAR2
   IS
      rowkey_ service_tab.rowkey%TYPE;
   BEGIN
      IF (service_no_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT rowkey
         INTO  rowkey_
         FROM  service_tab
         WHERE service_no = service_no_;
      RETURN rowkey_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(service_no_, 'Get_Objkey');
   END Base;

BEGIN
   RETURN Base(service_no_);
END Get_Objkey;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2 )
   IS
      dummy_ service_tab%ROWTYPE;
   BEGIN
      dummy_ := Lock_By_Id___(objid_, objversion_);
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   Base(info_, objid_, objversion_);
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      newrec_   service_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'PREPARE') THEN
         Prepare_Insert___(attr_);
      ELSIF (action_ = 'CHECK') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
         Insert___(objid_, objversion_, newrec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Service_API.lu_name_, 'Service_API', 'New__');
   Base(info_, objid_, objversion_, attr_, action_);
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      oldrec_   service_tab%ROWTYPE;
      newrec_   service_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'CHECK') THEN
         oldrec_ := Get_Object_By_Id___(objid_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         oldrec_ := Lock_By_Id___(objid_, objversion_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
         Update___(objid_, oldrec_, newrec_, attr_, objversion_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Service_API.lu_name_, 'Service_API', 'Modify__');
   Base(info_, objid_, objversion_, attr_, action_);
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2,
      action_     IN  VARCHAR2 )
   IS
      remrec_ service_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         remrec_ := Get_Object_By_Id___(objid_);
         Check_Delete___(remrec_);
      ELSIF (action_ = 'DO') THEN
         remrec_ := Lock_By_Id___(objid_, objversion_);
         Check_Delete___(remrec_);
         Delete___(objid_, remrec_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Service_API.lu_name_, 'Service_API', 'Remove__');
   Base(info_, objid_, objversion_, action_);
END Remove__;


PROCEDURE Raise_Too_Many_Rows___ (
   service_no_ IN NUMBER,
   methodname_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      service_no_ IN NUMBER,
      methodname_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Too_Many_Rows(Service_API.lu_name_, NULL, methodname_);
   END Base;

BEGIN
   Base(service_no_, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Not_Exist___ (
   service_no_ IN NUMBER )
IS
   
   PROCEDURE Base (
      service_no_ IN NUMBER )
   IS
   BEGIN
      Error_SYS.Record_Not_Exist(Service_API.lu_name_);
   END Base;

BEGIN
   Base(service_no_);
END Raise_Record_Not_Exist___;


PROCEDURE Raise_Record_Exist___ (
   rec_ service_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      rec_ service_tab%ROWTYPE )
   IS
   BEGIN
      Error_SYS.Record_Exist(Service_API.lu_name_);
   END Base;

BEGIN
   Base(rec_);
END Raise_Record_Exist___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      name_ IN VARCHAR2,
      value_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Item_Format(Service_API.lu_name_, name_, value_);
   END Base;

BEGIN
   Base(name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ service_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      rec_ service_tab%ROWTYPE )
   IS
   BEGIN
      Error_SYS.Record_Modified(Service_API.lu_name_);
   END Base;

BEGIN
   Base(rec_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   service_no_ IN NUMBER )
IS
   
   PROCEDURE Base (
      service_no_ IN NUMBER )
   IS
   BEGIN
      Error_SYS.Record_Locked(Service_API.lu_name_);
   END Base;

BEGIN
   Base(service_no_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   service_no_ IN NUMBER )
IS
   
   PROCEDURE Base (
      service_no_ IN NUMBER )
   IS
   BEGIN
      Error_SYS.Record_Removed(Service_API.lu_name_);
   END Base;

BEGIN
   Base(service_no_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN service_tab%ROWTYPE
IS
   
   FUNCTION Base (
      objid_      IN VARCHAR2,
      objversion_ IN VARCHAR2 ) RETURN service_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        service_tab%ROWTYPE;
      dummy_      NUMBER;
   BEGIN
      SELECT *
         INTO  rec_
         FROM  service_tab
         WHERE rowid = objid_
         AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Error_SYS.Record_Locked(lu_name_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
      WHEN no_data_found THEN
         BEGIN
            SELECT 1
               INTO  dummy_
               FROM  service_tab
               WHERE rowid = objid_;
            Raise_Record_Modified___(rec_);
         EXCEPTION
            WHEN no_data_found THEN
               Error_SYS.Record_Removed(lu_name_);
            WHEN too_many_rows THEN
               Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
         END;
   END Base;

BEGIN
   RETURN Base(objid_, objversion_);
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   service_no_ IN NUMBER) RETURN service_tab%ROWTYPE
IS
   
   FUNCTION Base (
      service_no_ IN NUMBER) RETURN service_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        service_tab%ROWTYPE;
   BEGIN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  service_tab
            WHERE service_no = service_no_
            FOR UPDATE;
         RETURN rec_;
      EXCEPTION
         WHEN no_data_found THEN
            Raise_Record_Removed___(service_no_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(service_no_, 'Lock_By_Keys___');
      END;
   END Base;

BEGIN
   RETURN Base(service_no_);
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   service_no_ IN NUMBER) RETURN service_tab%ROWTYPE
IS
   
   FUNCTION Base (
      service_no_ IN NUMBER) RETURN service_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        service_tab%ROWTYPE;
      dummy_      NUMBER;
   BEGIN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  service_tab
            WHERE service_no = service_no_
            FOR UPDATE NOWAIT;
         RETURN rec_;
      EXCEPTION
         WHEN row_locked THEN
            Error_SYS.Record_Locked(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(service_no_, 'Lock_By_Keys___');
         WHEN no_data_found THEN
            BEGIN
               SELECT 1
                  INTO  dummy_
                  FROM  service_tab
                  WHERE service_no = service_no_;
               Raise_Record_Modified___(rec_);
            EXCEPTION
               WHEN no_data_found THEN
                  Raise_Record_Removed___(service_no_);
               WHEN too_many_rows THEN
                  Raise_Too_Many_Rows___(service_no_, 'Lock_By_Keys___');
            END;
      END;
   END Base;

BEGIN
   RETURN Base(service_no_);
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN service_tab%ROWTYPE
IS
   
   FUNCTION Base (
      objid_ IN VARCHAR2 ) RETURN service_tab%ROWTYPE
   IS
      lu_rec_ service_tab%ROWTYPE;
   BEGIN
      SELECT *
         INTO  lu_rec_
         FROM  service_tab
         WHERE rowid = objid_;
      RETURN lu_rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Error_SYS.Record_Removed(lu_name_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, 'Get_Object_By_Id___');
   END Base;

BEGIN
   RETURN Base(objid_);
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   service_no_ IN NUMBER ) RETURN service_tab%ROWTYPE
IS
   
   FUNCTION Base (
      service_no_ IN NUMBER ) RETURN service_tab%ROWTYPE
   IS
      lu_rec_ service_tab%ROWTYPE;
   BEGIN
      SELECT *
         INTO  lu_rec_
         FROM  service_tab
         WHERE service_no = service_no_;
      RETURN lu_rec_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN lu_rec_;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(service_no_, 'Get_Object_By_Keys___');
   END Base;

BEGIN
   RETURN Base(service_no_);
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   service_no_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      service_no_ IN NUMBER ) RETURN BOOLEAN
   IS
      dummy_ NUMBER;
   BEGIN
      SELECT 1
         INTO  dummy_
         FROM  service_tab
         WHERE service_no = service_no_;
      RETURN TRUE;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN FALSE;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(service_no_, 'Check_Exist___');
   END Base;

BEGIN
   RETURN Base(service_no_);
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
         INTO  objversion_
         FROM  service_tab
         WHERE rowid = objid_;
   EXCEPTION
      WHEN no_data_found THEN
         objversion_ := NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, 'Get_Version_By_Id___');
   END Base;

BEGIN
   Base(objid_, objversion_);
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   service_no_ IN NUMBER )
IS
   
   PROCEDURE Base (
      objid_      IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      service_no_ IN NUMBER )
   IS
   BEGIN
      SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
         INTO  objid_, objversion_
         FROM  service_tab
         WHERE service_no = service_no_;
   EXCEPTION
      WHEN no_data_found THEN
         objid_      := NULL;
         objversion_ := NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(service_no_, 'Get_Id_Version_By_Keys___');
   END Base;

BEGIN
   Base(objid_, objversion_, service_no_);
END Get_Id_Version_By_Keys___;


PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY service_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_   IN OUT NOCOPY service_tab%ROWTYPE,
      indrec_   IN OUT NOCOPY Indicator_Rec,
      attr_     IN OUT NOCOPY VARCHAR2 )
   IS
      ptr_   NUMBER;
      name_  VARCHAR2(30);
      value_ VARCHAR2(32000);
      msg_   VARCHAR2(32000);
   BEGIN
      Reset_Indicator_Rec___(indrec_);
      Client_SYS.Clear_Attr(msg_);
      ptr_ := NULL;
      WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
         CASE name_
         WHEN ('SERVICE_NO') THEN
            newrec_.service_no := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.service_no := TRUE;
         WHEN ('DESCRIPTION') THEN
            newrec_.description := value_;
            indrec_.description := TRUE;
         ELSE
            Client_SYS.Add_To_Attr(name_, value_, msg_);
         END CASE;
      END LOOP;
      attr_ := msg_;
   EXCEPTION
      WHEN value_error THEN
         Raise_Item_Format___(name_, value_);
   END Base;

BEGIN
   Base(newrec_, indrec_, attr_);
END Unpack___;


FUNCTION Pack___ (
   rec_ IN service_tab%ROWTYPE ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN service_tab%ROWTYPE ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      IF (rec_.service_no IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SERVICE_NO', rec_.service_no, attr_);
      END IF;
      IF (rec_.description IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
      END IF;
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Pack___;


FUNCTION Pack___ (
   rec_ IN service_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN service_tab%ROWTYPE,
      indrec_ IN Indicator_Rec ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      IF (indrec_.service_no) THEN
         Client_SYS.Add_To_Attr('SERVICE_NO', rec_.service_no, attr_);
      END IF;
      IF (indrec_.description) THEN
         Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
      END IF;
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_, indrec_);
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN service_tab%ROWTYPE ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN service_tab%ROWTYPE ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('SERVICE_NO', rec_.service_no, attr_);
      Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
      Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Pack_Table___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   
   PROCEDURE Base (
      indrec_ IN OUT NOCOPY Indicator_Rec )
   IS
      empty_indrec_ Indicator_Rec;
   BEGIN
      indrec_ := empty_indrec_;
   END Base;

BEGIN
   Base(indrec_);
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN service_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   
   FUNCTION Base (
      rec_ IN service_tab%ROWTYPE ) RETURN Indicator_Rec
   IS
      indrec_ Indicator_Rec;
   BEGIN
      indrec_.service_no := rec_.service_no IS NOT NULL;
      indrec_.description := rec_.description IS NOT NULL;
      RETURN indrec_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN service_tab%ROWTYPE,
   newrec_ IN service_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   
   FUNCTION Base (
      oldrec_ IN service_tab%ROWTYPE,
      newrec_ IN service_tab%ROWTYPE ) RETURN Indicator_Rec
   IS
      indrec_ Indicator_Rec;
   BEGIN
      indrec_.service_no := Validate_SYS.Is_Changed(oldrec_.service_no, newrec_.service_no);
      indrec_.description := Validate_SYS.Is_Changed(oldrec_.description, newrec_.description);
      RETURN indrec_;
   END Base;

BEGIN
   RETURN Base(oldrec_, newrec_);
END Get_Indicator_Rec___;


PROCEDURE Check_Common___ (
   oldrec_ IN     service_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY service_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     service_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY service_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Check_Not_Null(lu_name_, 'SERVICE_NO', newrec_.service_no);
      Error_SYS.Check_Not_Null(lu_name_, 'DESCRIPTION', newrec_.description);
   END Base;

BEGIN
   Base(oldrec_, newrec_, indrec_, attr_);
END Check_Common___;


PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Client_SYS.Clear_Attr(attr_);
   END Base;

BEGIN
   Base(attr_);
END Prepare_Insert___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY service_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY service_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      oldrec_ service_tab%ROWTYPE;
   BEGIN
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

BEGIN
   Base(newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY service_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY service_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      newrec_.rowversion := sysdate;
      newrec_.rowkey := sys_guid();
      Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
      INSERT
         INTO service_tab
         VALUES newrec_
         RETURNING rowid INTO objid_;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Between_Str(Utility_SYS.Between_Str(sqlerrm, '(', ')'), '.', ')', 'FALSE');
         BEGIN
            IF (constraint_ = 'SERVICE_RK') THEN
               Error_SYS.Rowkey_Exist(lu_name_, newrec_.rowkey);
            ELSE
               Raise_Record_Exist___(newrec_);
            END IF;
         END;
   END Base;

BEGIN
   Base(objid_, objversion_, newrec_, attr_);
END Insert___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY service_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY service_tab%ROWTYPE )
   IS
      attr_    VARCHAR2(32000);
      indrec_  Indicator_Rec;
   BEGIN
      Prepare_Insert___(attr_);
      Unpack___(newrec_, indrec_, attr_);
   END Base;

BEGIN
   Base(newrec_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY service_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY service_tab%ROWTYPE )
   IS
      objid_         VARCHAR2(20);
      objversion_    VARCHAR2(100);
      attr_          VARCHAR2(32000);
      indrec_        Indicator_Rec;
      emptyrec_      service_tab%ROWTYPE;
   BEGIN
      indrec_ := Get_Indicator_Rec___(emptyrec_, newrec_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END Base;

BEGIN
   Base(newrec_);
END New___;


PROCEDURE Check_Update___ (
   oldrec_ IN     service_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY service_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     service_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY service_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Validate_SYS.Item_Update(lu_name_, 'SERVICE_NO', indrec_.service_no);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

BEGIN
   Base(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     service_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY service_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      oldrec_     IN     service_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY service_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
   BEGIN
      newrec_.rowversion := sysdate;
      IF by_keys_ THEN
         UPDATE service_tab
            SET ROW = newrec_
            WHERE service_no = newrec_.service_no;
      ELSE
         UPDATE service_tab
            SET ROW = newrec_
            WHERE rowid = objid_;
      END IF;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Between_Str(Utility_SYS.Between_Str(sqlerrm, '(', ')'), '.', ')', 'FALSE');
         BEGIN
            IF (constraint_ = 'SERVICE_RK') THEN
               Error_SYS.Rowkey_Exist(Service_API.lu_name_, newrec_.rowkey);
            ELSE
               Raise_Record_Exist___(newrec_);
            END IF;
         END;
   END Base;

BEGIN
   Base(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
END Update___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY service_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   
   PROCEDURE Base (
      newrec_         IN OUT NOCOPY service_tab%ROWTYPE,
      lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
   IS
      objid_      VARCHAR2(20);
      objversion_ VARCHAR2(100);
      attr_       VARCHAR2(32000);
      indrec_     Indicator_rec;
      oldrec_     service_tab%ROWTYPE;
   BEGIN
      IF (lock_mode_wait_) THEN
         oldrec_ := Lock_By_Keys___(newrec_.service_no);
      ELSE
         oldrec_ := Lock_By_Keys_Nowait___(newrec_.service_no);
      END IF;
      indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
   END Base;

BEGIN
   Base(newrec_, lock_mode_wait_);
END Modify___;


PROCEDURE Check_Delete___ (
   remrec_ IN service_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN service_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.service_no||'^';
      Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
   END Base;

BEGIN
   Base(remrec_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN service_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      objid_  IN VARCHAR2,
      remrec_ IN service_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.service_no||'^';
      Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
      IF (objid_ IS NOT NULL) THEN
         DELETE
            FROM  service_tab
            WHERE rowid = objid_;
      ELSE
         DELETE
            FROM  service_tab
            WHERE service_no = remrec_.service_no;
      END IF;
   END Base;

BEGIN
   Base(objid_, remrec_);
END Delete___;


PROCEDURE Delete___ (
   remrec_ IN service_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN service_tab%ROWTYPE )
   IS
   BEGIN
      Delete___(NULL, remrec_);
   END Base;

BEGIN
   Base(remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY service_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   
   PROCEDURE Base (
      remrec_         IN OUT NOCOPY service_tab%ROWTYPE,
      lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
   IS
      oldrec_     service_tab%ROWTYPE;
   BEGIN
      IF (lock_mode_wait_) THEN
         oldrec_ := Lock_By_Keys___(remrec_.service_no);
      ELSE
         oldrec_ := Lock_By_Keys_Nowait___(remrec_.service_no);
      END IF;
      Check_Delete___(oldrec_);
      Delete___(NULL, oldrec_);
   END Base;

BEGIN
   Base(remrec_, lock_mode_wait_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Init
IS
   
   PROCEDURE Base
   IS
   BEGIN
      NULL;
   END Base;

BEGIN
   Base;
END Init;

BEGIN
   Init;
END Service_API;
/
SHOW ERROR
