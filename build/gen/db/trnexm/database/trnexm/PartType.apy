-----------------------------------------------------------------------------
--
--  Logical unit: PartType
--  Type:         Enumeration
--  Component:    TRNEXM
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- API PACKAGE IMPLEMENTATION -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating Part_Type_API implementation

CREATE OR REPLACE PACKAGE BODY Part_Type_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC;

FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC;

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
PROCEDURE Exist (
   client_value_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      client_value_ IN VARCHAR2 )
   IS
   BEGIN
      Domain_SYS.Exist_(lu_name_, Domain_SYS.Get_Translated_Values(lu_name_), client_value_);
   END Base;

BEGIN
   Base(client_value_);
END Exist;


--@IgnoreMissingSysinit
PROCEDURE Exist_List (
   client_list_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      client_list_ IN VARCHAR2 )
   IS
   BEGIN
      Domain_SYS.Exist_List_(lu_name_, Domain_SYS.Get_Translated_Values(lu_name_), client_list_);
   END Base;

BEGIN
   Base(client_list_);
END Exist_List;


--@IgnoreMissingSysinit
PROCEDURE Exist_Db (
   db_value_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      db_value_ IN VARCHAR2 )
   IS
   BEGIN
      Domain_SYS.Exist_(lu_name_, Get_Db_Values___, db_value_);
   END Base;

BEGIN
   Base(db_value_);
END Exist_Db;


--@IgnoreMissingSysinit
PROCEDURE Exist_List_Db (
   db_list_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      db_list_ IN VARCHAR2 )
   IS
   BEGIN
      Domain_SYS.Exist_List_Db_(lu_name_, Get_Db_Values___, db_list_);
   END Base;

BEGIN
   Base(db_list_);
END Exist_List_Db;


--@IgnoreMissingSysinit
FUNCTION Exists (
   client_value_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      client_value_ IN VARCHAR2 ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN Domain_SYS.Exist_(lu_name_, Domain_SYS.Get_Translated_Values(lu_name_), client_value_);
   END Base;

BEGIN
   RETURN Base(client_value_);
END Exists;


--@IgnoreMissingSysinit
FUNCTION Exists_List (
   client_list_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      client_list_ IN VARCHAR2 ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN Domain_SYS.Exist_List_(lu_name_, Domain_SYS.Get_Translated_Values(lu_name_), client_list_);
   END Base;

BEGIN
   RETURN Base(client_list_);
END Exists_List;


--@IgnoreMissingSysinit
FUNCTION Exists_Db (
   db_value_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      db_value_ IN VARCHAR2 ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN Domain_SYS.Exist_(lu_name_, Get_Db_Values___, db_value_);
   END Base;

BEGIN
   RETURN Base(db_value_);
END Exists_Db;


--@IgnoreMissingSysinit
FUNCTION Exists_List_Db (
   db_list_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      db_list_ IN VARCHAR2 ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN Domain_SYS.Exist_List_Db_(lu_name_, Get_Db_Values___, db_list_);
   END Base;

BEGIN
   RETURN Base(db_list_);
END Exists_List_Db;


--@IgnoreMissingSysinit
PROCEDURE Enumerate (
   client_values_ OUT VARCHAR2)
IS
   
   PROCEDURE Base (
      client_values_ OUT VARCHAR2)
   IS
   BEGIN
      client_values_ := Domain_SYS.Enumerate_(Domain_SYS.Get_Translated_Values(lu_name_));
   END Base;

BEGIN
   Base(client_values_);
END Enumerate;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_Db (
   db_values_ OUT VARCHAR2)
IS
   
   PROCEDURE Base (
      db_values_ OUT VARCHAR2)
   IS
   BEGIN
      db_values_ := Domain_SYS.Enumerate_(Get_Db_Values___);
   END Base;

BEGIN
   Base(db_values_);
END Enumerate_Db;


--@IgnoreMissingSysinit
FUNCTION Encode (
   client_value_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      client_value_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
   BEGIN
      RETURN Domain_SYS.Encode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, client_value_);
   END Base;

BEGIN
   RETURN Base(client_value_);
END Encode;


--@IgnoreMissingSysinit
FUNCTION Encode_List (
   client_list_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      client_list_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
   BEGIN
      RETURN Domain_SYS.Encode_List_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, client_list_);
   END Base;

BEGIN
   RETURN Base(client_list_);
END Encode_List;


--@IgnoreMissingSysinit
FUNCTION Decode (
   db_value_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      db_value_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
   BEGIN
      RETURN Domain_SYS.Decode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, db_value_);
   END Base;

BEGIN
   RETURN Base(db_value_);
END Decode;


--@IgnoreMissingSysinit
FUNCTION Decode_List (
   db_list_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      db_list_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
   BEGIN
      RETURN Domain_SYS.Decode_List_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, db_list_);
   END Base;

BEGIN
   RETURN Base(db_list_);
END Decode_List;


--@IgnoreMissingSysinit
FUNCTION Get_Client_Value (
   index_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      index_ IN NUMBER ) RETURN VARCHAR2
   IS
   BEGIN
      RETURN(Domain_SYS.Get_Client_Value_(Domain_SYS.Get_Translated_Values(lu_name_), index_));
   END Base;

BEGIN
   RETURN Base(index_);
END Get_Client_Value;


--@IgnoreMissingSysinit
FUNCTION Get_Db_Value (
   index_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      index_ IN NUMBER ) RETURN VARCHAR2
   IS
   BEGIN
      RETURN(Domain_SYS.Get_Db_Value_(Get_Db_Values___, index_));
   END Base;

BEGIN
   RETURN Base(index_);
END Get_Db_Value;


--@IgnoreMissingSysinit
FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
   
   FUNCTION Base RETURN VARCHAR2 DETERMINISTIC
   IS
   BEGIN
      RETURN('MANUFACTURED^PURCHASED^');
   END Base;

BEGIN
   RETURN Base;
END Get_Db_Values___;


--@IgnoreMissingSysinit
FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
   
   FUNCTION Base RETURN VARCHAR2 DETERMINISTIC
   IS
   BEGIN
      RETURN('Manufactured^Purchased^');
   END Base;

BEGIN
   RETURN Base;
END Get_Client_Values___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Language_Refreshed
IS
   
   PROCEDURE Base
   IS
   BEGIN
      Domain_SYS.Language_Refreshed(lu_name_, Get_Client_Values___, Get_Db_Values___, 'IID');
   END Base;

BEGIN
   Base;
END Language_Refreshed;


--@IgnoreMissingSysinit
PROCEDURE Init
IS
   
   PROCEDURE Base
   IS
   BEGIN
      Domain_SYS.Load_IID(lu_name_, Get_Client_Values___, Get_Db_Values___);
   END Base;

BEGIN
   Base;
END Init;

BEGIN
   Init;
END Part_Type_API;
/
SHOW ERROR
