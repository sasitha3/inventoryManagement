-----------------------------------------------------------------------------
--
--  Logical unit: PartsById
--
--  Report:       PartsById
--
--  IFS Developer Studio Template Version 1.3
--
--  NOTE: This file is generated and will be overwritten at next model change
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- PACKAGE SPECIFICATION ----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating PARTS_BY_ID_RPI specification

CREATE OR REPLACE PACKAGE PARTS_BY_ID_RPI AS

module_ CONSTANT VARCHAR2(6) := 'TRNEXM';
lu_name_ CONSTANT VARCHAR2(25) := 'PartsById';

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

FUNCTION Test (
   location_number_          IN NUMBER)
   RETURN NUMBER;

PROCEDURE Init;

END PARTS_BY_ID_RPI;
/
SHOW ERROR

-----------------------------------------------------------------------------
-------------------- VIEWS FOR REPORT META DATA -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating report table PARTS_BY_ID_RPT

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PARTS_BY_ID_RPT';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NUMBER', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'INVENTORY_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'QUANTITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'NUMBER', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'PARTS_BY_ID_RPT';
   index_name_ VARCHAR2(30) := 'PARTS_BY_ID_RPK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
END;
/

PROMPT Creating report view PARTS_BY_ID_REP

CREATE OR REPLACE VIEW PARTS_BY_ID_REP AS
SELECT *
FROM   PARTS_BY_ID_RPT t
WHERE EXISTS (SELECT 1 FROM allowed_report a WHERE a.result_key = t.result_key)
WITH   read only;

COMMENT ON TABLE PARTS_BY_ID_REP
   IS 'LU=PartsById^PROMPT=Parts By Id^MODULE=TRNEXM^';

COMMENT ON COLUMN PARTS_BY_ID_REP.result_key
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN PARTS_BY_ID_REP.row_no
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN PARTS_BY_ID_REP.location_number
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Location Number^QUERY=Location Number:^QFLAGS=OW---^';
COMMENT ON COLUMN PARTS_BY_ID_REP.inventory_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Inventory Id^';
COMMENT ON COLUMN PARTS_BY_ID_REP.quantity
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^';
COMMENT ON COLUMN PARTS_BY_ID_REP.part_no
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Part No^';

-----------------------------------------------------------------------------
-------------------- REPORT REGISTRATION ------------------------------------
-----------------------------------------------------------------------------

BEGIN
   Report_SYS.Define_Report_('PARTS_BY_ID_REP', 'TRNEXM', 'PartsById', 'Parts By Id', 'PARTS_BY_ID_RPT', 'PARTS_BY_ID_RPI.Execute_Report', 0);
   Report_SYS.Define_Report_Text_('PARTS_BY_ID_REP', 'PARTS_BY_ID', 'Sample');
   Report_SYS.Refresh_('PARTS_BY_ID_REP');
END;
/

-----------------------------------------------------------------------------
-------------------- PACKAGE IMPLEMENTATION ---------------------------------
-----------------------------------------------------------------------------

PROMPT Creating PARTS_BY_ID_RPI implementation

CREATE OR REPLACE PACKAGE BODY PARTS_BY_ID_RPI IS

   TYPE binds$ IS RECORD (
      location_number           NUMBER);

   CURSOR get_inventory_parts (location_number_ VARCHAR2) IS
      SELECT etp.Inventory_id, etp.location_number, etp.quantity, etp.part_no
      FROM EXM_INVENTORY_PRODUCT etp 
      WHERE LOCATION_NUMBER = location_number_;

-----------------------------------------------------------------------------
-------------------- RESULT SET METHODS -------------------------------------
-----------------------------------------------------------------------------

--@IgnoreWrongParamOrder
PROCEDURE Add_Result_Row___ (
   result_key$_               IN NUMBER,
   binds$_                    IN binds$,
   rec_inventory_parts_       IN get_inventory_parts%ROWTYPE DEFAULT NULL,
   row_no$_                   IN OUT NUMBER)
IS
BEGIN
   INSERT INTO PARTS_BY_ID_RPT (
      result_key,
      location_number,
      inventory_id,
      quantity,
      part_no,
      row_no, parent_row_no)
   VALUES (
      result_key$_,
      nvl(rec_inventory_parts_.location_number,
      binds$_.location_number),
      rec_inventory_parts_.inventory_id,
      rec_inventory_parts_.quantity,
      rec_inventory_parts_.part_no,
      row_no$_, 0);
   row_no$_ := row_no$_+1;
END Add_Result_Row___;

-----------------------------------------------------------------------------
-------------------- REPORT EXECUTION ---------------------------------------
-----------------------------------------------------------------------------

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key$_              NUMBER;
   row_no$_                  NUMBER := 1;
   binds$_                   binds$;
   xml$_                     CLOB;
   outer_filter_attr$_       VARCHAR2(32000);
   outer_filter_where$_      VARCHAR2(32000);
   inner_filter_attr$_       VARCHAR2(32000);
   inner_filter_where$_      VARCHAR2(32000);
   has_inventory_parts_ BOOLEAN;
   rec_inventory_parts_ get_inventory_parts%ROWTYPE;
   par_inventory_parts_ binds$;
BEGIN
   General_SYS.Init_Method(lu_name_, 'PARTS_BY_ID_RPI', 'Execute_Report');
   result_key$_                 := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   binds$_.location_number      := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LOCATION_NUMBER', parameter_attr_));

   Xml_Record_Writer_SYS.Create_Report_Header(xml$_, 'PARTS_BY_ID_REP', 'Parts By Id');

   has_inventory_parts_ := FALSE;
   par_inventory_parts_ := binds$_;
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'INVENTORY_PARTSES');
   OPEN get_inventory_parts(binds$_.location_number);
   LOOP
      FETCH get_inventory_parts INTO rec_inventory_parts_;
      has_inventory_parts_ := get_inventory_parts%FOUND OR get_inventory_parts%ROWCOUNT > 0;
      EXIT WHEN get_inventory_parts%NOTFOUND;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'INVENTORY_PARTS');
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'INVENTORY_ID', rec_inventory_parts_.inventory_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'LOCATION_NUMBER', rec_inventory_parts_.location_number);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'QUANTITY', rec_inventory_parts_.quantity);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_NO', rec_inventory_parts_.part_no);
      Xml_Record_Writer_SYS.End_Element(xml$_, 'INVENTORY_PARTS');
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        rec_inventory_parts_ => rec_inventory_parts_,
                        row_no$_ => row_no$_);
   END LOOP;
   CLOSE get_inventory_parts;
   Xml_Record_Writer_SYS.End_Element(xml$_, 'INVENTORY_PARTSES');
   binds$_ := par_inventory_parts_;
   IF NOT has_inventory_parts_ THEN
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        row_no$_ => row_no$_);
   END IF;

   Xml_Record_Writer_SYS.End_Element(xml$_, 'PARTS_BY_ID_REP');
   Report_SYS.Finish_Xml_Report('PARTS_BY_ID_REP', result_key$_, xml$_);
   EXCEPTION
      WHEN OTHERS THEN
         IF get_inventory_parts%ISOPEN THEN
            CLOSE get_inventory_parts;
         END IF;
         RAISE;
END Execute_Report;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Test
--   Invokes the report method for testing purposes.
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

FUNCTION Test (
   location_number_          IN NUMBER)
RETURN NUMBER
IS
   result_key_     NUMBER;
   report_attr_    VARCHAR2(200);
   parameter_attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, 'PARTS_BY_ID_RPI', 'Test');
   Report_SYS.Get_Result_Key__(result_key_);
   Client_SYS.Add_To_Attr('RESULT_KEY', result_key_, report_attr_);
   IF (location_number_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LOCATION_NUMBER', location_number_, parameter_attr_);
   END IF;
   Execute_Report(report_attr_, parameter_attr_);
   RETURN result_key_;
END Test;


PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END PARTS_BY_ID_RPI;
/
SHOW ERROR